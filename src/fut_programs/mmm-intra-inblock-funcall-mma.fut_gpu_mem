types {
  
}



fun
  gemm_123456 (A_mem_12345678 : mem@device,
               B_mem_12345679 : mem@device,
               C_mem_12345680 : mem@device,
               A_101230 : [16i64][16i64]f32 @ A_mem_12345678 ->
                          {offset: 0i64;
                           strides: [16i64, 1i64];
                           shape: [16i64, 16i64]},
               B_101231 : [16i64][16i64]f32 @ B_mem_12345679 ->
                          {offset: 0i64;
                           strides: [16i64, 1i64];
                           shape: [16i64, 16i64]},
               C_101232 : *[1i64]f32 @ C_mem_12345680 ->
                          {offset: 0i64;
                           strides: [1i64];
                           shape: [1i64]})
  : {mem@device,
     *[1i64]f32 @ ?0@device ->
     {offset: 0i64;
      strides: [1i64];
      shape: [1i64]}} = {
  {C_mem_12345680, C_101232}
}

entry("main",
      {A: [][][]f32,
       B: [][][]f32},
      {[][][]f32})
  entry_main (A_mem_12345678 : mem@device,
              B_mem_12345679 : mem@device,
              k₀_5783 : i64,
              A_5784 : [k₀_5783][16i64][16i64]f32 @ A_mem_12345678 ->
                       {offset: 0i64;
                        strides: [256i64, 16i64, 1i64];
                        shape: [k₀_5783, 16i64, 16i64]},
              B_5785 : [k₀_5783][16i64][16i64]f32 @ B_mem_12345679 ->
                       {offset: 0i64;
                        strides: [256i64, 16i64, 1i64];
                        shape: [k₀_5783, 16i64, 16i64]})
  : {mem@device,
     [k₀_5783][16i64][16i64]f32 @ ?0@device ->
     {offset: 0i64;
      strides: [256i64, 16i64, 1i64];
      shape: [k₀_5783, 16i64, 16i64]}#([3, 4], [1])} = {
  let {bytes_12345733 : i64} =
    mul_nw64(1024i64, k₀_5783)
  let {mem_12345734 : mem@device} =
    #[incremental_flattening(only_intra)]
    alloc(bytes_12345733, @device)
  let {total_size_12345742 : i64} =
    mul_nw64(1024i64, k₀_5783)
  let {color_12345735 : mem@device} =
    alloc(total_size_12345742, @device)
  let {total_size_12345744 : i64} =
    mul_nw64(262144i64, k₀_5783)
  let {color_12345736 : mem@device} =
    alloc(total_size_12345744, @device)
  let {total_size_12345746 : i64} =
    mul_nw64(262144i64, k₀_5783)
  let {color_12345737 : mem@device} =
    alloc(total_size_12345746, @device)
  let {defunc_0_map_res_6184 : [k₀_5783][16i64][16i64]f32 @ mem_12345734 ->
                               {offset: 0i64;
                                strides: [256i64, 16i64, 1i64];
                                shape: [k₀_5783, 16i64, 16i64]}} =
    #[incremental_flattening(only_intra)]
    segmap(block; ; grid=k₀_5783; blocksize=256i64)
    (gtid_6185 < k₀_5783) (~phys_tblock_id_6186) : {[16i64][16i64]f32} {
      let {color_12345738 : mem@shared} =
        alloc(1024i64, @shared)
      let {color_12345739 : mem@shared} =
        alloc(1024i64, @shared)
      let {A_init_1231231 : [16i64][16i64]f32 @ color_12345739 ->
                            {offset: 0i64;
                             strides: [16i64, 1i64];
                             shape: [16i64, 16i64]}} =
        scratch(f32, 16i64, 16i64)
      let {B_init_1231232 : [16i64][16i64]f32 @ color_12345738 ->
                            {offset: 0i64;
                             strides: [16i64, 1i64];
                             shape: [16i64, 16i64]}} =
        scratch(f32, 16i64, 16i64)
      let {mem_12345696 : mem@[1i64]f32} =
        alloc(4i64, @[1i64]f32)
      let {c_registers_101251 : [16i64][16i64][1i64]f32 @ mem_12345696 ->
                                {offset: 0i64;
                                 strides: [0i64, 0i64, 1i64];
                                 shape: [16i64, 16i64, 1i64]}} =
        segmap(inblock; )
        (gtid_6192 < 16i64, gtid_6193 < 16i64) (~phys_tid_6194) : {[1i64]f32} {
          let {mem_12345687 : mem@[1i64]f32} =
            alloc(4i64, @[1i64]f32)
          let {ret_213978 : [1i64]f32 @ mem_12345687 ->
                            {offset: 0i64;
                             strides: [1i64];
                             shape: [1i64]}} =
            replicate([1i64], 0.0f32)
          return {returns (private) ret_213978}
        }
      let {defunc_0_f_res_6197 : [16i64][16i64][1i64]f32 @ ext_mem_ext_12345760 ->
                                 {offset: 0i64;
                                  strides: [0i64, 0i64, 1i64];
                                  shape: [16i64, 16i64, 1i64]},
           A_unused_928123 : [16i64][16i64]f32 @ color_12345739 ->
                             {offset: 0i64;
                              strides: [16i64, 1i64];
                              shape: [16i64, 16i64]},
           B_unused_9213123 : [16i64][16i64]f32 @ color_12345738 ->
                              {offset: 0i64;
                               strides: [16i64, 1i64];
                               shape: [16i64, 16i64]},
           ext_mem_ext_12345760 : mem@[1i64]f32} =
        #[sequential]
        loop {c_accum_123123 : *[16i64][16i64][1i64]f32 @ mem_param_ext_12345747 ->
                               {offset: 0i64;
                                strides: [0i64, 0i64, 1i64];
                                shape: [16i64, 16i64, 1i64]},
              A_scratch_10123 : *[16i64][16i64]f32 @ color_12345739 ->
                                {offset: 0i64;
                                 strides: [16i64, 1i64];
                                 shape: [16i64, 16i64]},
              B_scratch_10124 : *[16i64][16i64]f32 @ color_12345738 ->
                                {offset: 0i64;
                                 strides: [16i64, 1i64];
                                 shape: [16i64, 16i64]},
              mem_param_ext_12345747 : mem@[1i64]f32} = {c_registers_101251, A_init_1231231, B_init_1231232, mem_12345696}
        for i_6205:i64 < k₀_5783 do {
          let {smem_A_10125 : [16i64][16i64]f32 @ color_12345739 ->
                              {offset: 0i64;
                               strides: [16i64, 1i64];
                               shape: [16i64, 16i64]}} =
            #[copyA]
            segmap(inblock; )
            (gtid_16192 < 16i64, gtid_16193 < 16i64) (~phys_tid_16194) : {[16i64][16i64]f32} {
              let {elm_101240 : f32} =
                A_5784[i_6205, gtid_16192, gtid_16193]
              return {A_scratch_10123
                      with ([gtid_16192, gtid_16193] = elm_101240)}
            }
          let {smem_B_10127 : [16i64][16i64]f32 @ color_12345738 ->
                              {offset: 0i64;
                               strides: [16i64, 1i64];
                               shape: [16i64, 16i64]}} =
            #[copyB]
            segmap(inblock; )
            (gtid_26192 < 16i64, gtid_26193 < 16i64) (~phys_tid_26194) : {[16i64][16i64]f32} {
              let {elm_101241 : f32} =
                B_5785[i_6205, gtid_26192, gtid_26193]
              return {B_scratch_10124
                      with ([gtid_26192, gtid_26193] = elm_101241)}
            }
          let {mem_12345721 : mem@[1i64]f32} =
            #[mmaC]
            alloc(4i64, @[1i64]f32)
          let {final_res_10129 : [16i64][16i64][1i64]f32 @ mem_12345721 ->
                                 {offset: 0i64;
                                  strides: [0i64, 0i64, 1i64];
                                  shape: [16i64, 16i64, 1i64]}} =
            #[mmaC]
            segmap(inblock; )
            (gtid_36192 < 16i64, gtid_36193 < 16i64) (~phys_tid_36194) : {[1i64]f32} {
              let {elm_101244 : [1i64]f32 @ mem_param_ext_12345747 ->
                                {offset: add_nw64 (add_nw64 (0i64) (mul_nw64 (gtid_36192) (0i64))) (mul_nw64 (gtid_36193) (0i64));
                                 strides: [1i64];
                                 shape: [1i64]}} =
                c_accum_123123[gtid_36192, gtid_36193, 0i64 :+ 1i64 * 1i64]
              let {smem_A_desired_form_12345707 : [16i64][16i64]f32 @ color_12345737 ->
                                                  {offset: add_nw64 (mul_nw64 (phys_tblock_id_6186) (256i64)) (phys_tid_36194);
                                                   strides: [mul_nw64 (mul_nw64 (k₀_5783) (256i64)) (16i64), mul_nw64 (k₀_5783) (256i64)];
                                                   shape: [16i64, 16i64]}} =
                manifest((0, 1), smem_A_10125)
              let {smem_B_desired_form_12345709 : [16i64][16i64]f32 @ color_12345736 ->
                                                  {offset: add_nw64 (mul_nw64 (phys_tblock_id_6186) (256i64)) (phys_tid_36194);
                                                   strides: [mul_nw64 (mul_nw64 (k₀_5783) (256i64)) (16i64), mul_nw64 (k₀_5783) (256i64)];
                                                   shape: [16i64, 16i64]}} =
                manifest((0, 1), smem_B_10127)
              let {elm_desired_form_12345711 : [1i64]f32 @ color_12345735 ->
                                               {offset: add_nw64 (mul_nw64 (phys_tblock_id_6186) (256i64)) (phys_tid_36194);
                                                strides: [mul_nw64 (k₀_5783) (256i64)];
                                                shape: [1i64]}} =
                manifest((0), elm_101244)
              let {ext_mem_12345712 : mem@device,
                   elm_1012444 : [1i64]f32 @ ext_mem_12345712 ->
                                 {offset: 0i64;
                                  strides: [1i64];
                                  shape: [1i64]}} =
                apply gemm_123456(color_12345737, color_12345736, color_12345735, smem_A_desired_form_12345707, smem_B_desired_form_12345709, *elm_desired_form_12345711)
                : {mem@device, *[1i64]f32 @ ?0@device ->
                {offset: 0i64;
                 strides: [1i64];
                 shape: [1i64]}}
              return {returns (private) elm_1012444}
            }
          in {final_res_10129, smem_A_10125, smem_B_10127, mem_12345721}
        }
      let {defunc_0_f_res_611197 : [16i64][16i64]f32 @ ext_mem_ext_12345760 ->
                                   {offset: 0i64;
                                    strides: [mul_nw64 (16i64) (0i64), 0i64];
                                    shape: [16i64, 16i64]}} =
        defunc_0_f_res_6197[0i64 :+ 16i64 * 16i64, 0i64 :+ 16i64 * 1i64, 0i64]
      return {returns defunc_0_f_res_611197}
    }
  in {mem_12345734, defunc_0_map_res_6184}
}
