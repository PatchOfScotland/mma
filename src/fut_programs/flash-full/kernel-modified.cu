#define FUTHARK_CUDA
#define FUTHARK_CUDATC
// start of prelude.cu
#define SCALAR_FUN_ATTR __device__ static inline
#define FUTHARK_FUN_ATTR __device__ static
#define FUTHARK_F64_ENABLED

#ifdef FUTHARK_CUDATC
#include <cute/tensor.hpp>
#else
typedef char int8_t;
typedef short int16_t;
typedef int int32_t;
typedef long long int64_t;
typedef unsigned char uint8_t;
typedef unsigned short uint16_t;
typedef unsigned int uint32_t;
typedef unsigned long long uint64_t;
#endif

#define __global
#define __local
#define __private
#define __constant
#define __write_only
#define __read_only

static inline __device__ int get_tblock_id(int d) {
  switch (d) {
  case 0: return blockIdx.x;
  case 1: return blockIdx.y;
  case 2: return blockIdx.z;
  default: return 0;
  }
}

static inline __device__ int get_num_tblocks(int d) {
  switch(d) {
  case 0: return gridDim.x;
  case 1: return gridDim.y;
  case 2: return gridDim.z;
  default: return 0;
  }
}

static inline __device__ int get_global_id(int d) {
  switch (d) {
    case 0: return threadIdx.x + blockIdx.x * blockDim.x;
    case 1: return threadIdx.y + blockIdx.y * blockDim.y;
    case 2: return threadIdx.z + blockIdx.z * blockDim.z;
    default: return 0;
  }
}

static inline __device__ int get_local_id(int d) {
  switch (d) {
    case 0: return threadIdx.x;
    case 1: return threadIdx.y;
    case 2: return threadIdx.z;
    default: return 0;
  }
}

static inline __device__ int get_local_size(int d) {
  switch (d) {
    case 0: return blockDim.x;
    case 1: return blockDim.y;
    case 2: return blockDim.z;
    default: return 0;
  }
}

static inline __device__ int get_global_size(int d) {
  switch (d) {
    case 0: return gridDim.x * blockDim.x;
    case 1: return gridDim.y * blockDim.y;
    case 2: return gridDim.z * blockDim.z;
    default: return 0;
  }
}


#define CLK_LOCAL_MEM_FENCE 1
#define CLK_GLOBAL_MEM_FENCE 2
static inline __device__ void barrier(int x) {
  __syncthreads();
}
static inline __device__ void mem_fence_local() {
  __threadfence_block();
}
static inline __device__ void mem_fence_global() {
  __threadfence();
}

static inline __device__ void barrier_local() {
  __syncthreads();
}

#define NAN (0.0/0.0)
#define INFINITY (1.0/0.0)
extern volatile __shared__ unsigned char shared_mem[];

#define SHARED_MEM_PARAM
#define FUTHARK_KERNEL extern "C" __global__ __launch_bounds__(MAX_THREADS_PER_BLOCK)
#define FUTHARK_KERNEL_SIZED(a,b,c) extern "C" __global__ __launch_bounds__(a*b*c)


// End of prelude.cu
// Start of half.h.

// Conversion functions are from http://half.sourceforge.net/, but
// translated to C.
//
// Copyright (c) 2012-2021 Christian Rau
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

#ifndef __OPENCL_VERSION__
#define __constant
#endif

__constant static const uint16_t base_table[512] = {
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0001, 0x0002, 0x0004, 0x0008, 0x0010, 0x0020, 0x0040, 0x0080, 0x0100,
  0x0200, 0x0400, 0x0800, 0x0C00, 0x1000, 0x1400, 0x1800, 0x1C00, 0x2000, 0x2400, 0x2800, 0x2C00, 0x3000, 0x3400, 0x3800, 0x3C00,
  0x4000, 0x4400, 0x4800, 0x4C00, 0x5000, 0x5400, 0x5800, 0x5C00, 0x6000, 0x6400, 0x6800, 0x6C00, 0x7000, 0x7400, 0x7800, 0x7C00,
  0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00,
  0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00,
  0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00,
  0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00,
  0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00,
  0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00,
  0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00,
  0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000,
  0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000,
  0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000,
  0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000,
  0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000,
  0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000,
  0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8001, 0x8002, 0x8004, 0x8008, 0x8010, 0x8020, 0x8040, 0x8080, 0x8100,
  0x8200, 0x8400, 0x8800, 0x8C00, 0x9000, 0x9400, 0x9800, 0x9C00, 0xA000, 0xA400, 0xA800, 0xAC00, 0xB000, 0xB400, 0xB800, 0xBC00,
  0xC000, 0xC400, 0xC800, 0xCC00, 0xD000, 0xD400, 0xD800, 0xDC00, 0xE000, 0xE400, 0xE800, 0xEC00, 0xF000, 0xF400, 0xF800, 0xFC00,
  0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00,
  0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00,
  0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00,
  0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00,
  0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00,
  0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00,
  0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00 };

__constant static const unsigned char shift_table[512] = {
  24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
  24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
  24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
  24, 24, 24, 24, 24, 24, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
  13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
  24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
  24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
  24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 13,
  24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
  24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
  24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
  24, 24, 24, 24, 24, 24, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
  13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
  24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
  24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
  24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 13 };

__constant static const uint32_t mantissa_table[2048] = {
  0x00000000, 0x33800000, 0x34000000, 0x34400000, 0x34800000, 0x34A00000, 0x34C00000, 0x34E00000, 0x35000000, 0x35100000, 0x35200000, 0x35300000, 0x35400000, 0x35500000, 0x35600000, 0x35700000,
  0x35800000, 0x35880000, 0x35900000, 0x35980000, 0x35A00000, 0x35A80000, 0x35B00000, 0x35B80000, 0x35C00000, 0x35C80000, 0x35D00000, 0x35D80000, 0x35E00000, 0x35E80000, 0x35F00000, 0x35F80000,
  0x36000000, 0x36040000, 0x36080000, 0x360C0000, 0x36100000, 0x36140000, 0x36180000, 0x361C0000, 0x36200000, 0x36240000, 0x36280000, 0x362C0000, 0x36300000, 0x36340000, 0x36380000, 0x363C0000,
  0x36400000, 0x36440000, 0x36480000, 0x364C0000, 0x36500000, 0x36540000, 0x36580000, 0x365C0000, 0x36600000, 0x36640000, 0x36680000, 0x366C0000, 0x36700000, 0x36740000, 0x36780000, 0x367C0000,
  0x36800000, 0x36820000, 0x36840000, 0x36860000, 0x36880000, 0x368A0000, 0x368C0000, 0x368E0000, 0x36900000, 0x36920000, 0x36940000, 0x36960000, 0x36980000, 0x369A0000, 0x369C0000, 0x369E0000,
  0x36A00000, 0x36A20000, 0x36A40000, 0x36A60000, 0x36A80000, 0x36AA0000, 0x36AC0000, 0x36AE0000, 0x36B00000, 0x36B20000, 0x36B40000, 0x36B60000, 0x36B80000, 0x36BA0000, 0x36BC0000, 0x36BE0000,
  0x36C00000, 0x36C20000, 0x36C40000, 0x36C60000, 0x36C80000, 0x36CA0000, 0x36CC0000, 0x36CE0000, 0x36D00000, 0x36D20000, 0x36D40000, 0x36D60000, 0x36D80000, 0x36DA0000, 0x36DC0000, 0x36DE0000,
  0x36E00000, 0x36E20000, 0x36E40000, 0x36E60000, 0x36E80000, 0x36EA0000, 0x36EC0000, 0x36EE0000, 0x36F00000, 0x36F20000, 0x36F40000, 0x36F60000, 0x36F80000, 0x36FA0000, 0x36FC0000, 0x36FE0000,
  0x37000000, 0x37010000, 0x37020000, 0x37030000, 0x37040000, 0x37050000, 0x37060000, 0x37070000, 0x37080000, 0x37090000, 0x370A0000, 0x370B0000, 0x370C0000, 0x370D0000, 0x370E0000, 0x370F0000,
  0x37100000, 0x37110000, 0x37120000, 0x37130000, 0x37140000, 0x37150000, 0x37160000, 0x37170000, 0x37180000, 0x37190000, 0x371A0000, 0x371B0000, 0x371C0000, 0x371D0000, 0x371E0000, 0x371F0000,
  0x37200000, 0x37210000, 0x37220000, 0x37230000, 0x37240000, 0x37250000, 0x37260000, 0x37270000, 0x37280000, 0x37290000, 0x372A0000, 0x372B0000, 0x372C0000, 0x372D0000, 0x372E0000, 0x372F0000,
  0x37300000, 0x37310000, 0x37320000, 0x37330000, 0x37340000, 0x37350000, 0x37360000, 0x37370000, 0x37380000, 0x37390000, 0x373A0000, 0x373B0000, 0x373C0000, 0x373D0000, 0x373E0000, 0x373F0000,
  0x37400000, 0x37410000, 0x37420000, 0x37430000, 0x37440000, 0x37450000, 0x37460000, 0x37470000, 0x37480000, 0x37490000, 0x374A0000, 0x374B0000, 0x374C0000, 0x374D0000, 0x374E0000, 0x374F0000,
  0x37500000, 0x37510000, 0x37520000, 0x37530000, 0x37540000, 0x37550000, 0x37560000, 0x37570000, 0x37580000, 0x37590000, 0x375A0000, 0x375B0000, 0x375C0000, 0x375D0000, 0x375E0000, 0x375F0000,
  0x37600000, 0x37610000, 0x37620000, 0x37630000, 0x37640000, 0x37650000, 0x37660000, 0x37670000, 0x37680000, 0x37690000, 0x376A0000, 0x376B0000, 0x376C0000, 0x376D0000, 0x376E0000, 0x376F0000,
  0x37700000, 0x37710000, 0x37720000, 0x37730000, 0x37740000, 0x37750000, 0x37760000, 0x37770000, 0x37780000, 0x37790000, 0x377A0000, 0x377B0000, 0x377C0000, 0x377D0000, 0x377E0000, 0x377F0000,
  0x37800000, 0x37808000, 0x37810000, 0x37818000, 0x37820000, 0x37828000, 0x37830000, 0x37838000, 0x37840000, 0x37848000, 0x37850000, 0x37858000, 0x37860000, 0x37868000, 0x37870000, 0x37878000,
  0x37880000, 0x37888000, 0x37890000, 0x37898000, 0x378A0000, 0x378A8000, 0x378B0000, 0x378B8000, 0x378C0000, 0x378C8000, 0x378D0000, 0x378D8000, 0x378E0000, 0x378E8000, 0x378F0000, 0x378F8000,
  0x37900000, 0x37908000, 0x37910000, 0x37918000, 0x37920000, 0x37928000, 0x37930000, 0x37938000, 0x37940000, 0x37948000, 0x37950000, 0x37958000, 0x37960000, 0x37968000, 0x37970000, 0x37978000,
  0x37980000, 0x37988000, 0x37990000, 0x37998000, 0x379A0000, 0x379A8000, 0x379B0000, 0x379B8000, 0x379C0000, 0x379C8000, 0x379D0000, 0x379D8000, 0x379E0000, 0x379E8000, 0x379F0000, 0x379F8000,
  0x37A00000, 0x37A08000, 0x37A10000, 0x37A18000, 0x37A20000, 0x37A28000, 0x37A30000, 0x37A38000, 0x37A40000, 0x37A48000, 0x37A50000, 0x37A58000, 0x37A60000, 0x37A68000, 0x37A70000, 0x37A78000,
  0x37A80000, 0x37A88000, 0x37A90000, 0x37A98000, 0x37AA0000, 0x37AA8000, 0x37AB0000, 0x37AB8000, 0x37AC0000, 0x37AC8000, 0x37AD0000, 0x37AD8000, 0x37AE0000, 0x37AE8000, 0x37AF0000, 0x37AF8000,
  0x37B00000, 0x37B08000, 0x37B10000, 0x37B18000, 0x37B20000, 0x37B28000, 0x37B30000, 0x37B38000, 0x37B40000, 0x37B48000, 0x37B50000, 0x37B58000, 0x37B60000, 0x37B68000, 0x37B70000, 0x37B78000,
  0x37B80000, 0x37B88000, 0x37B90000, 0x37B98000, 0x37BA0000, 0x37BA8000, 0x37BB0000, 0x37BB8000, 0x37BC0000, 0x37BC8000, 0x37BD0000, 0x37BD8000, 0x37BE0000, 0x37BE8000, 0x37BF0000, 0x37BF8000,
  0x37C00000, 0x37C08000, 0x37C10000, 0x37C18000, 0x37C20000, 0x37C28000, 0x37C30000, 0x37C38000, 0x37C40000, 0x37C48000, 0x37C50000, 0x37C58000, 0x37C60000, 0x37C68000, 0x37C70000, 0x37C78000,
  0x37C80000, 0x37C88000, 0x37C90000, 0x37C98000, 0x37CA0000, 0x37CA8000, 0x37CB0000, 0x37CB8000, 0x37CC0000, 0x37CC8000, 0x37CD0000, 0x37CD8000, 0x37CE0000, 0x37CE8000, 0x37CF0000, 0x37CF8000,
  0x37D00000, 0x37D08000, 0x37D10000, 0x37D18000, 0x37D20000, 0x37D28000, 0x37D30000, 0x37D38000, 0x37D40000, 0x37D48000, 0x37D50000, 0x37D58000, 0x37D60000, 0x37D68000, 0x37D70000, 0x37D78000,
  0x37D80000, 0x37D88000, 0x37D90000, 0x37D98000, 0x37DA0000, 0x37DA8000, 0x37DB0000, 0x37DB8000, 0x37DC0000, 0x37DC8000, 0x37DD0000, 0x37DD8000, 0x37DE0000, 0x37DE8000, 0x37DF0000, 0x37DF8000,
  0x37E00000, 0x37E08000, 0x37E10000, 0x37E18000, 0x37E20000, 0x37E28000, 0x37E30000, 0x37E38000, 0x37E40000, 0x37E48000, 0x37E50000, 0x37E58000, 0x37E60000, 0x37E68000, 0x37E70000, 0x37E78000,
  0x37E80000, 0x37E88000, 0x37E90000, 0x37E98000, 0x37EA0000, 0x37EA8000, 0x37EB0000, 0x37EB8000, 0x37EC0000, 0x37EC8000, 0x37ED0000, 0x37ED8000, 0x37EE0000, 0x37EE8000, 0x37EF0000, 0x37EF8000,
  0x37F00000, 0x37F08000, 0x37F10000, 0x37F18000, 0x37F20000, 0x37F28000, 0x37F30000, 0x37F38000, 0x37F40000, 0x37F48000, 0x37F50000, 0x37F58000, 0x37F60000, 0x37F68000, 0x37F70000, 0x37F78000,
  0x37F80000, 0x37F88000, 0x37F90000, 0x37F98000, 0x37FA0000, 0x37FA8000, 0x37FB0000, 0x37FB8000, 0x37FC0000, 0x37FC8000, 0x37FD0000, 0x37FD8000, 0x37FE0000, 0x37FE8000, 0x37FF0000, 0x37FF8000,
  0x38000000, 0x38004000, 0x38008000, 0x3800C000, 0x38010000, 0x38014000, 0x38018000, 0x3801C000, 0x38020000, 0x38024000, 0x38028000, 0x3802C000, 0x38030000, 0x38034000, 0x38038000, 0x3803C000,
  0x38040000, 0x38044000, 0x38048000, 0x3804C000, 0x38050000, 0x38054000, 0x38058000, 0x3805C000, 0x38060000, 0x38064000, 0x38068000, 0x3806C000, 0x38070000, 0x38074000, 0x38078000, 0x3807C000,
  0x38080000, 0x38084000, 0x38088000, 0x3808C000, 0x38090000, 0x38094000, 0x38098000, 0x3809C000, 0x380A0000, 0x380A4000, 0x380A8000, 0x380AC000, 0x380B0000, 0x380B4000, 0x380B8000, 0x380BC000,
  0x380C0000, 0x380C4000, 0x380C8000, 0x380CC000, 0x380D0000, 0x380D4000, 0x380D8000, 0x380DC000, 0x380E0000, 0x380E4000, 0x380E8000, 0x380EC000, 0x380F0000, 0x380F4000, 0x380F8000, 0x380FC000,
  0x38100000, 0x38104000, 0x38108000, 0x3810C000, 0x38110000, 0x38114000, 0x38118000, 0x3811C000, 0x38120000, 0x38124000, 0x38128000, 0x3812C000, 0x38130000, 0x38134000, 0x38138000, 0x3813C000,
  0x38140000, 0x38144000, 0x38148000, 0x3814C000, 0x38150000, 0x38154000, 0x38158000, 0x3815C000, 0x38160000, 0x38164000, 0x38168000, 0x3816C000, 0x38170000, 0x38174000, 0x38178000, 0x3817C000,
  0x38180000, 0x38184000, 0x38188000, 0x3818C000, 0x38190000, 0x38194000, 0x38198000, 0x3819C000, 0x381A0000, 0x381A4000, 0x381A8000, 0x381AC000, 0x381B0000, 0x381B4000, 0x381B8000, 0x381BC000,
  0x381C0000, 0x381C4000, 0x381C8000, 0x381CC000, 0x381D0000, 0x381D4000, 0x381D8000, 0x381DC000, 0x381E0000, 0x381E4000, 0x381E8000, 0x381EC000, 0x381F0000, 0x381F4000, 0x381F8000, 0x381FC000,
  0x38200000, 0x38204000, 0x38208000, 0x3820C000, 0x38210000, 0x38214000, 0x38218000, 0x3821C000, 0x38220000, 0x38224000, 0x38228000, 0x3822C000, 0x38230000, 0x38234000, 0x38238000, 0x3823C000,
  0x38240000, 0x38244000, 0x38248000, 0x3824C000, 0x38250000, 0x38254000, 0x38258000, 0x3825C000, 0x38260000, 0x38264000, 0x38268000, 0x3826C000, 0x38270000, 0x38274000, 0x38278000, 0x3827C000,
  0x38280000, 0x38284000, 0x38288000, 0x3828C000, 0x38290000, 0x38294000, 0x38298000, 0x3829C000, 0x382A0000, 0x382A4000, 0x382A8000, 0x382AC000, 0x382B0000, 0x382B4000, 0x382B8000, 0x382BC000,
  0x382C0000, 0x382C4000, 0x382C8000, 0x382CC000, 0x382D0000, 0x382D4000, 0x382D8000, 0x382DC000, 0x382E0000, 0x382E4000, 0x382E8000, 0x382EC000, 0x382F0000, 0x382F4000, 0x382F8000, 0x382FC000,
  0x38300000, 0x38304000, 0x38308000, 0x3830C000, 0x38310000, 0x38314000, 0x38318000, 0x3831C000, 0x38320000, 0x38324000, 0x38328000, 0x3832C000, 0x38330000, 0x38334000, 0x38338000, 0x3833C000,
  0x38340000, 0x38344000, 0x38348000, 0x3834C000, 0x38350000, 0x38354000, 0x38358000, 0x3835C000, 0x38360000, 0x38364000, 0x38368000, 0x3836C000, 0x38370000, 0x38374000, 0x38378000, 0x3837C000,
  0x38380000, 0x38384000, 0x38388000, 0x3838C000, 0x38390000, 0x38394000, 0x38398000, 0x3839C000, 0x383A0000, 0x383A4000, 0x383A8000, 0x383AC000, 0x383B0000, 0x383B4000, 0x383B8000, 0x383BC000,
  0x383C0000, 0x383C4000, 0x383C8000, 0x383CC000, 0x383D0000, 0x383D4000, 0x383D8000, 0x383DC000, 0x383E0000, 0x383E4000, 0x383E8000, 0x383EC000, 0x383F0000, 0x383F4000, 0x383F8000, 0x383FC000,
  0x38400000, 0x38404000, 0x38408000, 0x3840C000, 0x38410000, 0x38414000, 0x38418000, 0x3841C000, 0x38420000, 0x38424000, 0x38428000, 0x3842C000, 0x38430000, 0x38434000, 0x38438000, 0x3843C000,
  0x38440000, 0x38444000, 0x38448000, 0x3844C000, 0x38450000, 0x38454000, 0x38458000, 0x3845C000, 0x38460000, 0x38464000, 0x38468000, 0x3846C000, 0x38470000, 0x38474000, 0x38478000, 0x3847C000,
  0x38480000, 0x38484000, 0x38488000, 0x3848C000, 0x38490000, 0x38494000, 0x38498000, 0x3849C000, 0x384A0000, 0x384A4000, 0x384A8000, 0x384AC000, 0x384B0000, 0x384B4000, 0x384B8000, 0x384BC000,
  0x384C0000, 0x384C4000, 0x384C8000, 0x384CC000, 0x384D0000, 0x384D4000, 0x384D8000, 0x384DC000, 0x384E0000, 0x384E4000, 0x384E8000, 0x384EC000, 0x384F0000, 0x384F4000, 0x384F8000, 0x384FC000,
  0x38500000, 0x38504000, 0x38508000, 0x3850C000, 0x38510000, 0x38514000, 0x38518000, 0x3851C000, 0x38520000, 0x38524000, 0x38528000, 0x3852C000, 0x38530000, 0x38534000, 0x38538000, 0x3853C000,
  0x38540000, 0x38544000, 0x38548000, 0x3854C000, 0x38550000, 0x38554000, 0x38558000, 0x3855C000, 0x38560000, 0x38564000, 0x38568000, 0x3856C000, 0x38570000, 0x38574000, 0x38578000, 0x3857C000,
  0x38580000, 0x38584000, 0x38588000, 0x3858C000, 0x38590000, 0x38594000, 0x38598000, 0x3859C000, 0x385A0000, 0x385A4000, 0x385A8000, 0x385AC000, 0x385B0000, 0x385B4000, 0x385B8000, 0x385BC000,
  0x385C0000, 0x385C4000, 0x385C8000, 0x385CC000, 0x385D0000, 0x385D4000, 0x385D8000, 0x385DC000, 0x385E0000, 0x385E4000, 0x385E8000, 0x385EC000, 0x385F0000, 0x385F4000, 0x385F8000, 0x385FC000,
  0x38600000, 0x38604000, 0x38608000, 0x3860C000, 0x38610000, 0x38614000, 0x38618000, 0x3861C000, 0x38620000, 0x38624000, 0x38628000, 0x3862C000, 0x38630000, 0x38634000, 0x38638000, 0x3863C000,
  0x38640000, 0x38644000, 0x38648000, 0x3864C000, 0x38650000, 0x38654000, 0x38658000, 0x3865C000, 0x38660000, 0x38664000, 0x38668000, 0x3866C000, 0x38670000, 0x38674000, 0x38678000, 0x3867C000,
  0x38680000, 0x38684000, 0x38688000, 0x3868C000, 0x38690000, 0x38694000, 0x38698000, 0x3869C000, 0x386A0000, 0x386A4000, 0x386A8000, 0x386AC000, 0x386B0000, 0x386B4000, 0x386B8000, 0x386BC000,
  0x386C0000, 0x386C4000, 0x386C8000, 0x386CC000, 0x386D0000, 0x386D4000, 0x386D8000, 0x386DC000, 0x386E0000, 0x386E4000, 0x386E8000, 0x386EC000, 0x386F0000, 0x386F4000, 0x386F8000, 0x386FC000,
  0x38700000, 0x38704000, 0x38708000, 0x3870C000, 0x38710000, 0x38714000, 0x38718000, 0x3871C000, 0x38720000, 0x38724000, 0x38728000, 0x3872C000, 0x38730000, 0x38734000, 0x38738000, 0x3873C000,
  0x38740000, 0x38744000, 0x38748000, 0x3874C000, 0x38750000, 0x38754000, 0x38758000, 0x3875C000, 0x38760000, 0x38764000, 0x38768000, 0x3876C000, 0x38770000, 0x38774000, 0x38778000, 0x3877C000,
  0x38780000, 0x38784000, 0x38788000, 0x3878C000, 0x38790000, 0x38794000, 0x38798000, 0x3879C000, 0x387A0000, 0x387A4000, 0x387A8000, 0x387AC000, 0x387B0000, 0x387B4000, 0x387B8000, 0x387BC000,
  0x387C0000, 0x387C4000, 0x387C8000, 0x387CC000, 0x387D0000, 0x387D4000, 0x387D8000, 0x387DC000, 0x387E0000, 0x387E4000, 0x387E8000, 0x387EC000, 0x387F0000, 0x387F4000, 0x387F8000, 0x387FC000,
  0x38000000, 0x38002000, 0x38004000, 0x38006000, 0x38008000, 0x3800A000, 0x3800C000, 0x3800E000, 0x38010000, 0x38012000, 0x38014000, 0x38016000, 0x38018000, 0x3801A000, 0x3801C000, 0x3801E000,
  0x38020000, 0x38022000, 0x38024000, 0x38026000, 0x38028000, 0x3802A000, 0x3802C000, 0x3802E000, 0x38030000, 0x38032000, 0x38034000, 0x38036000, 0x38038000, 0x3803A000, 0x3803C000, 0x3803E000,
  0x38040000, 0x38042000, 0x38044000, 0x38046000, 0x38048000, 0x3804A000, 0x3804C000, 0x3804E000, 0x38050000, 0x38052000, 0x38054000, 0x38056000, 0x38058000, 0x3805A000, 0x3805C000, 0x3805E000,
  0x38060000, 0x38062000, 0x38064000, 0x38066000, 0x38068000, 0x3806A000, 0x3806C000, 0x3806E000, 0x38070000, 0x38072000, 0x38074000, 0x38076000, 0x38078000, 0x3807A000, 0x3807C000, 0x3807E000,
  0x38080000, 0x38082000, 0x38084000, 0x38086000, 0x38088000, 0x3808A000, 0x3808C000, 0x3808E000, 0x38090000, 0x38092000, 0x38094000, 0x38096000, 0x38098000, 0x3809A000, 0x3809C000, 0x3809E000,
  0x380A0000, 0x380A2000, 0x380A4000, 0x380A6000, 0x380A8000, 0x380AA000, 0x380AC000, 0x380AE000, 0x380B0000, 0x380B2000, 0x380B4000, 0x380B6000, 0x380B8000, 0x380BA000, 0x380BC000, 0x380BE000,
  0x380C0000, 0x380C2000, 0x380C4000, 0x380C6000, 0x380C8000, 0x380CA000, 0x380CC000, 0x380CE000, 0x380D0000, 0x380D2000, 0x380D4000, 0x380D6000, 0x380D8000, 0x380DA000, 0x380DC000, 0x380DE000,
  0x380E0000, 0x380E2000, 0x380E4000, 0x380E6000, 0x380E8000, 0x380EA000, 0x380EC000, 0x380EE000, 0x380F0000, 0x380F2000, 0x380F4000, 0x380F6000, 0x380F8000, 0x380FA000, 0x380FC000, 0x380FE000,
  0x38100000, 0x38102000, 0x38104000, 0x38106000, 0x38108000, 0x3810A000, 0x3810C000, 0x3810E000, 0x38110000, 0x38112000, 0x38114000, 0x38116000, 0x38118000, 0x3811A000, 0x3811C000, 0x3811E000,
  0x38120000, 0x38122000, 0x38124000, 0x38126000, 0x38128000, 0x3812A000, 0x3812C000, 0x3812E000, 0x38130000, 0x38132000, 0x38134000, 0x38136000, 0x38138000, 0x3813A000, 0x3813C000, 0x3813E000,
  0x38140000, 0x38142000, 0x38144000, 0x38146000, 0x38148000, 0x3814A000, 0x3814C000, 0x3814E000, 0x38150000, 0x38152000, 0x38154000, 0x38156000, 0x38158000, 0x3815A000, 0x3815C000, 0x3815E000,
  0x38160000, 0x38162000, 0x38164000, 0x38166000, 0x38168000, 0x3816A000, 0x3816C000, 0x3816E000, 0x38170000, 0x38172000, 0x38174000, 0x38176000, 0x38178000, 0x3817A000, 0x3817C000, 0x3817E000,
  0x38180000, 0x38182000, 0x38184000, 0x38186000, 0x38188000, 0x3818A000, 0x3818C000, 0x3818E000, 0x38190000, 0x38192000, 0x38194000, 0x38196000, 0x38198000, 0x3819A000, 0x3819C000, 0x3819E000,
  0x381A0000, 0x381A2000, 0x381A4000, 0x381A6000, 0x381A8000, 0x381AA000, 0x381AC000, 0x381AE000, 0x381B0000, 0x381B2000, 0x381B4000, 0x381B6000, 0x381B8000, 0x381BA000, 0x381BC000, 0x381BE000,
  0x381C0000, 0x381C2000, 0x381C4000, 0x381C6000, 0x381C8000, 0x381CA000, 0x381CC000, 0x381CE000, 0x381D0000, 0x381D2000, 0x381D4000, 0x381D6000, 0x381D8000, 0x381DA000, 0x381DC000, 0x381DE000,
  0x381E0000, 0x381E2000, 0x381E4000, 0x381E6000, 0x381E8000, 0x381EA000, 0x381EC000, 0x381EE000, 0x381F0000, 0x381F2000, 0x381F4000, 0x381F6000, 0x381F8000, 0x381FA000, 0x381FC000, 0x381FE000,
  0x38200000, 0x38202000, 0x38204000, 0x38206000, 0x38208000, 0x3820A000, 0x3820C000, 0x3820E000, 0x38210000, 0x38212000, 0x38214000, 0x38216000, 0x38218000, 0x3821A000, 0x3821C000, 0x3821E000,
  0x38220000, 0x38222000, 0x38224000, 0x38226000, 0x38228000, 0x3822A000, 0x3822C000, 0x3822E000, 0x38230000, 0x38232000, 0x38234000, 0x38236000, 0x38238000, 0x3823A000, 0x3823C000, 0x3823E000,
  0x38240000, 0x38242000, 0x38244000, 0x38246000, 0x38248000, 0x3824A000, 0x3824C000, 0x3824E000, 0x38250000, 0x38252000, 0x38254000, 0x38256000, 0x38258000, 0x3825A000, 0x3825C000, 0x3825E000,
  0x38260000, 0x38262000, 0x38264000, 0x38266000, 0x38268000, 0x3826A000, 0x3826C000, 0x3826E000, 0x38270000, 0x38272000, 0x38274000, 0x38276000, 0x38278000, 0x3827A000, 0x3827C000, 0x3827E000,
  0x38280000, 0x38282000, 0x38284000, 0x38286000, 0x38288000, 0x3828A000, 0x3828C000, 0x3828E000, 0x38290000, 0x38292000, 0x38294000, 0x38296000, 0x38298000, 0x3829A000, 0x3829C000, 0x3829E000,
  0x382A0000, 0x382A2000, 0x382A4000, 0x382A6000, 0x382A8000, 0x382AA000, 0x382AC000, 0x382AE000, 0x382B0000, 0x382B2000, 0x382B4000, 0x382B6000, 0x382B8000, 0x382BA000, 0x382BC000, 0x382BE000,
  0x382C0000, 0x382C2000, 0x382C4000, 0x382C6000, 0x382C8000, 0x382CA000, 0x382CC000, 0x382CE000, 0x382D0000, 0x382D2000, 0x382D4000, 0x382D6000, 0x382D8000, 0x382DA000, 0x382DC000, 0x382DE000,
  0x382E0000, 0x382E2000, 0x382E4000, 0x382E6000, 0x382E8000, 0x382EA000, 0x382EC000, 0x382EE000, 0x382F0000, 0x382F2000, 0x382F4000, 0x382F6000, 0x382F8000, 0x382FA000, 0x382FC000, 0x382FE000,
  0x38300000, 0x38302000, 0x38304000, 0x38306000, 0x38308000, 0x3830A000, 0x3830C000, 0x3830E000, 0x38310000, 0x38312000, 0x38314000, 0x38316000, 0x38318000, 0x3831A000, 0x3831C000, 0x3831E000,
  0x38320000, 0x38322000, 0x38324000, 0x38326000, 0x38328000, 0x3832A000, 0x3832C000, 0x3832E000, 0x38330000, 0x38332000, 0x38334000, 0x38336000, 0x38338000, 0x3833A000, 0x3833C000, 0x3833E000,
  0x38340000, 0x38342000, 0x38344000, 0x38346000, 0x38348000, 0x3834A000, 0x3834C000, 0x3834E000, 0x38350000, 0x38352000, 0x38354000, 0x38356000, 0x38358000, 0x3835A000, 0x3835C000, 0x3835E000,
  0x38360000, 0x38362000, 0x38364000, 0x38366000, 0x38368000, 0x3836A000, 0x3836C000, 0x3836E000, 0x38370000, 0x38372000, 0x38374000, 0x38376000, 0x38378000, 0x3837A000, 0x3837C000, 0x3837E000,
  0x38380000, 0x38382000, 0x38384000, 0x38386000, 0x38388000, 0x3838A000, 0x3838C000, 0x3838E000, 0x38390000, 0x38392000, 0x38394000, 0x38396000, 0x38398000, 0x3839A000, 0x3839C000, 0x3839E000,
  0x383A0000, 0x383A2000, 0x383A4000, 0x383A6000, 0x383A8000, 0x383AA000, 0x383AC000, 0x383AE000, 0x383B0000, 0x383B2000, 0x383B4000, 0x383B6000, 0x383B8000, 0x383BA000, 0x383BC000, 0x383BE000,
  0x383C0000, 0x383C2000, 0x383C4000, 0x383C6000, 0x383C8000, 0x383CA000, 0x383CC000, 0x383CE000, 0x383D0000, 0x383D2000, 0x383D4000, 0x383D6000, 0x383D8000, 0x383DA000, 0x383DC000, 0x383DE000,
  0x383E0000, 0x383E2000, 0x383E4000, 0x383E6000, 0x383E8000, 0x383EA000, 0x383EC000, 0x383EE000, 0x383F0000, 0x383F2000, 0x383F4000, 0x383F6000, 0x383F8000, 0x383FA000, 0x383FC000, 0x383FE000,
  0x38400000, 0x38402000, 0x38404000, 0x38406000, 0x38408000, 0x3840A000, 0x3840C000, 0x3840E000, 0x38410000, 0x38412000, 0x38414000, 0x38416000, 0x38418000, 0x3841A000, 0x3841C000, 0x3841E000,
  0x38420000, 0x38422000, 0x38424000, 0x38426000, 0x38428000, 0x3842A000, 0x3842C000, 0x3842E000, 0x38430000, 0x38432000, 0x38434000, 0x38436000, 0x38438000, 0x3843A000, 0x3843C000, 0x3843E000,
  0x38440000, 0x38442000, 0x38444000, 0x38446000, 0x38448000, 0x3844A000, 0x3844C000, 0x3844E000, 0x38450000, 0x38452000, 0x38454000, 0x38456000, 0x38458000, 0x3845A000, 0x3845C000, 0x3845E000,
  0x38460000, 0x38462000, 0x38464000, 0x38466000, 0x38468000, 0x3846A000, 0x3846C000, 0x3846E000, 0x38470000, 0x38472000, 0x38474000, 0x38476000, 0x38478000, 0x3847A000, 0x3847C000, 0x3847E000,
  0x38480000, 0x38482000, 0x38484000, 0x38486000, 0x38488000, 0x3848A000, 0x3848C000, 0x3848E000, 0x38490000, 0x38492000, 0x38494000, 0x38496000, 0x38498000, 0x3849A000, 0x3849C000, 0x3849E000,
  0x384A0000, 0x384A2000, 0x384A4000, 0x384A6000, 0x384A8000, 0x384AA000, 0x384AC000, 0x384AE000, 0x384B0000, 0x384B2000, 0x384B4000, 0x384B6000, 0x384B8000, 0x384BA000, 0x384BC000, 0x384BE000,
  0x384C0000, 0x384C2000, 0x384C4000, 0x384C6000, 0x384C8000, 0x384CA000, 0x384CC000, 0x384CE000, 0x384D0000, 0x384D2000, 0x384D4000, 0x384D6000, 0x384D8000, 0x384DA000, 0x384DC000, 0x384DE000,
  0x384E0000, 0x384E2000, 0x384E4000, 0x384E6000, 0x384E8000, 0x384EA000, 0x384EC000, 0x384EE000, 0x384F0000, 0x384F2000, 0x384F4000, 0x384F6000, 0x384F8000, 0x384FA000, 0x384FC000, 0x384FE000,
  0x38500000, 0x38502000, 0x38504000, 0x38506000, 0x38508000, 0x3850A000, 0x3850C000, 0x3850E000, 0x38510000, 0x38512000, 0x38514000, 0x38516000, 0x38518000, 0x3851A000, 0x3851C000, 0x3851E000,
  0x38520000, 0x38522000, 0x38524000, 0x38526000, 0x38528000, 0x3852A000, 0x3852C000, 0x3852E000, 0x38530000, 0x38532000, 0x38534000, 0x38536000, 0x38538000, 0x3853A000, 0x3853C000, 0x3853E000,
  0x38540000, 0x38542000, 0x38544000, 0x38546000, 0x38548000, 0x3854A000, 0x3854C000, 0x3854E000, 0x38550000, 0x38552000, 0x38554000, 0x38556000, 0x38558000, 0x3855A000, 0x3855C000, 0x3855E000,
  0x38560000, 0x38562000, 0x38564000, 0x38566000, 0x38568000, 0x3856A000, 0x3856C000, 0x3856E000, 0x38570000, 0x38572000, 0x38574000, 0x38576000, 0x38578000, 0x3857A000, 0x3857C000, 0x3857E000,
  0x38580000, 0x38582000, 0x38584000, 0x38586000, 0x38588000, 0x3858A000, 0x3858C000, 0x3858E000, 0x38590000, 0x38592000, 0x38594000, 0x38596000, 0x38598000, 0x3859A000, 0x3859C000, 0x3859E000,
  0x385A0000, 0x385A2000, 0x385A4000, 0x385A6000, 0x385A8000, 0x385AA000, 0x385AC000, 0x385AE000, 0x385B0000, 0x385B2000, 0x385B4000, 0x385B6000, 0x385B8000, 0x385BA000, 0x385BC000, 0x385BE000,
  0x385C0000, 0x385C2000, 0x385C4000, 0x385C6000, 0x385C8000, 0x385CA000, 0x385CC000, 0x385CE000, 0x385D0000, 0x385D2000, 0x385D4000, 0x385D6000, 0x385D8000, 0x385DA000, 0x385DC000, 0x385DE000,
  0x385E0000, 0x385E2000, 0x385E4000, 0x385E6000, 0x385E8000, 0x385EA000, 0x385EC000, 0x385EE000, 0x385F0000, 0x385F2000, 0x385F4000, 0x385F6000, 0x385F8000, 0x385FA000, 0x385FC000, 0x385FE000,
  0x38600000, 0x38602000, 0x38604000, 0x38606000, 0x38608000, 0x3860A000, 0x3860C000, 0x3860E000, 0x38610000, 0x38612000, 0x38614000, 0x38616000, 0x38618000, 0x3861A000, 0x3861C000, 0x3861E000,
  0x38620000, 0x38622000, 0x38624000, 0x38626000, 0x38628000, 0x3862A000, 0x3862C000, 0x3862E000, 0x38630000, 0x38632000, 0x38634000, 0x38636000, 0x38638000, 0x3863A000, 0x3863C000, 0x3863E000,
  0x38640000, 0x38642000, 0x38644000, 0x38646000, 0x38648000, 0x3864A000, 0x3864C000, 0x3864E000, 0x38650000, 0x38652000, 0x38654000, 0x38656000, 0x38658000, 0x3865A000, 0x3865C000, 0x3865E000,
  0x38660000, 0x38662000, 0x38664000, 0x38666000, 0x38668000, 0x3866A000, 0x3866C000, 0x3866E000, 0x38670000, 0x38672000, 0x38674000, 0x38676000, 0x38678000, 0x3867A000, 0x3867C000, 0x3867E000,
  0x38680000, 0x38682000, 0x38684000, 0x38686000, 0x38688000, 0x3868A000, 0x3868C000, 0x3868E000, 0x38690000, 0x38692000, 0x38694000, 0x38696000, 0x38698000, 0x3869A000, 0x3869C000, 0x3869E000,
  0x386A0000, 0x386A2000, 0x386A4000, 0x386A6000, 0x386A8000, 0x386AA000, 0x386AC000, 0x386AE000, 0x386B0000, 0x386B2000, 0x386B4000, 0x386B6000, 0x386B8000, 0x386BA000, 0x386BC000, 0x386BE000,
  0x386C0000, 0x386C2000, 0x386C4000, 0x386C6000, 0x386C8000, 0x386CA000, 0x386CC000, 0x386CE000, 0x386D0000, 0x386D2000, 0x386D4000, 0x386D6000, 0x386D8000, 0x386DA000, 0x386DC000, 0x386DE000,
  0x386E0000, 0x386E2000, 0x386E4000, 0x386E6000, 0x386E8000, 0x386EA000, 0x386EC000, 0x386EE000, 0x386F0000, 0x386F2000, 0x386F4000, 0x386F6000, 0x386F8000, 0x386FA000, 0x386FC000, 0x386FE000,
  0x38700000, 0x38702000, 0x38704000, 0x38706000, 0x38708000, 0x3870A000, 0x3870C000, 0x3870E000, 0x38710000, 0x38712000, 0x38714000, 0x38716000, 0x38718000, 0x3871A000, 0x3871C000, 0x3871E000,
  0x38720000, 0x38722000, 0x38724000, 0x38726000, 0x38728000, 0x3872A000, 0x3872C000, 0x3872E000, 0x38730000, 0x38732000, 0x38734000, 0x38736000, 0x38738000, 0x3873A000, 0x3873C000, 0x3873E000,
  0x38740000, 0x38742000, 0x38744000, 0x38746000, 0x38748000, 0x3874A000, 0x3874C000, 0x3874E000, 0x38750000, 0x38752000, 0x38754000, 0x38756000, 0x38758000, 0x3875A000, 0x3875C000, 0x3875E000,
  0x38760000, 0x38762000, 0x38764000, 0x38766000, 0x38768000, 0x3876A000, 0x3876C000, 0x3876E000, 0x38770000, 0x38772000, 0x38774000, 0x38776000, 0x38778000, 0x3877A000, 0x3877C000, 0x3877E000,
  0x38780000, 0x38782000, 0x38784000, 0x38786000, 0x38788000, 0x3878A000, 0x3878C000, 0x3878E000, 0x38790000, 0x38792000, 0x38794000, 0x38796000, 0x38798000, 0x3879A000, 0x3879C000, 0x3879E000,
  0x387A0000, 0x387A2000, 0x387A4000, 0x387A6000, 0x387A8000, 0x387AA000, 0x387AC000, 0x387AE000, 0x387B0000, 0x387B2000, 0x387B4000, 0x387B6000, 0x387B8000, 0x387BA000, 0x387BC000, 0x387BE000,
  0x387C0000, 0x387C2000, 0x387C4000, 0x387C6000, 0x387C8000, 0x387CA000, 0x387CC000, 0x387CE000, 0x387D0000, 0x387D2000, 0x387D4000, 0x387D6000, 0x387D8000, 0x387DA000, 0x387DC000, 0x387DE000,
  0x387E0000, 0x387E2000, 0x387E4000, 0x387E6000, 0x387E8000, 0x387EA000, 0x387EC000, 0x387EE000, 0x387F0000, 0x387F2000, 0x387F4000, 0x387F6000, 0x387F8000, 0x387FA000, 0x387FC000, 0x387FE000 };
__constant static const uint32_t exponent_table[64] = {
  0x00000000, 0x00800000, 0x01000000, 0x01800000, 0x02000000, 0x02800000, 0x03000000, 0x03800000, 0x04000000, 0x04800000, 0x05000000, 0x05800000, 0x06000000, 0x06800000, 0x07000000, 0x07800000,
  0x08000000, 0x08800000, 0x09000000, 0x09800000, 0x0A000000, 0x0A800000, 0x0B000000, 0x0B800000, 0x0C000000, 0x0C800000, 0x0D000000, 0x0D800000, 0x0E000000, 0x0E800000, 0x0F000000, 0x47800000,
  0x80000000, 0x80800000, 0x81000000, 0x81800000, 0x82000000, 0x82800000, 0x83000000, 0x83800000, 0x84000000, 0x84800000, 0x85000000, 0x85800000, 0x86000000, 0x86800000, 0x87000000, 0x87800000,
  0x88000000, 0x88800000, 0x89000000, 0x89800000, 0x8A000000, 0x8A800000, 0x8B000000, 0x8B800000, 0x8C000000, 0x8C800000, 0x8D000000, 0x8D800000, 0x8E000000, 0x8E800000, 0x8F000000, 0xC7800000 };
__constant static const unsigned short offset_table[64] = {
  0, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
  0, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024 };

SCALAR_FUN_ATTR uint16_t float2halfbits(float value) {
  union { float x; uint32_t y; } u;
  u.x = value;
  uint32_t bits = u.y;

  uint16_t hbits = base_table[bits>>23] + (uint16_t)((bits&0x7FFFFF)>>shift_table[bits>>23]);;

  return hbits;
}

SCALAR_FUN_ATTR float halfbits2float(uint16_t value) {
  uint32_t bits = mantissa_table[offset_table[value>>10]+(value&0x3FF)] + exponent_table[value>>10];

  union { uint32_t x; float y; } u;
  u.x = bits;
  return u.y;
}

SCALAR_FUN_ATTR uint16_t halfbitsnextafter(uint16_t from, uint16_t to) {
  int fabs = from & 0x7FFF, tabs = to & 0x7FFF;
  if(fabs > 0x7C00 || tabs > 0x7C00) {
    return ((from&0x7FFF)>0x7C00) ? (from|0x200) : (to|0x200);
  }
  if(from == to || !(fabs|tabs)) {
    return to;
  }
  if(!fabs) {
    return (to&0x8000)+1;
  }
  unsigned int out =
    from +
    (((from>>15)^(unsigned int)((from^(0x8000|(0x8000-(from>>15))))<(to^(0x8000|(0x8000-(to>>15))))))<<1)
    - 1;
  return out;
}

// End of half.h.
// Start of scalar.h.

// Implementation of the primitive scalar operations.  Very
// repetitive.  This code is inserted directly into both CUDA and
// OpenCL programs, as well as the CPU code, so it has some #ifdefs to
// work everywhere.  Some operations are defined as macros because
// this allows us to use them as constant expressions in things like
// array sizes and static initialisers.

// Some of the #ifdefs are because OpenCL uses type-generic functions
// for some operations (e.g. sqrt), while C and CUDA sensibly use
// distinct functions for different precisions (e.g. sqrtf() and
// sqrt()).  This is quite annoying.  Due to C's unfortunate casting
// rules, it is also really easy to accidentally implement
// floating-point functions in the wrong precision, so be careful.

// Double-precision definitions are only included if the preprocessor
// macro FUTHARK_F64_ENABLED is set.

SCALAR_FUN_ATTR int32_t futrts_to_bits32(float x);
SCALAR_FUN_ATTR float futrts_from_bits32(int32_t x);

SCALAR_FUN_ATTR uint8_t add8(uint8_t x, uint8_t y) {
  return x + y;
}

SCALAR_FUN_ATTR uint16_t add16(uint16_t x, uint16_t y) {
  return x + y;
}

SCALAR_FUN_ATTR uint32_t add32(uint32_t x, uint32_t y) {
  return x + y;
}

SCALAR_FUN_ATTR uint64_t add64(uint64_t x, uint64_t y) {
  return x + y;
}

SCALAR_FUN_ATTR uint8_t sub8(uint8_t x, uint8_t y) {
  return x - y;
}

SCALAR_FUN_ATTR uint16_t sub16(uint16_t x, uint16_t y) {
  return x - y;
}

SCALAR_FUN_ATTR uint32_t sub32(uint32_t x, uint32_t y) {
  return x - y;
}

SCALAR_FUN_ATTR uint64_t sub64(uint64_t x, uint64_t y) {
  return x - y;
}

SCALAR_FUN_ATTR uint8_t mul8(uint8_t x, uint8_t y) {
  return x * y;
}

SCALAR_FUN_ATTR uint16_t mul16(uint16_t x, uint16_t y) {
  return x * y;
}

SCALAR_FUN_ATTR uint32_t mul32(uint32_t x, uint32_t y) {
  return x * y;
}

SCALAR_FUN_ATTR uint64_t mul64(uint64_t x, uint64_t y) {
  return x * y;
}

#if ISPC

SCALAR_FUN_ATTR uint8_t udiv8(uint8_t x, uint8_t y) {
  // This strange pattern is used to prevent the ISPC compiler from
  // causing SIGFPEs and bogus results on divisions where inactive lanes
  // have 0-valued divisors. It ensures that any inactive lane instead
  // has a divisor of 1. https://github.com/ispc/ispc/issues/2292
  uint8_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return x / ys;
}

SCALAR_FUN_ATTR uint16_t udiv16(uint16_t x, uint16_t y) {
  uint16_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return x / ys;
}

SCALAR_FUN_ATTR uint32_t udiv32(uint32_t x, uint32_t y) {
  uint32_t ys = 1;
  foreach_active(i){
    ys = y;
  }


  return x / ys;
}

SCALAR_FUN_ATTR uint64_t udiv64(uint64_t x, uint64_t y) {
  uint64_t ys = 1;
  foreach_active(i){
    ys = y;
  }


  return x / ys;
}

SCALAR_FUN_ATTR uint8_t udiv_up8(uint8_t x, uint8_t y) {
  uint8_t ys = 1;
  foreach_active(i){
    ys = y;
  }


  return (x + y - 1) / ys;
}

SCALAR_FUN_ATTR uint16_t udiv_up16(uint16_t x, uint16_t y) {
  uint16_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return (x + y - 1) / ys;
}

SCALAR_FUN_ATTR uint32_t udiv_up32(uint32_t x, uint32_t y) {
  uint32_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return (x + y - 1) / ys;
}

SCALAR_FUN_ATTR uint64_t udiv_up64(uint64_t x, uint64_t y) {
  uint64_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return (x + y - 1) / ys;
}

SCALAR_FUN_ATTR uint8_t umod8(uint8_t x, uint8_t y) {
  uint8_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return x % ys;
}

SCALAR_FUN_ATTR uint16_t umod16(uint16_t x, uint16_t y) {
  uint16_t ys = 1;
  foreach_active(i){
    ys = y;
  }


  return x % ys;
}

SCALAR_FUN_ATTR uint32_t umod32(uint32_t x, uint32_t y) {
  uint32_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return x % ys;
}

SCALAR_FUN_ATTR uint64_t umod64(uint64_t x, uint64_t y) {
  uint64_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return x % ys;
}

SCALAR_FUN_ATTR uint8_t udiv_safe8(uint8_t x, uint8_t y) {
  uint8_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return y == 0 ? 0 : x / ys;
}

SCALAR_FUN_ATTR uint16_t udiv_safe16(uint16_t x, uint16_t y) {
  uint16_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return y == 0 ? 0 : x / ys;
}

SCALAR_FUN_ATTR uint32_t udiv_safe32(uint32_t x, uint32_t y) {
  uint32_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return y == 0 ? 0 : x / ys;
}

SCALAR_FUN_ATTR uint64_t udiv_safe64(uint64_t x, uint64_t y) {
  uint64_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return y == 0 ? 0 : x / ys;
}

SCALAR_FUN_ATTR uint8_t udiv_up_safe8(uint8_t x, uint8_t y) {
  uint8_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return y == 0 ? 0 : (x + y - 1) / ys;
}

SCALAR_FUN_ATTR uint16_t udiv_up_safe16(uint16_t x, uint16_t y) {
  uint16_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return y == 0 ? 0 : (x + y - 1) / ys;
}

SCALAR_FUN_ATTR uint32_t udiv_up_safe32(uint32_t x, uint32_t y) {
  uint32_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return y == 0 ? 0 : (x + y - 1) / ys;
}

SCALAR_FUN_ATTR uint64_t udiv_up_safe64(uint64_t x, uint64_t y) {
  uint64_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return y == 0 ? 0 : (x + y - 1) / ys;
}

SCALAR_FUN_ATTR uint8_t umod_safe8(uint8_t x, uint8_t y) {
  uint8_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return y == 0 ? 0 : x % ys;
}

SCALAR_FUN_ATTR uint16_t umod_safe16(uint16_t x, uint16_t y) {
  uint16_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return y == 0 ? 0 : x % ys;
}

SCALAR_FUN_ATTR uint32_t umod_safe32(uint32_t x, uint32_t y) {
  uint32_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return y == 0 ? 0 : x % ys;
}

SCALAR_FUN_ATTR uint64_t umod_safe64(uint64_t x, uint64_t y) {
  uint64_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return y == 0 ? 0 : x % ys;
}

SCALAR_FUN_ATTR int8_t sdiv8(int8_t x, int8_t y) {
  int8_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  int8_t q = x / ys;
  int8_t r = x % ys;

  return q - ((r != 0 && r < 0 != y < 0) ? 1 : 0);
}

SCALAR_FUN_ATTR int16_t sdiv16(int16_t x, int16_t y) {
  int16_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  int16_t q = x / ys;
  int16_t r = x % ys;

  return q - ((r != 0 && r < 0 != y < 0) ? 1 : 0);
}

SCALAR_FUN_ATTR int32_t sdiv32(int32_t x, int32_t y) {
  int32_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  int32_t q = x / ys;
  int32_t r = x % ys;

  return q - ((r != 0 && r < 0 != y < 0) ? 1 : 0);
}

SCALAR_FUN_ATTR int64_t sdiv64(int64_t x, int64_t y) {
  int64_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  int64_t q = x / ys;
  int64_t r = x % ys;

  return q - ((r != 0 && r < 0 != y < 0) ? 1 : 0);
}

SCALAR_FUN_ATTR int8_t sdiv_up8(int8_t x, int8_t y) {
  return sdiv8(x + y - 1, y);
}

SCALAR_FUN_ATTR int16_t sdiv_up16(int16_t x, int16_t y) {
  return sdiv16(x + y - 1, y);
}

SCALAR_FUN_ATTR int32_t sdiv_up32(int32_t x, int32_t y) {
  return sdiv32(x + y - 1, y);
}

SCALAR_FUN_ATTR int64_t sdiv_up64(int64_t x, int64_t y) {
  return sdiv64(x + y - 1, y);
}

SCALAR_FUN_ATTR int8_t smod8(int8_t x, int8_t y) {
  int8_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  int8_t r = x % ys;

  return r + (r == 0 || (x > 0 && y > 0) || (x < 0 && y < 0) ? 0 : y);
}

SCALAR_FUN_ATTR int16_t smod16(int16_t x, int16_t y) {
  int16_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  int16_t r = x % ys;

  return r + (r == 0 || (x > 0 && y > 0) || (x < 0 && y < 0) ? 0 : y);
}

SCALAR_FUN_ATTR int32_t smod32(int32_t x, int32_t y) {
  int32_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  int32_t r = x % ys;

  return r + (r == 0 || (x > 0 && y > 0) || (x < 0 && y < 0) ? 0 : y);
}

SCALAR_FUN_ATTR int64_t smod64(int64_t x, int64_t y) {
  int64_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  int64_t r = x % ys;

  return r + (r == 0 || (x > 0 && y > 0) || (x < 0 && y < 0) ? 0 : y);
}

SCALAR_FUN_ATTR int8_t sdiv_safe8(int8_t x, int8_t y) {
  return y == 0 ? 0 : sdiv8(x, y);
}

SCALAR_FUN_ATTR int16_t sdiv_safe16(int16_t x, int16_t y) {
  return y == 0 ? 0 : sdiv16(x, y);
}

SCALAR_FUN_ATTR int32_t sdiv_safe32(int32_t x, int32_t y) {
  return y == 0 ? 0 : sdiv32(x, y);
}

SCALAR_FUN_ATTR int64_t sdiv_safe64(int64_t x, int64_t y) {
  return y == 0 ? 0 : sdiv64(x, y);
}

SCALAR_FUN_ATTR int8_t sdiv_up_safe8(int8_t x, int8_t y) {
  return sdiv_safe8(x + y - 1, y);
}

SCALAR_FUN_ATTR int16_t sdiv_up_safe16(int16_t x, int16_t y) {
  return sdiv_safe16(x + y - 1, y);
}

SCALAR_FUN_ATTR int32_t sdiv_up_safe32(int32_t x, int32_t y) {
  return sdiv_safe32(x + y - 1, y);
}

SCALAR_FUN_ATTR int64_t sdiv_up_safe64(int64_t x, int64_t y) {
  return sdiv_safe64(x + y - 1, y);
}

SCALAR_FUN_ATTR int8_t smod_safe8(int8_t x, int8_t y) {
  return y == 0 ? 0 : smod8(x, y);
}

SCALAR_FUN_ATTR int16_t smod_safe16(int16_t x, int16_t y) {
  return y == 0 ? 0 : smod16(x, y);
}

SCALAR_FUN_ATTR int32_t smod_safe32(int32_t x, int32_t y) {
  return y == 0 ? 0 : smod32(x, y);
}

SCALAR_FUN_ATTR int64_t smod_safe64(int64_t x, int64_t y) {
  return y == 0 ? 0 : smod64(x, y);
}

SCALAR_FUN_ATTR int8_t squot8(int8_t x, int8_t y) {
  int8_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return x / ys;
}

SCALAR_FUN_ATTR int16_t squot16(int16_t x, int16_t y) {
  int16_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return x / ys;
}

SCALAR_FUN_ATTR int32_t squot32(int32_t x, int32_t y) {
  int32_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return x / ys;
}

SCALAR_FUN_ATTR int64_t squot64(int64_t x, int64_t y) {
  int64_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return x / ys;
}

SCALAR_FUN_ATTR int8_t srem8(int8_t x, int8_t y) {
  int8_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return x % ys;
}

SCALAR_FUN_ATTR int16_t srem16(int16_t x, int16_t y) {
  int16_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return x % ys;
}

SCALAR_FUN_ATTR int32_t srem32(int32_t x, int32_t y) {
  int32_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return x % ys;
}

SCALAR_FUN_ATTR int64_t srem64(int64_t x, int64_t y) {
  int8_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return x % ys;
}

SCALAR_FUN_ATTR int8_t squot_safe8(int8_t x, int8_t y) {
  int8_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return y == 0 ? 0 : x / ys;
}

SCALAR_FUN_ATTR int16_t squot_safe16(int16_t x, int16_t y) {
  int16_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return y == 0 ? 0 : x / ys;
}

SCALAR_FUN_ATTR int32_t squot_safe32(int32_t x, int32_t y) {
  int32_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return y == 0 ? 0 : x / ys;
}

SCALAR_FUN_ATTR int64_t squot_safe64(int64_t x, int64_t y) {
  int64_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return y == 0 ? 0 : x / ys;
}

SCALAR_FUN_ATTR int8_t srem_safe8(int8_t x, int8_t y) {
  int8_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return y == 0 ? 0 : x % ys;
}

SCALAR_FUN_ATTR int16_t srem_safe16(int16_t x, int16_t y) {
  int16_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return y == 0 ? 0 : x % ys;
}

SCALAR_FUN_ATTR int32_t srem_safe32(int32_t x, int32_t y) {
  int32_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return y == 0 ? 0 : x % ys;
}

SCALAR_FUN_ATTR int64_t srem_safe64(int64_t x, int64_t y) {
  int64_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return y == 0 ? 0 : x % ys;
}

#else

SCALAR_FUN_ATTR uint8_t udiv8(uint8_t x, uint8_t y) {
  return x / y;
}

SCALAR_FUN_ATTR uint16_t udiv16(uint16_t x, uint16_t y) {
  return x / y;
}

SCALAR_FUN_ATTR uint32_t udiv32(uint32_t x, uint32_t y) {
  return x / y;
}

SCALAR_FUN_ATTR uint64_t udiv64(uint64_t x, uint64_t y) {
  return x / y;
}

SCALAR_FUN_ATTR uint8_t udiv_up8(uint8_t x, uint8_t y) {
  return (x + y - 1) / y;
}

SCALAR_FUN_ATTR uint16_t udiv_up16(uint16_t x, uint16_t y) {
  return (x + y - 1) / y;
}

SCALAR_FUN_ATTR uint32_t udiv_up32(uint32_t x, uint32_t y) {
  return (x + y - 1) / y;
}

SCALAR_FUN_ATTR uint64_t udiv_up64(uint64_t x, uint64_t y) {
  return (x + y - 1) / y;
}

SCALAR_FUN_ATTR uint8_t umod8(uint8_t x, uint8_t y) {
  return x % y;
}

SCALAR_FUN_ATTR uint16_t umod16(uint16_t x, uint16_t y) {
  return x % y;
}

SCALAR_FUN_ATTR uint32_t umod32(uint32_t x, uint32_t y) {
  return x % y;
}

SCALAR_FUN_ATTR uint64_t umod64(uint64_t x, uint64_t y) {
  return x % y;
}

SCALAR_FUN_ATTR uint8_t udiv_safe8(uint8_t x, uint8_t y) {
  return y == 0 ? 0 : x / y;
}

SCALAR_FUN_ATTR uint16_t udiv_safe16(uint16_t x, uint16_t y) {
  return y == 0 ? 0 : x / y;
}

SCALAR_FUN_ATTR uint32_t udiv_safe32(uint32_t x, uint32_t y) {
  return y == 0 ? 0 : x / y;
}

SCALAR_FUN_ATTR uint64_t udiv_safe64(uint64_t x, uint64_t y) {
  return y == 0 ? 0 : x / y;
}

SCALAR_FUN_ATTR uint8_t udiv_up_safe8(uint8_t x, uint8_t y) {
  return y == 0 ? 0 : (x + y - 1) / y;
}

SCALAR_FUN_ATTR uint16_t udiv_up_safe16(uint16_t x, uint16_t y) {
  return y == 0 ? 0 : (x + y - 1) / y;
}

SCALAR_FUN_ATTR uint32_t udiv_up_safe32(uint32_t x, uint32_t y) {
  return y == 0 ? 0 : (x + y - 1) / y;
}

SCALAR_FUN_ATTR uint64_t udiv_up_safe64(uint64_t x, uint64_t y) {
  return y == 0 ? 0 : (x + y - 1) / y;
}

SCALAR_FUN_ATTR uint8_t umod_safe8(uint8_t x, uint8_t y) {
  return y == 0 ? 0 : x % y;
}

SCALAR_FUN_ATTR uint16_t umod_safe16(uint16_t x, uint16_t y) {
  return y == 0 ? 0 : x % y;
}

SCALAR_FUN_ATTR uint32_t umod_safe32(uint32_t x, uint32_t y) {
  return y == 0 ? 0 : x % y;
}

SCALAR_FUN_ATTR uint64_t umod_safe64(uint64_t x, uint64_t y) {
  return y == 0 ? 0 : x % y;
}

SCALAR_FUN_ATTR int8_t sdiv8(int8_t x, int8_t y) {
  int8_t q = x / y;
  int8_t r = x % y;

  return q - ((r != 0 && r < 0 != y < 0) ? 1 : 0);
}

SCALAR_FUN_ATTR int16_t sdiv16(int16_t x, int16_t y) {
  int16_t q = x / y;
  int16_t r = x % y;

  return q - ((r != 0 && r < 0 != y < 0) ? 1 : 0);
}

SCALAR_FUN_ATTR int32_t sdiv32(int32_t x, int32_t y) {
  int32_t q = x / y;
  int32_t r = x % y;

  return q - ((r != 0 && r < 0 != y < 0) ? 1 : 0);
}

SCALAR_FUN_ATTR int64_t sdiv64(int64_t x, int64_t y) {
  int64_t q = x / y;
  int64_t r = x % y;

  return q - ((r != 0 && r < 0 != y < 0) ? 1 : 0);
}

SCALAR_FUN_ATTR int8_t sdiv_up8(int8_t x, int8_t y) {
  return sdiv8(x + y - 1, y);
}

SCALAR_FUN_ATTR int16_t sdiv_up16(int16_t x, int16_t y) {
  return sdiv16(x + y - 1, y);
}

SCALAR_FUN_ATTR int32_t sdiv_up32(int32_t x, int32_t y) {
  return sdiv32(x + y - 1, y);
}

SCALAR_FUN_ATTR int64_t sdiv_up64(int64_t x, int64_t y) {
  return sdiv64(x + y - 1, y);
}

SCALAR_FUN_ATTR int8_t smod8(int8_t x, int8_t y) {
  int8_t r = x % y;

  return r + (r == 0 || (x > 0 && y > 0) || (x < 0 && y < 0) ? 0 : y);
}

SCALAR_FUN_ATTR int16_t smod16(int16_t x, int16_t y) {
  int16_t r = x % y;

  return r + (r == 0 || (x > 0 && y > 0) || (x < 0 && y < 0) ? 0 : y);
}

SCALAR_FUN_ATTR int32_t smod32(int32_t x, int32_t y) {
  int32_t r = x % y;

  return r + (r == 0 || (x > 0 && y > 0) || (x < 0 && y < 0) ? 0 : y);
}

SCALAR_FUN_ATTR int64_t smod64(int64_t x, int64_t y) {
  int64_t r = x % y;

  return r + (r == 0 || (x > 0 && y > 0) || (x < 0 && y < 0) ? 0 : y);
}

SCALAR_FUN_ATTR int8_t sdiv_safe8(int8_t x, int8_t y) {
  return y == 0 ? 0 : sdiv8(x, y);
}

SCALAR_FUN_ATTR int16_t sdiv_safe16(int16_t x, int16_t y) {
  return y == 0 ? 0 : sdiv16(x, y);
}

SCALAR_FUN_ATTR int32_t sdiv_safe32(int32_t x, int32_t y) {
  return y == 0 ? 0 : sdiv32(x, y);
}

SCALAR_FUN_ATTR int64_t sdiv_safe64(int64_t x, int64_t y) {
  return y == 0 ? 0 : sdiv64(x, y);
}

SCALAR_FUN_ATTR int8_t sdiv_up_safe8(int8_t x, int8_t y) {
  return sdiv_safe8(x + y - 1, y);
}

SCALAR_FUN_ATTR int16_t sdiv_up_safe16(int16_t x, int16_t y) {
  return sdiv_safe16(x + y - 1, y);
}

SCALAR_FUN_ATTR int32_t sdiv_up_safe32(int32_t x, int32_t y) {
  return sdiv_safe32(x + y - 1, y);
}

SCALAR_FUN_ATTR int64_t sdiv_up_safe64(int64_t x, int64_t y) {
  return sdiv_safe64(x + y - 1, y);
}

SCALAR_FUN_ATTR int8_t smod_safe8(int8_t x, int8_t y) {
  return y == 0 ? 0 : smod8(x, y);
}

SCALAR_FUN_ATTR int16_t smod_safe16(int16_t x, int16_t y) {
  return y == 0 ? 0 : smod16(x, y);
}

SCALAR_FUN_ATTR int32_t smod_safe32(int32_t x, int32_t y) {
  return y == 0 ? 0 : smod32(x, y);
}

SCALAR_FUN_ATTR int64_t smod_safe64(int64_t x, int64_t y) {
  return y == 0 ? 0 : smod64(x, y);
}

SCALAR_FUN_ATTR int8_t squot8(int8_t x, int8_t y) {
  return x / y;
}

SCALAR_FUN_ATTR int16_t squot16(int16_t x, int16_t y) {
  return x / y;
}

SCALAR_FUN_ATTR int32_t squot32(int32_t x, int32_t y) {
  return x / y;
}

SCALAR_FUN_ATTR int64_t squot64(int64_t x, int64_t y) {
  return x / y;
}

SCALAR_FUN_ATTR int8_t srem8(int8_t x, int8_t y) {
  return x % y;
}

SCALAR_FUN_ATTR int16_t srem16(int16_t x, int16_t y) {
  return x % y;
}

SCALAR_FUN_ATTR int32_t srem32(int32_t x, int32_t y) {
  return x % y;
}

SCALAR_FUN_ATTR int64_t srem64(int64_t x, int64_t y) {
  return x % y;
}

SCALAR_FUN_ATTR int8_t squot_safe8(int8_t x, int8_t y) {
  return y == 0 ? 0 : x / y;
}

SCALAR_FUN_ATTR int16_t squot_safe16(int16_t x, int16_t y) {
  return y == 0 ? 0 : x / y;
}

SCALAR_FUN_ATTR int32_t squot_safe32(int32_t x, int32_t y) {
  return y == 0 ? 0 : x / y;
}

SCALAR_FUN_ATTR int64_t squot_safe64(int64_t x, int64_t y) {
  return y == 0 ? 0 : x / y;
}

SCALAR_FUN_ATTR int8_t srem_safe8(int8_t x, int8_t y) {
  return y == 0 ? 0 : x % y;
}

SCALAR_FUN_ATTR int16_t srem_safe16(int16_t x, int16_t y) {
  return y == 0 ? 0 : x % y;
}

SCALAR_FUN_ATTR int32_t srem_safe32(int32_t x, int32_t y) {
  return y == 0 ? 0 : x % y;
}

SCALAR_FUN_ATTR int64_t srem_safe64(int64_t x, int64_t y) {
  return y == 0 ? 0 : x % y;
}

#endif

SCALAR_FUN_ATTR int8_t smin8(int8_t x, int8_t y) {
  return x < y ? x : y;
}

SCALAR_FUN_ATTR int16_t smin16(int16_t x, int16_t y) {
  return x < y ? x : y;
}

SCALAR_FUN_ATTR int32_t smin32(int32_t x, int32_t y) {
  return x < y ? x : y;
}

SCALAR_FUN_ATTR int64_t smin64(int64_t x, int64_t y) {
  return x < y ? x : y;
}

SCALAR_FUN_ATTR uint8_t umin8(uint8_t x, uint8_t y) {
  return x < y ? x : y;
}

SCALAR_FUN_ATTR uint16_t umin16(uint16_t x, uint16_t y) {
  return x < y ? x : y;
}

SCALAR_FUN_ATTR uint32_t umin32(uint32_t x, uint32_t y) {
  return x < y ? x : y;
}

SCALAR_FUN_ATTR uint64_t umin64(uint64_t x, uint64_t y) {
  return x < y ? x : y;
}

SCALAR_FUN_ATTR int8_t smax8(int8_t x, int8_t y) {
  return x < y ? y : x;
}

SCALAR_FUN_ATTR int16_t smax16(int16_t x, int16_t y) {
  return x < y ? y : x;
}

SCALAR_FUN_ATTR int32_t smax32(int32_t x, int32_t y) {
  return x < y ? y : x;
}

SCALAR_FUN_ATTR int64_t smax64(int64_t x, int64_t y) {
  return x < y ? y : x;
}

SCALAR_FUN_ATTR uint8_t umax8(uint8_t x, uint8_t y) {
  return x < y ? y : x;
}

SCALAR_FUN_ATTR uint16_t umax16(uint16_t x, uint16_t y) {
  return x < y ? y : x;
}

SCALAR_FUN_ATTR uint32_t umax32(uint32_t x, uint32_t y) {
  return x < y ? y : x;
}

SCALAR_FUN_ATTR uint64_t umax64(uint64_t x, uint64_t y) {
  return x < y ? y : x;
}

SCALAR_FUN_ATTR uint8_t shl8(uint8_t x, uint8_t y) {
  return (uint8_t)(x << y);
}

SCALAR_FUN_ATTR uint16_t shl16(uint16_t x, uint16_t y) {
  return (uint16_t)(x << y);
}

SCALAR_FUN_ATTR uint32_t shl32(uint32_t x, uint32_t y) {
  return x << y;
}

SCALAR_FUN_ATTR uint64_t shl64(uint64_t x, uint64_t y) {
  return x << y;
}

SCALAR_FUN_ATTR uint8_t lshr8(uint8_t x, uint8_t y) {
  return x >> y;
}

SCALAR_FUN_ATTR uint16_t lshr16(uint16_t x, uint16_t y) {
  return x >> y;
}

SCALAR_FUN_ATTR uint32_t lshr32(uint32_t x, uint32_t y) {
  return x >> y;
}

SCALAR_FUN_ATTR uint64_t lshr64(uint64_t x, uint64_t y) {
  return x >> y;
}

SCALAR_FUN_ATTR int8_t ashr8(int8_t x, int8_t y) {
  return x >> y;
}

SCALAR_FUN_ATTR int16_t ashr16(int16_t x, int16_t y) {
  return x >> y;
}

SCALAR_FUN_ATTR int32_t ashr32(int32_t x, int32_t y) {
  return x >> y;
}

SCALAR_FUN_ATTR int64_t ashr64(int64_t x, int64_t y) {
  return x >> y;
}

SCALAR_FUN_ATTR uint8_t and8(uint8_t x, uint8_t y) {
  return x & y;
}

SCALAR_FUN_ATTR uint16_t and16(uint16_t x, uint16_t y) {
  return x & y;
}

SCALAR_FUN_ATTR uint32_t and32(uint32_t x, uint32_t y) {
  return x & y;
}

SCALAR_FUN_ATTR uint64_t and64(uint64_t x, uint64_t y) {
  return x & y;
}

SCALAR_FUN_ATTR uint8_t or8(uint8_t x, uint8_t y) {
  return x | y;
}

SCALAR_FUN_ATTR uint16_t or16(uint16_t x, uint16_t y) {
  return x | y;
}

SCALAR_FUN_ATTR uint32_t or32(uint32_t x, uint32_t y) {
  return x | y;
}

SCALAR_FUN_ATTR uint64_t or64(uint64_t x, uint64_t y) {
  return x | y;
}

SCALAR_FUN_ATTR uint8_t xor8(uint8_t x, uint8_t y) {
  return x ^ y;
}

SCALAR_FUN_ATTR uint16_t xor16(uint16_t x, uint16_t y) {
  return x ^ y;
}

SCALAR_FUN_ATTR uint32_t xor32(uint32_t x, uint32_t y) {
  return x ^ y;
}

SCALAR_FUN_ATTR uint64_t xor64(uint64_t x, uint64_t y) {
  return x ^ y;
}

SCALAR_FUN_ATTR bool ult8(uint8_t x, uint8_t y) {
  return x < y;
}

SCALAR_FUN_ATTR bool ult16(uint16_t x, uint16_t y) {
  return x < y;
}

SCALAR_FUN_ATTR bool ult32(uint32_t x, uint32_t y) {
  return x < y;
}

SCALAR_FUN_ATTR bool ult64(uint64_t x, uint64_t y) {
  return x < y;
}

SCALAR_FUN_ATTR bool ule8(uint8_t x, uint8_t y) {
  return x <= y;
}

SCALAR_FUN_ATTR bool ule16(uint16_t x, uint16_t y) {
  return x <= y;
}

SCALAR_FUN_ATTR bool ule32(uint32_t x, uint32_t y) {
  return x <= y;
}

SCALAR_FUN_ATTR bool ule64(uint64_t x, uint64_t y) {
  return x <= y;
}

SCALAR_FUN_ATTR bool slt8(int8_t x, int8_t y) {
  return x < y;
}

SCALAR_FUN_ATTR bool slt16(int16_t x, int16_t y) {
  return x < y;
}

SCALAR_FUN_ATTR bool slt32(int32_t x, int32_t y) {
  return x < y;
}

SCALAR_FUN_ATTR bool slt64(int64_t x, int64_t y) {
  return x < y;
}

SCALAR_FUN_ATTR bool sle8(int8_t x, int8_t y) {
  return x <= y;
}

SCALAR_FUN_ATTR bool sle16(int16_t x, int16_t y) {
  return x <= y;
}

SCALAR_FUN_ATTR bool sle32(int32_t x, int32_t y) {
  return x <= y;
}

SCALAR_FUN_ATTR bool sle64(int64_t x, int64_t y) {
  return x <= y;
}

SCALAR_FUN_ATTR uint8_t pow8(uint8_t x, uint8_t y) {
  uint8_t res = 1, rem = y;

  while (rem != 0) {
    if (rem & 1)
      res *= x;
    rem >>= 1;
    x *= x;
  }
  return res;
}

SCALAR_FUN_ATTR uint16_t pow16(uint16_t x, uint16_t y) {
  uint16_t res = 1, rem = y;

  while (rem != 0) {
    if (rem & 1)
      res *= x;
    rem >>= 1;
    x *= x;
  }
  return res;
}

SCALAR_FUN_ATTR uint32_t pow32(uint32_t x, uint32_t y) {
  uint32_t res = 1, rem = y;

  while (rem != 0) {
    if (rem & 1)
      res *= x;
    rem >>= 1;
    x *= x;
  }
  return res;
}

SCALAR_FUN_ATTR uint64_t pow64(uint64_t x, uint64_t y) {
  uint64_t res = 1, rem = y;

  while (rem != 0) {
    if (rem & 1)
      res *= x;
    rem >>= 1;
    x *= x;
  }
  return res;
}

SCALAR_FUN_ATTR bool itob_i8_bool(int8_t x) {
  return x != 0;
}

SCALAR_FUN_ATTR bool itob_i16_bool(int16_t x) {
  return x != 0;
}

SCALAR_FUN_ATTR bool itob_i32_bool(int32_t x) {
  return x != 0;
}

SCALAR_FUN_ATTR bool itob_i64_bool(int64_t x) {
  return x != 0;
}

SCALAR_FUN_ATTR int8_t btoi_bool_i8(bool x) {
  return x;
}

SCALAR_FUN_ATTR int16_t btoi_bool_i16(bool x) {
  return x;
}

SCALAR_FUN_ATTR int32_t btoi_bool_i32(bool x) {
  return x;
}

SCALAR_FUN_ATTR int64_t btoi_bool_i64(bool x) {
  return x;
}

#define sext_i8_i8(x) ((int8_t) (int8_t) (x))
#define sext_i8_i16(x) ((int16_t) (int8_t) (x))
#define sext_i8_i32(x) ((int32_t) (int8_t) (x))
#define sext_i8_i64(x) ((int64_t) (int8_t) (x))
#define sext_i16_i8(x) ((int8_t) (int16_t) (x))
#define sext_i16_i16(x) ((int16_t) (int16_t) (x))
#define sext_i16_i32(x) ((int32_t) (int16_t) (x))
#define sext_i16_i64(x) ((int64_t) (int16_t) (x))
#define sext_i32_i8(x) ((int8_t) (int32_t) (x))
#define sext_i32_i16(x) ((int16_t) (int32_t) (x))
#define sext_i32_i32(x) ((int32_t) (int32_t) (x))
#define sext_i32_i64(x) ((int64_t) (int32_t) (x))
#define sext_i64_i8(x) ((int8_t) (int64_t) (x))
#define sext_i64_i16(x) ((int16_t) (int64_t) (x))
#define sext_i64_i32(x) ((int32_t) (int64_t) (x))
#define sext_i64_i64(x) ((int64_t) (int64_t) (x))
#define zext_i8_i8(x) ((int8_t) (uint8_t) (x))
#define zext_i8_i16(x) ((int16_t) (uint8_t) (x))
#define zext_i8_i32(x) ((int32_t) (uint8_t) (x))
#define zext_i8_i64(x) ((int64_t) (uint8_t) (x))
#define zext_i16_i8(x) ((int8_t) (uint16_t) (x))
#define zext_i16_i16(x) ((int16_t) (uint16_t) (x))
#define zext_i16_i32(x) ((int32_t) (uint16_t) (x))
#define zext_i16_i64(x) ((int64_t) (uint16_t) (x))
#define zext_i32_i8(x) ((int8_t) (uint32_t) (x))
#define zext_i32_i16(x) ((int16_t) (uint32_t) (x))
#define zext_i32_i32(x) ((int32_t) (uint32_t) (x))
#define zext_i32_i64(x) ((int64_t) (uint32_t) (x))
#define zext_i64_i8(x) ((int8_t) (uint64_t) (x))
#define zext_i64_i16(x) ((int16_t) (uint64_t) (x))
#define zext_i64_i32(x) ((int32_t) (uint64_t) (x))
#define zext_i64_i64(x) ((int64_t) (uint64_t) (x))

SCALAR_FUN_ATTR int8_t abs8(int8_t x) {
  return (int8_t)abs(x);
}

SCALAR_FUN_ATTR int16_t abs16(int16_t x) {
  return (int16_t)abs(x);
}

SCALAR_FUN_ATTR int32_t abs32(int32_t x) {
  return abs(x);
}

SCALAR_FUN_ATTR int64_t abs64(int64_t x) {
#if defined(__OPENCL_VERSION__) || defined(ISPC)
  return abs(x);
#else
  return llabs(x);
#endif
}

#if defined(__OPENCL_VERSION__)
SCALAR_FUN_ATTR int32_t futrts_popc8(int8_t x) {
  return popcount(x);
}

SCALAR_FUN_ATTR int32_t futrts_popc16(int16_t x) {
  return popcount(x);
}

SCALAR_FUN_ATTR int32_t futrts_popc32(int32_t x) {
  return popcount(x);
}

SCALAR_FUN_ATTR int32_t futrts_popc64(int64_t x) {
  return popcount(x);
}
#elif defined(__CUDA_ARCH__)

SCALAR_FUN_ATTR int32_t futrts_popc8(int8_t x) {
  return __popc(zext_i8_i32(x));
}

SCALAR_FUN_ATTR int32_t futrts_popc16(int16_t x) {
  return __popc(zext_i16_i32(x));
}

SCALAR_FUN_ATTR int32_t futrts_popc32(int32_t x) {
  return __popc(x);
}

SCALAR_FUN_ATTR int32_t futrts_popc64(int64_t x) {
  return __popcll(x);
}

#else // Not OpenCL or CUDA, but plain C.

SCALAR_FUN_ATTR int32_t futrts_popc8(uint8_t x) {
  int c = 0;
  for (; x; ++c) { x &= x - 1; }
  return c;
}

SCALAR_FUN_ATTR int32_t futrts_popc16(uint16_t x) {
  int c = 0;
  for (; x; ++c) { x &= x - 1; }
  return c;
}

SCALAR_FUN_ATTR int32_t futrts_popc32(uint32_t x) {
  int c = 0;
  for (; x; ++c) { x &= x - 1; }
  return c;
}

SCALAR_FUN_ATTR int32_t futrts_popc64(uint64_t x) {
  int c = 0;
  for (; x; ++c) { x &= x - 1; }
  return c;
}
#endif

#if defined(__OPENCL_VERSION__)
SCALAR_FUN_ATTR uint8_t  futrts_umul_hi8 ( uint8_t a,  uint8_t b) { return mul_hi(a, b); }
SCALAR_FUN_ATTR uint16_t futrts_umul_hi16(uint16_t a, uint16_t b) { return mul_hi(a, b); }
SCALAR_FUN_ATTR uint32_t futrts_umul_hi32(uint32_t a, uint32_t b) { return mul_hi(a, b); }
SCALAR_FUN_ATTR uint64_t futrts_umul_hi64(uint64_t a, uint64_t b) { return mul_hi(a, b); }
SCALAR_FUN_ATTR uint8_t  futrts_smul_hi8 ( int8_t a,  int8_t b) { return mul_hi(a, b); }
SCALAR_FUN_ATTR uint16_t futrts_smul_hi16(int16_t a, int16_t b) { return mul_hi(a, b); }
SCALAR_FUN_ATTR uint32_t futrts_smul_hi32(int32_t a, int32_t b) { return mul_hi(a, b); }
SCALAR_FUN_ATTR uint64_t futrts_smul_hi64(int64_t a, int64_t b) { return mul_hi(a, b); }
#elif defined(__CUDA_ARCH__)
SCALAR_FUN_ATTR  uint8_t futrts_umul_hi8(uint8_t a, uint8_t b) { return ((uint16_t)a) * ((uint16_t)b) >> 8; }
SCALAR_FUN_ATTR uint16_t futrts_umul_hi16(uint16_t a, uint16_t b) { return ((uint32_t)a) * ((uint32_t)b) >> 16; }
SCALAR_FUN_ATTR uint32_t futrts_umul_hi32(uint32_t a, uint32_t b) { return __umulhi(a, b); }
SCALAR_FUN_ATTR uint64_t futrts_umul_hi64(uint64_t a, uint64_t b) { return __umul64hi(a, b); }
SCALAR_FUN_ATTR  uint8_t futrts_smul_hi8 ( int8_t a, int8_t b) { return ((int16_t)a) * ((int16_t)b) >> 8; }
SCALAR_FUN_ATTR uint16_t futrts_smul_hi16(int16_t a, int16_t b) { return ((int32_t)a) * ((int32_t)b) >> 16; }
SCALAR_FUN_ATTR uint32_t futrts_smul_hi32(int32_t a, int32_t b) { return __mulhi(a, b); }
SCALAR_FUN_ATTR uint64_t futrts_smul_hi64(int64_t a, int64_t b) { return __mul64hi(a, b); }
#elif ISPC
SCALAR_FUN_ATTR uint8_t futrts_umul_hi8(uint8_t a, uint8_t b) { return ((uint16_t)a) * ((uint16_t)b) >> 8; }
SCALAR_FUN_ATTR uint16_t futrts_umul_hi16(uint16_t a, uint16_t b) { return ((uint32_t)a) * ((uint32_t)b) >> 16; }
SCALAR_FUN_ATTR uint32_t futrts_umul_hi32(uint32_t a, uint32_t b) { return ((uint64_t)a) * ((uint64_t)b) >> 32; }
SCALAR_FUN_ATTR uint64_t futrts_umul_hi64(uint64_t a, uint64_t b) {
  uint64_t ah = a >> 32;
  uint64_t al = a & 0xffffffff;
  uint64_t bh = b >> 32;
  uint64_t bl = b & 0xffffffff;

  uint64_t p1 = al * bl;
  uint64_t p2 = al * bh;
  uint64_t p3 = ah * bl;
  uint64_t p4 = ah * bh;

  uint64_t p1h = p1 >> 32;
  uint64_t p2h = p2 >> 32;
  uint64_t p3h = p3 >> 32;
  uint64_t p2l = p2 & 0xffffffff;
  uint64_t p3l = p3 & 0xffffffff;

  uint64_t l = p1h + p2l + p3l;
  uint64_t m = (p2 >> 32) + (p3 >> 32);
  uint64_t h = (l >> 32) + m + p4;

  return h;
}
SCALAR_FUN_ATTR  int8_t futrts_smul_hi8 ( int8_t a,  int8_t b) { return ((uint16_t)a) * ((uint16_t)b) >> 8; }
SCALAR_FUN_ATTR int16_t futrts_smul_hi16(int16_t a, int16_t b) { return ((uint32_t)a) * ((uint32_t)b) >> 16; }
SCALAR_FUN_ATTR int32_t futrts_smul_hi32(int32_t a, int32_t b) { return ((uint64_t)a) * ((uint64_t)b) >> 32; }
SCALAR_FUN_ATTR int64_t futrts_smul_hi64(int64_t a, int64_t b) {
  uint64_t ah = a >> 32;
  uint64_t al = a & 0xffffffff;
  uint64_t bh = b >> 32;
  uint64_t bl = b & 0xffffffff;

  uint64_t p1 =  al * bl;
  int64_t  p2 = al * bh;
  int64_t  p3 = ah * bl;
  uint64_t p4 =  ah * bh;

  uint64_t p1h = p1 >> 32;
  uint64_t p2h = p2 >> 32;
  uint64_t p3h = p3 >> 32;
  uint64_t p2l = p2 & 0xffffffff;
  uint64_t p3l = p3 & 0xffffffff;

  uint64_t l = p1h + p2l + p3l;
  uint64_t m = (p2 >> 32) + (p3 >> 32);
  uint64_t h = (l >> 32) + m + p4;

  return h;
}

#else // Not OpenCL, ISPC, or CUDA, but plain C.
SCALAR_FUN_ATTR uint8_t futrts_umul_hi8(uint8_t a, uint8_t b) { return ((uint16_t)a) * ((uint16_t)b) >> 8; }
SCALAR_FUN_ATTR uint16_t futrts_umul_hi16(uint16_t a, uint16_t b) { return ((uint32_t)a) * ((uint32_t)b) >> 16; }
SCALAR_FUN_ATTR uint32_t futrts_umul_hi32(uint32_t a, uint32_t b) { return ((uint64_t)a) * ((uint64_t)b) >> 32; }
SCALAR_FUN_ATTR uint64_t futrts_umul_hi64(uint64_t a, uint64_t b) { return ((__uint128_t)a) * ((__uint128_t)b) >> 64; }
SCALAR_FUN_ATTR int8_t futrts_smul_hi8(int8_t a, int8_t b) { return ((int16_t)a) * ((int16_t)b) >> 8; }
SCALAR_FUN_ATTR int16_t futrts_smul_hi16(int16_t a, int16_t b) { return ((int32_t)a) * ((int32_t)b) >> 16; }
SCALAR_FUN_ATTR int32_t futrts_smul_hi32(int32_t a, int32_t b) { return ((int64_t)a) * ((int64_t)b) >> 32; }
SCALAR_FUN_ATTR int64_t futrts_smul_hi64(int64_t a, int64_t b) { return ((__int128_t)a) * ((__int128_t)b) >> 64; }
#endif

#if defined(__OPENCL_VERSION__)
SCALAR_FUN_ATTR  uint8_t futrts_umad_hi8 ( uint8_t a,  uint8_t b,  uint8_t c) { return mad_hi(a, b, c); }
SCALAR_FUN_ATTR uint16_t futrts_umad_hi16(uint16_t a, uint16_t b, uint16_t c) { return mad_hi(a, b, c); }
SCALAR_FUN_ATTR uint32_t futrts_umad_hi32(uint32_t a, uint32_t b, uint32_t c) { return mad_hi(a, b, c); }
SCALAR_FUN_ATTR uint64_t futrts_umad_hi64(uint64_t a, uint64_t b, uint64_t c) { return mad_hi(a, b, c); }
SCALAR_FUN_ATTR  uint8_t futrts_smad_hi8( int8_t a,  int8_t b,   int8_t c) { return mad_hi(a, b, c); }
SCALAR_FUN_ATTR uint16_t futrts_smad_hi16(int16_t a, int16_t b, int16_t c) { return mad_hi(a, b, c); }
SCALAR_FUN_ATTR uint32_t futrts_smad_hi32(int32_t a, int32_t b, int32_t c) { return mad_hi(a, b, c); }
SCALAR_FUN_ATTR uint64_t futrts_smad_hi64(int64_t a, int64_t b, int64_t c) { return mad_hi(a, b, c); }
#else // Not OpenCL

SCALAR_FUN_ATTR  uint8_t futrts_umad_hi8( uint8_t a,  uint8_t b,  uint8_t c) { return futrts_umul_hi8(a, b) + c; }
SCALAR_FUN_ATTR uint16_t futrts_umad_hi16(uint16_t a, uint16_t b, uint16_t c) { return futrts_umul_hi16(a, b) + c; }
SCALAR_FUN_ATTR uint32_t futrts_umad_hi32(uint32_t a, uint32_t b, uint32_t c) { return futrts_umul_hi32(a, b) + c; }
SCALAR_FUN_ATTR uint64_t futrts_umad_hi64(uint64_t a, uint64_t b, uint64_t c) { return futrts_umul_hi64(a, b) + c; }
SCALAR_FUN_ATTR  uint8_t futrts_smad_hi8 ( int8_t a,  int8_t b,  int8_t c) { return futrts_smul_hi8(a, b) + c; }
SCALAR_FUN_ATTR uint16_t futrts_smad_hi16(int16_t a, int16_t b, int16_t c) { return futrts_smul_hi16(a, b) + c; }
SCALAR_FUN_ATTR uint32_t futrts_smad_hi32(int32_t a, int32_t b, int32_t c) { return futrts_smul_hi32(a, b) + c; }
SCALAR_FUN_ATTR uint64_t futrts_smad_hi64(int64_t a, int64_t b, int64_t c) { return futrts_smul_hi64(a, b) + c; }
#endif

#if defined(__OPENCL_VERSION__)
SCALAR_FUN_ATTR int32_t futrts_clzz8(int8_t x) {
  return clz(x);
}

SCALAR_FUN_ATTR int32_t futrts_clzz16(int16_t x) {
  return clz(x);
}

SCALAR_FUN_ATTR int32_t futrts_clzz32(int32_t x) {
  return clz(x);
}

SCALAR_FUN_ATTR int32_t futrts_clzz64(int64_t x) {
  return clz(x);
}

#elif defined(__CUDA_ARCH__)

SCALAR_FUN_ATTR int32_t futrts_clzz8(int8_t x) {
  return __clz(zext_i8_i32(x)) - 24;
}

SCALAR_FUN_ATTR int32_t futrts_clzz16(int16_t x) {
  return __clz(zext_i16_i32(x)) - 16;
}

SCALAR_FUN_ATTR int32_t futrts_clzz32(int32_t x) {
  return __clz(x);
}

SCALAR_FUN_ATTR int32_t futrts_clzz64(int64_t x) {
  return __clzll(x);
}

#elif ISPC

SCALAR_FUN_ATTR int32_t futrts_clzz8(int8_t x) {
  return count_leading_zeros((int32_t)(uint8_t)x)-24;
}

SCALAR_FUN_ATTR int32_t futrts_clzz16(int16_t x) {
  return count_leading_zeros((int32_t)(uint16_t)x)-16;
}

SCALAR_FUN_ATTR int32_t futrts_clzz32(int32_t x) {
  return count_leading_zeros(x);
}

SCALAR_FUN_ATTR int32_t futrts_clzz64(int64_t x) {
  return count_leading_zeros(x);
}

#else // Not OpenCL, ISPC or CUDA, but plain C.

SCALAR_FUN_ATTR int32_t futrts_clzz8(int8_t x) {
  return x == 0 ? 8 : __builtin_clz((uint32_t)zext_i8_i32(x)) - 24;
}

SCALAR_FUN_ATTR int32_t futrts_clzz16(int16_t x) {
  return x == 0 ? 16 : __builtin_clz((uint32_t)zext_i16_i32(x)) - 16;
}

SCALAR_FUN_ATTR int32_t futrts_clzz32(int32_t x) {
  return x == 0 ? 32 : __builtin_clz((uint32_t)x);
}

SCALAR_FUN_ATTR int32_t futrts_clzz64(int64_t x) {
  return x == 0 ? 64 : __builtin_clzll((uint64_t)x);
}
#endif

#if defined(__OPENCL_VERSION__)
SCALAR_FUN_ATTR int32_t futrts_ctzz8(int8_t x) {
  int i = 0;
  for (; i < 8 && (x & 1) == 0; i++, x >>= 1)
    ;
  return i;
}

SCALAR_FUN_ATTR int32_t futrts_ctzz16(int16_t x) {
  int i = 0;
  for (; i < 16 && (x & 1) == 0; i++, x >>= 1)
    ;
  return i;
}

SCALAR_FUN_ATTR int32_t futrts_ctzz32(int32_t x) {
  int i = 0;
  for (; i < 32 && (x & 1) == 0; i++, x >>= 1)
    ;
  return i;
}

SCALAR_FUN_ATTR int32_t futrts_ctzz64(int64_t x) {
  int i = 0;
  for (; i < 64 && (x & 1) == 0; i++, x >>= 1)
    ;
  return i;
}

#elif defined(__CUDA_ARCH__)

SCALAR_FUN_ATTR int32_t futrts_ctzz8(int8_t x) {
  int y = __ffs(x);
  return y == 0 ? 8 : y - 1;
}

SCALAR_FUN_ATTR int32_t futrts_ctzz16(int16_t x) {
  int y = __ffs(x);
  return y == 0 ? 16 : y - 1;
}

SCALAR_FUN_ATTR int32_t futrts_ctzz32(int32_t x) {
  int y = __ffs(x);
  return y == 0 ? 32 : y - 1;
}

SCALAR_FUN_ATTR int32_t futrts_ctzz64(int64_t x) {
  int y = __ffsll(x);
  return y == 0 ? 64 : y - 1;
}

#elif ISPC

SCALAR_FUN_ATTR int32_t futrts_ctzz8(int8_t x) {
  return x == 0 ? 8 : count_trailing_zeros((int32_t)x);
}

SCALAR_FUN_ATTR int32_t futrts_ctzz16(int16_t x) {
  return x == 0 ? 16 : count_trailing_zeros((int32_t)x);
}

SCALAR_FUN_ATTR int32_t futrts_ctzz32(int32_t x) {
  return count_trailing_zeros(x);
}

SCALAR_FUN_ATTR int32_t futrts_ctzz64(int64_t x) {
  return count_trailing_zeros(x);
}

#else // Not OpenCL or CUDA, but plain C.

SCALAR_FUN_ATTR int32_t futrts_ctzz8(int8_t x) {
  return x == 0 ? 8 : __builtin_ctz((uint32_t)x);
}

SCALAR_FUN_ATTR int32_t futrts_ctzz16(int16_t x) {
  return x == 0 ? 16 : __builtin_ctz((uint32_t)x);
}

SCALAR_FUN_ATTR int32_t futrts_ctzz32(int32_t x) {
  return x == 0 ? 32 : __builtin_ctz((uint32_t)x);
}

SCALAR_FUN_ATTR int32_t futrts_ctzz64(int64_t x) {
  return x == 0 ? 64 : __builtin_ctzll((uint64_t)x);
}
#endif

SCALAR_FUN_ATTR float fdiv32(float x, float y) {
  return x / y;
}

SCALAR_FUN_ATTR float fadd32(float x, float y) {
  return x + y;
}

SCALAR_FUN_ATTR float fsub32(float x, float y) {
  return x - y;
}

SCALAR_FUN_ATTR float fmul32(float x, float y) {
  return x * y;
}

SCALAR_FUN_ATTR bool cmplt32(float x, float y) {
  return x < y;
}

SCALAR_FUN_ATTR bool cmple32(float x, float y) {
  return x <= y;
}

SCALAR_FUN_ATTR float sitofp_i8_f32(int8_t x) {
  return (float) x;
}

SCALAR_FUN_ATTR float sitofp_i16_f32(int16_t x) {
  return (float) x;
}

SCALAR_FUN_ATTR float sitofp_i32_f32(int32_t x) {
  return (float) x;
}

SCALAR_FUN_ATTR float sitofp_i64_f32(int64_t x) {
  return (float) x;
}

SCALAR_FUN_ATTR float uitofp_i8_f32(uint8_t x) {
  return (float) x;
}

SCALAR_FUN_ATTR float uitofp_i16_f32(uint16_t x) {
  return (float) x;
}

SCALAR_FUN_ATTR float uitofp_i32_f32(uint32_t x) {
  return (float) x;
}

SCALAR_FUN_ATTR float uitofp_i64_f32(uint64_t x) {
  return (float) x;
}

#ifdef __OPENCL_VERSION__
SCALAR_FUN_ATTR float fabs32(float x) {
  return fabs(x);
}

SCALAR_FUN_ATTR float fmax32(float x, float y) {
  return fmax(x, y);
}

SCALAR_FUN_ATTR float fmin32(float x, float y) {
  return fmin(x, y);
}

SCALAR_FUN_ATTR float fpow32(float x, float y) {
  return pow(x, y);
}

#elif ISPC

SCALAR_FUN_ATTR float fabs32(float x) {
  return abs(x);
}

SCALAR_FUN_ATTR float fmax32(float x, float y) {
  return isnan(x) ? y : isnan(y) ? x : max(x, y);
}

SCALAR_FUN_ATTR float fmin32(float x, float y) {
  return isnan(x) ? y : isnan(y) ? x : min(x, y);
}

SCALAR_FUN_ATTR float fpow32(float a, float b) {
  float ret;
  foreach_active (i) {
      uniform float r = __stdlib_powf(extract(a, i), extract(b, i));
      ret = insert(ret, i, r);
  }
  return ret;
}

#else // Not OpenCL, but CUDA or plain C.

SCALAR_FUN_ATTR float fabs32(float x) {
  return fabsf(x);
}

SCALAR_FUN_ATTR float fmax32(float x, float y) {
  return fmaxf(x, y);
}

SCALAR_FUN_ATTR float fmin32(float x, float y) {
  return fminf(x, y);
}

SCALAR_FUN_ATTR float fpow32(float x, float y) {
  return powf(x, y);
}
#endif

SCALAR_FUN_ATTR bool futrts_isnan32(float x) {
  return isnan(x);
}

#if ISPC

SCALAR_FUN_ATTR bool futrts_isinf32(float x) {
  return !isnan(x) && isnan(x - x);
}

SCALAR_FUN_ATTR bool futrts_isfinite32(float x) {
  return !isnan(x) && !futrts_isinf32(x);
}

#else

SCALAR_FUN_ATTR bool futrts_isinf32(float x) {
  return isinf(x);
}

#endif

SCALAR_FUN_ATTR int8_t fptosi_f32_i8(float x) {
  if (futrts_isnan32(x) || futrts_isinf32(x)) {
    return 0;
  } else {
    return (int8_t) x;
  }
}

SCALAR_FUN_ATTR int16_t fptosi_f32_i16(float x) {
  if (futrts_isnan32(x) || futrts_isinf32(x)) {
    return 0;
  } else {
    return (int16_t) x;
  }
}

SCALAR_FUN_ATTR int32_t fptosi_f32_i32(float x) {
  if (futrts_isnan32(x) || futrts_isinf32(x)) {
    return 0;
  } else {
    return (int32_t) x;
  }
}

SCALAR_FUN_ATTR int64_t fptosi_f32_i64(float x) {
  if (futrts_isnan32(x) || futrts_isinf32(x)) {
    return 0;
  } else {
    return (int64_t) x;
  };
}

SCALAR_FUN_ATTR uint8_t fptoui_f32_i8(float x) {
  if (futrts_isnan32(x) || futrts_isinf32(x)) {
    return 0;
  } else {
    return (uint8_t) (int8_t) x;
  }
}

SCALAR_FUN_ATTR uint16_t fptoui_f32_i16(float x) {
  if (futrts_isnan32(x) || futrts_isinf32(x)) {
    return 0;
  } else {
    return (uint16_t) (int16_t) x;
  }
}

SCALAR_FUN_ATTR uint32_t fptoui_f32_i32(float x) {
  if (futrts_isnan32(x) || futrts_isinf32(x)) {
    return 0;
  } else {
    return (uint32_t) (int32_t) x;
  }
}

SCALAR_FUN_ATTR uint64_t fptoui_f32_i64(float x) {
  if (futrts_isnan32(x) || futrts_isinf32(x)) {
    return 0;
  } else {
    return (uint64_t) (int64_t) x;
  }
}

SCALAR_FUN_ATTR bool ftob_f32_bool(float x) {
  return x != 0;
}

SCALAR_FUN_ATTR float btof_bool_f32(bool x) {
  return x ? 1 : 0;
}

#ifdef __OPENCL_VERSION__
SCALAR_FUN_ATTR float futrts_log32(float x) {
  return log(x);
}

SCALAR_FUN_ATTR float futrts_log2_32(float x) {
  return log2(x);
}

SCALAR_FUN_ATTR float futrts_log10_32(float x) {
  return log10(x);
}

SCALAR_FUN_ATTR float futrts_log1p_32(float x) {
  return log1p(x);
}

SCALAR_FUN_ATTR float futrts_sqrt32(float x) {
  return sqrt(x);
}

SCALAR_FUN_ATTR float futrts_cbrt32(float x) {
  return cbrt(x);
}

SCALAR_FUN_ATTR float futrts_exp32(float x) {
  return exp(x);
}

SCALAR_FUN_ATTR float futrts_cos32(float x) {
  return cos(x);
}

SCALAR_FUN_ATTR float futrts_sin32(float x) {
  return sin(x);
}

SCALAR_FUN_ATTR float futrts_tan32(float x) {
  return tan(x);
}

SCALAR_FUN_ATTR float futrts_acos32(float x) {
  return acos(x);
}

SCALAR_FUN_ATTR float futrts_asin32(float x) {
  return asin(x);
}

SCALAR_FUN_ATTR float futrts_atan32(float x) {
  return atan(x);
}

SCALAR_FUN_ATTR float futrts_cosh32(float x) {
  return cosh(x);
}

SCALAR_FUN_ATTR float futrts_sinh32(float x) {
  return sinh(x);
}

SCALAR_FUN_ATTR float futrts_tanh32(float x) {
  return tanh(x);
}

SCALAR_FUN_ATTR float futrts_acosh32(float x) {
  return acosh(x);
}

SCALAR_FUN_ATTR float futrts_asinh32(float x) {
  return asinh(x);
}

SCALAR_FUN_ATTR float futrts_atanh32(float x) {
  return atanh(x);
}

SCALAR_FUN_ATTR float futrts_atan2_32(float x, float y) {
  return atan2(x, y);
}

SCALAR_FUN_ATTR float futrts_hypot32(float x, float y) {
  return hypot(x, y);
}

SCALAR_FUN_ATTR float futrts_gamma32(float x) {
  return tgamma(x);
}

SCALAR_FUN_ATTR float futrts_lgamma32(float x) {
  return lgamma(x);
}

SCALAR_FUN_ATTR float futrts_erf32(float x) {
  return erf(x);
}

SCALAR_FUN_ATTR float futrts_erfc32(float x) {
  return erfc(x);
}

SCALAR_FUN_ATTR float fmod32(float x, float y) {
  return fmod(x, y);
}

SCALAR_FUN_ATTR float futrts_round32(float x) {
  return rint(x);
}

SCALAR_FUN_ATTR float futrts_floor32(float x) {
  return floor(x);
}

SCALAR_FUN_ATTR float futrts_ceil32(float x) {
  return ceil(x);
}

SCALAR_FUN_ATTR float futrts_nextafter32(float x, float y) {
  return nextafter(x, y);
}

SCALAR_FUN_ATTR float futrts_lerp32(float v0, float v1, float t) {
  return mix(v0, v1, t);
}

SCALAR_FUN_ATTR float futrts_ldexp32(float x, int32_t y) {
  return ldexp(x, y);
}

SCALAR_FUN_ATTR float futrts_copysign32(float x, float y) {
  return copysign(x, y);
}

SCALAR_FUN_ATTR float futrts_mad32(float a, float b, float c) {
  return mad(a, b, c);
}

SCALAR_FUN_ATTR float futrts_fma32(float a, float b, float c) {
  return fma(a, b, c);
}

#elif ISPC

SCALAR_FUN_ATTR float futrts_log32(float x) {
  return futrts_isfinite32(x) || (futrts_isinf32(x) && x < 0)? log(x) : x;
}

SCALAR_FUN_ATTR float futrts_log2_32(float x) {
  return futrts_log32(x) / log(2.0f);
}

SCALAR_FUN_ATTR float futrts_log10_32(float x) {
  return futrts_log32(x) / log(10.0f);
}

SCALAR_FUN_ATTR float futrts_log1p_32(float x) {
  if(x == -1.0f || (futrts_isinf32(x) && x > 0.0f)) return x / 0.0f;
  float y = 1.0f + x;
  float z = y - 1.0f;
  return log(y) - (z-x)/y;
}

SCALAR_FUN_ATTR float futrts_sqrt32(float x) {
  return sqrt(x);
}

extern "C" unmasked uniform float cbrtf(uniform float);
SCALAR_FUN_ATTR float futrts_cbrt32(float x) {
  float res;
  foreach_active (i) {
    uniform float r = cbrtf(extract(x, i));
    res = insert(res, i, r);
  }
  return res;
}

SCALAR_FUN_ATTR float futrts_exp32(float x) {
  return exp(x);
}

SCALAR_FUN_ATTR float futrts_cos32(float x) {
  return cos(x);
}

SCALAR_FUN_ATTR float futrts_sin32(float x) {
  return sin(x);
}

SCALAR_FUN_ATTR float futrts_tan32(float x) {
  return tan(x);
}

SCALAR_FUN_ATTR float futrts_acos32(float x) {
  return acos(x);
}

SCALAR_FUN_ATTR float futrts_asin32(float x) {
  return asin(x);
}

SCALAR_FUN_ATTR float futrts_atan32(float x) {
  return atan(x);
}

SCALAR_FUN_ATTR float futrts_cosh32(float x) {
  return (exp(x)+exp(-x)) / 2.0f;
}

SCALAR_FUN_ATTR float futrts_sinh32(float x) {
  return (exp(x)-exp(-x)) / 2.0f;
}

SCALAR_FUN_ATTR float futrts_tanh32(float x) {
  return futrts_sinh32(x)/futrts_cosh32(x);
}

SCALAR_FUN_ATTR float futrts_acosh32(float x) {
  float f = x+sqrt(x*x-1);
  if(futrts_isfinite32(f)) return log(f);
  return f;
}

SCALAR_FUN_ATTR float futrts_asinh32(float x) {
  float f = x+sqrt(x*x+1);
  if(futrts_isfinite32(f)) return log(f);
  return f;

}

SCALAR_FUN_ATTR float futrts_atanh32(float x) {
  float f = (1+x)/(1-x);
  if(futrts_isfinite32(f)) return log(f)/2.0f;
  return f;

}

SCALAR_FUN_ATTR float futrts_atan2_32(float x, float y) {
  return (x == 0.0f && y == 0.0f) ? 0.0f : atan2(x, y);
}

SCALAR_FUN_ATTR float futrts_hypot32(float x, float y) {
  if (futrts_isfinite32(x) && futrts_isfinite32(y)) {
    x = abs(x);
    y = abs(y);
    float a;
    float b;
    if (x >= y){
        a = x;
        b = y;
    } else {
        a = y;
        b = x;
    }
    if(b == 0){
      return a;
    }

    int e;
    float an;
    float bn;
    an = frexp (a, &e);
    bn = ldexp (b, - e);
    float cn;
    cn = sqrt (an * an + bn * bn);
    return ldexp (cn, e);
  } else {
    if (futrts_isinf32(x) || futrts_isinf32(y)) return INFINITY;
    else return x + y;
  }

}

extern "C" unmasked uniform float tgammaf(uniform float x);
SCALAR_FUN_ATTR float futrts_gamma32(float x) {
  float res;
  foreach_active (i) {
    uniform float r = tgammaf(extract(x, i));
    res = insert(res, i, r);
  }
  return res;
}

extern "C" unmasked uniform float lgammaf(uniform float x);
SCALAR_FUN_ATTR float futrts_lgamma32(float x) {
  float res;
  foreach_active (i) {
    uniform float r = lgammaf(extract(x, i));
    res = insert(res, i, r);
  }
  return res;
}

extern "C" unmasked uniform float erff(uniform float x);
SCALAR_FUN_ATTR float futrts_erf32(float x) {
  float res;
  foreach_active (i) {
    uniform float r = erff(extract(x, i));
    res = insert(res, i, r);
  }
  return res;
}

extern "C" unmasked uniform float erfcf(uniform float x);
SCALAR_FUN_ATTR float futrts_erfc32(float x) {
  float res;
  foreach_active (i) {
    uniform float r = erfcf(extract(x, i));
    res = insert(res, i, r);
  }
  return res;
}

SCALAR_FUN_ATTR float fmod32(float x, float y) {
  return x - y * trunc(x/y);
}

SCALAR_FUN_ATTR float futrts_round32(float x) {
  return round(x);
}

SCALAR_FUN_ATTR float futrts_floor32(float x) {
  return floor(x);
}

SCALAR_FUN_ATTR float futrts_ceil32(float x) {
  return ceil(x);
}

extern "C" unmasked uniform float nextafterf(uniform float x, uniform float y);
SCALAR_FUN_ATTR float futrts_nextafter32(float x, float y) {
  float res;
  foreach_active (i) {
    uniform float r = nextafterf(extract(x, i), extract(y, i));
    res = insert(res, i, r);
  }
  return res;
}

SCALAR_FUN_ATTR float futrts_lerp32(float v0, float v1, float t) {
  return v0 + (v1 - v0) * t;
}

SCALAR_FUN_ATTR float futrts_ldexp32(float x, int32_t y) {
  return x * pow((double)2.0, (double)y);
}

SCALAR_FUN_ATTR float futrts_copysign32(float x, float y) {
  int32_t xb = futrts_to_bits32(x);
  int32_t yb = futrts_to_bits32(y);
  return futrts_from_bits32((xb & ~(1<<31)) | (yb & (1<<31)));
}

SCALAR_FUN_ATTR float futrts_mad32(float a, float b, float c) {
  return a * b + c;
}

SCALAR_FUN_ATTR float futrts_fma32(float a, float b, float c) {
  return a * b + c;
}

#else // Not OpenCL or ISPC, but CUDA or plain C.

SCALAR_FUN_ATTR float futrts_log32(float x) {
  return logf(x);
}

SCALAR_FUN_ATTR float futrts_log2_32(float x) {
  return log2f(x);
}

SCALAR_FUN_ATTR float futrts_log10_32(float x) {
  return log10f(x);
}

SCALAR_FUN_ATTR float futrts_log1p_32(float x) {
  return log1pf(x);
}

SCALAR_FUN_ATTR float futrts_sqrt32(float x) {
  return sqrtf(x);
}

SCALAR_FUN_ATTR float futrts_cbrt32(float x) {
  return cbrtf(x);
}

SCALAR_FUN_ATTR float futrts_exp32(float x) {
  return expf(x);
}

SCALAR_FUN_ATTR float futrts_cos32(float x) {
  return cosf(x);
}

SCALAR_FUN_ATTR float futrts_sin32(float x) {
  return sinf(x);
}

SCALAR_FUN_ATTR float futrts_tan32(float x) {
  return tanf(x);
}

SCALAR_FUN_ATTR float futrts_acos32(float x) {
  return acosf(x);
}

SCALAR_FUN_ATTR float futrts_asin32(float x) {
  return asinf(x);
}

SCALAR_FUN_ATTR float futrts_atan32(float x) {
  return atanf(x);
}

SCALAR_FUN_ATTR float futrts_cosh32(float x) {
  return coshf(x);
}

SCALAR_FUN_ATTR float futrts_sinh32(float x) {
  return sinhf(x);
}

SCALAR_FUN_ATTR float futrts_tanh32(float x) {
  return tanhf(x);
}

SCALAR_FUN_ATTR float futrts_acosh32(float x) {
  return acoshf(x);
}

SCALAR_FUN_ATTR float futrts_asinh32(float x) {
  return asinhf(x);
}

SCALAR_FUN_ATTR float futrts_atanh32(float x) {
  return atanhf(x);
}

SCALAR_FUN_ATTR float futrts_atan2_32(float x, float y) {
  return atan2f(x, y);
}

SCALAR_FUN_ATTR float futrts_hypot32(float x, float y) {
  return hypotf(x, y);
}

SCALAR_FUN_ATTR float futrts_gamma32(float x) {
  return tgammaf(x);
}

SCALAR_FUN_ATTR float futrts_lgamma32(float x) {
  return lgammaf(x);
}

SCALAR_FUN_ATTR float futrts_erf32(float x) {
  return erff(x);
}

SCALAR_FUN_ATTR float futrts_erfc32(float x) {
  return erfcf(x);
}

SCALAR_FUN_ATTR float fmod32(float x, float y) {
  return fmodf(x, y);
}

SCALAR_FUN_ATTR float futrts_round32(float x) {
  return rintf(x);
}

SCALAR_FUN_ATTR float futrts_floor32(float x) {
  return floorf(x);
}

SCALAR_FUN_ATTR float futrts_ceil32(float x) {
  return ceilf(x);
}

SCALAR_FUN_ATTR float futrts_nextafter32(float x, float y) {
  return nextafterf(x, y);
}

SCALAR_FUN_ATTR float futrts_lerp32(float v0, float v1, float t) {
  return v0 + (v1 - v0) * t;
}

SCALAR_FUN_ATTR float futrts_ldexp32(float x, int32_t y) {
  return ldexpf(x, y);
}

SCALAR_FUN_ATTR float futrts_copysign32(float x, float y) {
  return copysignf(x, y);
}

SCALAR_FUN_ATTR float futrts_mad32(float a, float b, float c) {
  return a * b + c;
}

SCALAR_FUN_ATTR float futrts_fma32(float a, float b, float c) {
  return fmaf(a, b, c);
}
#endif

#if ISPC
SCALAR_FUN_ATTR int32_t futrts_to_bits32(float x) {
  return intbits(x);
}

SCALAR_FUN_ATTR float futrts_from_bits32(int32_t x) {
  return floatbits(x);
}
#else
SCALAR_FUN_ATTR int32_t futrts_to_bits32(float x) {
  union {
    float f;
    int32_t t;
  } p;

  p.f = x;
  return p.t;
}

SCALAR_FUN_ATTR float futrts_from_bits32(int32_t x) {
  union {
    int32_t f;
    float t;
  } p;

  p.f = x;
  return p.t;
}
#endif

SCALAR_FUN_ATTR float fsignum32(float x) {
  return futrts_isnan32(x) ? x : (x > 0 ? 1 : 0) - (x < 0 ? 1 : 0);
}

#ifdef FUTHARK_F64_ENABLED

SCALAR_FUN_ATTR double futrts_from_bits64(int64_t x);
SCALAR_FUN_ATTR int64_t futrts_to_bits64(double x);

#if ISPC
SCALAR_FUN_ATTR bool futrts_isinf64(float x) {
  return !isnan(x) && isnan(x - x);
}

SCALAR_FUN_ATTR bool futrts_isfinite64(float x) {
  return !isnan(x) && !futrts_isinf64(x);
}

SCALAR_FUN_ATTR double fdiv64(double x, double y) {
  return x / y;
}

SCALAR_FUN_ATTR double fadd64(double x, double y) {
  return x + y;
}

SCALAR_FUN_ATTR double fsub64(double x, double y) {
  return x - y;
}

SCALAR_FUN_ATTR double fmul64(double x, double y) {
  return x * y;
}

SCALAR_FUN_ATTR bool cmplt64(double x, double y) {
  return x < y;
}

SCALAR_FUN_ATTR bool cmple64(double x, double y) {
  return x <= y;
}

SCALAR_FUN_ATTR double sitofp_i8_f64(int8_t x) {
  return (double) x;
}

SCALAR_FUN_ATTR double sitofp_i16_f64(int16_t x) {
  return (double) x;
}

SCALAR_FUN_ATTR double sitofp_i32_f64(int32_t x) {
  return (double) x;
}

SCALAR_FUN_ATTR double sitofp_i64_f64(int64_t x) {
  return (double) x;
}

SCALAR_FUN_ATTR double uitofp_i8_f64(uint8_t x) {
  return (double) x;
}

SCALAR_FUN_ATTR double uitofp_i16_f64(uint16_t x) {
  return (double) x;
}

SCALAR_FUN_ATTR double uitofp_i32_f64(uint32_t x) {
  return (double) x;
}

SCALAR_FUN_ATTR double uitofp_i64_f64(uint64_t x) {
  return (double) x;
}

SCALAR_FUN_ATTR double fabs64(double x) {
  return abs(x);
}

SCALAR_FUN_ATTR double fmax64(double x, double y) {
  return isnan(x) ? y : isnan(y) ? x : max(x, y);
}

SCALAR_FUN_ATTR double fmin64(double x, double y) {
  return isnan(x) ? y : isnan(y) ? x : min(x, y);
}

SCALAR_FUN_ATTR double fpow64(double a, double b) {
  float ret;
  foreach_active (i) {
      uniform float r = __stdlib_powf(extract(a, i), extract(b, i));
      ret = insert(ret, i, r);
  }
  return ret;
}

SCALAR_FUN_ATTR double futrts_log64(double x) {
  return futrts_isfinite64(x) || (futrts_isinf64(x) && x < 0)? log(x) : x;
}

SCALAR_FUN_ATTR double futrts_log2_64(double x) {
  return futrts_log64(x)/log(2.0d);
}

SCALAR_FUN_ATTR double futrts_log10_64(double x) {
  return futrts_log64(x)/log(10.0d);
}

SCALAR_FUN_ATTR double futrts_log1p_64(double x) {
  if(x == -1.0d || (futrts_isinf64(x) && x > 0.0d)) return x / 0.0d;
  double y = 1.0d + x;
  double z = y - 1.0d;
  return log(y) - (z-x)/y;
}

SCALAR_FUN_ATTR double futrts_sqrt64(double x) {
  return sqrt(x);
}

extern "C" unmasked uniform double cbrt(uniform double);
SCALAR_FUN_ATTR double futrts_cbrt64(double x) {
  double res;
  foreach_active (i) {
    uniform double r = cbrtf(extract(x, i));
    res = insert(res, i, r);
  }
  return res;
}

SCALAR_FUN_ATTR double futrts_exp64(double x) {
  return exp(x);
}

SCALAR_FUN_ATTR double futrts_cos64(double x) {
  return cos(x);
}

SCALAR_FUN_ATTR double futrts_sin64(double x) {
  return sin(x);
}

SCALAR_FUN_ATTR double futrts_tan64(double x) {
  return tan(x);
}

SCALAR_FUN_ATTR double futrts_acos64(double x) {
  return acos(x);
}

SCALAR_FUN_ATTR double futrts_asin64(double x) {
  return asin(x);
}

SCALAR_FUN_ATTR double futrts_atan64(double x) {
  return atan(x);
}

SCALAR_FUN_ATTR double futrts_cosh64(double x) {
  return (exp(x)+exp(-x)) / 2.0d;
}

SCALAR_FUN_ATTR double futrts_sinh64(double x) {
  return (exp(x)-exp(-x)) / 2.0d;
}

SCALAR_FUN_ATTR double futrts_tanh64(double x) {
  return futrts_sinh64(x)/futrts_cosh64(x);
}

SCALAR_FUN_ATTR double futrts_acosh64(double x) {
  double f = x+sqrt(x*x-1.0d);
  if(futrts_isfinite64(f)) return log(f);
  return f;
}

SCALAR_FUN_ATTR double futrts_asinh64(double x) {
  double f = x+sqrt(x*x+1.0d);
  if(futrts_isfinite64(f)) return log(f);
  return f;
}

SCALAR_FUN_ATTR double futrts_atanh64(double x) {
  double f = (1.0d+x)/(1.0d-x);
  if(futrts_isfinite64(f)) return log(f)/2.0d;
  return f;

}

SCALAR_FUN_ATTR double futrts_atan2_64(double x, double y) {
  return atan2(x, y);
}

extern "C" unmasked uniform double hypot(uniform double x, uniform double y);
SCALAR_FUN_ATTR double futrts_hypot64(double x, double y) {
  double res;
  foreach_active (i) {
    uniform double r = hypot(extract(x, i), extract(y, i));
    res = insert(res, i, r);
  }
  return res;
}

extern "C" unmasked uniform double tgamma(uniform double x);
SCALAR_FUN_ATTR double futrts_gamma64(double x) {
  double res;
  foreach_active (i) {
    uniform double r = tgamma(extract(x, i));
    res = insert(res, i, r);
  }
  return res;
}

extern "C" unmasked uniform double lgamma(uniform double x);
SCALAR_FUN_ATTR double futrts_lgamma64(double x) {
  double res;
  foreach_active (i) {
    uniform double r = lgamma(extract(x, i));
    res = insert(res, i, r);
  }
  return res;
}

extern "C" unmasked uniform double erf(uniform double x);
SCALAR_FUN_ATTR double futrts_erf64(double x) {
  double res;
  foreach_active (i) {
    uniform double r = erf(extract(x, i));
    res = insert(res, i, r);
  }
  return res;
}

extern "C" unmasked uniform double erfc(uniform double x);
SCALAR_FUN_ATTR double futrts_erfc64(double x) {
  double res;
  foreach_active (i) {
    uniform double r = erfc(extract(x, i));
    res = insert(res, i, r);
  }
  return res;
}

SCALAR_FUN_ATTR double futrts_fma64(double a, double b, double c) {
  return a * b + c;
}

SCALAR_FUN_ATTR double futrts_round64(double x) {
  return round(x);
}

SCALAR_FUN_ATTR double futrts_ceil64(double x) {
  return ceil(x);
}

extern "C" unmasked uniform double nextafter(uniform float x, uniform double y);
SCALAR_FUN_ATTR float futrts_nextafter64(double x, double y) {
  double res;
  foreach_active (i) {
    uniform double r = nextafter(extract(x, i), extract(y, i));
    res = insert(res, i, r);
  }
  return res;
}

SCALAR_FUN_ATTR double futrts_floor64(double x) {
  return floor(x);
}

SCALAR_FUN_ATTR bool futrts_isnan64(double x) {
  return isnan(x);
}

SCALAR_FUN_ATTR int8_t fptosi_f64_i8(double x) {
  if (futrts_isnan64(x) || futrts_isinf64(x)) {
    return 0;
  } else {
    return (int8_t) x;
  }
}

SCALAR_FUN_ATTR int16_t fptosi_f64_i16(double x) {
  if (futrts_isnan64(x) || futrts_isinf64(x)) {
    return 0;
  } else {
    return (int16_t) x;
  }
}

SCALAR_FUN_ATTR int32_t fptosi_f64_i32(double x) {
  if (futrts_isnan64(x) || futrts_isinf64(x)) {
    return 0;
  } else {
    return (int32_t) x;
  }
}

SCALAR_FUN_ATTR int64_t fptosi_f64_i64(double x) {
  if (futrts_isnan64(x) || futrts_isinf64(x)) {
    return 0;
  } else {
    return (int64_t) x;
  }
}

SCALAR_FUN_ATTR uint8_t fptoui_f64_i8(double x) {
  if (futrts_isnan64(x) || futrts_isinf64(x)) {
    return 0;
  } else {
    return (uint8_t) (int8_t) x;
  }
}

SCALAR_FUN_ATTR uint16_t fptoui_f64_i16(double x) {
  if (futrts_isnan64(x) || futrts_isinf64(x)) {
    return 0;
  } else {
    return (uint16_t) (int16_t) x;
  }
}

SCALAR_FUN_ATTR uint32_t fptoui_f64_i32(double x) {
  if (futrts_isnan64(x) || futrts_isinf64(x)) {
    return 0;
  } else {
    return (uint32_t) (int32_t) x;
  }
}

SCALAR_FUN_ATTR uint64_t fptoui_f64_i64(double x) {
  if (futrts_isnan64(x) || futrts_isinf64(x)) {
    return 0;
  } else {
    return (uint64_t) (int64_t) x;
  }
}

SCALAR_FUN_ATTR bool ftob_f64_bool(double x) {
  return x != 0.0;
}

SCALAR_FUN_ATTR double btof_bool_f64(bool x) {
  return x ? 1.0 : 0.0;
}

SCALAR_FUN_ATTR int64_t futrts_to_bits64(double x) {
  int64_t res;
  foreach_active (i) {
    uniform double tmp = extract(x, i);
    uniform int64_t r = *((uniform int64_t* uniform)&tmp);
    res = insert(res, i, r);
  }
  return res;
}

SCALAR_FUN_ATTR double futrts_from_bits64(int64_t x) {
  double res;
  foreach_active (i) {
    uniform int64_t tmp = extract(x, i);
    uniform double r = *((uniform double* uniform)&tmp);
    res = insert(res, i, r);
  }
  return res;
}

SCALAR_FUN_ATTR double fmod64(double x, double y) {
  return x - y * trunc(x/y);
}

SCALAR_FUN_ATTR double fsignum64(double x) {
  return futrts_isnan64(x) ? x : (x > 0 ? 1.0d : 0.0d) - (x < 0 ? 1.0d : 0.0d);
}

SCALAR_FUN_ATTR double futrts_lerp64(double v0, double v1, double t) {
  return v0 + (v1 - v0) * t;
}

SCALAR_FUN_ATTR double futrts_ldexp64(double x, int32_t y) {
  return x * pow((double)2.0, (double)y);
}

SCALAR_FUN_ATTR double futrts_copysign64(double x, double y) {
  int64_t xb = futrts_to_bits64(x);
  int64_t yb = futrts_to_bits64(y);
  return futrts_from_bits64((xb & ~(((int64_t)1)<<63)) | (yb & (((int64_t)1)<<63)));
}

SCALAR_FUN_ATTR double futrts_mad64(double a, double b, double c) {
  return a * b + c;
}

SCALAR_FUN_ATTR float fpconv_f32_f32(float x) {
  return (float) x;
}

SCALAR_FUN_ATTR double fpconv_f32_f64(float x) {
  return (double) x;
}

SCALAR_FUN_ATTR float fpconv_f64_f32(double x) {
  return (float) x;
}

SCALAR_FUN_ATTR double fpconv_f64_f64(double x) {
  return (double) x;
}

#else

SCALAR_FUN_ATTR double fdiv64(double x, double y) {
  return x / y;
}

SCALAR_FUN_ATTR double fadd64(double x, double y) {
  return x + y;
}

SCALAR_FUN_ATTR double fsub64(double x, double y) {
  return x - y;
}

SCALAR_FUN_ATTR double fmul64(double x, double y) {
  return x * y;
}

SCALAR_FUN_ATTR bool cmplt64(double x, double y) {
  return x < y;
}

SCALAR_FUN_ATTR bool cmple64(double x, double y) {
  return x <= y;
}

SCALAR_FUN_ATTR double sitofp_i8_f64(int8_t x) {
  return (double) x;
}

SCALAR_FUN_ATTR double sitofp_i16_f64(int16_t x) {
  return (double) x;
}

SCALAR_FUN_ATTR double sitofp_i32_f64(int32_t x) {
  return (double) x;
}

SCALAR_FUN_ATTR double sitofp_i64_f64(int64_t x) {
  return (double) x;
}

SCALAR_FUN_ATTR double uitofp_i8_f64(uint8_t x) {
  return (double) x;
}

SCALAR_FUN_ATTR double uitofp_i16_f64(uint16_t x) {
  return (double) x;
}

SCALAR_FUN_ATTR double uitofp_i32_f64(uint32_t x) {
  return (double) x;
}

SCALAR_FUN_ATTR double uitofp_i64_f64(uint64_t x) {
  return (double) x;
}

SCALAR_FUN_ATTR double fabs64(double x) {
  return fabs(x);
}

SCALAR_FUN_ATTR double fmax64(double x, double y) {
  return fmax(x, y);
}

SCALAR_FUN_ATTR double fmin64(double x, double y) {
  return fmin(x, y);
}

SCALAR_FUN_ATTR double fpow64(double x, double y) {
  return pow(x, y);
}

SCALAR_FUN_ATTR double futrts_log64(double x) {
  return log(x);
}

SCALAR_FUN_ATTR double futrts_log2_64(double x) {
  return log2(x);
}

SCALAR_FUN_ATTR double futrts_log10_64(double x) {
  return log10(x);
}

SCALAR_FUN_ATTR double futrts_log1p_64(double x) {
  return log1p(x);
}

SCALAR_FUN_ATTR double futrts_sqrt64(double x) {
  return sqrt(x);
}

SCALAR_FUN_ATTR double futrts_cbrt64(double x) {
  return cbrt(x);
}

SCALAR_FUN_ATTR double futrts_exp64(double x) {
  return exp(x);
}

SCALAR_FUN_ATTR double futrts_cos64(double x) {
  return cos(x);
}

SCALAR_FUN_ATTR double futrts_sin64(double x) {
  return sin(x);
}

SCALAR_FUN_ATTR double futrts_tan64(double x) {
  return tan(x);
}

SCALAR_FUN_ATTR double futrts_acos64(double x) {
  return acos(x);
}

SCALAR_FUN_ATTR double futrts_asin64(double x) {
  return asin(x);
}

SCALAR_FUN_ATTR double futrts_atan64(double x) {
  return atan(x);
}

SCALAR_FUN_ATTR double futrts_cosh64(double x) {
  return cosh(x);
}

SCALAR_FUN_ATTR double futrts_sinh64(double x) {
  return sinh(x);
}

SCALAR_FUN_ATTR double futrts_tanh64(double x) {
  return tanh(x);
}

SCALAR_FUN_ATTR double futrts_acosh64(double x) {
  return acosh(x);
}

SCALAR_FUN_ATTR double futrts_asinh64(double x) {
  return asinh(x);
}

SCALAR_FUN_ATTR double futrts_atanh64(double x) {
  return atanh(x);
}

SCALAR_FUN_ATTR double futrts_atan2_64(double x, double y) {
  return atan2(x, y);
}

SCALAR_FUN_ATTR double futrts_hypot64(double x, double y) {
  return hypot(x, y);
}

SCALAR_FUN_ATTR double futrts_gamma64(double x) {
  return tgamma(x);
}

SCALAR_FUN_ATTR double futrts_lgamma64(double x) {
  return lgamma(x);
}

SCALAR_FUN_ATTR double futrts_erf64(double x) {
  return erf(x);
}

SCALAR_FUN_ATTR double futrts_erfc64(double x) {
  return erfc(x);
}

SCALAR_FUN_ATTR double futrts_fma64(double a, double b, double c) {
  return fma(a, b, c);
}

SCALAR_FUN_ATTR double futrts_round64(double x) {
  return rint(x);
}

SCALAR_FUN_ATTR double futrts_ceil64(double x) {
  return ceil(x);
}

SCALAR_FUN_ATTR float futrts_nextafter64(float x, float y) {
  return nextafter(x, y);
}

SCALAR_FUN_ATTR double futrts_floor64(double x) {
  return floor(x);
}

SCALAR_FUN_ATTR bool futrts_isnan64(double x) {
  return isnan(x);
}

SCALAR_FUN_ATTR bool futrts_isinf64(double x) {
  return isinf(x);
}

SCALAR_FUN_ATTR int8_t fptosi_f64_i8(double x) {
  if (futrts_isnan64(x) || futrts_isinf64(x)) {
    return 0;
  } else {
    return (int8_t) x;
  }
}

SCALAR_FUN_ATTR int16_t fptosi_f64_i16(double x) {
  if (futrts_isnan64(x) || futrts_isinf64(x)) {
    return 0;
  } else {
    return (int16_t) x;
  }
}

SCALAR_FUN_ATTR int32_t fptosi_f64_i32(double x) {
  if (futrts_isnan64(x) || futrts_isinf64(x)) {
    return 0;
  } else {
    return (int32_t) x;
  }
}

SCALAR_FUN_ATTR int64_t fptosi_f64_i64(double x) {
  if (futrts_isnan64(x) || futrts_isinf64(x)) {
    return 0;
  } else {
    return (int64_t) x;
  }
}

SCALAR_FUN_ATTR uint8_t fptoui_f64_i8(double x) {
  if (futrts_isnan64(x) || futrts_isinf64(x)) {
    return 0;
  } else {
    return (uint8_t) (int8_t) x;
  }
}

SCALAR_FUN_ATTR uint16_t fptoui_f64_i16(double x) {
  if (futrts_isnan64(x) || futrts_isinf64(x)) {
    return 0;
  } else {
    return (uint16_t) (int16_t) x;
  }
}

SCALAR_FUN_ATTR uint32_t fptoui_f64_i32(double x) {
  if (futrts_isnan64(x) || futrts_isinf64(x)) {
    return 0;
  } else {
    return (uint32_t) (int32_t) x;
  }
}

SCALAR_FUN_ATTR uint64_t fptoui_f64_i64(double x) {
  if (futrts_isnan64(x) || futrts_isinf64(x)) {
    return 0;
  } else {
    return (uint64_t) (int64_t) x;
  }
}

SCALAR_FUN_ATTR bool ftob_f64_bool(double x) {
  return x != 0;
}

SCALAR_FUN_ATTR double btof_bool_f64(bool x) {
  return x ? 1 : 0;
}

SCALAR_FUN_ATTR int64_t futrts_to_bits64(double x) {
  union {
    double f;
    int64_t t;
  } p;

  p.f = x;
  return p.t;
}

SCALAR_FUN_ATTR double futrts_from_bits64(int64_t x) {
  union {
    int64_t f;
    double t;
  } p;

  p.f = x;
  return p.t;
}

SCALAR_FUN_ATTR double fmod64(double x, double y) {
  return fmod(x, y);
}

SCALAR_FUN_ATTR double fsignum64(double x) {
  return futrts_isnan64(x) ? x : (x > 0) - (x < 0);
}

SCALAR_FUN_ATTR double futrts_lerp64(double v0, double v1, double t) {
#ifdef __OPENCL_VERSION__
  return mix(v0, v1, t);
#else
  return v0 + (v1 - v0) * t;
#endif
}

SCALAR_FUN_ATTR double futrts_ldexp64(double x, int32_t y) {
  return ldexp(x, y);
}

SCALAR_FUN_ATTR float futrts_copysign64(double x, double y) {
  return copysign(x, y);
}

SCALAR_FUN_ATTR double futrts_mad64(double a, double b, double c) {
#ifdef __OPENCL_VERSION__
  return mad(a, b, c);
#else
  return a * b + c;
#endif
}

SCALAR_FUN_ATTR float fpconv_f32_f32(float x) {
  return (float) x;
}

SCALAR_FUN_ATTR double fpconv_f32_f64(float x) {
  return (double) x;
}

SCALAR_FUN_ATTR float fpconv_f64_f32(double x) {
  return (float) x;
}

SCALAR_FUN_ATTR double fpconv_f64_f64(double x) {
  return (double) x;
}

#endif

#endif

// End of scalar.h.
// Start of scalar_f16.h.

// Half-precision is emulated if needed (e.g. in straight C) with the
// native type used if possible.  The emulation works by typedef'ing
// 'float' to 'f16', and then implementing all operations on single
// precision.  To cut down on duplication, we use the same code for
// those Futhark functions that require just operators or casts.  The
// in-memory representation for arrays will still be 16 bits even
// under emulation, so the compiler will have to be careful when
// generating reads or writes.

#if !defined(cl_khr_fp16) && !(defined(__CUDA_ARCH__) && __CUDA_ARCH__ >= 600) && !(defined(ISPC))
#define EMULATE_F16
#endif

#if !defined(EMULATE_F16) && defined(__OPENCL_VERSION__)
#pragma OPENCL EXTENSION cl_khr_fp16 : enable
#endif

#ifdef EMULATE_F16

// Note that the half-precision storage format is still 16 bits - the
// compiler will have to be real careful!
typedef float f16;

#elif ISPC
typedef float16 f16;

#else

#ifdef __CUDA_ARCH__
#include <cuda_fp16.h>
#endif

typedef half f16;

#endif

// Some of these functions convert to single precision because half
// precision versions are not available.

SCALAR_FUN_ATTR f16 fadd16(f16 x, f16 y) {
  return x + y;
}

SCALAR_FUN_ATTR f16 fsub16(f16 x, f16 y) {
  return x - y;
}

SCALAR_FUN_ATTR f16 fmul16(f16 x, f16 y) {
  return x * y;
}

SCALAR_FUN_ATTR bool cmplt16(f16 x, f16 y) {
  return x < y;
}

SCALAR_FUN_ATTR bool cmple16(f16 x, f16 y) {
  return x <= y;
}

SCALAR_FUN_ATTR f16 sitofp_i8_f16(int8_t x) {
  return (f16) x;
}

SCALAR_FUN_ATTR f16 sitofp_i16_f16(int16_t x) {
  return (f16) x;
}

SCALAR_FUN_ATTR f16 sitofp_i32_f16(int32_t x) {
  return (f16) x;
}

SCALAR_FUN_ATTR f16 sitofp_i64_f16(int64_t x) {
  return (f16) x;
}

SCALAR_FUN_ATTR f16 uitofp_i8_f16(uint8_t x) {
  return (f16) x;
}

SCALAR_FUN_ATTR f16 uitofp_i16_f16(uint16_t x) {
  return (f16) x;
}

SCALAR_FUN_ATTR f16 uitofp_i32_f16(uint32_t x) {
  return (f16) x;
}

SCALAR_FUN_ATTR f16 uitofp_i64_f16(uint64_t x) {
  return (f16) x;
}

SCALAR_FUN_ATTR int8_t fptosi_f16_i8(f16 x) {
  return (int8_t) (float) x;
}

SCALAR_FUN_ATTR int16_t fptosi_f16_i16(f16 x) {
  return (int16_t) x;
}

SCALAR_FUN_ATTR int32_t fptosi_f16_i32(f16 x) {
  return (int32_t) x;
}

SCALAR_FUN_ATTR int64_t fptosi_f16_i64(f16 x) {
  return (int64_t) x;
}

SCALAR_FUN_ATTR uint8_t fptoui_f16_i8(f16 x) {
  return (uint8_t) (float) x;
}

SCALAR_FUN_ATTR uint16_t fptoui_f16_i16(f16 x) {
  return (uint16_t) x;
}

SCALAR_FUN_ATTR uint32_t fptoui_f16_i32(f16 x) {
  return (uint32_t) x;
}

SCALAR_FUN_ATTR uint64_t fptoui_f16_i64(f16 x) {
  return (uint64_t) x;
}

SCALAR_FUN_ATTR bool ftob_f16_bool(f16 x) {
  return x != (f16)0;
}

SCALAR_FUN_ATTR f16 btof_bool_f16(bool x) {
  return x ? 1 : 0;
}

#ifndef EMULATE_F16
SCALAR_FUN_ATTR bool futrts_isnan16(f16 x) {
  return isnan((float)x);
}

#ifdef __OPENCL_VERSION__

SCALAR_FUN_ATTR f16 fabs16(f16 x) {
  return fabs(x);
}

SCALAR_FUN_ATTR f16 fmax16(f16 x, f16 y) {
  return fmax(x, y);
}

SCALAR_FUN_ATTR f16 fmin16(f16 x, f16 y) {
  return fmin(x, y);
}

SCALAR_FUN_ATTR f16 fpow16(f16 x, f16 y) {
  return pow(x, y);
}

#elif ISPC
SCALAR_FUN_ATTR f16 fabs16(f16 x) {
  return abs(x);
}

SCALAR_FUN_ATTR f16 fmax16(f16 x, f16 y) {
  return futrts_isnan16(x) ? y : futrts_isnan16(y) ? x : max(x, y);
}

SCALAR_FUN_ATTR f16 fmin16(f16 x, f16 y) {
  return futrts_isnan16(x) ? y : futrts_isnan16(y) ? x : min(x, y);
}

SCALAR_FUN_ATTR f16 fpow16(f16 x, f16 y) {
  return pow(x, y);
}

#else // Assuming CUDA.

SCALAR_FUN_ATTR f16 fabs16(f16 x) {
  return fabsf(x);
}

SCALAR_FUN_ATTR f16 fmax16(f16 x, f16 y) {
  return fmaxf(x, y);
}

SCALAR_FUN_ATTR f16 fmin16(f16 x, f16 y) {
  return fminf(x, y);
}

SCALAR_FUN_ATTR f16 fpow16(f16 x, f16 y) {
  return powf(x, y);
}
#endif

#if ISPC
SCALAR_FUN_ATTR bool futrts_isinf16(float x) {
  return !futrts_isnan16(x) && futrts_isnan16(x - x);
}
SCALAR_FUN_ATTR bool futrts_isfinite16(float x) {
  return !futrts_isnan16(x) && !futrts_isinf16(x);
}

#else

SCALAR_FUN_ATTR bool futrts_isinf16(f16 x) {
  return isinf((float)x);
}
#endif

#ifdef __OPENCL_VERSION__
SCALAR_FUN_ATTR f16 futrts_log16(f16 x) {
  return log(x);
}

SCALAR_FUN_ATTR f16 futrts_log2_16(f16 x) {
  return log2(x);
}

SCALAR_FUN_ATTR f16 futrts_log10_16(f16 x) {
  return log10(x);
}

SCALAR_FUN_ATTR f16 futrts_log1p_16(f16 x) {
  return log1p(x);
}

SCALAR_FUN_ATTR f16 futrts_sqrt16(f16 x) {
  return sqrt(x);
}

SCALAR_FUN_ATTR f16 futrts_cbrt16(f16 x) {
  return cbrt(x);
}

SCALAR_FUN_ATTR f16 futrts_exp16(f16 x) {
  return exp(x);
}

SCALAR_FUN_ATTR f16 futrts_cos16(f16 x) {
  return cos(x);
}

SCALAR_FUN_ATTR f16 futrts_sin16(f16 x) {
  return sin(x);
}

SCALAR_FUN_ATTR f16 futrts_tan16(f16 x) {
  return tan(x);
}

SCALAR_FUN_ATTR f16 futrts_acos16(f16 x) {
  return acos(x);
}

SCALAR_FUN_ATTR f16 futrts_asin16(f16 x) {
  return asin(x);
}

SCALAR_FUN_ATTR f16 futrts_atan16(f16 x) {
  return atan(x);
}

SCALAR_FUN_ATTR f16 futrts_cosh16(f16 x) {
  return cosh(x);
}

SCALAR_FUN_ATTR f16 futrts_sinh16(f16 x) {
  return sinh(x);
}

SCALAR_FUN_ATTR f16 futrts_tanh16(f16 x) {
  return tanh(x);
}

SCALAR_FUN_ATTR f16 futrts_acosh16(f16 x) {
  return acosh(x);
}

SCALAR_FUN_ATTR f16 futrts_asinh16(f16 x) {
  return asinh(x);
}

SCALAR_FUN_ATTR f16 futrts_atanh16(f16 x) {
  return atanh(x);
}

SCALAR_FUN_ATTR f16 futrts_atan2_16(f16 x, f16 y) {
  return atan2(x, y);
}

SCALAR_FUN_ATTR f16 futrts_hypot16(f16 x, f16 y) {
  return hypot(x, y);
}

SCALAR_FUN_ATTR f16 futrts_gamma16(f16 x) {
  return tgamma(x);
}

SCALAR_FUN_ATTR f16 futrts_lgamma16(f16 x) {
  return lgamma(x);
}

SCALAR_FUN_ATTR f16 futrts_erf16(f16 x) {
  return erf(x);
}

SCALAR_FUN_ATTR f16 futrts_erfc16(f16 x) {
  return erfc(x);
}

SCALAR_FUN_ATTR f16 fmod16(f16 x, f16 y) {
  return fmod(x, y);
}

SCALAR_FUN_ATTR f16 futrts_round16(f16 x) {
  return rint(x);
}

SCALAR_FUN_ATTR f16 futrts_floor16(f16 x) {
  return floor(x);
}

SCALAR_FUN_ATTR f16 futrts_ceil16(f16 x) {
  return ceil(x);
}

SCALAR_FUN_ATTR f16 futrts_nextafter16(f16 x, f16 y) {
  return nextafter(x, y);
}

SCALAR_FUN_ATTR f16 futrts_lerp16(f16 v0, f16 v1, f16 t) {
  return mix(v0, v1, t);
}

SCALAR_FUN_ATTR f16 futrts_ldexp16(f16 x, int32_t y) {
  return ldexp(x, y);
}

SCALAR_FUN_ATTR f16 futrts_copysign16(f16 x, f16 y) {
  return copysign(x, y);
}

SCALAR_FUN_ATTR f16 futrts_mad16(f16 a, f16 b, f16 c) {
  return mad(a, b, c);
}

SCALAR_FUN_ATTR f16 futrts_fma16(f16 a, f16 b, f16 c) {
  return fma(a, b, c);
}
#elif ISPC

SCALAR_FUN_ATTR f16 futrts_log16(f16 x) {
  return futrts_isfinite16(x) || (futrts_isinf16(x) && x < 0) ? log(x) : x;
}

SCALAR_FUN_ATTR f16 futrts_log2_16(f16 x) {
  return futrts_log16(x) / log(2.0f16);
}

SCALAR_FUN_ATTR f16 futrts_log10_16(f16 x) {
  return futrts_log16(x) / log(10.0f16);
}

SCALAR_FUN_ATTR f16 futrts_log1p_16(f16 x) {
  if(x == -1.0f16 || (futrts_isinf16(x) && x > 0.0f16)) return x / 0.0f16;
  f16 y = 1.0f16 + x;
  f16 z = y - 1.0f16;
  return log(y) - (z-x)/y;
}

SCALAR_FUN_ATTR f16 futrts_sqrt16(f16 x) {
  return (float16)sqrt((float)x);
}

SCALAR_FUN_ATTR f16 futrts_exp16(f16 x) {
  return exp(x);
}

SCALAR_FUN_ATTR f16 futrts_cos16(f16 x) {
  return (float16)cos((float)x);
}

SCALAR_FUN_ATTR f16 futrts_sin16(f16 x) {
  return (float16)sin((float)x);
}

SCALAR_FUN_ATTR f16 futrts_tan16(f16 x) {
  return (float16)tan((float)x);
}

SCALAR_FUN_ATTR f16 futrts_acos16(f16 x) {
  return (float16)acos((float)x);
}

SCALAR_FUN_ATTR f16 futrts_asin16(f16 x) {
  return (float16)asin((float)x);
}

SCALAR_FUN_ATTR f16 futrts_atan16(f16 x) {
  return (float16)atan((float)x);
}

SCALAR_FUN_ATTR f16 futrts_cosh16(f16 x) {
  return (exp(x)+exp(-x)) / 2.0f16;
}

SCALAR_FUN_ATTR f16 futrts_sinh16(f16 x) {
  return (exp(x)-exp(-x)) / 2.0f16;
}

SCALAR_FUN_ATTR f16 futrts_tanh16(f16 x) {
  return futrts_sinh16(x)/futrts_cosh16(x);
}

SCALAR_FUN_ATTR f16 futrts_acosh16(f16 x) {
  float16 f = x+(float16)sqrt((float)(x*x-1));
  if(futrts_isfinite16(f)) return log(f);
  return f;
}

SCALAR_FUN_ATTR f16 futrts_asinh16(f16 x) {
  float16 f = x+(float16)sqrt((float)(x*x+1));
  if(futrts_isfinite16(f)) return log(f);
  return f;
}

SCALAR_FUN_ATTR f16 futrts_atanh16(f16 x) {
  float16 f = (1+x)/(1-x);
  if(futrts_isfinite16(f)) return log(f)/2.0f16;
  return f;
}

SCALAR_FUN_ATTR f16 futrts_atan2_16(f16 x, f16 y) {
  return (float16)atan2((float)x, (float)y);
}

SCALAR_FUN_ATTR f16 futrts_hypot16(f16 x, f16 y) {
  return (float16)futrts_hypot32((float)x, (float)y);
}

extern "C" unmasked uniform float tgammaf(uniform float x);
SCALAR_FUN_ATTR f16 futrts_gamma16(f16 x) {
  f16 res;
  foreach_active (i) {
    uniform f16 r = (f16)tgammaf(extract((float)x, i));
    res = insert(res, i, r);
  }
  return res;
}

extern "C" unmasked uniform float lgammaf(uniform float x);
SCALAR_FUN_ATTR f16 futrts_lgamma16(f16 x) {
  f16 res;
  foreach_active (i) {
    uniform f16 r = (f16)lgammaf(extract((float)x, i));
    res = insert(res, i, r);
  }
  return res;
}

SCALAR_FUN_ATTR f16 futrts_cbrt16(f16 x) {
  f16 res = (f16)futrts_cbrt32((float)x);
  return res;
}

SCALAR_FUN_ATTR f16 futrts_erf16(f16 x) {
  f16 res = (f16)futrts_erf32((float)x);
  return res;
}

SCALAR_FUN_ATTR f16 futrts_erfc16(f16 x) {
  f16 res = (f16)futrts_erfc32((float)x);
  return res;
}

SCALAR_FUN_ATTR f16 fmod16(f16 x, f16 y) {
  return x - y * (float16)trunc((float) (x/y));
}

SCALAR_FUN_ATTR f16 futrts_round16(f16 x) {
  return (float16)round((float)x);
}

SCALAR_FUN_ATTR f16 futrts_floor16(f16 x) {
  return (float16)floor((float)x);
}

SCALAR_FUN_ATTR f16 futrts_ceil16(f16 x) {
  return (float16)ceil((float)x);
}

SCALAR_FUN_ATTR f16 futrts_nextafter16(f16 x, f16 y) {
  return (float16)futrts_nextafter32((float)x, (float) y);
}

SCALAR_FUN_ATTR f16 futrts_lerp16(f16 v0, f16 v1, f16 t) {
  return v0 + (v1 - v0) * t;
}

SCALAR_FUN_ATTR f16 futrts_ldexp16(f16 x, int32_t y) {
  return futrts_ldexp32((float)x, y);
}

SCALAR_FUN_ATTR f16 futrts_copysign16(f16 x, f16 y) {
  return futrts_copysign32((float)x, y);
}

SCALAR_FUN_ATTR f16 futrts_mad16(f16 a, f16 b, f16 c) {
  return a * b + c;
}

SCALAR_FUN_ATTR f16 futrts_fma16(f16 a, f16 b, f16 c) {
  return a * b + c;
}

#else // Assume CUDA.

SCALAR_FUN_ATTR f16 futrts_log16(f16 x) {
  return hlog(x);
}

SCALAR_FUN_ATTR f16 futrts_log2_16(f16 x) {
  return hlog2(x);
}

SCALAR_FUN_ATTR f16 futrts_log10_16(f16 x) {
  return hlog10(x);
}

SCALAR_FUN_ATTR f16 futrts_log1p_16(f16 x) {
  return (f16)log1pf((float)x);
}

SCALAR_FUN_ATTR f16 futrts_sqrt16(f16 x) {
  return hsqrt(x);
}

SCALAR_FUN_ATTR f16 futrts_cbrt16(f16 x) {
  return cbrtf(x);
}

SCALAR_FUN_ATTR f16 futrts_exp16(f16 x) {
  return hexp(x);
}

SCALAR_FUN_ATTR f16 futrts_cos16(f16 x) {
  return hcos(x);
}

SCALAR_FUN_ATTR f16 futrts_sin16(f16 x) {
  return hsin(x);
}

SCALAR_FUN_ATTR f16 futrts_tan16(f16 x) {
  return tanf(x);
}

SCALAR_FUN_ATTR f16 futrts_acos16(f16 x) {
  return acosf(x);
}

SCALAR_FUN_ATTR f16 futrts_asin16(f16 x) {
  return asinf(x);
}

SCALAR_FUN_ATTR f16 futrts_atan16(f16 x) {
  return atanf(x);
}

SCALAR_FUN_ATTR f16 futrts_cosh16(f16 x) {
  return coshf(x);
}

SCALAR_FUN_ATTR f16 futrts_sinh16(f16 x) {
  return sinhf(x);
}

SCALAR_FUN_ATTR f16 futrts_tanh16(f16 x) {
  return tanhf(x);
}

SCALAR_FUN_ATTR f16 futrts_acosh16(f16 x) {
  return acoshf(x);
}

SCALAR_FUN_ATTR f16 futrts_asinh16(f16 x) {
  return asinhf(x);
}

SCALAR_FUN_ATTR f16 futrts_atanh16(f16 x) {
  return atanhf(x);
}

SCALAR_FUN_ATTR f16 futrts_atan2_16(f16 x, f16 y) {
  return atan2f(x, y);
}

SCALAR_FUN_ATTR f16 futrts_hypot16(f16 x, f16 y) {
  return hypotf(x, y);
}

SCALAR_FUN_ATTR f16 futrts_gamma16(f16 x) {
  return tgammaf(x);
}

SCALAR_FUN_ATTR f16 futrts_lgamma16(f16 x) {
  return lgammaf(x);
}

SCALAR_FUN_ATTR f16 futrts_erf16(f16 x) {
  return erff(x);
}

SCALAR_FUN_ATTR f16 futrts_erfc16(f16 x) {
  return erfcf(x);
}

SCALAR_FUN_ATTR f16 fmod16(f16 x, f16 y) {
  return fmodf(x, y);
}

SCALAR_FUN_ATTR f16 futrts_round16(f16 x) {
  return rintf(x);
}

SCALAR_FUN_ATTR f16 futrts_floor16(f16 x) {
  return hfloor(x);
}

SCALAR_FUN_ATTR f16 futrts_ceil16(f16 x) {
  return hceil(x);
}

SCALAR_FUN_ATTR f16 futrts_nextafter16(f16 x, f16 y) {
  return __ushort_as_half(halfbitsnextafter(__half_as_ushort(x), __half_as_ushort(y)));
}

SCALAR_FUN_ATTR f16 futrts_lerp16(f16 v0, f16 v1, f16 t) {
  return v0 + (v1 - v0) * t;
}

SCALAR_FUN_ATTR f16 futrts_ldexp16(f16 x, int32_t y) {
  return futrts_ldexp32((float)x, y);
}

SCALAR_FUN_ATTR f16 futrts_copysign16(f16 x, f16 y) {
  return futrts_copysign32((float)x, y);
}

SCALAR_FUN_ATTR f16 futrts_mad16(f16 a, f16 b, f16 c) {
  return a * b + c;
}

SCALAR_FUN_ATTR f16 futrts_fma16(f16 a, f16 b, f16 c) {
  return fmaf(a, b, c);
}

#endif

// The CUDA __half type cannot be put in unions for some reason, so we
// use bespoke conversion functions instead.
#ifdef __CUDA_ARCH__
SCALAR_FUN_ATTR int16_t futrts_to_bits16(f16 x) {
  return __half_as_ushort(x);
}
SCALAR_FUN_ATTR f16 futrts_from_bits16(int16_t x) {
  return __ushort_as_half(x);
}
#elif ISPC

SCALAR_FUN_ATTR int16_t futrts_to_bits16(f16 x) {
  varying int16_t y = *((varying int16_t * uniform)&x);
  return y;
}

SCALAR_FUN_ATTR f16 futrts_from_bits16(int16_t x) {
  varying f16 y = *((varying f16 * uniform)&x);
  return y;
}
#else
SCALAR_FUN_ATTR int16_t futrts_to_bits16(f16 x) {
  union {
    f16 f;
    int16_t t;
  } p;

  p.f = x;
  return p.t;
}

SCALAR_FUN_ATTR f16 futrts_from_bits16(int16_t x) {
  union {
    int16_t f;
    f16 t;
  } p;

  p.f = x;
  return p.t;
}
#endif

#else // No native f16 - emulate.

SCALAR_FUN_ATTR f16 fabs16(f16 x) {
  return fabs32(x);
}

SCALAR_FUN_ATTR f16 fmax16(f16 x, f16 y) {
  return fmax32(x, y);
}

SCALAR_FUN_ATTR f16 fmin16(f16 x, f16 y) {
  return fmin32(x, y);
}

SCALAR_FUN_ATTR f16 fpow16(f16 x, f16 y) {
  return fpow32(x, y);
}

SCALAR_FUN_ATTR bool futrts_isnan16(f16 x) {
  return futrts_isnan32(x);
}

SCALAR_FUN_ATTR bool futrts_isinf16(f16 x) {
  return futrts_isinf32(x);
}

SCALAR_FUN_ATTR f16 futrts_log16(f16 x) {
  return futrts_log32(x);
}

SCALAR_FUN_ATTR f16 futrts_log2_16(f16 x) {
  return futrts_log2_32(x);
}

SCALAR_FUN_ATTR f16 futrts_log10_16(f16 x) {
  return futrts_log10_32(x);
}

SCALAR_FUN_ATTR f16 futrts_log1p_16(f16 x) {
  return futrts_log1p_32(x);
}

SCALAR_FUN_ATTR f16 futrts_sqrt16(f16 x) {
  return futrts_sqrt32(x);
}

SCALAR_FUN_ATTR f16 futrts_cbrt16(f16 x) {
  return futrts_cbrt32(x);
}

SCALAR_FUN_ATTR f16 futrts_exp16(f16 x) {
  return futrts_exp32(x);
}

SCALAR_FUN_ATTR f16 futrts_cos16(f16 x) {
  return futrts_cos32(x);
}

SCALAR_FUN_ATTR f16 futrts_sin16(f16 x) {
  return futrts_sin32(x);
}

SCALAR_FUN_ATTR f16 futrts_tan16(f16 x) {
  return futrts_tan32(x);
}

SCALAR_FUN_ATTR f16 futrts_acos16(f16 x) {
  return futrts_acos32(x);
}

SCALAR_FUN_ATTR f16 futrts_asin16(f16 x) {
  return futrts_asin32(x);
}

SCALAR_FUN_ATTR f16 futrts_atan16(f16 x) {
  return futrts_atan32(x);
}

SCALAR_FUN_ATTR f16 futrts_cosh16(f16 x) {
  return futrts_cosh32(x);
}

SCALAR_FUN_ATTR f16 futrts_sinh16(f16 x) {
  return futrts_sinh32(x);
}

SCALAR_FUN_ATTR f16 futrts_tanh16(f16 x) {
  return futrts_tanh32(x);
}

SCALAR_FUN_ATTR f16 futrts_acosh16(f16 x) {
  return futrts_acosh32(x);
}

SCALAR_FUN_ATTR f16 futrts_asinh16(f16 x) {
  return futrts_asinh32(x);
}

SCALAR_FUN_ATTR f16 futrts_atanh16(f16 x) {
  return futrts_atanh32(x);
}

SCALAR_FUN_ATTR f16 futrts_atan2_16(f16 x, f16 y) {
  return futrts_atan2_32(x, y);
}

SCALAR_FUN_ATTR f16 futrts_hypot16(f16 x, f16 y) {
  return futrts_hypot32(x, y);
}

SCALAR_FUN_ATTR f16 futrts_gamma16(f16 x) {
  return futrts_gamma32(x);
}

SCALAR_FUN_ATTR f16 futrts_lgamma16(f16 x) {
  return futrts_lgamma32(x);
}

SCALAR_FUN_ATTR f16 futrts_erf16(f16 x) {
  return futrts_erf32(x);
}

SCALAR_FUN_ATTR f16 futrts_erfc16(f16 x) {
  return futrts_erfc32(x);
}

SCALAR_FUN_ATTR f16 fmod16(f16 x, f16 y) {
  return fmod32(x, y);
}

SCALAR_FUN_ATTR f16 futrts_round16(f16 x) {
  return futrts_round32(x);
}

SCALAR_FUN_ATTR f16 futrts_floor16(f16 x) {
  return futrts_floor32(x);
}

SCALAR_FUN_ATTR f16 futrts_ceil16(f16 x) {
  return futrts_ceil32(x);
}

SCALAR_FUN_ATTR f16 futrts_nextafter16(f16 x, f16 y) {
  return halfbits2float(halfbitsnextafter(float2halfbits(x), float2halfbits(y)));
}

SCALAR_FUN_ATTR f16 futrts_lerp16(f16 v0, f16 v1, f16 t) {
  return futrts_lerp32(v0, v1, t);
}

SCALAR_FUN_ATTR f16 futrts_ldexp16(f16 x, int32_t y) {
  return futrts_ldexp32(x, y);
}

SCALAR_FUN_ATTR f16 futrts_copysign16(f16 x, f16 y) {
  return futrts_copysign32((float)x, y);
}

SCALAR_FUN_ATTR f16 futrts_mad16(f16 a, f16 b, f16 c) {
  return futrts_mad32(a, b, c);
}

SCALAR_FUN_ATTR f16 futrts_fma16(f16 a, f16 b, f16 c) {
  return futrts_fma32(a, b, c);
}

// Even when we are using an OpenCL that does not support cl_khr_fp16,
// it must still support vload_half for actually creating a
// half-precision number, which can then be efficiently converted to a
// float.  Similarly for vstore_half.
#ifdef __OPENCL_VERSION__

SCALAR_FUN_ATTR int16_t futrts_to_bits16(f16 x) {
  int16_t y;
  // Violating strict aliasing here.
  vstore_half((float)x, 0, (half*)&y);
  return y;
}

SCALAR_FUN_ATTR f16 futrts_from_bits16(int16_t x) {
  return (f16)vload_half(0, (half*)&x);
}

#else

SCALAR_FUN_ATTR int16_t futrts_to_bits16(f16 x) {
  return (int16_t)float2halfbits(x);
}

SCALAR_FUN_ATTR f16 futrts_from_bits16(int16_t x) {
  return halfbits2float((uint16_t)x);
}

SCALAR_FUN_ATTR f16 fsignum16(f16 x) {
  return futrts_isnan16(x) ? x : (x > 0 ? 1 : 0) - (x < 0 ? 1 : 0);
}

#endif

#endif

SCALAR_FUN_ATTR float fpconv_f16_f16(f16 x) {
  return x;
}

SCALAR_FUN_ATTR float fpconv_f16_f32(f16 x) {
  return x;
}

SCALAR_FUN_ATTR f16 fpconv_f32_f16(float x) {
  return (f16) x;
}

#ifdef FUTHARK_F64_ENABLED

SCALAR_FUN_ATTR double fpconv_f16_f64(f16 x) {
  return (double) x;
}

#if ISPC
SCALAR_FUN_ATTR f16 fpconv_f64_f16(double x) {
  return (f16) ((float)x);
}
#else
SCALAR_FUN_ATTR f16 fpconv_f64_f16(double x) {
  return (f16) x;
}
#endif
#endif


// End of scalar_f16.h.
// Start of atomics.h

SCALAR_FUN_ATTR int32_t atomic_xchg_i32_global(volatile __global int32_t *p, int32_t x);
SCALAR_FUN_ATTR int32_t atomic_xchg_i32_shared(volatile __local int32_t *p, int32_t x);
SCALAR_FUN_ATTR int32_t atomic_cmpxchg_i32_global(volatile __global int32_t *p,
                                                         int32_t cmp, int32_t val);
SCALAR_FUN_ATTR int32_t atomic_cmpxchg_i32_shared(volatile __local int32_t *p,
                                                        int32_t cmp, int32_t val);
SCALAR_FUN_ATTR int32_t atomic_add_i32_global(volatile __global int32_t *p, int32_t x);
SCALAR_FUN_ATTR int32_t atomic_add_i32_shared(volatile __local int32_t *p, int32_t x);
SCALAR_FUN_ATTR float atomic_fadd_f32_global(volatile __global float *p, float x);
SCALAR_FUN_ATTR float atomic_fadd_f32_shared(volatile __local float *p, float x);
SCALAR_FUN_ATTR int32_t atomic_smax_i32_global(volatile __global int32_t *p, int32_t x);
SCALAR_FUN_ATTR int32_t atomic_smax_i32_shared(volatile __local int32_t *p, int32_t x);
SCALAR_FUN_ATTR int32_t atomic_smin_i32_global(volatile __global int32_t *p, int32_t x);
SCALAR_FUN_ATTR int32_t atomic_smin_i32_shared(volatile __local int32_t *p, int32_t x);
SCALAR_FUN_ATTR uint32_t atomic_umax_i32_global(volatile __global uint32_t *p, uint32_t x);
SCALAR_FUN_ATTR uint32_t atomic_umax_i32_shared(volatile __local uint32_t *p, uint32_t x);
SCALAR_FUN_ATTR uint32_t atomic_umin_i32_global(volatile __global uint32_t *p, uint32_t x);
SCALAR_FUN_ATTR uint32_t atomic_umin_i32_shared(volatile __local uint32_t *p, uint32_t x);
SCALAR_FUN_ATTR int32_t atomic_and_i32_global(volatile __global int32_t *p, int32_t x);
SCALAR_FUN_ATTR int32_t atomic_and_i32_shared(volatile __local int32_t *p, int32_t x);
SCALAR_FUN_ATTR int32_t atomic_or_i32_global(volatile __global int32_t *p, int32_t x);
SCALAR_FUN_ATTR int32_t atomic_or_i32_shared(volatile __local int32_t *p, int32_t x);
SCALAR_FUN_ATTR int32_t atomic_xor_i32_global(volatile __global int32_t *p, int32_t x);
SCALAR_FUN_ATTR int32_t atomic_xor_i32_shared(volatile __local int32_t *p, int32_t x);

SCALAR_FUN_ATTR int32_t atomic_xchg_i32_global(volatile __global int32_t *p, int32_t x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicExch((int32_t*)p, x);
#else
  return atomic_xor(p, x);
#endif
}

SCALAR_FUN_ATTR int32_t atomic_xchg_i32_shared(volatile __local int32_t *p, int32_t x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicExch((int32_t*)p, x);
#else
  return atomic_xor(p, x);
#endif
}

SCALAR_FUN_ATTR int32_t atomic_cmpxchg_i32_global(volatile __global int32_t *p,
                                                         int32_t cmp, int32_t val) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicCAS((int32_t*)p, cmp, val);
#else
  return atomic_cmpxchg(p, cmp, val);
#endif
}

SCALAR_FUN_ATTR int32_t atomic_cmpxchg_i32_shared(volatile __local int32_t *p,
                                                        int32_t cmp, int32_t val) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicCAS((int32_t*)p, cmp, val);
#else
  return atomic_cmpxchg(p, cmp, val);
#endif
}

SCALAR_FUN_ATTR int32_t atomic_add_i32_global(volatile __global int32_t *p, int32_t x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicAdd((int32_t*)p, x);
#else
  return atomic_add(p, x);
#endif
}

SCALAR_FUN_ATTR int32_t atomic_add_i32_shared(volatile __local int32_t *p, int32_t x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicAdd((int32_t*)p, x);
#else
  return atomic_add(p, x);
#endif
}

SCALAR_FUN_ATTR float atomic_fadd_f32_global(volatile __global float *p, float x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicAdd((float*)p, x);
#else
  union { int32_t i; float f; } old;
  union { int32_t i; float f; } assumed;
  old.f = *p;
  do {
    assumed.f = old.f;
    old.f = old.f + x;
    old.i = atomic_cmpxchg_i32_global((volatile __global int32_t*)p, assumed.i, old.i);
  } while (assumed.i != old.i);
  return old.f;
#endif
}

SCALAR_FUN_ATTR float atomic_fadd_f32_shared(volatile __local float *p, float x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicAdd((float*)p, x);
#else
  union { int32_t i; float f; } old;
  union { int32_t i; float f; } assumed;
  old.f = *p;
  do {
    assumed.f = old.f;
    old.f = old.f + x;
    old.i = atomic_cmpxchg_i32_shared((volatile __local int32_t*)p, assumed.i, old.i);
  } while (assumed.i != old.i);
  return old.f;
#endif
}

SCALAR_FUN_ATTR int32_t atomic_smax_i32_global(volatile __global int32_t *p, int32_t x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicMax((int32_t*)p, x);
#else
  return atomic_max(p, x);
#endif
}

SCALAR_FUN_ATTR int32_t atomic_smax_i32_shared(volatile __local int32_t *p, int32_t x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicMax((int32_t*)p, x);
#else
  return atomic_max(p, x);
#endif
}

SCALAR_FUN_ATTR int32_t atomic_smin_i32_global(volatile __global int32_t *p, int32_t x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicMin((int32_t*)p, x);
#else
  return atomic_min(p, x);
#endif
}

SCALAR_FUN_ATTR int32_t atomic_smin_i32_shared(volatile __local int32_t *p, int32_t x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicMin((int32_t*)p, x);
#else
  return atomic_min(p, x);
#endif
}

SCALAR_FUN_ATTR uint32_t atomic_umax_i32_global(volatile __global uint32_t *p, uint32_t x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicMax((uint32_t*)p, x);
#else
  return atomic_max(p, x);
#endif
}

SCALAR_FUN_ATTR uint32_t atomic_umax_i32_shared(volatile __local uint32_t *p, uint32_t x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicMax((uint32_t*)p, x);
#else
  return atomic_max(p, x);
#endif
}

SCALAR_FUN_ATTR uint32_t atomic_umin_i32_global(volatile __global uint32_t *p, uint32_t x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicMin((uint32_t*)p, x);
#else
  return atomic_min(p, x);
#endif
}

SCALAR_FUN_ATTR uint32_t atomic_umin_i32_shared(volatile __local uint32_t *p, uint32_t x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicMin((uint32_t*)p, x);
#else
  return atomic_min(p, x);
#endif
}

SCALAR_FUN_ATTR int32_t atomic_and_i32_global(volatile __global int32_t *p, int32_t x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicAnd((int32_t*)p, x);
#else
  return atomic_and(p, x);
#endif
}

SCALAR_FUN_ATTR int32_t atomic_and_i32_shared(volatile __local int32_t *p, int32_t x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicAnd((int32_t*)p, x);
#else
  return atomic_and(p, x);
#endif
}

SCALAR_FUN_ATTR int32_t atomic_or_i32_global(volatile __global int32_t *p, int32_t x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicOr((int32_t*)p, x);
#else
  return atomic_or(p, x);
#endif
}

SCALAR_FUN_ATTR int32_t atomic_or_i32_shared(volatile __local int32_t *p, int32_t x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicOr((int32_t*)p, x);
#else
  return atomic_or(p, x);
#endif
}

SCALAR_FUN_ATTR int32_t atomic_xor_i32_global(volatile __global int32_t *p, int32_t x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicXor((int32_t*)p, x);
#else
  return atomic_xor(p, x);
#endif
}

SCALAR_FUN_ATTR int32_t atomic_xor_i32_shared(volatile __local int32_t *p, int32_t x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicXor((int32_t*)p, x);
#else
  return atomic_xor(p, x);
#endif
}

// Start of 64 bit atomics

#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP) || defined(cl_khr_int64_base_atomics) && defined(cl_khr_int64_extended_atomics)

SCALAR_FUN_ATTR int64_t atomic_xchg_i64_global(volatile __global int64_t *p, int64_t x);
SCALAR_FUN_ATTR int64_t atomic_xchg_i64_shared(volatile __local int64_t *p, int64_t x);
SCALAR_FUN_ATTR int64_t atomic_cmpxchg_i64_global(volatile __global int64_t *p,
                                                         int64_t cmp, int64_t val);
SCALAR_FUN_ATTR int64_t atomic_cmpxchg_i64_shared(volatile __local int64_t *p,
                                                        int64_t cmp, int64_t val);
SCALAR_FUN_ATTR int64_t atomic_add_i64_global(volatile __global int64_t *p, int64_t x);
SCALAR_FUN_ATTR int64_t atomic_add_i64_shared(volatile __local int64_t *p, int64_t x);
SCALAR_FUN_ATTR int64_t atomic_smax_i64_global(volatile __global int64_t *p, int64_t x);
SCALAR_FUN_ATTR int64_t atomic_smax_i64_shared(volatile __local int64_t *p, int64_t x);
SCALAR_FUN_ATTR int64_t atomic_smin_i64_global(volatile __global int64_t *p, int64_t x);
SCALAR_FUN_ATTR int64_t atomic_smin_i64_shared(volatile __local int64_t *p, int64_t x);
SCALAR_FUN_ATTR uint64_t atomic_umax_i64_global(volatile __global uint64_t *p, uint64_t x);
SCALAR_FUN_ATTR uint64_t atomic_umax_i64_shared(volatile __local uint64_t *p, uint64_t x);
SCALAR_FUN_ATTR uint64_t atomic_umin_i64_global(volatile __global uint64_t *p, uint64_t x);
SCALAR_FUN_ATTR uint64_t atomic_umin_i64_shared(volatile __local uint64_t *p, uint64_t x);
SCALAR_FUN_ATTR int64_t atomic_and_i64_global(volatile __global int64_t *p, int64_t x);
SCALAR_FUN_ATTR int64_t atomic_and_i64_shared(volatile __local int64_t *p, int64_t x);
SCALAR_FUN_ATTR int64_t atomic_or_i64_global(volatile __global int64_t *p, int64_t x);
SCALAR_FUN_ATTR int64_t atomic_or_i64_shared(volatile __local int64_t *p, int64_t x);
SCALAR_FUN_ATTR int64_t atomic_xor_i64_global(volatile __global int64_t *p, int64_t x);
SCALAR_FUN_ATTR int64_t atomic_xor_i64_shared(volatile __local int64_t *p, int64_t x);

#ifdef FUTHARK_F64_ENABLED
SCALAR_FUN_ATTR double atomic_fadd_f64_global(volatile __global double *p, double x);
SCALAR_FUN_ATTR double atomic_fadd_f64_shared(volatile __local double *p, double x);
#endif

SCALAR_FUN_ATTR int64_t atomic_xchg_i64_global(volatile __global int64_t *p, int64_t x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicExch((uint64_t*)p, x);
#else
  return atom_xor(p, x);
#endif
}

SCALAR_FUN_ATTR int64_t atomic_xchg_i64_shared(volatile __local int64_t *p, int64_t x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicExch((uint64_t*)p, x);
#else
  return atom_xor(p, x);
#endif
}

SCALAR_FUN_ATTR int64_t atomic_cmpxchg_i64_global(volatile __global int64_t *p,
                                                         int64_t cmp, int64_t val) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicCAS((uint64_t*)p, cmp, val);
#else
  return atom_cmpxchg(p, cmp, val);
#endif
}

SCALAR_FUN_ATTR int64_t atomic_cmpxchg_i64_shared(volatile __local int64_t *p,
                                                        int64_t cmp, int64_t val) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicCAS((uint64_t*)p, cmp, val);
#else
  return atom_cmpxchg(p, cmp, val);
#endif
}

SCALAR_FUN_ATTR int64_t atomic_add_i64_global(volatile __global int64_t *p, int64_t x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicAdd((uint64_t*)p, x);
#else
  return atom_add(p, x);
#endif
}

SCALAR_FUN_ATTR int64_t atomic_add_i64_shared(volatile __local int64_t *p, int64_t x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicAdd((uint64_t*)p, x);
#else
  return atom_add(p, x);
#endif
}

#ifdef FUTHARK_F64_ENABLED

SCALAR_FUN_ATTR double atomic_fadd_f64_global(volatile __global double *p, double x) {
#if defined(FUTHARK_CUDA) && __CUDA_ARCH__ >= 600 || defined(FUTHARK_HIP)
  return atomicAdd((double*)p, x);
#else
  union { int64_t i; double f; } old;
  union { int64_t i; double f; } assumed;
  old.f = *p;
  do {
    assumed.f = old.f;
    old.f = old.f + x;
    old.i = atomic_cmpxchg_i64_global((volatile __global int64_t*)p, assumed.i, old.i);
  } while (assumed.i != old.i);
  return old.f;
#endif
}

SCALAR_FUN_ATTR double atomic_fadd_f64_shared(volatile __local double *p, double x) {
#if defined(FUTHARK_CUDA) && __CUDA_ARCH__ >= 600 || defined(FUTHARK_HIP)
  return atomicAdd((double*)p, x);
#else
  union { int64_t i; double f; } old;
  union { int64_t i; double f; } assumed;
  old.f = *p;
  do {
    assumed.f = old.f;
    old.f = old.f + x;
    old.i = atomic_cmpxchg_i64_shared((volatile __local int64_t*)p, assumed.i, old.i);
  } while (assumed.i != old.i);
  return old.f;
#endif
}

#endif

SCALAR_FUN_ATTR int64_t atomic_smax_i64_global(volatile __global int64_t *p, int64_t x) {
#if defined(FUTHARK_CUDA)
  return atomicMax((int64_t*)p, x);
#elif defined(FUTHARK_HIP)
  // Currentely missing in HIP; probably a temporary oversight.
  int64_t old = *p, assumed;
  do {
    assumed = old;
    old = smax64(old, x);
    old = atomic_cmpxchg_i64_global((volatile __global int64_t*)p, assumed, old);
  } while (assumed != old);
  return old;
#else
  return atom_max(p, x);
#endif
}

SCALAR_FUN_ATTR int64_t atomic_smax_i64_shared(volatile __local int64_t *p, int64_t x) {
#if defined(FUTHARK_CUDA)
  return atomicMax((int64_t*)p, x);
#elif defined(FUTHARK_HIP)
  // Currentely missing in HIP; probably a temporary oversight.
  int64_t old = *p, assumed;
  do {
    assumed = old;
    old = smax64(old, x);
    old = atomic_cmpxchg_i64_shared((volatile __local int64_t*)p, assumed, old);
  } while (assumed != old);
  return old;
#else
  return atom_max(p, x);
#endif
}

SCALAR_FUN_ATTR int64_t atomic_smin_i64_global(volatile __global int64_t *p, int64_t x) {
#if defined(FUTHARK_CUDA)
  return atomicMin((int64_t*)p, x);
#elif defined(FUTHARK_HIP)
  // Currentely missing in HIP; probably a temporary oversight.
  int64_t old = *p, assumed;
  do {
    assumed = old;
    old = smin64(old, x);
    old = atomic_cmpxchg_i64_global((volatile __global int64_t*)p, assumed, old);
  } while (assumed != old);
  return old;
#else
  return atom_min(p, x);
#endif
}

SCALAR_FUN_ATTR int64_t atomic_smin_i64_shared(volatile __local int64_t *p, int64_t x) {
#if defined(FUTHARK_CUDA)
  return atomicMin((int64_t*)p, x);
#elif defined(FUTHARK_HIP)
  // Currentely missing in HIP; probably a temporary oversight.
  int64_t old = *p, assumed;
  do {
    assumed = old;
    old = smin64(old, x);
    old = atomic_cmpxchg_i64_shared((volatile __local int64_t*)p, assumed, old);
  } while (assumed != old);
  return old;
#else
  return atom_min(p, x);
#endif
}

SCALAR_FUN_ATTR uint64_t atomic_umax_i64_global(volatile __global uint64_t *p, uint64_t x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicMax((uint64_t*)p, x);
#else
  return atom_max(p, x);
#endif
}

SCALAR_FUN_ATTR uint64_t atomic_umax_i64_shared(volatile __local uint64_t *p, uint64_t x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicMax((uint64_t*)p, x);
#else
  return atom_max(p, x);
#endif
}

SCALAR_FUN_ATTR uint64_t atomic_umin_i64_global(volatile __global uint64_t *p, uint64_t x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicMin((uint64_t*)p, x);
#else
  return atom_min(p, x);
#endif
}

SCALAR_FUN_ATTR uint64_t atomic_umin_i64_shared(volatile __local uint64_t *p, uint64_t x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicMin((uint64_t*)p, x);
#else
  return atom_min(p, x);
#endif
}

SCALAR_FUN_ATTR int64_t atomic_and_i64_global(volatile __global int64_t *p, int64_t x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicAnd((uint64_t*)p, x);
#else
  return atom_and(p, x);
#endif
}

SCALAR_FUN_ATTR int64_t atomic_and_i64_shared(volatile __local int64_t *p, int64_t x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicAnd((uint64_t*)p, x);
#else
  return atom_and(p, x);
#endif
}

SCALAR_FUN_ATTR int64_t atomic_or_i64_global(volatile __global int64_t *p, int64_t x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicOr((uint64_t*)p, x);
#else
  return atom_or(p, x);
#endif
}

SCALAR_FUN_ATTR int64_t atomic_or_i64_shared(volatile __local int64_t *p, int64_t x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicOr((uint64_t*)p, x);
#else
  return atom_or(p, x);
#endif
}

SCALAR_FUN_ATTR int64_t atomic_xor_i64_global(volatile __global int64_t *p, int64_t x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicXor((uint64_t*)p, x);
#else
  return atom_xor(p, x);
#endif
}

SCALAR_FUN_ATTR int64_t atomic_xor_i64_shared(volatile __local int64_t *p, int64_t x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicXor((uint64_t*)p, x);
#else
  return atom_xor(p, x);
#endif
}

#endif // defined(FUTHARK_CUDA) || defined(FUTHARK_HIP) || defined(cl_khr_int64_base_atomics) && defined(cl_khr_int64_extended_atomics)

// End of atomics.h
// Start of transpose.cl

#define GEN_TRANSPOSE_KERNELS(NAME, ELEM_TYPE)                          \
FUTHARK_KERNEL_SIZED(TR_BLOCK_DIM*2, TR_TILE_DIM/TR_ELEMS_PER_THREAD, 1)\
void map_transpose_##NAME(SHARED_MEM_PARAM                              \
                          __global ELEM_TYPE *dst_mem,                  \
                          int64_t dst_offset,                           \
                          __global ELEM_TYPE *src_mem,                  \
                          int64_t src_offset,                           \
                          int32_t num_arrays,                           \
                          int32_t x_elems,                              \
                          int32_t y_elems,                              \
                          int32_t mulx,                                 \
                          int32_t muly,                                 \
                          int32_t repeat_1,                             \
                          int32_t repeat_2) {                           \
  (void)mulx; (void)muly;                                               \
  __local ELEM_TYPE* block = (__local ELEM_TYPE*)shared_mem;            \
  int tblock_id_0 = get_tblock_id(0);                                   \
  int global_id_0 = get_global_id(0);                                   \
  int tblock_id_1 = get_tblock_id(1);                                   \
  int global_id_1 = get_global_id(1);                                   \
  for (int i1 = 0; i1 <= repeat_1; i1++) {                              \
    int tblock_id_2 = get_tblock_id(2);                                 \
    int global_id_2 = get_global_id(2);                                 \
    for (int i2 = 0; i2 <= repeat_2; i2++) {                            \
      int32_t our_array_offset = tblock_id_2 * x_elems * y_elems;       \
      int32_t odata_offset = dst_offset + our_array_offset;             \
      int32_t idata_offset = src_offset + our_array_offset;             \
      int32_t x_index = global_id_0;                                    \
      int32_t y_index = tblock_id_1 * TR_TILE_DIM + get_local_id(1);    \
      if (x_index < x_elems) {                                          \
        for (int32_t j = 0; j < TR_ELEMS_PER_THREAD; j++) {             \
          int32_t index_i = (y_index + j * (TR_TILE_DIM/TR_ELEMS_PER_THREAD)) * x_elems + x_index; \
          if (y_index + j * (TR_TILE_DIM/TR_ELEMS_PER_THREAD) < y_elems) { \
            block[(get_local_id(1) + j * (TR_TILE_DIM/TR_ELEMS_PER_THREAD)) * (TR_TILE_DIM+1) + \
                  get_local_id(0)] =                                    \
              src_mem[idata_offset + index_i];                          \
          }                                                             \
        }                                                               \
      }                                                                 \
      barrier_local();                                                  \
      x_index = tblock_id_1 * TR_TILE_DIM + get_local_id(0);            \
      y_index = tblock_id_0 * TR_TILE_DIM + get_local_id(1);            \
      if (x_index < y_elems) {                                          \
        for (int32_t j = 0; j < TR_ELEMS_PER_THREAD; j++) {             \
          int32_t index_out = (y_index + j * (TR_TILE_DIM/TR_ELEMS_PER_THREAD)) * y_elems + x_index; \
          if (y_index + j * (TR_TILE_DIM/TR_ELEMS_PER_THREAD) < x_elems) { \
            dst_mem[(odata_offset + index_out)] =                       \
              block[get_local_id(0) * (TR_TILE_DIM+1) +                 \
                    get_local_id(1) + j * (TR_TILE_DIM/TR_ELEMS_PER_THREAD)]; \
          }                                                             \
        }                                                               \
      }                                                                 \
      tblock_id_2 += get_num_tblocks(2);                                \
      global_id_2 += get_global_size(2);                                \
    }                                                                   \
    tblock_id_1 += get_num_tblocks(1);                                  \
    global_id_1 += get_global_size(1);                                  \
  }                                                                     \
}                                                                       \
                                                                        \
FUTHARK_KERNEL_SIZED(TR_BLOCK_DIM, TR_BLOCK_DIM, 1)                     \
void map_transpose_##NAME##_low_height(SHARED_MEM_PARAM                 \
                                                __global ELEM_TYPE *dst_mem, \
                                                int64_t dst_offset,     \
                                                __global ELEM_TYPE *src_mem, \
                                                int64_t src_offset,     \
                                                int32_t num_arrays,     \
                                                int32_t x_elems,        \
                                                int32_t y_elems,        \
                                                int32_t mulx,           \
                                                int32_t muly,           \
                                                int32_t repeat_1,       \
                                                int32_t repeat_2) {     \
  __local ELEM_TYPE* block = (__local ELEM_TYPE*)shared_mem;            \
  int tblock_id_0 = get_tblock_id(0);                                   \
  int global_id_0 = get_global_id(0);                                   \
  int tblock_id_1 = get_tblock_id(1);                                   \
  int global_id_1 = get_global_id(1);                                   \
  for (int i1 = 0; i1 <= repeat_1; i1++) {                              \
    int tblock_id_2 = get_tblock_id(2);                                 \
    int global_id_2 = get_global_id(2);                                 \
    for (int i2 = 0; i2 <= repeat_2; i2++) {                            \
      int32_t our_array_offset = tblock_id_2 * x_elems * y_elems;       \
      int32_t odata_offset = dst_offset + our_array_offset;             \
      int32_t idata_offset = src_offset + our_array_offset;             \
      int32_t x_index =                                                 \
        tblock_id_0 * TR_BLOCK_DIM * mulx +                             \
        get_local_id(0) +                                               \
        get_local_id(1)%mulx * TR_BLOCK_DIM;                            \
      int32_t y_index = tblock_id_1 * TR_BLOCK_DIM + get_local_id(1)/mulx; \
      int32_t index_in = y_index * x_elems + x_index;                   \
      if (x_index < x_elems && y_index < y_elems) {                     \
        block[get_local_id(1) * (TR_BLOCK_DIM+1) + get_local_id(0)] =   \
          src_mem[idata_offset + index_in];                             \
      }                                                                 \
      barrier_local();                                                  \
      x_index = tblock_id_1 * TR_BLOCK_DIM + get_local_id(0)/mulx;      \
      y_index =                                                         \
        tblock_id_0 * TR_BLOCK_DIM * mulx +                             \
        get_local_id(1) +                                               \
        (get_local_id(0)%mulx) * TR_BLOCK_DIM;                          \
      int32_t index_out = y_index * y_elems + x_index;                  \
      if (x_index < y_elems && y_index < x_elems) {                     \
        dst_mem[odata_offset + index_out] =                             \
          block[get_local_id(0) * (TR_BLOCK_DIM+1) + get_local_id(1)];  \
      }                                                                 \
      tblock_id_2 += get_num_tblocks(2);                                \
      global_id_2 += get_global_size(2);                                \
    }                                                                   \
    tblock_id_1 += get_num_tblocks(1);                                  \
    global_id_1 += get_global_size(1);                                  \
  }                                                                     \
}                                                                       \
                                                                        \
FUTHARK_KERNEL_SIZED(TR_BLOCK_DIM, TR_BLOCK_DIM, 1)                     \
void map_transpose_##NAME##_low_width(SHARED_MEM_PARAM                  \
                                      __global ELEM_TYPE *dst_mem,      \
                                      int64_t dst_offset,               \
                                      __global ELEM_TYPE *src_mem,      \
                                      int64_t src_offset,               \
                                      int32_t num_arrays,               \
                                      int32_t x_elems,                  \
                                      int32_t y_elems,                  \
                                      int32_t mulx,                     \
                                      int32_t muly,                     \
                                      int32_t repeat_1,                 \
                                      int32_t repeat_2) {               \
  __local ELEM_TYPE* block = (__local ELEM_TYPE*)shared_mem;            \
  int tblock_id_0 = get_tblock_id(0);                                   \
  int global_id_0 = get_global_id(0);                                   \
  int tblock_id_1 = get_tblock_id(1);                                   \
  int global_id_1 = get_global_id(1);                                   \
  for (int i1 = 0; i1 <= repeat_1; i1++) {                              \
    int tblock_id_2 = get_tblock_id(2);                                 \
    int global_id_2 = get_global_id(2);                                 \
    for (int i2 = 0; i2 <= repeat_2; i2++) {                            \
      int32_t our_array_offset = tblock_id_2 * x_elems * y_elems;       \
      int32_t odata_offset = dst_offset + our_array_offset;             \
      int32_t idata_offset = src_offset + our_array_offset;             \
      int32_t x_index = tblock_id_0 * TR_BLOCK_DIM + get_local_id(0)/muly; \
      int32_t y_index =                                                 \
        tblock_id_1 * TR_BLOCK_DIM * muly +                             \
        get_local_id(1) + (get_local_id(0)%muly) * TR_BLOCK_DIM;        \
      int32_t index_in = y_index * x_elems + x_index;                   \
      if (x_index < x_elems && y_index < y_elems) {                     \
        block[get_local_id(1) * (TR_BLOCK_DIM+1) + get_local_id(0)] =   \
          src_mem[idata_offset + index_in];                             \
      }                                                                 \
      barrier_local();                                                  \
      x_index = tblock_id_1 * TR_BLOCK_DIM * muly +                     \
        get_local_id(0) + (get_local_id(1)%muly) * TR_BLOCK_DIM;        \
      y_index = tblock_id_0 * TR_BLOCK_DIM + get_local_id(1)/muly;      \
      int32_t index_out = y_index * y_elems + x_index;                  \
      if (x_index < y_elems && y_index < x_elems) {                     \
        dst_mem[odata_offset + index_out] =                             \
          block[get_local_id(0) * (TR_BLOCK_DIM+1) + get_local_id(1)];  \
      }                                                                 \
      tblock_id_2 += get_num_tblocks(2);                                \
      global_id_2 += get_num_tblocks(2) * get_local_size(2);            \
    }                                                                   \
    tblock_id_1 += get_num_tblocks(1);                                  \
    global_id_1 += get_num_tblocks(1) * get_local_size(1);              \
  }                                                                     \
}                                                                       \
                                                                        \
FUTHARK_KERNEL_SIZED(TR_BLOCK_DIM*TR_BLOCK_DIM, 1, 1)                   \
void map_transpose_##NAME##_small(SHARED_MEM_PARAM                       \
                                  __global ELEM_TYPE *dst_mem,          \
                                  int64_t dst_offset,                   \
                                  __global ELEM_TYPE *src_mem,          \
                                  int64_t src_offset,                   \
                                  int32_t num_arrays,                   \
                                  int32_t x_elems,                      \
                                  int32_t y_elems,                      \
                                  int32_t mulx,                         \
                                  int32_t muly,                         \
                                  int32_t repeat_1,                     \
                                  int32_t repeat_2) {                   \
  (void)mulx; (void)muly;                                               \
  __local ELEM_TYPE* block = (__local ELEM_TYPE*)shared_mem;            \
  int tblock_id_0 = get_tblock_id(0);                                   \
  int global_id_0 = get_global_id(0);                                   \
  int tblock_id_1 = get_tblock_id(1);                                   \
  int global_id_1 = get_global_id(1);                                   \
  for (int i1 = 0; i1 <= repeat_1; i1++) {                              \
    int tblock_id_2 = get_tblock_id(2);                                 \
    int global_id_2 = get_global_id(2);                                 \
    for (int i2 = 0; i2 <= repeat_2; i2++) {                            \
      int32_t our_array_offset = global_id_0/(y_elems * x_elems) * y_elems * x_elems; \
      int32_t x_index = (global_id_0 % (y_elems * x_elems))/y_elems;    \
      int32_t y_index = global_id_0%y_elems;                            \
      int32_t odata_offset = dst_offset + our_array_offset;             \
      int32_t idata_offset = src_offset + our_array_offset;             \
      int32_t index_in = y_index * x_elems + x_index;                   \
      int32_t index_out = x_index * y_elems + y_index;                  \
      if (global_id_0 < x_elems * y_elems * num_arrays) {               \
        dst_mem[odata_offset + index_out] = src_mem[idata_offset + index_in]; \
      }                                                                 \
      tblock_id_2 += get_num_tblocks(2);                                \
      global_id_2 += get_global_size(2);                                \
    }                                                                   \
    tblock_id_1 += get_num_tblocks(1);                                  \
    global_id_1 += get_global_size(1);                                  \
  }                                                                     \
}                                                                       \
                                                                        \
FUTHARK_KERNEL_SIZED(TR_BLOCK_DIM*2, TR_TILE_DIM/TR_ELEMS_PER_THREAD, 1)\
void map_transpose_##NAME##_large(SHARED_MEM_PARAM                      \
                                  __global ELEM_TYPE *dst_mem,          \
                                  int64_t dst_offset,                   \
                                  __global ELEM_TYPE *src_mem,          \
                                  int64_t src_offset,                   \
                                  int64_t num_arrays,                   \
                                  int64_t x_elems,                      \
                                  int64_t y_elems,                      \
                                  int64_t mulx,                         \
                                  int64_t muly,                         \
                                  int32_t repeat_1,                     \
                                  int32_t repeat_2) {                   \
  (void)mulx; (void)muly;                                               \
  __local ELEM_TYPE* block = (__local ELEM_TYPE*)shared_mem;             \
  int tblock_id_0 = get_tblock_id(0);                                   \
  int global_id_0 = get_global_id(0);                                   \
  int tblock_id_1 = get_tblock_id(1);                                   \
  int global_id_1 = get_global_id(1);                                   \
  for (int i1 = 0; i1 <= repeat_1; i1++) {                              \
    int tblock_id_2 = get_tblock_id(2);                                 \
    int global_id_2 = get_global_id(2);                                 \
    for (int i2 = 0; i2 <= repeat_2; i2++) {                            \
      int64_t our_array_offset = tblock_id_2 * x_elems * y_elems;       \
      int64_t odata_offset = dst_offset + our_array_offset;             \
      int64_t idata_offset = src_offset + our_array_offset;             \
      int64_t x_index = global_id_0;                                    \
      int64_t y_index = tblock_id_1 * TR_TILE_DIM + get_local_id(1);    \
      if (x_index < x_elems) {                                          \
        for (int64_t j = 0; j < TR_ELEMS_PER_THREAD; j++) {             \
          int64_t index_i = (y_index + j * (TR_TILE_DIM/TR_ELEMS_PER_THREAD)) * x_elems + x_index; \
          if (y_index + j * (TR_TILE_DIM/TR_ELEMS_PER_THREAD) < y_elems) { \
            block[(get_local_id(1) + j * (TR_TILE_DIM/TR_ELEMS_PER_THREAD)) * (TR_TILE_DIM+1) + \
                  get_local_id(0)] =                                    \
              src_mem[idata_offset + index_i];                          \
          }                                                             \
        }                                                               \
      }                                                                 \
      barrier_local();                                                  \
      x_index = tblock_id_1 * TR_TILE_DIM + get_local_id(0);            \
      y_index = tblock_id_0 * TR_TILE_DIM + get_local_id(1);            \
      if (x_index < y_elems) {                                          \
        for (int64_t j = 0; j < TR_ELEMS_PER_THREAD; j++) {             \
          int64_t index_out = (y_index + j * (TR_TILE_DIM/TR_ELEMS_PER_THREAD)) * y_elems + x_index; \
          if (y_index + j * (TR_TILE_DIM/TR_ELEMS_PER_THREAD) < x_elems) { \
            dst_mem[(odata_offset + index_out)] =                       \
              block[get_local_id(0) * (TR_TILE_DIM+1) +                 \
                    get_local_id(1) + j * (TR_TILE_DIM/TR_ELEMS_PER_THREAD)]; \
          }                                                             \
        }                                                               \
      }                                                                 \
      tblock_id_2 += get_num_tblocks(2);                                \
      global_id_2 += get_global_size(2);                                \
    }                                                                   \
    tblock_id_1 += get_num_tblocks(1);                                  \
    global_id_1 += get_global_size(1);                                  \
  }                                                                     \
}                                                                       \

GEN_TRANSPOSE_KERNELS(1b, uint8_t)
GEN_TRANSPOSE_KERNELS(2b, uint16_t)
GEN_TRANSPOSE_KERNELS(4b, uint32_t)
GEN_TRANSPOSE_KERNELS(8b, uint64_t)

// End of transpose.cl
// Start of copy.cl

#define GEN_COPY_KERNEL(NAME, ELEM_TYPE) \
FUTHARK_KERNEL void lmad_copy_##NAME(SHARED_MEM_PARAM                   \
                               __global ELEM_TYPE *dst_mem,             \
                               int64_t dst_offset,                      \
                               __global ELEM_TYPE *src_mem,             \
                               int64_t src_offset,                      \
                               int64_t n,                               \
                               int r,                                   \
                               int64_t shape0, int64_t dst_stride0, int64_t src_stride0, \
                               int64_t shape1, int64_t dst_stride1, int64_t src_stride1, \
                               int64_t shape2, int64_t dst_stride2, int64_t src_stride2, \
                               int64_t shape3, int64_t dst_stride3, int64_t src_stride3, \
                               int64_t shape4, int64_t dst_stride4, int64_t src_stride4, \
                               int64_t shape5, int64_t dst_stride5, int64_t src_stride5, \
                               int64_t shape6, int64_t dst_stride6, int64_t src_stride6, \
                               int64_t shape7, int64_t dst_stride7, int64_t src_stride7) { \
  int64_t gtid = get_global_id(0);                                      \
  int64_t remainder = gtid;                                             \
                                                                        \
  if (gtid >= n) {                                                      \
    return;                                                             \
  }                                                                     \
                                                                        \
  if (r > 0) {                                                          \
    int64_t i = remainder % shape0;                                     \
    dst_offset += i * dst_stride0;                                      \
    src_offset += i * src_stride0;                                      \
    remainder /= shape0;                                                \
  }                                                                     \
  if (r > 1) {                                                          \
    int64_t i = remainder % shape1;                                     \
    dst_offset += i * dst_stride1;                                      \
    src_offset += i * src_stride1;                                      \
    remainder /= shape1;                                                \
  }                                                                     \
  if (r > 2) {                                                          \
    int64_t i = remainder % shape2;                                     \
    dst_offset += i * dst_stride2;                                      \
    src_offset += i * src_stride2;                                      \
    remainder /= shape2;                                                \
  }                                                                     \
  if (r > 3) {                                                          \
    int64_t i = remainder % shape3;                                     \
    dst_offset += i * dst_stride3;                                      \
    src_offset += i * src_stride3;                                      \
    remainder /= shape3;                                                \
  }                                                                     \
  if (r > 4) {                                                          \
    int64_t i = remainder % shape4;                                     \
    dst_offset += i * dst_stride4;                                      \
    src_offset += i * src_stride4;                                      \
    remainder /= shape4;                                                \
  }                                                                     \
  if (r > 5) {                                                          \
    int64_t i = remainder % shape5;                                     \
    dst_offset += i * dst_stride5;                                      \
    src_offset += i * src_stride5;                                      \
    remainder /= shape5;                                                \
  }                                                                     \
  if (r > 6) {                                                          \
    int64_t i = remainder % shape6;                                     \
    dst_offset += i * dst_stride6;                                      \
    src_offset += i * src_stride6;                                      \
    remainder /= shape6;                                                \
  }                                                                     \
  if (r > 7) {                                                          \
    int64_t i = remainder % shape7;                                     \
    dst_offset += i * dst_stride7;                                      \
    src_offset += i * src_stride7;                                      \
    remainder /= shape7;                                                \
  }                                                                     \
                                                                        \
  dst_mem[dst_offset] = src_mem[src_offset];                            \
}

GEN_COPY_KERNEL(1b, uint8_t)
GEN_COPY_KERNEL(2b, uint16_t)
GEN_COPY_KERNEL(4b, uint32_t)
GEN_COPY_KERNEL(8b, uint64_t)

// End of copy.cl
using namespace cute;

template<class TypeIn>
struct convert_type {
    using TypeOut = TypeIn;
};

template<>
struct convert_type<f16> {
    using TypeOut = half_t;
};

template<class ElmTypeAIn, class ElmTypeBIn, class ElmTypeCIn, class SizeM, class SizeN, class WarpsM, class WarpsN>
struct get_mma_config {};

// TODO: use FMA when Tensor Cores not available?

template<class SizeM, class SizeN, class WarpsM, class WarpsN>
struct get_mma_config<half_t, half_t, half_t, SizeM, SizeN, WarpsM, WarpsN> {
    // TODO: should depend on architecture available
    using MMATraits = MMA_Traits<SM80_16x8x16_F16F16F16F16_TN>;
    using ACopyOpSharedRegisters = SM75_U32x4_LDSM_N;
    using BCopyOpSharedRegisters = SM75_U16x8_LDSM_T;

    using MMATile = Tile<Int<16 * WarpsM{}>, Int<16 * WarpsN{}>, _16>;
    using TiledMMA = TiledMMA<
        MMA_Atom<MMATraits>,
        Layout<Shape<WarpsM,WarpsN,_1>>,
        MMATile
    >;
};

template<class SizeM, class SizeN, class WarpsM, class WarpsN>
struct get_mma_config<half_t, half_t, float, SizeM, SizeN, WarpsM, WarpsN>{
    // TODO: should depend on architecture available
    using MMATraits = MMA_Traits<SM80_16x8x16_F32F16F16F32_TN>;
    using ACopyOpSharedRegisters = SM75_U32x4_LDSM_N;
    using BCopyOpSharedRegisters = SM75_U16x8_LDSM_T;

    using MMATile = Tile<Int<16 * WarpsM{}>, Int<16 * WarpsN{}>, _16>;
    using TiledMMA = TiledMMA<
        MMA_Atom<MMATraits>,
        Layout<Shape<WarpsM,WarpsN,_1>>,
        MMATile
    >;
};

template<class SizeY, class SizeX, class Swizzle, class Majorness, int shift_len>
struct get_layout_config {};

template<class SizeY, class SizeX, int shift_len>
struct get_layout_config<SizeY, SizeX, _1, LayoutRight, shift_len>{
    using SharedLayout = ComposedLayout<Swizzle<3, 3, shift_len>, _0, Layout<Shape<SizeY, SizeX>, Stride<SizeX, _1>>>;
};

template<class SizeY, class SizeX, int shift_len>
struct get_layout_config<SizeY, SizeX, _0, LayoutRight, shift_len>{
    using SharedLayout = Layout<Shape<SizeY, SizeX>, Stride<SizeX, _1>>;
};

template<class SizeY, class SizeX, int shift_len>
struct get_layout_config<SizeY, SizeX, _1, LayoutLeft, shift_len>{
    using SharedLayout = ComposedLayout<Swizzle<3, 3, shift_len>, _0, Layout<Shape<SizeY, SizeX>, Stride<_1, SizeY>>>;
};

template<class SizeY, class SizeX, int shift_len>
struct get_layout_config<SizeY, SizeX, _0, LayoutLeft, shift_len>{
    using SharedLayout = Layout<Shape<SizeY, SizeX>, Stride<_1, SizeY>>;
};

template<class ElmTypeIn, class SizeY, class SizeX, class WarpsM, class WarpsN>
FUTHARK_FUN_ATTR void futrts_copyGlobalShared(unsigned char **mem_out_p, unsigned char *global_mem, unsigned char *shared_mem, int64_t offset, ElmTypeIn, SizeY, SizeX, WarpsM, WarpsN)
{
    *mem_out_p = shared_mem;

    int flatThreadIdx = threadIdx.z * blockDim.y * blockDim.x + threadIdx.y * blockDim.x + threadIdx.x;

    if (flatThreadIdx < WarpsM{} * WarpsN{} * 32) {
      using ElmType = typename convert_type<ElmTypeIn>::TypeOut;

      using CopyOpGlobalShared = SM80_CP_ASYNC_CACHEGLOBAL<uint128_t>;

      constexpr int elmsPerLoad = 16 / sizeof(ElmType);
      constexpr int threadsX = SizeX{} / elmsPerLoad;
      constexpr int threadsY = (WarpsM{} * WarpsN{} * 32) / threadsX;

      constexpr unsigned int sizeXunsigned = SizeX{};
      constexpr unsigned int shift_len = max(bit_width(sizeXunsigned) - 4, _3{});

      using LayoutConfig = get_layout_config<SizeY, SizeX, _1, LayoutRight, shift_len>;
      typename LayoutConfig::SharedLayout s_layout;

      auto g_layout = make_layout(Shape<SizeY, SizeX>{}, LayoutRight{});

      TiledCopy copy_global_shared = make_tiled_copy(Copy_Atom<CopyOpGlobalShared, ElmType>{},
          make_layout(Shape<Int<threadsY>, Int<threadsX>>{}, LayoutRight{}),
          Layout<Shape<_1,Int<elmsPerLoad>>>{}
      );

      Tensor s = make_tensor(make_smem_ptr(reinterpret_cast<ElmType *>(shared_mem)), s_layout);
      Tensor g = make_tensor(make_gmem_ptr(&reinterpret_cast<ElmType *>(global_mem)[offset]), g_layout);

      ThrCopy thr_copy_global_shared = copy_global_shared.get_slice(flatThreadIdx);
      Tensor tAgA = thr_copy_global_shared.partition_S(g);
      Tensor tAsA = thr_copy_global_shared.partition_D(s);

      copy(copy_global_shared, tAgA, tAsA);

      cp_async_fence();
    }

//     Assuming the copied data is only used in futrts_tensorMMM, we do not need to wait for it here
//     cp_async_wait<0>();
//     __syncthreads();
}

template<class ElmTypeAIn, class ElmTypeBIn, class ElmTypeCIn, class SizeM, class SizeN, class WarpsM, class WarpsN, int numRegs>
FUTHARK_FUN_ATTR void futrts_copyRegistersShared(unsigned char **mem_out_p, ElmTypeCIn (&registers_mem)[numRegs], unsigned char *shared_mem, ElmTypeAIn, ElmTypeBIn, SizeM, SizeN, WarpsM, WarpsN)
{
    *mem_out_p = shared_mem;

    int flatThreadIdx = threadIdx.z * blockDim.y * blockDim.x + threadIdx.y * blockDim.x + threadIdx.x;

    if (flatThreadIdx < WarpsM{} * WarpsN{} * 32) {
        using ElmTypeA = typename convert_type<ElmTypeAIn>::TypeOut;
        using ElmTypeB = typename convert_type<ElmTypeBIn>::TypeOut;
        using ElmTypeC = typename convert_type<ElmTypeCIn>::TypeOut;

        using MMAConfig = get_mma_config<ElmTypeA, ElmTypeB, ElmTypeC, SizeM, SizeN, WarpsM, WarpsN>;
        typename MMAConfig::TiledMMA tiled_mma;

        auto s_layout = make_layout(Shape<SizeM, SizeN>{}, LayoutRight{});

        ThrMMA thr_mma = tiled_mma.get_slice(flatThreadIdx);

        auto r_layout = partition_shape_C(thr_mma, s_layout.shape());
        Tensor tCrC = make_tensor(make_rmem_ptr(reinterpret_cast<ElmTypeC *>(registers_mem)), r_layout);

        Tensor s = make_tensor(make_smem_ptr(reinterpret_cast<ElmTypeC *>(shared_mem)), s_layout);
        Tensor tCsC = thr_mma.partition_C(s);

        copy(AutoVectorizingCopy{}, tCrC, tCsC);
    }
    __syncthreads();
}

template<class ElmTypeAIn, class ElmTypeBIn, class ElmTypeCIn, class SizeM, class SizeN, class SizeK, class WarpsM, class WarpsN, class ASwizzled, class BSwizzled, int numRegs>
FUTHARK_FUN_ATTR void futrts_tensorMMM(ElmTypeCIn (*mem_out_p)[numRegs], unsigned char *A_mem, unsigned char *B_mem, ElmTypeCIn (&C_mem)[numRegs], ElmTypeAIn, ElmTypeBIn, SizeM, SizeN, SizeK, WarpsM, WarpsN, ASwizzled, BSwizzled)
{
    int flatThreadIdx = threadIdx.z * blockDim.y * blockDim.x + threadIdx.y * blockDim.x + threadIdx.x;

    using ElmTypeA = typename convert_type<ElmTypeAIn>::TypeOut;
    using ElmTypeB = typename convert_type<ElmTypeBIn>::TypeOut;
    using ElmTypeC = typename convert_type<ElmTypeCIn>::TypeOut;

    using MMAConfig = get_mma_config<ElmTypeA, ElmTypeB, ElmTypeC, SizeM, SizeN, WarpsM, WarpsN>;
    typename MMAConfig::TiledMMA tiled_mma;

    constexpr unsigned int sizeKunsigned = SizeK{};
    constexpr unsigned int shift_lenK = max(bit_width(sizeKunsigned) - 4, _3{});

    constexpr unsigned int sizeNunsigned = SizeN{};
    constexpr unsigned int shift_lenN = max(bit_width(sizeNunsigned) - 4, _3{});

    using ALayoutConfig = get_layout_config<SizeM, SizeK, ASwizzled, LayoutRight, shift_lenK>;
    using BLayoutConfig = get_layout_config<SizeN, SizeK, BSwizzled, LayoutLeft, shift_lenN>;
    typename ALayoutConfig::SharedLayout sA_layout;
    typename BLayoutConfig::SharedLayout sB_layout;

    auto sC_layout = make_layout(Shape<SizeM, SizeN>{}, LayoutRight{});

    ThrMMA thr_mma = tiled_mma.get_slice(flatThreadIdx);

    auto rC_layout = partition_shape_C(thr_mma, sC_layout.shape());
    Tensor tCrC = make_tensor(make_rmem_ptr(reinterpret_cast<ElmTypeC *>(C_mem)), rC_layout);

    Tensor sA = make_tensor(make_smem_ptr(reinterpret_cast<ElmTypeA *>(A_mem)), sA_layout);
    Tensor sB = make_tensor(make_smem_ptr(reinterpret_cast<ElmTypeB *>(B_mem)), sB_layout);

    TiledCopy copyA_shared_registers = make_tiled_copy_A(Copy_Atom<typename MMAConfig::ACopyOpSharedRegisters, ElmTypeA>{}, tiled_mma);
    TiledCopy copyB_shared_registers = make_tiled_copy_B(Copy_Atom<typename MMAConfig::BCopyOpSharedRegisters, ElmTypeB>{}, tiled_mma);

    Tensor tCrA  = thr_mma.partition_fragment_A(sA);
    Tensor tCrB  = thr_mma.partition_fragment_B(sB);

    auto smem_thr_copy_A   = copyA_shared_registers.get_thread_slice(threadIdx.x);
    Tensor tCsA            = smem_thr_copy_A.partition_S(sA);
    Tensor tCrA_copy_view  = smem_thr_copy_A.retile_D(tCrA);

    auto smem_thr_copy_B   = copyB_shared_registers.get_thread_slice(threadIdx.x);
    Tensor tCsB            = smem_thr_copy_B.partition_S(sB);
    Tensor tCrB_copy_view  = smem_thr_copy_B.retile_D(tCrB);

    // Wait for data copied asynchronously by futrts_copyGlobalShared
    cp_async_wait<0>();
    __syncthreads();

    constexpr int K_BLOCK_MAX = size<2>(tCrA);
    CUTE_UNROLL
    for (int k_block = 0; k_block < K_BLOCK_MAX; ++k_block)
    {
        // Copy shared->registers
        copy(copyA_shared_registers, tCsA(_,_,k_block), tCrA_copy_view(_,_,k_block));
        copy(copyB_shared_registers, tCsB(_,_,k_block), tCrB_copy_view(_,_,k_block));

        // Perform mma on k_block in registers
        gemm(tiled_mma, tCrA(_,_,k_block), tCrB(_,_,k_block), tCrC);
    }

    for (int32_t i = 0; i < numRegs; i++)
        (*mem_out_p)[i] = C_mem[i];
}



FUTHARK_KERNEL_SIZED(FlashAttentionSmall_5957zisegmap_13079_dim1, 1, 1)
void FlashAttentionSmall_5957zisegmap_13079(__global int *global_failure, int failure_is_an_option, __global int64_t *global_failure_args, int64_t d_10182, int64_t m_10183, __global unsigned char *mem_17629)
{
    #define segmap_tblock_sizze_13074 (FlashAttentionSmall_5957zisegmap_13079zisegmap_tblock_sizze_13074)
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_18435;
    int32_t tblock_sizze_18438;
    int32_t wave_sizze_18437;
    int32_t block_id_18436;
    int32_t global_tid_18434;
    int64_t phys_tid_13079;
    int64_t global_tid_18439;
    int64_t slice_18440;
    int64_t slice_18441;
    int64_t gtid_13077;
    int64_t remnant_18442;
    int64_t gtid_13078;
    int64_t remnant_18443;
    
    local_tid_18435 = get_local_id(0);
    tblock_sizze_18438 = get_local_size(0);
    wave_sizze_18437 = LOCKSTEP_WIDTH;
    block_id_18436 = get_tblock_id(0);
    global_tid_18434 = block_id_18436 * tblock_sizze_18438 + local_tid_18435;
    phys_tid_13079 = sext_i32_i64(global_tid_18434);
    global_tid_18439 = sext_i32_i64(block_id_18436) * segmap_tblock_sizze_13074 + sext_i32_i64(local_tid_18435);
    slice_18440 = d_10182;
    slice_18441 = m_10183 * slice_18440;
    gtid_13077 = squot64(global_tid_18439, slice_18440);
    remnant_18442 = global_tid_18439 - gtid_13077 * slice_18440;
    gtid_13078 = remnant_18442;
    remnant_18443 = remnant_18442 - gtid_13078;
    if (slt64(gtid_13077, m_10183) && slt64(gtid_13078, d_10182)) {
        bool y_13082;
        bool index_certs_13084;
        
        y_13082 = slt64(gtid_13078, (int64_t) 64);
        if (!y_13082) {
            {
                if (atomic_cmpxchg_i32_global(global_failure, -1, 4) == -1) {
                    global_failure_args[0] = (int64_t) gtid_13078;
                    global_failure_args[1] = (int64_t) (int64_t) 64;
                    ;
                }
                return;
            }
        }
    }
    
  error_0:
    return;
    #undef segmap_tblock_sizze_13074
}
FUTHARK_KERNEL_SIZED(FlashAttentionSmall_5957zisegmap_13099_dim1, 1, 1)
void FlashAttentionSmall_5957zisegmap_13099(__global int *global_failure, int failure_is_an_option, __global int64_t *global_failure_args, int64_t d_10182, int64_t m_10183, int64_t dzlz7bUZLztZRz20Umz20UZLZLzpZRz20Udz20UnZRz7dUzg_11214, int64_t dzlz7bUZLztZRz20Unz20Umz7dUzg_11220, int64_t dzlz7bUZLztZRz20Umz20Udz7dUzg_11229, __global unsigned char *mem_17627, __global unsigned char *mem_17629, __global unsigned char *mem_17634)
{
    #define segmap_tblock_sizze_13093 (FlashAttentionSmall_5957zisegmap_13099zisegmap_tblock_sizze_13093)
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_18446;
    int32_t tblock_sizze_18449;
    int32_t wave_sizze_18448;
    int32_t block_id_18447;
    int32_t global_tid_18445;
    int64_t phys_tid_13099;
    int64_t global_tid_18450;
    int64_t slice_18451;
    int64_t slice_18452;
    int64_t slice_18453;
    int64_t gtid_13096;
    int64_t remnant_18454;
    int64_t gtid_13097;
    int64_t remnant_18455;
    int64_t gtid_13098;
    int64_t remnant_18456;
    
    local_tid_18446 = get_local_id(0);
    tblock_sizze_18449 = get_local_size(0);
    wave_sizze_18448 = LOCKSTEP_WIDTH;
    block_id_18447 = get_tblock_id(0);
    global_tid_18445 = block_id_18447 * tblock_sizze_18449 + local_tid_18446;
    phys_tid_13099 = sext_i32_i64(global_tid_18445);
    global_tid_18450 = sext_i32_i64(block_id_18447) * segmap_tblock_sizze_13093 + sext_i32_i64(local_tid_18446);
    slice_18451 = dzlz7bUZLztZRz20Umz20Udz7dUzg_11229;
    slice_18452 = d_10182 * slice_18451;
    slice_18453 = m_10183 * slice_18452;
    gtid_13096 = squot64(global_tid_18450, slice_18452);
    remnant_18454 = global_tid_18450 - gtid_13096 * slice_18452;
    gtid_13097 = squot64(remnant_18454, slice_18451);
    remnant_18455 = remnant_18454 - gtid_13097 * slice_18451;
    gtid_13098 = remnant_18455;
    remnant_18456 = remnant_18455 - gtid_13098;
    if ((slt64(gtid_13096, m_10183) && slt64(gtid_13097, d_10182)) && slt64(gtid_13098, dzlz7bUZLztZRz20Umz20Udz7dUzg_11229)) {
        bool y_13105;
        bool index_certs_13107;
        bool index_certs_13102;
        int64_t binop_x_17306;
        int64_t binop_y_17307;
        int64_t binop_x_17308;
        int64_t binop_x_17309;
        int64_t new_index_17312;
        int64_t binop_y_17328;
        int64_t binop_x_17329;
        int64_t new_index_17330;
        int64_t binop_y_17366;
        int64_t binop_x_17367;
        int64_t new_index_17368;
        int64_t binop_y_17444;
        int64_t new_index_17445;
        f16 lifted_lambda_res_13108;
        
        y_13105 = slt64(gtid_13098, dzlz7bUZLztZRz20Umz20UZLZLzpZRz20Udz20UnZRz7dUzg_11214);
        if (!y_13105) {
            {
                if (atomic_cmpxchg_i32_global(global_failure, -1, 5) == -1) {
                    global_failure_args[0] = (int64_t) gtid_13098;
                    global_failure_args[1] = (int64_t) dzlz7bUZLztZRz20Umz20UZLZLzpZRz20Udz20UnZRz7dUzg_11214;
                    ;
                }
                return;
            }
        }
        index_certs_13102 = 0;
        binop_x_17306 = dzlz7bUZLztZRz20Unz20Umz7dUzg_11220 * gtid_13096;
        binop_y_17307 = (int64_t) 64 * gtid_13098;
        binop_x_17308 = binop_x_17306 + binop_y_17307;
        binop_x_17309 = gtid_13097 + binop_x_17308;
        new_index_17312 = squot64(binop_x_17309, dzlz7bUZLztZRz20Unz20Umz7dUzg_11220);
        binop_y_17328 = dzlz7bUZLztZRz20Unz20Umz7dUzg_11220 * new_index_17312;
        binop_x_17329 = binop_x_17309 - binop_y_17328;
        new_index_17330 = squot64(binop_x_17329, (int64_t) 4096);
        binop_y_17366 = (int64_t) 4096 * new_index_17330;
        binop_x_17367 = binop_x_17329 - binop_y_17366;
        new_index_17368 = squot64(binop_x_17367, (int64_t) 64);
        binop_y_17444 = (int64_t) 64 * new_index_17368;
        new_index_17445 = binop_x_17367 - binop_y_17444;
        lifted_lambda_res_13108 = futrts_from_bits16(((__global uint16_t *) mem_17627)[new_index_17312 * ((int64_t) 4096 * m_10183) + new_index_17330 * (int64_t) 4096 + new_index_17368 * (int64_t) 64 + new_index_17445]);
        ((__global uint16_t *) mem_17634)[gtid_13096 * (dzlz7bUZLztZRz20Umz20Udz7dUzg_11229 * d_10182) + gtid_13097 * dzlz7bUZLztZRz20Umz20Udz7dUzg_11229 + gtid_13098] = futrts_to_bits16(lifted_lambda_res_13108);
    }
    
  error_0:
    return;
    #undef segmap_tblock_sizze_13093
}
FUTHARK_KERNEL_SIZED(FlashAttentionSmall_5957zisegmap_13198_dim1, 1, 1)
void FlashAttentionSmall_5957zisegmap_13198(__global int *global_failure, int64_t d_10182, int64_t m_10183, int64_t dzlz7bUZLztZRz20Umz20Udz7dUzg_10184, int64_t dzlz7bUZLztZRz20Umz20Udz7dUzg_11229, __global unsigned char *mem_17634, __global unsigned char *mem_17639, __global unsigned char *mem_17642, __global unsigned char *mem_17647)
{
    #define segmap_tblock_sizze_13192 (FlashAttentionSmall_5957zisegmap_13198zisegmap_tblock_sizze_13192)
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_18492;
    int32_t tblock_sizze_18495;
    int32_t wave_sizze_18494;
    int32_t block_id_18493;
    int32_t global_tid_18491;
    int64_t phys_tid_13198;
    int64_t global_tid_18496;
    int64_t slice_18497;
    int64_t slice_18498;
    int64_t slice_18499;
    int64_t gtid_13195;
    int64_t remnant_18500;
    int64_t gtid_13196;
    int64_t remnant_18501;
    int64_t gtid_13197;
    int64_t remnant_18502;
    
    local_tid_18492 = get_local_id(0);
    tblock_sizze_18495 = get_local_size(0);
    wave_sizze_18494 = LOCKSTEP_WIDTH;
    block_id_18493 = get_tblock_id(0);
    global_tid_18491 = block_id_18493 * tblock_sizze_18495 + local_tid_18492;
    phys_tid_13198 = sext_i32_i64(global_tid_18491);
    global_tid_18496 = sext_i32_i64(block_id_18493) * segmap_tblock_sizze_13192 + sext_i32_i64(local_tid_18492);
    slice_18497 = dzlz7bUZLztZRz20Umz20Udz7dUzg_10184;
    slice_18498 = d_10182 * slice_18497;
    slice_18499 = m_10183 * slice_18498;
    gtid_13195 = squot64(global_tid_18496, slice_18498);
    remnant_18500 = global_tid_18496 - gtid_13195 * slice_18498;
    gtid_13196 = squot64(remnant_18500, slice_18497);
    remnant_18501 = remnant_18500 - gtid_13196 * slice_18497;
    gtid_13197 = remnant_18501;
    remnant_18502 = remnant_18501 - gtid_13197;
    if ((slt64(gtid_13195, m_10183) && slt64(gtid_13196, d_10182)) && slt64(gtid_13197, dzlz7bUZLztZRz20Umz20Udz7dUzg_10184)) {
        f16 eta_p_13199;
        f16 eta_p_13200;
        f16 eta_p_13201;
        f16 real_exp_arg0_13202;
        f16 exp_res_13203;
        f16 lifted_lambda_res_13204;
        
        eta_p_13199 = futrts_from_bits16(((__global uint16_t *) mem_17639)[gtid_13195 * d_10182 + gtid_13196]);
        eta_p_13200 = futrts_from_bits16(((__global uint16_t *) mem_17642)[gtid_13195 * d_10182 + gtid_13196]);
        eta_p_13201 = futrts_from_bits16(((__global uint16_t *) mem_17634)[gtid_13195 * (dzlz7bUZLztZRz20Umz20Udz7dUzg_11229 * d_10182) + gtid_13196 * dzlz7bUZLztZRz20Umz20Udz7dUzg_11229 + gtid_13197]);
        real_exp_arg0_13202 = eta_p_13201 - eta_p_13199;
        exp_res_13203 = futrts_exp16(real_exp_arg0_13202);
        lifted_lambda_res_13204 = exp_res_13203 / eta_p_13200;
        ((__global uint16_t *) mem_17647)[gtid_13195 * (dzlz7bUZLztZRz20Umz20Udz7dUzg_10184 * d_10182) + gtid_13196 * dzlz7bUZLztZRz20Umz20Udz7dUzg_10184 + gtid_13197] = futrts_to_bits16(lifted_lambda_res_13204);
    }
    
  error_0:
    return;
    #undef segmap_tblock_sizze_13192
}
FUTHARK_KERNEL_SIZED(FlashAttentionSmall_5957zisegmap_13267_dim1, 1, 1)
void FlashAttentionSmall_5957zisegmap_13267(__global int *global_failure, int failure_is_an_option, __global int64_t *global_failure_args, int64_t d_10182, int64_t m_10183, __global unsigned char *mem_17662)
{
    #define segmap_tblock_sizze_13262 (FlashAttentionSmall_5957zisegmap_13267zisegmap_tblock_sizze_13262)
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_18564;
    int32_t tblock_sizze_18567;
    int32_t wave_sizze_18566;
    int32_t block_id_18565;
    int32_t global_tid_18563;
    int64_t phys_tid_13267;
    int64_t global_tid_18568;
    int64_t slice_18569;
    int64_t slice_18570;
    int64_t gtid_13265;
    int64_t remnant_18571;
    int64_t gtid_13266;
    int64_t remnant_18572;
    
    local_tid_18564 = get_local_id(0);
    tblock_sizze_18567 = get_local_size(0);
    wave_sizze_18566 = LOCKSTEP_WIDTH;
    block_id_18565 = get_tblock_id(0);
    global_tid_18563 = block_id_18565 * tblock_sizze_18567 + local_tid_18564;
    phys_tid_13267 = sext_i32_i64(global_tid_18563);
    global_tid_18568 = sext_i32_i64(block_id_18565) * segmap_tblock_sizze_13262 + sext_i32_i64(local_tid_18564);
    slice_18569 = d_10182;
    slice_18570 = m_10183 * slice_18569;
    gtid_13265 = squot64(global_tid_18568, slice_18569);
    remnant_18571 = global_tid_18568 - gtid_13265 * slice_18569;
    gtid_13266 = remnant_18571;
    remnant_18572 = remnant_18571 - gtid_13266;
    if (slt64(gtid_13265, m_10183) && slt64(gtid_13266, d_10182)) {
        bool y_13270;
        bool index_certs_13272;
        
        y_13270 = slt64(gtid_13266, (int64_t) 64);
        if (!y_13270) {
            {
                if (atomic_cmpxchg_i32_global(global_failure, -1, 6) == -1) {
                    global_failure_args[0] = (int64_t) gtid_13266;
                    global_failure_args[1] = (int64_t) (int64_t) 64;
                    ;
                }
                return;
            }
        }
    }
    
  error_0:
    return;
    #undef segmap_tblock_sizze_13262
}
FUTHARK_KERNEL_SIZED(FlashAttentionSmall_5957zisegmap_13287_dim1, 1, 1)
void FlashAttentionSmall_5957zisegmap_13287(__global int *global_failure, int failure_is_an_option, __global int64_t *global_failure_args, int64_t d_10182, int64_t m_10183, __global unsigned char *mem_17660, __global unsigned char *mem_17662, __global unsigned char *mem_17667)
{
    #define segmap_tblock_sizze_13281 (FlashAttentionSmall_5957zisegmap_13287zisegmap_tblock_sizze_13281)
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_18575;
    int32_t tblock_sizze_18578;
    int32_t wave_sizze_18577;
    int32_t block_id_18576;
    int32_t global_tid_18574;
    int64_t phys_tid_13287;
    int64_t global_tid_18579;
    int64_t slice_18580;
    int64_t slice_18581;
    int64_t slice_18582;
    int64_t gtid_13284;
    int64_t remnant_18583;
    int64_t gtid_13285;
    int64_t remnant_18584;
    int64_t gtid_13286;
    int64_t remnant_18585;
    
    local_tid_18575 = get_local_id(0);
    tblock_sizze_18578 = get_local_size(0);
    wave_sizze_18577 = LOCKSTEP_WIDTH;
    block_id_18576 = get_tblock_id(0);
    global_tid_18574 = block_id_18576 * tblock_sizze_18578 + local_tid_18575;
    phys_tid_13287 = sext_i32_i64(global_tid_18574);
    global_tid_18579 = sext_i32_i64(block_id_18576) * segmap_tblock_sizze_13281 + sext_i32_i64(local_tid_18575);
    slice_18580 = d_10182;
    slice_18581 = d_10182 * slice_18580;
    slice_18582 = m_10183 * slice_18581;
    gtid_13284 = squot64(global_tid_18579, slice_18581);
    remnant_18583 = global_tid_18579 - gtid_13284 * slice_18581;
    gtid_13285 = squot64(remnant_18583, slice_18580);
    remnant_18584 = remnant_18583 - gtid_13285 * slice_18580;
    gtid_13286 = remnant_18584;
    remnant_18585 = remnant_18584 - gtid_13286;
    if ((slt64(gtid_13284, m_10183) && slt64(gtid_13285, d_10182)) && slt64(gtid_13286, d_10182)) {
        bool y_13293;
        bool index_certs_13295;
        bool index_certs_13290;
        f16 lifted_lambda_res_13296;
        
        y_13293 = slt64(gtid_13286, (int64_t) 64);
        if (!y_13293) {
            {
                if (atomic_cmpxchg_i32_global(global_failure, -1, 7) == -1) {
                    global_failure_args[0] = (int64_t) gtid_13286;
                    global_failure_args[1] = (int64_t) (int64_t) 64;
                    ;
                }
                return;
            }
        }
        index_certs_13290 = 0;
        lifted_lambda_res_13296 = futrts_from_bits16(((__global uint16_t *) mem_17660)[gtid_13284 * (int64_t) 4096 + gtid_13285 * (int64_t) 64 + gtid_13286]);
        ((__global uint16_t *) mem_17667)[gtid_13284 * (d_10182 * d_10182) + gtid_13285 * d_10182 + gtid_13286] = futrts_to_bits16(lifted_lambda_res_13296);
    }
    
  error_0:
    return;
    #undef segmap_tblock_sizze_13281
}
FUTHARK_KERNEL_SIZED(FlashAttentionSmall_5957zisegmap_intrablock_11706_dim1, 1, 1)
void FlashAttentionSmall_5957zisegmap_intrablock_11706(__global int *global_failure, int64_t d_10182, int64_t dzlz7bUZLztZRz20Umz20Udz7dUzg_10184, int64_t n_11213, __global unsigned char *K_mem_17592, __global unsigned char *mem_17595, __global unsigned char *mem_17600)
{
    volatile __local unsigned char *color_18056_backing_0 = &shared_mem[0];
    const int64_t color_18056_backing_0_offset = 0 + (int64_t) 128;
    
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_18114;
    int32_t tblock_sizze_18117;
    int32_t wave_sizze_18116;
    int32_t block_id_18115;
    int32_t global_tid_18113;
    int64_t phys_tblock_id_11706;
    int64_t slice_18118;
    int64_t gtid_11705;
    int64_t remnant_18119;
    __local unsigned char *color_18056;
    int64_t tmp_offs_18120;
    int32_t num_chunks_18121;
    int32_t num_chunks_18124;
    int32_t num_chunks_18127;
    
    local_tid_18114 = get_local_id(0);
    tblock_sizze_18117 = get_local_size(0);
    wave_sizze_18116 = LOCKSTEP_WIDTH;
    block_id_18115 = get_tblock_id(0);
    global_tid_18113 = block_id_18115 * tblock_sizze_18117 + local_tid_18114;
    phys_tblock_id_11706 = sext_i32_i64(block_id_18115);
    slice_18118 = dzlz7bUZLztZRz20Umz20Udz7dUzg_10184;
    gtid_11705 = sext_i32_i64(block_id_18115);
    remnant_18119 = sext_i32_i64(block_id_18115) - gtid_11705;
    color_18056 = (__local unsigned char *) color_18056_backing_0;
    tmp_offs_18120 = (int64_t) 0;
    num_chunks_18121 = sdiv_up32(sext_i64_i32(d_10182), 0);
    for (int32_t chunk_i_18122 = 0; chunk_i_18122 < num_chunks_18121; chunk_i_18122++) {
        int32_t i_18123 = local_tid_18114;
        
        if (slt32(i_18123, sext_i64_i32(d_10182))) {
            ((__local uint16_t *) color_18056)[tmp_offs_18120 + sext_i32_i64(i_18123)] = futrts_to_bits16(futrts_from_bits16(((__global uint16_t *) K_mem_17592)[gtid_11705 * d_10182 + sext_i32_i64(i_18123)]));
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    tmp_offs_18120 += d_10182;
    num_chunks_18124 = sdiv_up32(sext_i64_i32(n_11213), 0);
    for (int32_t chunk_i_18125 = 0; chunk_i_18125 < num_chunks_18124; chunk_i_18125++) {
        int32_t i_18126 = local_tid_18114;
        
        if (slt32(i_18126, sext_i64_i32(n_11213))) {
            ((__local uint16_t *) color_18056)[tmp_offs_18120 + sext_i32_i64(i_18126)] = futrts_to_bits16(futrts_from_bits16(((__global uint16_t *) mem_17595)[sext_i32_i64(i_18126)]));
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    tmp_offs_18120 += n_11213;
    num_chunks_18127 = sdiv_up32(64, 0);
    for (int32_t chunk_i_18128 = 0; chunk_i_18128 < num_chunks_18127; chunk_i_18128++) {
        int32_t i_18129 = local_tid_18114;
        
        if (slt32(i_18129, 64)) {
            ((__global uint16_t *) mem_17600)[gtid_11705 * (int64_t) 64 + sext_i32_i64(i_18129)] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) color_18056)[sext_i32_i64(i_18129)]));
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
  error_0:
    return;
}
FUTHARK_KERNEL_SIZED(FlashAttentionSmall_5957zisegmap_intrablock_11718_dim1, 1, 1)
void FlashAttentionSmall_5957zisegmap_intrablock_11718(__global int *global_failure, int64_t d_10182, int64_t dzlz7bUZLztZRz20Umz20Udz7dUzg_10184, int64_t n_11213, __global unsigned char *V_mem_17593, __global unsigned char *mem_17595, __global unsigned char *mem_17608)
{
    volatile __local unsigned char *color_18057_backing_0 = &shared_mem[0];
    const int64_t color_18057_backing_0_offset = 0 + (int64_t) 128;
    
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_18132;
    int32_t tblock_sizze_18135;
    int32_t wave_sizze_18134;
    int32_t block_id_18133;
    int32_t global_tid_18131;
    int64_t phys_tblock_id_11718;
    int64_t slice_18136;
    int64_t gtid_11717;
    int64_t remnant_18137;
    __local unsigned char *color_18057;
    int64_t tmp_offs_18138;
    int32_t num_chunks_18139;
    int32_t num_chunks_18142;
    int32_t num_chunks_18145;
    
    local_tid_18132 = get_local_id(0);
    tblock_sizze_18135 = get_local_size(0);
    wave_sizze_18134 = LOCKSTEP_WIDTH;
    block_id_18133 = get_tblock_id(0);
    global_tid_18131 = block_id_18133 * tblock_sizze_18135 + local_tid_18132;
    phys_tblock_id_11718 = sext_i32_i64(block_id_18133);
    slice_18136 = dzlz7bUZLztZRz20Umz20Udz7dUzg_10184;
    gtid_11717 = sext_i32_i64(block_id_18133);
    remnant_18137 = sext_i32_i64(block_id_18133) - gtid_11717;
    color_18057 = (__local unsigned char *) color_18057_backing_0;
    tmp_offs_18138 = (int64_t) 0;
    num_chunks_18139 = sdiv_up32(sext_i64_i32(d_10182), 0);
    for (int32_t chunk_i_18140 = 0; chunk_i_18140 < num_chunks_18139; chunk_i_18140++) {
        int32_t i_18141 = local_tid_18132;
        
        if (slt32(i_18141, sext_i64_i32(d_10182))) {
            ((__local uint16_t *) color_18057)[tmp_offs_18138 + sext_i32_i64(i_18141)] = futrts_to_bits16(futrts_from_bits16(((__global uint16_t *) V_mem_17593)[gtid_11717 * d_10182 + sext_i32_i64(i_18141)]));
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    tmp_offs_18138 += d_10182;
    num_chunks_18142 = sdiv_up32(sext_i64_i32(n_11213), 0);
    for (int32_t chunk_i_18143 = 0; chunk_i_18143 < num_chunks_18142; chunk_i_18143++) {
        int32_t i_18144 = local_tid_18132;
        
        if (slt32(i_18144, sext_i64_i32(n_11213))) {
            ((__local uint16_t *) color_18057)[tmp_offs_18138 + sext_i32_i64(i_18144)] = futrts_to_bits16(futrts_from_bits16(((__global uint16_t *) mem_17595)[sext_i32_i64(i_18144)]));
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    tmp_offs_18138 += n_11213;
    num_chunks_18145 = sdiv_up32(64, 0);
    for (int32_t chunk_i_18146 = 0; chunk_i_18146 < num_chunks_18145; chunk_i_18146++) {
        int32_t i_18147 = local_tid_18132;
        
        if (slt32(i_18147, 64)) {
            ((__global uint16_t *) mem_17608)[gtid_11717 * (int64_t) 64 + sext_i32_i64(i_18147)] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) color_18057)[sext_i32_i64(i_18147)]));
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
  error_0:
    return;
}
FUTHARK_KERNEL
void FlashAttentionSmall_5957zisegmap_intrablock_12233(__global int *global_failure, int failure_is_an_option, __global int64_t *global_failure_args, int64_t d_10182, int64_t m_10183, int64_t dzlz7bUZLztZRz20Umz20Udz7dUzg_10184, int64_t n_11213, int64_t dzlz7bUZLztZRz20Umz20UZLZLzpZRz20Udz20UnZRz7dUzg_11214, int64_t pad_arg0_11215, int64_t dzlz7bUZLztZRz20Umz20Udz7dUzg_11229, int64_t conc_tmp_11312, int64_t q_11373, unsigned char opaque_res_11377_bits, int64_t computed_tblock_sizze_11724, int64_t binop_x_17668, int64_t bytes_17694, int64_t bytes_17707, int64_t maxSubHelper_18069, int64_t maxSubHelper_18072, int64_t maxSubHelper_18073, int64_t maxSubHelper_18075, int32_t num_chunks_18149, __global unsigned char *Q_mem_17591, __global unsigned char *mem_17600, __global unsigned char *mem_17603, __global unsigned char *mem_17608, __global unsigned char *mem_17613, __global unsigned char *mem_17670, __global unsigned char *mem_17673, __global unsigned char *mem_17746)
{
    bool opaque_res_11377 = opaque_res_11377_bits;
    volatile __local unsigned char *red_arr_mem_18342_backing_12 = &shared_mem[0];
    const int64_t red_arr_mem_18342_backing_12_offset = 0 + ((int64_t) 2 * ((int64_t) 4096 * conc_tmp_11312) + srem64((int64_t) 8 - srem64((int64_t) 2 * ((int64_t) 4096 * conc_tmp_11312), (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *red_arr_mem_18308_backing_11 = &shared_mem[red_arr_mem_18342_backing_12_offset];
    const int64_t red_arr_mem_18308_backing_11_offset = red_arr_mem_18342_backing_12_offset + ((int64_t) 2 * (d_10182 * (int64_t) 32) + srem64((int64_t) 8 - srem64((int64_t) 2 * (d_10182 * (int64_t) 32), (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *red_arr_mem_18288_backing_10 = &shared_mem[red_arr_mem_18308_backing_11_offset];
    const int64_t red_arr_mem_18288_backing_10_offset = red_arr_mem_18308_backing_11_offset + ((int64_t) 2 * (d_10182 * (int64_t) 32) + srem64((int64_t) 8 - srem64((int64_t) 2 * (d_10182 * (int64_t) 32), (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *red_arr_mem_18242_backing_9 = &shared_mem[red_arr_mem_18288_backing_10_offset];
    const int64_t red_arr_mem_18242_backing_9_offset = red_arr_mem_18288_backing_10_offset + ((int64_t) 4 * (m_10183 * (int64_t) 64 * (int64_t) 64 * (int64_t) 64) + srem64((int64_t) 8 - srem64((int64_t) 4 * (m_10183 * (int64_t) 64 * (int64_t) 64 * (int64_t) 64), (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_18084_backing_8 = &shared_mem[red_arr_mem_18242_backing_9_offset];
    const int64_t color_18084_backing_8_offset = red_arr_mem_18242_backing_9_offset + (bytes_17694 + srem64((int64_t) 8 - srem64(bytes_17694, (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_18083_backing_7 = &shared_mem[color_18084_backing_8_offset];
    const int64_t color_18083_backing_7_offset = color_18084_backing_8_offset + (bytes_17707 + srem64((int64_t) 8 - srem64(bytes_17707, (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_18082_backing_6 = &shared_mem[color_18083_backing_7_offset];
    const int64_t color_18082_backing_6_offset = color_18083_backing_7_offset + (bytes_17707 + srem64((int64_t) 8 - srem64(bytes_17707, (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_18081_backing_5 = &shared_mem[color_18082_backing_6_offset];
    const int64_t color_18081_backing_5_offset = color_18082_backing_6_offset + (binop_x_17668 + srem64((int64_t) 8 - srem64(binop_x_17668, (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_18080_backing_4 = &shared_mem[color_18081_backing_5_offset];
    const int64_t color_18080_backing_4_offset = color_18081_backing_5_offset + (binop_x_17668 + srem64((int64_t) 8 - srem64(binop_x_17668, (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_18079_backing_3 = &shared_mem[color_18080_backing_4_offset];
    const int64_t color_18079_backing_3_offset = color_18080_backing_4_offset + (maxSubHelper_18075 + srem64((int64_t) 8 - srem64(maxSubHelper_18075, (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_18078_backing_2 = &shared_mem[color_18079_backing_3_offset];
    const int64_t color_18078_backing_2_offset = color_18079_backing_3_offset + (maxSubHelper_18073 + srem64((int64_t) 8 - srem64(maxSubHelper_18073, (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_18077_backing_1 = &shared_mem[color_18078_backing_2_offset];
    const int64_t color_18077_backing_1_offset = color_18078_backing_2_offset + (maxSubHelper_18072 + srem64((int64_t) 8 - srem64(maxSubHelper_18072, (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_18076_backing_0 = &shared_mem[color_18077_backing_1_offset];
    const int64_t color_18076_backing_0_offset = color_18077_backing_1_offset + (maxSubHelper_18069 + srem64((int64_t) 8 - srem64(maxSubHelper_18069, (int64_t) 8), (int64_t) 8));
    volatile __local int local_failure;
    
    if (failure_is_an_option) {
        int failed = *global_failure >= 0;
        
        if (failed)
            return;
    }
    local_failure = 0;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t local_tid_18159;
    int32_t tblock_sizze_18162;
    int32_t wave_sizze_18161;
    int32_t block_id_18160;
    int32_t global_tid_18158;
    int64_t phys_tblock_id_12233;
    int64_t slice_18166;
    int64_t slice_18167;
    int64_t slice_18168;
    int64_t ltid_pre_18163;
    int64_t remnant_18169;
    int64_t ltid_pre_18164;
    int64_t remnant_18170;
    int64_t ltid_pre_18165;
    int64_t remnant_18171;
    int64_t slice_18173;
    int64_t ltid_pre_18172;
    int64_t remnant_18174;
    int64_t slice_18177;
    int64_t slice_18178;
    int64_t ltid_pre_18175;
    int64_t remnant_18179;
    int64_t ltid_pre_18176;
    int64_t remnant_18180;
    int64_t slice_18183;
    int64_t slice_18184;
    int64_t ltid_pre_18181;
    int64_t remnant_18185;
    int64_t ltid_pre_18182;
    int64_t remnant_18186;
    int64_t slice_18189;
    int64_t slice_18190;
    int64_t ltid_pre_18187;
    int64_t remnant_18191;
    int64_t ltid_pre_18188;
    int64_t remnant_18192;
    int64_t slice_18195;
    int64_t slice_18196;
    int64_t ltid_pre_18193;
    int64_t remnant_18197;
    int64_t ltid_pre_18194;
    int64_t remnant_18198;
    int64_t slice_18201;
    int64_t slice_18202;
    int64_t ltid_pre_18199;
    int64_t remnant_18203;
    int64_t ltid_pre_18200;
    int64_t remnant_18204;
    int64_t slice_18208;
    int64_t slice_18209;
    int64_t slice_18210;
    int64_t ltid_pre_18205;
    int64_t remnant_18211;
    int64_t ltid_pre_18206;
    int64_t remnant_18212;
    int64_t ltid_pre_18207;
    int64_t remnant_18213;
    int64_t slice_18218;
    int64_t slice_18219;
    int64_t slice_18220;
    int64_t slice_18221;
    int64_t ltid_pre_18214;
    int64_t remnant_18222;
    int64_t ltid_pre_18215;
    int64_t remnant_18223;
    int64_t ltid_pre_18216;
    int64_t remnant_18224;
    int64_t ltid_pre_18217;
    int64_t remnant_18225;
    int64_t slice_18226;
    int64_t gtid_12232;
    int64_t remnant_18227;
    __local unsigned char *color_18076;
    __local unsigned char *color_18077;
    __local unsigned char *color_18078;
    __local unsigned char *color_18079;
    __local unsigned char *color_18080;
    __local unsigned char *color_18081;
    __local unsigned char *color_18082;
    __local unsigned char *color_18083;
    __local unsigned char *color_18084;
    int64_t tmp_offs_18228;
    int32_t num_chunks_18229;
    int32_t num_chunks_18232;
    int64_t tmp_offs_18235;
    int32_t num_chunks_18239;
    int64_t phys_tid_12244;
    __local unsigned char *red_arr_mem_18242;
    int64_t gtid_12240;
    int64_t gtid_12241;
    int64_t gtid_12242;
    int64_t gtid_12243;
    int64_t dims_flat_18244;
    float eta_p_12245;
    float eta_p_12246;
    float eta_p_18246;
    float eta_p_18247;
    bool ltid_in_bounds_18249;
    int32_t skip_threads_18250;
    bool no_carry_in_18256;
    int64_t phys_tid_12259;
    int64_t gtid_12256;
    int64_t gtid_12257;
    int64_t gtid_12258;
    int32_t num_chunks_18261;
    int64_t phys_tid_12269;
    int64_t gtid_12268;
    int64_t phys_tid_12278;
    int64_t gtid_12276;
    int64_t gtid_12277;
    __local unsigned char *ext_mem_17729;
    __local unsigned char *ext_mem_unused_17998;
    __local unsigned char *ext_mem_17728;
    __local unsigned char *ext_mem_unused_18007;
    __local unsigned char *mem_param_17702;
    __local unsigned char *mem_param_17705;
    __local unsigned char *mem_param_out_17999;
    __local unsigned char *mem_param_out_18008;
    int64_t phys_tid_12362;
    int64_t gtid_12360;
    int64_t gtid_12361;
    int64_t tmp_offs_18328;
    int32_t num_chunks_18332;
    int64_t tmp_offs_18335;
    int32_t num_chunks_18339;
    int64_t phys_tid_12377;
    __local unsigned char *red_arr_mem_18342;
    int64_t gtid_12374;
    int64_t gtid_12375;
    int64_t gtid_12376;
    int64_t dims_flat_18344;
    f16 eta_p_12378;
    f16 eta_p_12379;
    f16 eta_p_18346;
    f16 eta_p_18347;
    bool ltid_in_bounds_18349;
    int32_t skip_threads_18350;
    bool no_carry_in_18356;
    int64_t phys_tid_12388;
    int64_t gtid_12387;
    int64_t phys_tid_12397;
    int64_t gtid_12395;
    int64_t gtid_12396;
    int32_t num_chunks_18361;
    
    local_tid_18159 = get_local_id(0);
    tblock_sizze_18162 = get_local_size(0);
    wave_sizze_18161 = LOCKSTEP_WIDTH;
    block_id_18160 = get_tblock_id(0);
    global_tid_18158 = block_id_18160 * tblock_sizze_18162 + local_tid_18159;
    phys_tblock_id_12233 = sext_i32_i64(block_id_18160);
    slice_18166 = conc_tmp_11312;
    slice_18167 = (int64_t) 64 * slice_18166;
    slice_18168 = (int64_t) 64 * slice_18167;
    ltid_pre_18163 = squot64(sext_i32_i64(local_tid_18159), slice_18167);
    remnant_18169 = sext_i32_i64(local_tid_18159) - ltid_pre_18163 * slice_18167;
    ltid_pre_18164 = squot64(remnant_18169, slice_18166);
    remnant_18170 = remnant_18169 - ltid_pre_18164 * slice_18166;
    ltid_pre_18165 = remnant_18170;
    remnant_18171 = remnant_18170 - ltid_pre_18165;
    slice_18173 = d_10182;
    ltid_pre_18172 = sext_i32_i64(local_tid_18159);
    remnant_18174 = sext_i32_i64(local_tid_18159) - ltid_pre_18172;
    slice_18177 = (int64_t) 32;
    slice_18178 = d_10182 * slice_18177;
    ltid_pre_18175 = squot64(sext_i32_i64(local_tid_18159), slice_18177);
    remnant_18179 = sext_i32_i64(local_tid_18159) - ltid_pre_18175 * slice_18177;
    ltid_pre_18176 = remnant_18179;
    remnant_18180 = remnant_18179 - ltid_pre_18176;
    slice_18183 = (int64_t) 1024;
    slice_18184 = d_10182 * slice_18183;
    ltid_pre_18181 = squot64(sext_i32_i64(local_tid_18159), slice_18183);
    remnant_18185 = sext_i32_i64(local_tid_18159) - ltid_pre_18181 * slice_18183;
    ltid_pre_18182 = remnant_18185;
    remnant_18186 = remnant_18185 - ltid_pre_18182;
    slice_18189 = d_10182;
    slice_18190 = d_10182 * slice_18189;
    ltid_pre_18187 = squot64(sext_i32_i64(local_tid_18159), slice_18189);
    remnant_18191 = sext_i32_i64(local_tid_18159) - ltid_pre_18187 * slice_18189;
    ltid_pre_18188 = remnant_18191;
    remnant_18192 = remnant_18191 - ltid_pre_18188;
    slice_18195 = dzlz7bUZLztZRz20Umz20Udz7dUzg_10184;
    slice_18196 = d_10182 * slice_18195;
    ltid_pre_18193 = squot64(sext_i32_i64(local_tid_18159), slice_18195);
    remnant_18197 = sext_i32_i64(local_tid_18159) - ltid_pre_18193 * slice_18195;
    ltid_pre_18194 = remnant_18197;
    remnant_18198 = remnant_18197 - ltid_pre_18194;
    slice_18201 = dzlz7bUZLztZRz20Umz20Udz7dUzg_11229;
    slice_18202 = d_10182 * slice_18201;
    ltid_pre_18199 = squot64(sext_i32_i64(local_tid_18159), slice_18201);
    remnant_18203 = sext_i32_i64(local_tid_18159) - ltid_pre_18199 * slice_18201;
    ltid_pre_18200 = remnant_18203;
    remnant_18204 = remnant_18203 - ltid_pre_18200;
    slice_18208 = (int64_t) 64;
    slice_18209 = (int64_t) 64 * slice_18208;
    slice_18210 = m_10183 * slice_18209;
    ltid_pre_18205 = squot64(sext_i32_i64(local_tid_18159), slice_18209);
    remnant_18211 = sext_i32_i64(local_tid_18159) - ltid_pre_18205 * slice_18209;
    ltid_pre_18206 = squot64(remnant_18211, slice_18208);
    remnant_18212 = remnant_18211 - ltid_pre_18206 * slice_18208;
    ltid_pre_18207 = remnant_18212;
    remnant_18213 = remnant_18212 - ltid_pre_18207;
    slice_18218 = (int64_t) 64;
    slice_18219 = (int64_t) 64 * slice_18218;
    slice_18220 = (int64_t) 64 * slice_18219;
    slice_18221 = m_10183 * slice_18220;
    ltid_pre_18214 = squot64(sext_i32_i64(local_tid_18159), slice_18220);
    remnant_18222 = sext_i32_i64(local_tid_18159) - ltid_pre_18214 * slice_18220;
    ltid_pre_18215 = squot64(remnant_18222, slice_18219);
    remnant_18223 = remnant_18222 - ltid_pre_18215 * slice_18219;
    ltid_pre_18216 = squot64(remnant_18223, slice_18218);
    remnant_18224 = remnant_18223 - ltid_pre_18216 * slice_18218;
    ltid_pre_18217 = remnant_18224;
    remnant_18225 = remnant_18224 - ltid_pre_18217;
    slice_18226 = m_10183;
    gtid_12232 = sext_i32_i64(block_id_18160);
    remnant_18227 = sext_i32_i64(block_id_18160) - gtid_12232;
    color_18076 = (__local unsigned char *) color_18076_backing_0;
    color_18077 = (__local unsigned char *) color_18077_backing_1;
    color_18078 = (__local unsigned char *) color_18078_backing_2;
    color_18079 = (__local unsigned char *) color_18079_backing_3;
    color_18080 = (__local unsigned char *) color_18080_backing_4;
    color_18081 = (__local unsigned char *) color_18081_backing_5;
    color_18082 = (__local unsigned char *) color_18082_backing_6;
    color_18083 = (__local unsigned char *) color_18083_backing_7;
    color_18084 = (__local unsigned char *) color_18084_backing_8;
    tmp_offs_18228 = (int64_t) 0;
    num_chunks_18229 = sdiv_up32(sext_i64_i32(d_10182) * sext_i64_i32(d_10182), sext_i64_i32(computed_tblock_sizze_11724));
    for (int32_t chunk_i_18230 = 0; chunk_i_18230 < num_chunks_18229; chunk_i_18230++) {
        int32_t i_18231 = chunk_i_18230 * sext_i64_i32(computed_tblock_sizze_11724) + local_tid_18159;
        
        if (slt32(i_18231, sext_i64_i32(d_10182) * sext_i64_i32(d_10182))) {
            ((__local uint16_t *) color_18076)[tmp_offs_18228 + sext_i32_i64(squot32(i_18231, sext_i64_i32(d_10182))) * (int64_t) 64 + sext_i32_i64(i_18231 - squot32(i_18231, sext_i64_i32(d_10182)) * sext_i64_i32(d_10182))] = futrts_to_bits16(futrts_from_bits16(((__global uint16_t *) Q_mem_17591)[gtid_12232 * (d_10182 * d_10182) + sext_i32_i64(squot32(i_18231, sext_i64_i32(d_10182))) * d_10182 + sext_i32_i64(i_18231 - squot32(i_18231, sext_i64_i32(d_10182)) * sext_i64_i32(d_10182))]));
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    tmp_offs_18228 += d_10182;
    num_chunks_18232 = sdiv_up32(sext_i64_i32(d_10182) * sext_i64_i32(n_11213), sext_i64_i32(computed_tblock_sizze_11724));
    for (int32_t chunk_i_18233 = 0; chunk_i_18233 < num_chunks_18232; chunk_i_18233++) {
        int32_t i_18234 = chunk_i_18233 * sext_i64_i32(computed_tblock_sizze_11724) + local_tid_18159;
        
        if (slt32(i_18234, sext_i64_i32(d_10182) * sext_i64_i32(n_11213))) {
            ((__local uint16_t *) color_18076)[tmp_offs_18228 + sext_i32_i64(squot32(i_18234, sext_i64_i32(n_11213))) * (int64_t) 64 + sext_i32_i64(i_18234 - squot32(i_18234, sext_i64_i32(n_11213)) * sext_i64_i32(n_11213))] = futrts_to_bits16(futrts_from_bits16(((__global uint16_t *) mem_17670)[sext_i32_i64(squot32(i_18234, sext_i64_i32(n_11213))) * n_11213 + sext_i32_i64(i_18234 - squot32(i_18234, sext_i64_i32(n_11213)) * sext_i64_i32(n_11213))]));
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    tmp_offs_18228 += n_11213;
    tmp_offs_18235 = (int64_t) 0;
    if (!((int64_t) 64 * tmp_offs_18235 == (int64_t) 0)) {
        int32_t num_chunks_18236 = sdiv_up32(sext_i64_i32(d_10182) * 64, sext_i64_i32(computed_tblock_sizze_11724));
        
        for (int32_t chunk_i_18237 = 0; chunk_i_18237 < num_chunks_18236; chunk_i_18237++) {
            int32_t i_18238 = chunk_i_18237 * sext_i64_i32(computed_tblock_sizze_11724) + local_tid_18159;
            
            if (slt32(i_18238, sext_i64_i32(d_10182) * 64)) {
                ((__local uint16_t *) color_18076)[(int64_t) 64 * tmp_offs_18235 + sext_i32_i64(squot32(i_18238, 64)) * (int64_t) 64 + sext_i32_i64(i_18238 - squot32(i_18238, 64) * 64)] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) color_18076)[sext_i32_i64(squot32(i_18238, 64)) * (int64_t) 64 + sext_i32_i64(i_18238 - squot32(i_18238, 64) * 64)]));
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
    }
    tmp_offs_18235 += d_10182;
    num_chunks_18239 = sdiv_up32(sext_i64_i32(n_11213) * 64, sext_i64_i32(computed_tblock_sizze_11724));
    for (int32_t chunk_i_18240 = 0; chunk_i_18240 < num_chunks_18239; chunk_i_18240++) {
        int32_t i_18241 = chunk_i_18240 * sext_i64_i32(computed_tblock_sizze_11724) + local_tid_18159;
        
        if (slt32(i_18241, sext_i64_i32(n_11213) * 64)) {
            ((__local uint16_t *) color_18076)[(int64_t) 64 * tmp_offs_18235 + sext_i32_i64(squot32(i_18241, 64)) * (int64_t) 64 + sext_i32_i64(i_18241 - squot32(i_18241, 64) * 64)] = futrts_to_bits16(futrts_from_bits16(((__global uint16_t *) mem_17603)[sext_i32_i64(squot32(i_18241, 64)) * (int64_t) 64 + sext_i32_i64(i_18241 - squot32(i_18241, 64) * 64)]));
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    tmp_offs_18235 += n_11213;
    phys_tid_12244 = sext_i32_i64(local_tid_18159);
    red_arr_mem_18242 = (__local unsigned char *) red_arr_mem_18242_backing_9;
    gtid_12240 = sext_i32_i64(sext_i64_i32(ltid_pre_18214));
    gtid_12241 = sext_i32_i64(sext_i64_i32(ltid_pre_18215));
    gtid_12242 = sext_i32_i64(sext_i64_i32(ltid_pre_18216));
    gtid_12243 = sext_i32_i64(sext_i64_i32(ltid_pre_18217));
    if (((slt64(gtid_12240, m_10183) && slt64(gtid_12241, (int64_t) 64)) && slt64(gtid_12242, (int64_t) 64)) && slt64(gtid_12243, (int64_t) 64)) {
        f16 eta_p_12251;
        int64_t binop_x_17279;
        int64_t binop_y_17280;
        int64_t binop_x_17281;
        int64_t binop_x_17282;
        int64_t new_index_17283;
        int64_t binop_y_17293;
        int64_t new_index_17294;
        bool index_concat_cmp_17296;
        f16 index_concat_branch_17300;
        f16 defunc_0_f_res_12253;
        float f16_res_12254;
        
        eta_p_12251 = futrts_from_bits16(((__local uint16_t *) color_18076)[gtid_12241 * (int64_t) 64 + gtid_12243]);
        binop_x_17279 = (int64_t) 4096 * gtid_12240;
        binop_y_17280 = (int64_t) 64 * gtid_12242;
        binop_x_17281 = binop_x_17279 + binop_y_17280;
        binop_x_17282 = gtid_12243 + binop_x_17281;
        new_index_17283 = squot64(binop_x_17282, (int64_t) 64);
        binop_y_17293 = (int64_t) 64 * new_index_17283;
        new_index_17294 = binop_x_17282 - binop_y_17293;
        index_concat_cmp_17296 = sle64(dzlz7bUZLztZRz20Umz20Udz7dUzg_10184, new_index_17283);
        if (index_concat_cmp_17296) {
            index_concat_branch_17300 = (f16) 0.0F;
        } else {
            f16 index_concat_17299 = futrts_from_bits16(((__global uint16_t *) mem_17600)[new_index_17283 * (int64_t) 64 + new_index_17294]);
            
            index_concat_branch_17300 = index_concat_17299;
        }
        defunc_0_f_res_12253 = eta_p_12251 * index_concat_branch_17300;
        f16_res_12254 = fpconv_f16_f32(defunc_0_f_res_12253);
        ((__local float *) red_arr_mem_18242)[gtid_12240 * (int64_t) 262144 + gtid_12241 * (int64_t) 4096 + gtid_12242 * (int64_t) 64 + gtid_12243] = f16_res_12254;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    dims_flat_18244 = m_10183 * (int64_t) 64 * (int64_t) 64 * (int64_t) 64;
    ltid_in_bounds_18249 = slt64(sext_i32_i64(local_tid_18159), m_10183 * (int64_t) 64 * (int64_t) 64 * (int64_t) 64);
    // read input for in-block scan
    {
        if (ltid_in_bounds_18249) {
            eta_p_12246 = ((volatile __local float *) red_arr_mem_18242)[sext_i32_i64(local_tid_18159)];
            if ((local_tid_18159 - squot32(local_tid_18159, 32) * 32) == 0) {
                eta_p_12245 = eta_p_12246;
            }
        }
    }
    // in-block scan (hopefully no barriers needed)
    {
        skip_threads_18250 = 1;
        while (slt32(skip_threads_18250, 32)) {
            bool thread_active_18251 = sle32(skip_threads_18250, local_tid_18159 - squot32(local_tid_18159, 32) * 32) && ltid_in_bounds_18249;
            
            if (thread_active_18251) {
                // read operands
                {
                    eta_p_12245 = ((volatile __local float *) red_arr_mem_18242)[sext_i32_i64(local_tid_18159) - sext_i32_i64(skip_threads_18250)];
                }
            }
            // perform operation
            {
                bool inactive_18252 = slt64(srem64(sext_i32_i64(local_tid_18159), (int64_t) 64), sext_i32_i64(local_tid_18159) - sext_i32_i64(local_tid_18159 - skip_threads_18250));
                
                if (thread_active_18251 && inactive_18252) {
                    eta_p_12245 = eta_p_12246;
                }
                if (thread_active_18251) {
                    if (!inactive_18252) {
                        float defunc_0_op_res_12247 = eta_p_12245 + eta_p_12246;
                        
                        eta_p_12245 = defunc_0_op_res_12247;
                    }
                }
            }
            if (sle32(wave_sizze_18161, skip_threads_18250)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            if (thread_active_18251) {
                // write result
                {
                    ((volatile __local float *) red_arr_mem_18242)[sext_i32_i64(local_tid_18159)] = eta_p_12245;
                    eta_p_12246 = eta_p_12245;
                }
            }
            if (sle32(wave_sizze_18161, skip_threads_18250)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            skip_threads_18250 *= 2;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // last thread of block 'i' writes its result to offset 'i'
    {
        if ((local_tid_18159 - squot32(local_tid_18159, 32) * 32) == 31 && ltid_in_bounds_18249) {
            ((volatile __local float *) red_arr_mem_18242)[sext_i32_i64(squot32(local_tid_18159, 32))] = eta_p_12245;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
    {
        int32_t skip_threads_18253;
        
        // read input for in-block scan
        {
            if (squot32(local_tid_18159, 32) == 0 && ltid_in_bounds_18249) {
                eta_p_18247 = ((volatile __local float *) red_arr_mem_18242)[sext_i32_i64(local_tid_18159)];
                if ((local_tid_18159 - squot32(local_tid_18159, 32) * 32) == 0) {
                    eta_p_18246 = eta_p_18247;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_18253 = 1;
            while (slt32(skip_threads_18253, 32)) {
                bool thread_active_18254 = sle32(skip_threads_18253, local_tid_18159 - squot32(local_tid_18159, 32) * 32) && (squot32(local_tid_18159, 32) == 0 && ltid_in_bounds_18249);
                
                if (thread_active_18254) {
                    // read operands
                    {
                        eta_p_18246 = ((volatile __local float *) red_arr_mem_18242)[sext_i32_i64(local_tid_18159) - sext_i32_i64(skip_threads_18253)];
                    }
                }
                // perform operation
                {
                    bool inactive_18255 = slt64(srem64(sext_i32_i64(local_tid_18159 * 32 + 32 - 1), (int64_t) 64), sext_i32_i64(local_tid_18159 * 32 + 32 - 1) - sext_i32_i64((local_tid_18159 - skip_threads_18253) * 32 + 32 - 1));
                    
                    if (thread_active_18254 && inactive_18255) {
                        eta_p_18246 = eta_p_18247;
                    }
                    if (thread_active_18254) {
                        if (!inactive_18255) {
                            float defunc_0_op_res_18248 = eta_p_18246 + eta_p_18247;
                            
                            eta_p_18246 = defunc_0_op_res_18248;
                        }
                    }
                }
                if (sle32(wave_sizze_18161, skip_threads_18253)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (thread_active_18254) {
                    // write result
                    {
                        ((volatile __local float *) red_arr_mem_18242)[sext_i32_i64(local_tid_18159)] = eta_p_18246;
                        eta_p_18247 = eta_p_18246;
                    }
                }
                if (sle32(wave_sizze_18161, skip_threads_18253)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_18253 *= 2;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    no_carry_in_18256 = squot32(local_tid_18159, 32) == 0 || !ltid_in_bounds_18249;
    // carry-in for every block except the first
    {
        // read operands
        {
            if (!no_carry_in_18256) {
                eta_p_12246 = eta_p_12245;
                eta_p_12245 = ((__local float *) red_arr_mem_18242)[sext_i32_i64(squot32(local_tid_18159, 32)) - (int64_t) 1];
            }
        }
        // perform operation
        {
            bool inactive_18257 = slt64(srem64(sext_i32_i64(local_tid_18159), (int64_t) 64), sext_i32_i64(local_tid_18159) - sext_i32_i64(squot32(local_tid_18159, 32) * 32 - 1));
            
            if (!no_carry_in_18256) {
                if (inactive_18257) {
                    eta_p_12245 = eta_p_12246;
                }
            }
            if (!no_carry_in_18256) {
                if (!inactive_18257) {
                    float defunc_0_op_res_12247 = eta_p_12245 + eta_p_12246;
                    
                    eta_p_12245 = defunc_0_op_res_12247;
                }
            }
        }
        // write final result
        {
            if (!no_carry_in_18256) {
                ((__local float *) red_arr_mem_18242)[sext_i32_i64(local_tid_18159)] = eta_p_12245;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // restore correct values for first block
    {
        if (squot32(local_tid_18159, 32) == 0 && ltid_in_bounds_18249) {
            ((__local float *) red_arr_mem_18242)[sext_i32_i64(local_tid_18159)] = eta_p_12246;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    barrier(CLK_LOCAL_MEM_FENCE);
    // Save result of reduction.
    {
        int32_t num_chunks_18258 = sdiv_up32(sext_i64_i32(m_10183) * 64 * 64, sext_i64_i32(computed_tblock_sizze_11724));
        
        for (int32_t chunk_i_18259 = 0; chunk_i_18259 < num_chunks_18258; chunk_i_18259++) {
            int32_t i_18260 = chunk_i_18259 * sext_i64_i32(computed_tblock_sizze_11724) + local_tid_18159;
            
            if (slt32(i_18260, sext_i64_i32(m_10183) * 64 * 64)) {
                ((__local float *) color_18077)[sext_i32_i64(squot32(i_18260, 4096)) * (int64_t) 4096 + sext_i32_i64(squot32(i_18260 - squot32(i_18260, 4096) * 4096, 64)) * (int64_t) 64 + sext_i32_i64(i_18260 - squot32(i_18260, 4096) * 4096 - squot32(i_18260 - squot32(i_18260, 4096) * 4096, 64) * 64)] = ((__local float *) red_arr_mem_18242)[(int64_t) 63 + sext_i32_i64(squot32(i_18260, 4096)) * (int64_t) 262144 + sext_i32_i64(squot32(i_18260 - squot32(i_18260, 4096) * 4096, 64)) * (int64_t) 4096 + sext_i32_i64(i_18260 - squot32(i_18260, 4096) * 4096 - squot32(i_18260 - squot32(i_18260, 4096) * 4096, 64) * 64) * (int64_t) 64];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    phys_tid_12259 = sext_i32_i64(local_tid_18159);
    gtid_12256 = sext_i32_i64(sext_i64_i32(ltid_pre_18205));
    gtid_12257 = sext_i32_i64(sext_i64_i32(ltid_pre_18206));
    gtid_12258 = sext_i32_i64(sext_i64_i32(ltid_pre_18207));
    if ((slt64(gtid_12256, m_10183) && slt64(gtid_12257, (int64_t) 64)) && slt64(gtid_12258, (int64_t) 64)) {
        float defunc_0_f_res_12260;
        f16 f32_res_12261;
        
        defunc_0_f_res_12260 = ((__local float *) color_18077)[gtid_12256 * (int64_t) 4096 + gtid_12257 * (int64_t) 64 + gtid_12258];
        f32_res_12261 = fpconv_f32_f16(defunc_0_f_res_12260);
        ((__local uint16_t *) color_18076)[gtid_12256 * (int64_t) 4096 + gtid_12257 * (int64_t) 64 + gtid_12258] = futrts_to_bits16(f32_res_12261);
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    num_chunks_18261 = sdiv_up32(sext_i64_i32(m_10183) * 64 * 64, sext_i64_i32(computed_tblock_sizze_11724));
    for (int32_t chunk_i_18262 = 0; chunk_i_18262 < num_chunks_18261; chunk_i_18262++) {
        int32_t i_18263 = chunk_i_18262 * sext_i64_i32(computed_tblock_sizze_11724) + local_tid_18159;
        
        if (slt32(i_18263, sext_i64_i32(m_10183) * 64 * 64)) {
            ((__local uint16_t *) color_18077)[sext_i32_i64(squot32(i_18263, 4096)) * (int64_t) 4096 + sext_i32_i64(squot32(i_18263 - squot32(i_18263, 4096) * 4096, 64)) * (int64_t) 64 + sext_i32_i64(i_18263 - squot32(i_18263, 4096) * 4096 - squot32(i_18263 - squot32(i_18263, 4096) * 4096, 64) * 64)] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) color_18076)[sext_i32_i64(squot32(i_18263, 4096)) * (int64_t) 4096 + sext_i32_i64(squot32(i_18263 - squot32(i_18263, 4096) * 4096, 64)) + sext_i32_i64(i_18263 - squot32(i_18263, 4096) * 4096 - squot32(i_18263 - squot32(i_18263, 4096) * 4096, 64) * 64) * (int64_t) 64]));
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    phys_tid_12269 = sext_i32_i64(local_tid_18159);
    gtid_12268 = sext_i32_i64(sext_i64_i32(ltid_pre_18172));
    if (slt64(gtid_12268, d_10182)) {
        bool y_12272;
        bool index_certs_12274;
        
        y_12272 = slt64(gtid_12268, (int64_t) 64);
        if (!y_12272) {
            {
                if (atomic_cmpxchg_i32_global(global_failure, -1, 0) == -1) {
                    global_failure_args[0] = (int64_t) gtid_12268;
                    global_failure_args[1] = (int64_t) (int64_t) 64;
                    ;
                }
                local_failure = 1;
                goto error_4;
            }
        }
    }
    
  error_4:
    barrier(CLK_LOCAL_MEM_FENCE);
    if (local_failure)
        return;
    barrier(CLK_LOCAL_MEM_FENCE);
    phys_tid_12278 = sext_i32_i64(local_tid_18159);
    gtid_12276 = sext_i32_i64(sext_i64_i32(ltid_pre_18199));
    gtid_12277 = sext_i32_i64(sext_i64_i32(ltid_pre_18200));
    if (slt64(gtid_12276, d_10182) && slt64(gtid_12277, dzlz7bUZLztZRz20Umz20Udz7dUzg_11229)) {
        bool y_12283;
        bool index_certs_12285;
        bool index_certs_12280;
        f16 lifted_lambda_res_12286;
        
        y_12283 = slt64(gtid_12277, dzlz7bUZLztZRz20Umz20UZLZLzpZRz20Udz20UnZRz7dUzg_11214);
        if (!y_12283) {
            {
                if (atomic_cmpxchg_i32_global(global_failure, -1, 1) == -1) {
                    global_failure_args[0] = (int64_t) gtid_12277;
                    global_failure_args[1] = (int64_t) dzlz7bUZLztZRz20Umz20UZLZLzpZRz20Udz20UnZRz7dUzg_11214;
                    ;
                }
                local_failure = 1;
                goto error_5;
            }
        }
        index_certs_12280 = 0;
        lifted_lambda_res_12286 = futrts_from_bits16(((__local uint16_t *) color_18077)[gtid_12276 + gtid_12277 * (int64_t) 64]);
        ((__local uint16_t *) color_18084)[gtid_12276 * dzlz7bUZLztZRz20Umz20Udz7dUzg_11229 + gtid_12277] = futrts_to_bits16(lifted_lambda_res_12286);
    }
    
  error_5:
    barrier(CLK_LOCAL_MEM_FENCE);
    if (local_failure)
        return;
    barrier(CLK_LOCAL_MEM_FENCE);
    for (int32_t chunk_i_18266 = 0; chunk_i_18266 < num_chunks_18149; chunk_i_18266++) {
        int32_t i_18267;
        int64_t slice_18268;
        int64_t rep_i_18265;
        int64_t remnant_18269;
        
        i_18267 = chunk_i_18266 * sext_i64_i32(computed_tblock_sizze_11724) + local_tid_18159;
        slice_18268 = d_10182;
        rep_i_18265 = sext_i32_i64(i_18267);
        remnant_18269 = sext_i32_i64(i_18267) - rep_i_18265;
        if (sle64((int64_t) 0, rep_i_18265) && slt64(rep_i_18265, d_10182)) {
            ((__local uint16_t *) color_18077)[rep_i_18265] = futrts_to_bits16((f16) -INFINITY);
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    for (int32_t chunk_i_18272 = 0; chunk_i_18272 < num_chunks_18149; chunk_i_18272++) {
        int32_t i_18273;
        int64_t slice_18274;
        int64_t rep_i_18271;
        int64_t remnant_18275;
        
        i_18273 = chunk_i_18272 * sext_i64_i32(computed_tblock_sizze_11724) + local_tid_18159;
        slice_18274 = d_10182;
        rep_i_18271 = sext_i32_i64(i_18273);
        remnant_18275 = sext_i32_i64(i_18273) - rep_i_18271;
        if (sle64((int64_t) 0, rep_i_18271) && slt64(rep_i_18271, d_10182)) {
            ((__local uint16_t *) color_18076)[rep_i_18271] = futrts_to_bits16((f16) 0.0F);
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    barrier(CLK_LOCAL_MEM_FENCE);
    mem_param_17702 = color_18077;
    mem_param_out_17999 = color_18080;
    mem_param_17705 = color_18076;
    mem_param_out_18008 = color_18078;
    for (int64_t i_12293 = 0; i_12293 < q_11373; i_12293++) {
        int64_t copy2shr_arg0_12296;
        int32_t num_chunks_18282;
        __local unsigned char *ext_mem_17715;
        int64_t phys_tid_12309;
        __local unsigned char *red_arr_mem_18288;
        int64_t gtid_12307;
        int64_t gtid_12308;
        int64_t dims_flat_18291;
        f16 eta_p_12310;
        f16 eta_p_12311;
        f16 eta_p_18293;
        f16 eta_p_18294;
        bool ltid_in_bounds_18296;
        int32_t skip_threads_18297;
        bool no_carry_in_18303;
        int64_t phys_tid_12325;
        __local unsigned char *red_arr_mem_18308;
        int64_t gtid_12323;
        int64_t gtid_12324;
        int64_t dims_flat_18311;
        f16 eta_p_12326;
        f16 eta_p_12327;
        f16 eta_p_18313;
        f16 eta_p_18314;
        bool ltid_in_bounds_18316;
        int32_t skip_threads_18317;
        bool no_carry_in_18323;
        int64_t phys_tid_12344;
        int64_t gtid_12343;
        __local unsigned char *mem_param_tmp_18276;
        __local unsigned char *mem_param_out_tmp_18277;
        __local unsigned char *mem_param_tmp_18278;
        __local unsigned char *mem_param_out_tmp_18279;
        
        copy2shr_arg0_12296 = mul64((int64_t) 1024, i_12293);
        num_chunks_18282 = sdiv_up32(sext_i64_i32(d_10182) * 1024, sext_i64_i32(computed_tblock_sizze_11724));
        for (int32_t chunk_i_18283 = 0; chunk_i_18283 < num_chunks_18282; chunk_i_18283++) {
            int32_t i_18284 = chunk_i_18283 * sext_i64_i32(computed_tblock_sizze_11724) + local_tid_18159;
            
            if (slt32(i_18284, sext_i64_i32(d_10182) * 1024)) {
                ((__local uint16_t *) color_18079)[sext_i32_i64(squot32(i_18284, 1024)) * (int64_t) 1024 + sext_i32_i64(i_18284 - squot32(i_18284, 1024) * 1024)] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) color_18084)[copy2shr_arg0_12296 + sext_i32_i64(squot32(i_18284, 1024)) * dzlz7bUZLztZRz20Umz20Udz7dUzg_11229 + sext_i32_i64(i_18284 - squot32(i_18284, 1024) * 1024)]));
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_LOCAL_MEM_FENCE);
        if (opaque_res_11377) {
            int32_t num_chunks_18285 = sdiv_up32(sext_i64_i32(d_10182) * 1024, sext_i64_i32(computed_tblock_sizze_11724));
            
            for (int32_t chunk_i_18286 = 0; chunk_i_18286 < num_chunks_18285; chunk_i_18286++) {
                int32_t i_18287 = chunk_i_18286 * sext_i64_i32(computed_tblock_sizze_11724) + local_tid_18159;
                
                if (slt32(i_18287, sext_i64_i32(d_10182) * 1024)) {
                    ((__local uint16_t *) color_18082)[sext_i32_i64(squot32(i_18287, 1024)) * (int64_t) 1024 + sext_i32_i64(i_18287 - squot32(i_18287, 1024) * 1024)] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) color_18084)[copy2shr_arg0_12296 + sext_i32_i64(squot32(i_18287, 1024)) * dzlz7bUZLztZRz20Umz20Udz7dUzg_11229 + sext_i32_i64(i_18287 - squot32(i_18287, 1024) * 1024)]));
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            ext_mem_17715 = color_18082;
        } else {
            int64_t phys_tid_12303;
            int64_t gtid_12302;
            
            phys_tid_12303 = sext_i32_i64(local_tid_18159);
            gtid_12302 = sext_i32_i64(sext_i64_i32(ltid_pre_18172));
            if (slt64(gtid_12302, d_10182)) {
                ((__local uint16_t *) color_18079)[gtid_12302 * (int64_t) 1024] = futrts_to_bits16((f16) 0.0F);
                for (int64_t i_0 = 0; i_0 < (int64_t) 1024; i_0++) {
                    ((__local uint16_t *) color_18083)[gtid_12302 * (int64_t) 1024 + i_0] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) color_18079)[gtid_12302 * (int64_t) 1024 + i_0]));
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            ext_mem_17715 = color_18083;
        }
        phys_tid_12309 = sext_i32_i64(local_tid_18159);
        red_arr_mem_18288 = (__local unsigned char *) red_arr_mem_18288_backing_10;
        gtid_12307 = sext_i32_i64(sext_i64_i32(ltid_pre_18175));
        gtid_12308 = sext_i32_i64(sext_i64_i32(ltid_pre_18176));
        if (slt64(gtid_12307, d_10182) && slt64(gtid_12308, (int64_t) 32)) {
            f16 defunc_0_f_res_12315;
            f16 r_12317 = (f16) -INFINITY;
            
            for (int64_t i_12316 = 0; i_12316 < (int64_t) 32; i_12316++) {
                int64_t zp_lhs_12318;
                int64_t f_arg0_12319;
                f16 f_arg0_12320;
                f16 max_res_12321;
                f16 r_tmp_18290;
                
                zp_lhs_12318 = mul64((int64_t) 32, i_12316);
                f_arg0_12319 = add64(gtid_12308, zp_lhs_12318);
                f_arg0_12320 = futrts_from_bits16(((__local uint16_t *) ext_mem_17715)[gtid_12307 * (int64_t) 1024 + f_arg0_12319]);
                max_res_12321 = fmax16(r_12317, f_arg0_12320);
                r_tmp_18290 = max_res_12321;
                r_12317 = r_tmp_18290;
            }
            defunc_0_f_res_12315 = r_12317;
            ((__local uint16_t *) red_arr_mem_18288)[gtid_12307 * (int64_t) 32 + gtid_12308] = futrts_to_bits16(defunc_0_f_res_12315);
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        dims_flat_18291 = d_10182 * (int64_t) 32;
        ltid_in_bounds_18296 = slt64(sext_i32_i64(local_tid_18159), d_10182 * (int64_t) 32);
        // read input for in-block scan
        {
            if (ltid_in_bounds_18296) {
                eta_p_12311 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18288)[sext_i32_i64(local_tid_18159)]);
                if ((local_tid_18159 - squot32(local_tid_18159, 32) * 32) == 0) {
                    eta_p_12310 = eta_p_12311;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_18297 = 1;
            while (slt32(skip_threads_18297, 32)) {
                bool thread_active_18298 = sle32(skip_threads_18297, local_tid_18159 - squot32(local_tid_18159, 32) * 32) && ltid_in_bounds_18296;
                
                if (thread_active_18298) {
                    // read operands
                    {
                        eta_p_12310 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18288)[sext_i32_i64(local_tid_18159) - sext_i32_i64(skip_threads_18297)]);
                    }
                }
                // perform operation
                {
                    bool inactive_18299 = slt64(srem64(sext_i32_i64(local_tid_18159), (int64_t) 32), sext_i32_i64(local_tid_18159) - sext_i32_i64(local_tid_18159 - skip_threads_18297));
                    
                    if (thread_active_18298 && inactive_18299) {
                        eta_p_12310 = eta_p_12311;
                    }
                    if (thread_active_18298) {
                        if (!inactive_18299) {
                            f16 max_res_12312 = fmax16(eta_p_12310, eta_p_12311);
                            
                            eta_p_12310 = max_res_12312;
                        }
                    }
                }
                if (sle32(wave_sizze_18161, skip_threads_18297)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (thread_active_18298) {
                    // write result
                    {
                        ((volatile __local uint16_t *) red_arr_mem_18288)[sext_i32_i64(local_tid_18159)] = futrts_to_bits16(eta_p_12310);
                        eta_p_12311 = eta_p_12310;
                    }
                }
                if (sle32(wave_sizze_18161, skip_threads_18297)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_18297 *= 2;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // last thread of block 'i' writes its result to offset 'i'
        {
            if ((local_tid_18159 - squot32(local_tid_18159, 32) * 32) == 31 && ltid_in_bounds_18296) {
                ((volatile __local uint16_t *) red_arr_mem_18288)[sext_i32_i64(squot32(local_tid_18159, 32))] = futrts_to_bits16(eta_p_12310);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
        {
            int32_t skip_threads_18300;
            
            // read input for in-block scan
            {
                if (squot32(local_tid_18159, 32) == 0 && ltid_in_bounds_18296) {
                    eta_p_18294 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18288)[sext_i32_i64(local_tid_18159)]);
                    if ((local_tid_18159 - squot32(local_tid_18159, 32) * 32) == 0) {
                        eta_p_18293 = eta_p_18294;
                    }
                }
            }
            // in-block scan (hopefully no barriers needed)
            {
                skip_threads_18300 = 1;
                while (slt32(skip_threads_18300, 32)) {
                    bool thread_active_18301 = sle32(skip_threads_18300, local_tid_18159 - squot32(local_tid_18159, 32) * 32) && (squot32(local_tid_18159, 32) == 0 && ltid_in_bounds_18296);
                    
                    if (thread_active_18301) {
                        // read operands
                        {
                            eta_p_18293 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18288)[sext_i32_i64(local_tid_18159) - sext_i32_i64(skip_threads_18300)]);
                        }
                    }
                    // perform operation
                    {
                        bool inactive_18302 = slt64(srem64(sext_i32_i64(local_tid_18159 * 32 + 32 - 1), (int64_t) 32), sext_i32_i64(local_tid_18159 * 32 + 32 - 1) - sext_i32_i64((local_tid_18159 - skip_threads_18300) * 32 + 32 - 1));
                        
                        if (thread_active_18301 && inactive_18302) {
                            eta_p_18293 = eta_p_18294;
                        }
                        if (thread_active_18301) {
                            if (!inactive_18302) {
                                f16 max_res_18295 = fmax16(eta_p_18293, eta_p_18294);
                                
                                eta_p_18293 = max_res_18295;
                            }
                        }
                    }
                    if (sle32(wave_sizze_18161, skip_threads_18300)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    if (thread_active_18301) {
                        // write result
                        {
                            ((volatile __local uint16_t *) red_arr_mem_18288)[sext_i32_i64(local_tid_18159)] = futrts_to_bits16(eta_p_18293);
                            eta_p_18294 = eta_p_18293;
                        }
                    }
                    if (sle32(wave_sizze_18161, skip_threads_18300)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    skip_threads_18300 *= 2;
                }
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        no_carry_in_18303 = squot32(local_tid_18159, 32) == 0 || !ltid_in_bounds_18296;
        // carry-in for every block except the first
        {
            // read operands
            {
                if (!no_carry_in_18303) {
                    eta_p_12311 = eta_p_12310;
                    eta_p_12310 = futrts_from_bits16(((__local uint16_t *) red_arr_mem_18288)[sext_i32_i64(squot32(local_tid_18159, 32)) - (int64_t) 1]);
                }
            }
            // perform operation
            {
                bool inactive_18304 = slt64(srem64(sext_i32_i64(local_tid_18159), (int64_t) 32), sext_i32_i64(local_tid_18159) - sext_i32_i64(squot32(local_tid_18159, 32) * 32 - 1));
                
                if (!no_carry_in_18303) {
                    if (inactive_18304) {
                        eta_p_12310 = eta_p_12311;
                    }
                }
                if (!no_carry_in_18303) {
                    if (!inactive_18304) {
                        f16 max_res_12312 = fmax16(eta_p_12310, eta_p_12311);
                        
                        eta_p_12310 = max_res_12312;
                    }
                }
            }
            // write final result
            {
                if (!no_carry_in_18303) {
                    ((__local uint16_t *) red_arr_mem_18288)[sext_i32_i64(local_tid_18159)] = futrts_to_bits16(eta_p_12310);
                }
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // restore correct values for first block
        {
            if (squot32(local_tid_18159, 32) == 0 && ltid_in_bounds_18296) {
                ((__local uint16_t *) red_arr_mem_18288)[sext_i32_i64(local_tid_18159)] = futrts_to_bits16(eta_p_12311);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_LOCAL_MEM_FENCE);
        // Save result of reduction.
        {
            int32_t num_chunks_18305 = sdiv_up32(sext_i64_i32(d_10182), sext_i64_i32(computed_tblock_sizze_11724));
            
            for (int32_t chunk_i_18306 = 0; chunk_i_18306 < num_chunks_18305; chunk_i_18306++) {
                int32_t i_18307 = chunk_i_18306 * sext_i64_i32(computed_tblock_sizze_11724) + local_tid_18159;
                
                if (slt32(i_18307, sext_i64_i32(d_10182))) {
                    ((__local uint16_t *) color_18081)[sext_i32_i64(i_18307)] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) red_arr_mem_18288)[(int64_t) 31 + sext_i32_i64(i_18307) * (int64_t) 32]));
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        phys_tid_12325 = sext_i32_i64(local_tid_18159);
        red_arr_mem_18308 = (__local unsigned char *) red_arr_mem_18308_backing_11;
        gtid_12323 = sext_i32_i64(sext_i64_i32(ltid_pre_18175));
        gtid_12324 = sext_i32_i64(sext_i64_i32(ltid_pre_18176));
        if (slt64(gtid_12323, d_10182) && slt64(gtid_12324, (int64_t) 32)) {
            f16 defunc_0_reduce_comm_res_12330;
            f16 defunc_0_f_res_12332;
            f16 r_12334;
            
            defunc_0_reduce_comm_res_12330 = futrts_from_bits16(((__local uint16_t *) color_18081)[gtid_12323]);
            r_12334 = (f16) 0.0F;
            for (int64_t i_12333 = 0; i_12333 < (int64_t) 32; i_12333++) {
                int64_t zp_lhs_12335;
                int64_t f_arg0_12336;
                f16 f_arg0_12337;
                f16 real_exp_arg0_12338;
                f16 exp_res_12339;
                f16 defunc_0_bop_res_12340;
                f16 r_tmp_18310;
                
                zp_lhs_12335 = mul64((int64_t) 32, i_12333);
                f_arg0_12336 = add64(gtid_12324, zp_lhs_12335);
                f_arg0_12337 = futrts_from_bits16(((__local uint16_t *) ext_mem_17715)[gtid_12323 * (int64_t) 1024 + f_arg0_12336]);
                real_exp_arg0_12338 = f_arg0_12337 - defunc_0_reduce_comm_res_12330;
                exp_res_12339 = futrts_exp16(real_exp_arg0_12338);
                defunc_0_bop_res_12340 = r_12334 + exp_res_12339;
                r_tmp_18310 = defunc_0_bop_res_12340;
                r_12334 = r_tmp_18310;
            }
            defunc_0_f_res_12332 = r_12334;
            ((__local uint16_t *) red_arr_mem_18308)[gtid_12323 * (int64_t) 32 + gtid_12324] = futrts_to_bits16(defunc_0_f_res_12332);
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        dims_flat_18311 = d_10182 * (int64_t) 32;
        ltid_in_bounds_18316 = slt64(sext_i32_i64(local_tid_18159), d_10182 * (int64_t) 32);
        // read input for in-block scan
        {
            if (ltid_in_bounds_18316) {
                eta_p_12327 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18308)[sext_i32_i64(local_tid_18159)]);
                if ((local_tid_18159 - squot32(local_tid_18159, 32) * 32) == 0) {
                    eta_p_12326 = eta_p_12327;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_18317 = 1;
            while (slt32(skip_threads_18317, 32)) {
                bool thread_active_18318 = sle32(skip_threads_18317, local_tid_18159 - squot32(local_tid_18159, 32) * 32) && ltid_in_bounds_18316;
                
                if (thread_active_18318) {
                    // read operands
                    {
                        eta_p_12326 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18308)[sext_i32_i64(local_tid_18159) - sext_i32_i64(skip_threads_18317)]);
                    }
                }
                // perform operation
                {
                    bool inactive_18319 = slt64(srem64(sext_i32_i64(local_tid_18159), (int64_t) 32), sext_i32_i64(local_tid_18159) - sext_i32_i64(local_tid_18159 - skip_threads_18317));
                    
                    if (thread_active_18318 && inactive_18319) {
                        eta_p_12326 = eta_p_12327;
                    }
                    if (thread_active_18318) {
                        if (!inactive_18319) {
                            f16 defunc_0_op_res_12328 = eta_p_12326 + eta_p_12327;
                            
                            eta_p_12326 = defunc_0_op_res_12328;
                        }
                    }
                }
                if (sle32(wave_sizze_18161, skip_threads_18317)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (thread_active_18318) {
                    // write result
                    {
                        ((volatile __local uint16_t *) red_arr_mem_18308)[sext_i32_i64(local_tid_18159)] = futrts_to_bits16(eta_p_12326);
                        eta_p_12327 = eta_p_12326;
                    }
                }
                if (sle32(wave_sizze_18161, skip_threads_18317)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_18317 *= 2;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // last thread of block 'i' writes its result to offset 'i'
        {
            if ((local_tid_18159 - squot32(local_tid_18159, 32) * 32) == 31 && ltid_in_bounds_18316) {
                ((volatile __local uint16_t *) red_arr_mem_18308)[sext_i32_i64(squot32(local_tid_18159, 32))] = futrts_to_bits16(eta_p_12326);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
        {
            int32_t skip_threads_18320;
            
            // read input for in-block scan
            {
                if (squot32(local_tid_18159, 32) == 0 && ltid_in_bounds_18316) {
                    eta_p_18314 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18308)[sext_i32_i64(local_tid_18159)]);
                    if ((local_tid_18159 - squot32(local_tid_18159, 32) * 32) == 0) {
                        eta_p_18313 = eta_p_18314;
                    }
                }
            }
            // in-block scan (hopefully no barriers needed)
            {
                skip_threads_18320 = 1;
                while (slt32(skip_threads_18320, 32)) {
                    bool thread_active_18321 = sle32(skip_threads_18320, local_tid_18159 - squot32(local_tid_18159, 32) * 32) && (squot32(local_tid_18159, 32) == 0 && ltid_in_bounds_18316);
                    
                    if (thread_active_18321) {
                        // read operands
                        {
                            eta_p_18313 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18308)[sext_i32_i64(local_tid_18159) - sext_i32_i64(skip_threads_18320)]);
                        }
                    }
                    // perform operation
                    {
                        bool inactive_18322 = slt64(srem64(sext_i32_i64(local_tid_18159 * 32 + 32 - 1), (int64_t) 32), sext_i32_i64(local_tid_18159 * 32 + 32 - 1) - sext_i32_i64((local_tid_18159 - skip_threads_18320) * 32 + 32 - 1));
                        
                        if (thread_active_18321 && inactive_18322) {
                            eta_p_18313 = eta_p_18314;
                        }
                        if (thread_active_18321) {
                            if (!inactive_18322) {
                                f16 defunc_0_op_res_18315 = eta_p_18313 + eta_p_18314;
                                
                                eta_p_18313 = defunc_0_op_res_18315;
                            }
                        }
                    }
                    if (sle32(wave_sizze_18161, skip_threads_18320)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    if (thread_active_18321) {
                        // write result
                        {
                            ((volatile __local uint16_t *) red_arr_mem_18308)[sext_i32_i64(local_tid_18159)] = futrts_to_bits16(eta_p_18313);
                            eta_p_18314 = eta_p_18313;
                        }
                    }
                    if (sle32(wave_sizze_18161, skip_threads_18320)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    skip_threads_18320 *= 2;
                }
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        no_carry_in_18323 = squot32(local_tid_18159, 32) == 0 || !ltid_in_bounds_18316;
        // carry-in for every block except the first
        {
            // read operands
            {
                if (!no_carry_in_18323) {
                    eta_p_12327 = eta_p_12326;
                    eta_p_12326 = futrts_from_bits16(((__local uint16_t *) red_arr_mem_18308)[sext_i32_i64(squot32(local_tid_18159, 32)) - (int64_t) 1]);
                }
            }
            // perform operation
            {
                bool inactive_18324 = slt64(srem64(sext_i32_i64(local_tid_18159), (int64_t) 32), sext_i32_i64(local_tid_18159) - sext_i32_i64(squot32(local_tid_18159, 32) * 32 - 1));
                
                if (!no_carry_in_18323) {
                    if (inactive_18324) {
                        eta_p_12326 = eta_p_12327;
                    }
                }
                if (!no_carry_in_18323) {
                    if (!inactive_18324) {
                        f16 defunc_0_op_res_12328 = eta_p_12326 + eta_p_12327;
                        
                        eta_p_12326 = defunc_0_op_res_12328;
                    }
                }
            }
            // write final result
            {
                if (!no_carry_in_18323) {
                    ((__local uint16_t *) red_arr_mem_18308)[sext_i32_i64(local_tid_18159)] = futrts_to_bits16(eta_p_12326);
                }
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // restore correct values for first block
        {
            if (squot32(local_tid_18159, 32) == 0 && ltid_in_bounds_18316) {
                ((__local uint16_t *) red_arr_mem_18308)[sext_i32_i64(local_tid_18159)] = futrts_to_bits16(eta_p_12327);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_LOCAL_MEM_FENCE);
        // Save result of reduction.
        {
            int32_t num_chunks_18325 = sdiv_up32(sext_i64_i32(d_10182), sext_i64_i32(computed_tblock_sizze_11724));
            
            for (int32_t chunk_i_18326 = 0; chunk_i_18326 < num_chunks_18325; chunk_i_18326++) {
                int32_t i_18327 = chunk_i_18326 * sext_i64_i32(computed_tblock_sizze_11724) + local_tid_18159;
                
                if (slt32(i_18327, sext_i64_i32(d_10182))) {
                    ((__local uint16_t *) color_18079)[sext_i32_i64(i_18327)] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) red_arr_mem_18308)[(int64_t) 31 + sext_i32_i64(i_18327) * (int64_t) 32]));
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        phys_tid_12344 = sext_i32_i64(local_tid_18159);
        gtid_12343 = sext_i32_i64(sext_i64_i32(ltid_pre_18172));
        if (slt64(gtid_12343, d_10182)) {
            f16 mi_old_12345;
            f16 li_old_12346;
            f16 defunc_0_reduce_comm_res_12347;
            f16 defunc_0_reduce_comm_res_12348;
            f16 max_res_12349;
            f16 real_exp_arg0_12350;
            f16 exp_res_12351;
            f16 exp_arg0_12352;
            f16 exp_res_12353;
            f16 eli_12354;
            f16 zp_rhs_12355;
            f16 li_new_12356;
            
            mi_old_12345 = futrts_from_bits16(((__local uint16_t *) mem_param_17702)[gtid_12343]);
            li_old_12346 = futrts_from_bits16(((__local uint16_t *) mem_param_17705)[gtid_12343]);
            defunc_0_reduce_comm_res_12347 = futrts_from_bits16(((__local uint16_t *) color_18081)[gtid_12343]);
            defunc_0_reduce_comm_res_12348 = futrts_from_bits16(((__local uint16_t *) color_18079)[gtid_12343]);
            max_res_12349 = fmax16(mi_old_12345, defunc_0_reduce_comm_res_12347);
            real_exp_arg0_12350 = defunc_0_reduce_comm_res_12347 - max_res_12349;
            exp_res_12351 = futrts_exp16(real_exp_arg0_12350);
            exp_arg0_12352 = mi_old_12345 - max_res_12349;
            exp_res_12353 = futrts_exp16(exp_arg0_12352);
            eli_12354 = li_old_12346 * exp_res_12353;
            zp_rhs_12355 = defunc_0_reduce_comm_res_12348 * exp_res_12351;
            li_new_12356 = eli_12354 + zp_rhs_12355;
            ((__local uint16_t *) mem_param_out_17999)[gtid_12343] = futrts_to_bits16(max_res_12349);
            ((__local uint16_t *) mem_param_out_18008)[gtid_12343] = futrts_to_bits16(li_new_12356);
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        mem_param_tmp_18276 = mem_param_out_17999;
        mem_param_out_tmp_18277 = mem_param_17702;
        mem_param_tmp_18278 = mem_param_out_18008;
        mem_param_out_tmp_18279 = mem_param_17705;
        mem_param_17702 = mem_param_tmp_18276;
        mem_param_out_17999 = mem_param_out_tmp_18277;
        mem_param_17705 = mem_param_tmp_18278;
        mem_param_out_18008 = mem_param_out_tmp_18279;
    }
    ext_mem_17729 = mem_param_17702;
    ext_mem_unused_17998 = mem_param_out_17999;
    ext_mem_17728 = mem_param_17705;
    ext_mem_unused_18007 = mem_param_out_18008;
    phys_tid_12362 = sext_i32_i64(local_tid_18159);
    gtid_12360 = sext_i32_i64(sext_i64_i32(ltid_pre_18193));
    gtid_12361 = sext_i32_i64(sext_i64_i32(ltid_pre_18194));
    if (slt64(gtid_12360, d_10182) && slt64(gtid_12361, dzlz7bUZLztZRz20Umz20Udz7dUzg_10184)) {
        f16 eta_p_12363;
        f16 eta_p_12364;
        f16 eta_p_12365;
        f16 real_exp_arg0_12366;
        f16 exp_res_12367;
        f16 lifted_lambda_res_12368;
        
        eta_p_12363 = futrts_from_bits16(((__local uint16_t *) ext_mem_17729)[gtid_12360]);
        eta_p_12364 = futrts_from_bits16(((__local uint16_t *) ext_mem_17728)[gtid_12360]);
        eta_p_12365 = futrts_from_bits16(((__local uint16_t *) color_18084)[gtid_12360 * dzlz7bUZLztZRz20Umz20Udz7dUzg_11229 + gtid_12361]);
        real_exp_arg0_12366 = eta_p_12365 - eta_p_12363;
        exp_res_12367 = futrts_exp16(real_exp_arg0_12366);
        lifted_lambda_res_12368 = exp_res_12367 / eta_p_12364;
        ((__local uint16_t *) color_18079)[gtid_12360 * conc_tmp_11312 + gtid_12361] = futrts_to_bits16(lifted_lambda_res_12368);
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    tmp_offs_18328 = (int64_t) 0;
    if (!(tmp_offs_18328 == (int64_t) 0)) {
        int32_t num_chunks_18329 = sdiv_up32(sext_i64_i32(d_10182) * sext_i64_i32(dzlz7bUZLztZRz20Umz20Udz7dUzg_10184), sext_i64_i32(computed_tblock_sizze_11724));
        
        for (int32_t chunk_i_18330 = 0; chunk_i_18330 < num_chunks_18329; chunk_i_18330++) {
            int32_t i_18331 = chunk_i_18330 * sext_i64_i32(computed_tblock_sizze_11724) + local_tid_18159;
            
            if (slt32(i_18331, sext_i64_i32(d_10182) * sext_i64_i32(dzlz7bUZLztZRz20Umz20Udz7dUzg_10184))) {
                ((__local uint16_t *) color_18079)[tmp_offs_18328 + sext_i32_i64(squot32(i_18331, sext_i64_i32(dzlz7bUZLztZRz20Umz20Udz7dUzg_10184))) * conc_tmp_11312 + sext_i32_i64(i_18331 - squot32(i_18331, sext_i64_i32(dzlz7bUZLztZRz20Umz20Udz7dUzg_10184)) * sext_i64_i32(dzlz7bUZLztZRz20Umz20Udz7dUzg_10184))] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) color_18079)[sext_i32_i64(squot32(i_18331, sext_i64_i32(dzlz7bUZLztZRz20Umz20Udz7dUzg_10184))) * conc_tmp_11312 + sext_i32_i64(i_18331 - squot32(i_18331, sext_i64_i32(dzlz7bUZLztZRz20Umz20Udz7dUzg_10184)) * sext_i64_i32(dzlz7bUZLztZRz20Umz20Udz7dUzg_10184))]));
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
    }
    tmp_offs_18328 += dzlz7bUZLztZRz20Umz20Udz7dUzg_10184;
    num_chunks_18332 = sdiv_up32(sext_i64_i32(d_10182) * sext_i64_i32(pad_arg0_11215), sext_i64_i32(computed_tblock_sizze_11724));
    for (int32_t chunk_i_18333 = 0; chunk_i_18333 < num_chunks_18332; chunk_i_18333++) {
        int32_t i_18334 = chunk_i_18333 * sext_i64_i32(computed_tblock_sizze_11724) + local_tid_18159;
        
        if (slt32(i_18334, sext_i64_i32(d_10182) * sext_i64_i32(pad_arg0_11215))) {
            ((__local uint16_t *) color_18079)[tmp_offs_18328 + sext_i32_i64(squot32(i_18334, sext_i64_i32(pad_arg0_11215))) * conc_tmp_11312 + sext_i32_i64(i_18334 - squot32(i_18334, sext_i64_i32(pad_arg0_11215)) * sext_i64_i32(pad_arg0_11215))] = futrts_to_bits16(futrts_from_bits16(((__global uint16_t *) mem_17673)[sext_i32_i64(squot32(i_18334, sext_i64_i32(pad_arg0_11215))) * pad_arg0_11215 + sext_i32_i64(i_18334 - squot32(i_18334, sext_i64_i32(pad_arg0_11215)) * sext_i64_i32(pad_arg0_11215))]));
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    tmp_offs_18328 += pad_arg0_11215;
    tmp_offs_18335 = (int64_t) 0;
    if (!(conc_tmp_11312 * tmp_offs_18335 == (int64_t) 0)) {
        int32_t num_chunks_18336 = sdiv_up32(sext_i64_i32(d_10182) * sext_i64_i32(conc_tmp_11312), sext_i64_i32(computed_tblock_sizze_11724));
        
        for (int32_t chunk_i_18337 = 0; chunk_i_18337 < num_chunks_18336; chunk_i_18337++) {
            int32_t i_18338 = chunk_i_18337 * sext_i64_i32(computed_tblock_sizze_11724) + local_tid_18159;
            
            if (slt32(i_18338, sext_i64_i32(d_10182) * sext_i64_i32(conc_tmp_11312))) {
                ((__local uint16_t *) color_18079)[conc_tmp_11312 * tmp_offs_18335 + sext_i32_i64(squot32(i_18338, sext_i64_i32(conc_tmp_11312))) * conc_tmp_11312 + sext_i32_i64(i_18338 - squot32(i_18338, sext_i64_i32(conc_tmp_11312)) * sext_i64_i32(conc_tmp_11312))] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) color_18079)[sext_i32_i64(squot32(i_18338, sext_i64_i32(conc_tmp_11312))) * conc_tmp_11312 + sext_i32_i64(i_18338 - squot32(i_18338, sext_i64_i32(conc_tmp_11312)) * sext_i64_i32(conc_tmp_11312))]));
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
    }
    tmp_offs_18335 += d_10182;
    num_chunks_18339 = sdiv_up32(sext_i64_i32(n_11213) * sext_i64_i32(conc_tmp_11312), sext_i64_i32(computed_tblock_sizze_11724));
    for (int32_t chunk_i_18340 = 0; chunk_i_18340 < num_chunks_18339; chunk_i_18340++) {
        int32_t i_18341 = chunk_i_18340 * sext_i64_i32(computed_tblock_sizze_11724) + local_tid_18159;
        
        if (slt32(i_18341, sext_i64_i32(n_11213) * sext_i64_i32(conc_tmp_11312))) {
            ((__local uint16_t *) color_18079)[conc_tmp_11312 * tmp_offs_18335 + sext_i32_i64(squot32(i_18341, sext_i64_i32(conc_tmp_11312))) * conc_tmp_11312 + sext_i32_i64(i_18341 - squot32(i_18341, sext_i64_i32(conc_tmp_11312)) * sext_i64_i32(conc_tmp_11312))] = futrts_to_bits16(futrts_from_bits16(((__global uint16_t *) mem_17613)[sext_i32_i64(squot32(i_18341, sext_i64_i32(conc_tmp_11312))) * conc_tmp_11312 + sext_i32_i64(i_18341 - squot32(i_18341, sext_i64_i32(conc_tmp_11312)) * sext_i64_i32(conc_tmp_11312))]));
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    tmp_offs_18335 += n_11213;
    phys_tid_12377 = sext_i32_i64(local_tid_18159);
    red_arr_mem_18342 = (__local unsigned char *) red_arr_mem_18342_backing_12;
    gtid_12374 = sext_i32_i64(sext_i64_i32(ltid_pre_18163));
    gtid_12375 = sext_i32_i64(sext_i64_i32(ltid_pre_18164));
    gtid_12376 = sext_i32_i64(sext_i64_i32(ltid_pre_18165));
    if ((slt64(gtid_12374, (int64_t) 64) && slt64(gtid_12375, (int64_t) 64)) && slt64(gtid_12376, conc_tmp_11312)) {
        f16 eta_p_12383;
        bool index_concat_cmp_17229;
        f16 index_concat_branch_17233;
        f16 defunc_0_f_res_12385;
        
        eta_p_12383 = futrts_from_bits16(((__local uint16_t *) color_18079)[gtid_12374 * conc_tmp_11312 + gtid_12376]);
        index_concat_cmp_17229 = sle64(dzlz7bUZLztZRz20Umz20Udz7dUzg_10184, gtid_12376);
        if (index_concat_cmp_17229) {
            index_concat_branch_17233 = (f16) 0.0F;
        } else {
            f16 index_concat_17232 = futrts_from_bits16(((__global uint16_t *) mem_17608)[gtid_12376 * (int64_t) 64 + gtid_12375]);
            
            index_concat_branch_17233 = index_concat_17232;
        }
        defunc_0_f_res_12385 = eta_p_12383 * index_concat_branch_17233;
        ((__local uint16_t *) red_arr_mem_18342)[gtid_12374 * (conc_tmp_11312 * (int64_t) 64) + gtid_12375 * conc_tmp_11312 + gtid_12376] = futrts_to_bits16(defunc_0_f_res_12385);
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    dims_flat_18344 = (int64_t) 4096 * conc_tmp_11312;
    ltid_in_bounds_18349 = slt64(sext_i32_i64(local_tid_18159), (int64_t) 4096 * conc_tmp_11312);
    // read input for in-block scan
    {
        if (ltid_in_bounds_18349) {
            eta_p_12379 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18342)[sext_i32_i64(local_tid_18159)]);
            if ((local_tid_18159 - squot32(local_tid_18159, 32) * 32) == 0) {
                eta_p_12378 = eta_p_12379;
            }
        }
    }
    // in-block scan (hopefully no barriers needed)
    {
        skip_threads_18350 = 1;
        while (slt32(skip_threads_18350, 32)) {
            bool thread_active_18351 = sle32(skip_threads_18350, local_tid_18159 - squot32(local_tid_18159, 32) * 32) && ltid_in_bounds_18349;
            
            if (thread_active_18351) {
                // read operands
                {
                    eta_p_12378 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18342)[sext_i32_i64(local_tid_18159) - sext_i32_i64(skip_threads_18350)]);
                }
            }
            // perform operation
            {
                bool inactive_18352 = slt64(srem64(sext_i32_i64(local_tid_18159), conc_tmp_11312), sext_i32_i64(local_tid_18159) - sext_i32_i64(local_tid_18159 - skip_threads_18350));
                
                if (thread_active_18351 && inactive_18352) {
                    eta_p_12378 = eta_p_12379;
                }
                if (thread_active_18351) {
                    if (!inactive_18352) {
                        f16 defunc_0_op_res_12380 = eta_p_12378 + eta_p_12379;
                        
                        eta_p_12378 = defunc_0_op_res_12380;
                    }
                }
            }
            if (sle32(wave_sizze_18161, skip_threads_18350)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            if (thread_active_18351) {
                // write result
                {
                    ((volatile __local uint16_t *) red_arr_mem_18342)[sext_i32_i64(local_tid_18159)] = futrts_to_bits16(eta_p_12378);
                    eta_p_12379 = eta_p_12378;
                }
            }
            if (sle32(wave_sizze_18161, skip_threads_18350)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            skip_threads_18350 *= 2;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // last thread of block 'i' writes its result to offset 'i'
    {
        if ((local_tid_18159 - squot32(local_tid_18159, 32) * 32) == 31 && ltid_in_bounds_18349) {
            ((volatile __local uint16_t *) red_arr_mem_18342)[sext_i32_i64(squot32(local_tid_18159, 32))] = futrts_to_bits16(eta_p_12378);
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
    {
        int32_t skip_threads_18353;
        
        // read input for in-block scan
        {
            if (squot32(local_tid_18159, 32) == 0 && ltid_in_bounds_18349) {
                eta_p_18347 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18342)[sext_i32_i64(local_tid_18159)]);
                if ((local_tid_18159 - squot32(local_tid_18159, 32) * 32) == 0) {
                    eta_p_18346 = eta_p_18347;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_18353 = 1;
            while (slt32(skip_threads_18353, 32)) {
                bool thread_active_18354 = sle32(skip_threads_18353, local_tid_18159 - squot32(local_tid_18159, 32) * 32) && (squot32(local_tid_18159, 32) == 0 && ltid_in_bounds_18349);
                
                if (thread_active_18354) {
                    // read operands
                    {
                        eta_p_18346 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18342)[sext_i32_i64(local_tid_18159) - sext_i32_i64(skip_threads_18353)]);
                    }
                }
                // perform operation
                {
                    bool inactive_18355 = slt64(srem64(sext_i32_i64(local_tid_18159 * 32 + 32 - 1), conc_tmp_11312), sext_i32_i64(local_tid_18159 * 32 + 32 - 1) - sext_i32_i64((local_tid_18159 - skip_threads_18353) * 32 + 32 - 1));
                    
                    if (thread_active_18354 && inactive_18355) {
                        eta_p_18346 = eta_p_18347;
                    }
                    if (thread_active_18354) {
                        if (!inactive_18355) {
                            f16 defunc_0_op_res_18348 = eta_p_18346 + eta_p_18347;
                            
                            eta_p_18346 = defunc_0_op_res_18348;
                        }
                    }
                }
                if (sle32(wave_sizze_18161, skip_threads_18353)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (thread_active_18354) {
                    // write result
                    {
                        ((volatile __local uint16_t *) red_arr_mem_18342)[sext_i32_i64(local_tid_18159)] = futrts_to_bits16(eta_p_18346);
                        eta_p_18347 = eta_p_18346;
                    }
                }
                if (sle32(wave_sizze_18161, skip_threads_18353)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_18353 *= 2;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    no_carry_in_18356 = squot32(local_tid_18159, 32) == 0 || !ltid_in_bounds_18349;
    // carry-in for every block except the first
    {
        // read operands
        {
            if (!no_carry_in_18356) {
                eta_p_12379 = eta_p_12378;
                eta_p_12378 = futrts_from_bits16(((__local uint16_t *) red_arr_mem_18342)[sext_i32_i64(squot32(local_tid_18159, 32)) - (int64_t) 1]);
            }
        }
        // perform operation
        {
            bool inactive_18357 = slt64(srem64(sext_i32_i64(local_tid_18159), conc_tmp_11312), sext_i32_i64(local_tid_18159) - sext_i32_i64(squot32(local_tid_18159, 32) * 32 - 1));
            
            if (!no_carry_in_18356) {
                if (inactive_18357) {
                    eta_p_12378 = eta_p_12379;
                }
            }
            if (!no_carry_in_18356) {
                if (!inactive_18357) {
                    f16 defunc_0_op_res_12380 = eta_p_12378 + eta_p_12379;
                    
                    eta_p_12378 = defunc_0_op_res_12380;
                }
            }
        }
        // write final result
        {
            if (!no_carry_in_18356) {
                ((__local uint16_t *) red_arr_mem_18342)[sext_i32_i64(local_tid_18159)] = futrts_to_bits16(eta_p_12378);
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // restore correct values for first block
    {
        if (squot32(local_tid_18159, 32) == 0 && ltid_in_bounds_18349) {
            ((__local uint16_t *) red_arr_mem_18342)[sext_i32_i64(local_tid_18159)] = futrts_to_bits16(eta_p_12379);
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    barrier(CLK_LOCAL_MEM_FENCE);
    // Save result of reduction.
    {
        int32_t num_chunks_18358 = sdiv_up32(4096, sext_i64_i32(computed_tblock_sizze_11724));
        
        for (int32_t chunk_i_18359 = 0; chunk_i_18359 < num_chunks_18358; chunk_i_18359++) {
            int32_t i_18360 = chunk_i_18359 * sext_i64_i32(computed_tblock_sizze_11724) + local_tid_18159;
            
            if (slt32(i_18360, 4096)) {
                ((__local uint16_t *) color_18078)[sext_i32_i64(squot32(i_18360, 64)) * (int64_t) 64 + sext_i32_i64(i_18360 - squot32(i_18360, 64) * 64)] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) red_arr_mem_18342)[conc_tmp_11312 - (int64_t) 1 + sext_i32_i64(squot32(i_18360, 64)) * (conc_tmp_11312 * (int64_t) 64) + sext_i32_i64(i_18360 - squot32(i_18360, 64) * 64) * conc_tmp_11312]));
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    phys_tid_12388 = sext_i32_i64(local_tid_18159);
    gtid_12387 = sext_i32_i64(sext_i64_i32(ltid_pre_18172));
    if (slt64(gtid_12387, d_10182)) {
        bool y_12391;
        bool index_certs_12393;
        
        y_12391 = slt64(gtid_12387, (int64_t) 64);
        if (!y_12391) {
            {
                if (atomic_cmpxchg_i32_global(global_failure, -1, 2) == -1) {
                    global_failure_args[0] = (int64_t) gtid_12387;
                    global_failure_args[1] = (int64_t) (int64_t) 64;
                    ;
                }
                local_failure = 1;
                goto error_20;
            }
        }
    }
    
  error_20:
    barrier(CLK_LOCAL_MEM_FENCE);
    if (local_failure)
        return;
    barrier(CLK_LOCAL_MEM_FENCE);
    phys_tid_12397 = sext_i32_i64(local_tid_18159);
    gtid_12395 = sext_i32_i64(sext_i64_i32(ltid_pre_18187));
    gtid_12396 = sext_i32_i64(sext_i64_i32(ltid_pre_18188));
    if (slt64(gtid_12395, d_10182) && slt64(gtid_12396, d_10182)) {
        bool y_12402;
        bool index_certs_12404;
        bool index_certs_12399;
        f16 lifted_lambda_res_12405;
        
        y_12402 = slt64(gtid_12396, (int64_t) 64);
        if (!y_12402) {
            {
                if (atomic_cmpxchg_i32_global(global_failure, -1, 3) == -1) {
                    global_failure_args[0] = (int64_t) gtid_12396;
                    global_failure_args[1] = (int64_t) (int64_t) 64;
                    ;
                }
                local_failure = 1;
                goto error_21;
            }
        }
        index_certs_12399 = 0;
        lifted_lambda_res_12405 = futrts_from_bits16(((__local uint16_t *) color_18078)[gtid_12395 * (int64_t) 64 + gtid_12396]);
        ((__local uint16_t *) color_18076)[gtid_12395 * d_10182 + gtid_12396] = futrts_to_bits16(lifted_lambda_res_12405);
    }
    
  error_21:
    barrier(CLK_LOCAL_MEM_FENCE);
    if (local_failure)
        return;
    barrier(CLK_LOCAL_MEM_FENCE);
    num_chunks_18361 = sdiv_up32(sext_i64_i32(d_10182) * sext_i64_i32(d_10182), sext_i64_i32(computed_tblock_sizze_11724));
    for (int32_t chunk_i_18362 = 0; chunk_i_18362 < num_chunks_18361; chunk_i_18362++) {
        int32_t i_18363 = chunk_i_18362 * sext_i64_i32(computed_tblock_sizze_11724) + local_tid_18159;
        
        if (slt32(i_18363, sext_i64_i32(d_10182) * sext_i64_i32(d_10182))) {
            ((__global uint16_t *) mem_17746)[gtid_12232 * (d_10182 * d_10182) + sext_i32_i64(squot32(i_18363, sext_i64_i32(d_10182))) * d_10182 + sext_i32_i64(i_18363 - squot32(i_18363, sext_i64_i32(d_10182)) * sext_i64_i32(d_10182))] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) color_18076)[sext_i32_i64(squot32(i_18363, sext_i64_i32(d_10182))) * d_10182 + sext_i32_i64(i_18363 - squot32(i_18363, sext_i64_i32(d_10182)) * sext_i64_i32(d_10182))]));
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
  error_22:
    return;
}
FUTHARK_KERNEL_SIZED(FlashAttentionSmall_5957zisegmap_intrablock_13011_dim1, 1, 1)
void FlashAttentionSmall_5957zisegmap_intrablock_13011(__global int *global_failure, int64_t d_10182, int64_t m_10183, int64_t n_11213, __global unsigned char *Q_mem_17591, __global unsigned char *mem_17595, __global unsigned char *mem_17619)
{
    volatile __local unsigned char *color_18085_backing_0 = &shared_mem[0];
    const int64_t color_18085_backing_0_offset = 0 + (int64_t) 128;
    
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_18366;
    int32_t tblock_sizze_18369;
    int32_t wave_sizze_18368;
    int32_t block_id_18367;
    int32_t global_tid_18365;
    int64_t phys_tblock_id_13011;
    int64_t slice_18370;
    int64_t slice_18371;
    int64_t gtid_13009;
    int64_t remnant_18372;
    int64_t gtid_13010;
    int64_t remnant_18373;
    __local unsigned char *color_18085;
    int64_t tmp_offs_18374;
    int32_t num_chunks_18375;
    int32_t num_chunks_18378;
    int32_t num_chunks_18381;
    
    local_tid_18366 = get_local_id(0);
    tblock_sizze_18369 = get_local_size(0);
    wave_sizze_18368 = LOCKSTEP_WIDTH;
    block_id_18367 = get_tblock_id(0);
    global_tid_18365 = block_id_18367 * tblock_sizze_18369 + local_tid_18366;
    phys_tblock_id_13011 = sext_i32_i64(block_id_18367);
    slice_18370 = d_10182;
    slice_18371 = m_10183 * slice_18370;
    gtid_13009 = squot64(sext_i32_i64(block_id_18367), slice_18370);
    remnant_18372 = sext_i32_i64(block_id_18367) - gtid_13009 * slice_18370;
    gtid_13010 = remnant_18372;
    remnant_18373 = remnant_18372 - gtid_13010;
    color_18085 = (__local unsigned char *) color_18085_backing_0;
    tmp_offs_18374 = (int64_t) 0;
    num_chunks_18375 = sdiv_up32(sext_i64_i32(d_10182), 0);
    for (int32_t chunk_i_18376 = 0; chunk_i_18376 < num_chunks_18375; chunk_i_18376++) {
        int32_t i_18377 = local_tid_18366;
        
        if (slt32(i_18377, sext_i64_i32(d_10182))) {
            ((__local uint16_t *) color_18085)[tmp_offs_18374 + sext_i32_i64(i_18377)] = futrts_to_bits16(futrts_from_bits16(((__global uint16_t *) Q_mem_17591)[gtid_13009 * (d_10182 * d_10182) + gtid_13010 * d_10182 + sext_i32_i64(i_18377)]));
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    tmp_offs_18374 += d_10182;
    num_chunks_18378 = sdiv_up32(sext_i64_i32(n_11213), 0);
    for (int32_t chunk_i_18379 = 0; chunk_i_18379 < num_chunks_18378; chunk_i_18379++) {
        int32_t i_18380 = local_tid_18366;
        
        if (slt32(i_18380, sext_i64_i32(n_11213))) {
            ((__local uint16_t *) color_18085)[tmp_offs_18374 + sext_i32_i64(i_18380)] = futrts_to_bits16(futrts_from_bits16(((__global uint16_t *) mem_17595)[sext_i32_i64(i_18380)]));
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    tmp_offs_18374 += n_11213;
    num_chunks_18381 = sdiv_up32(64, 0);
    for (int32_t chunk_i_18382 = 0; chunk_i_18382 < num_chunks_18381; chunk_i_18382++) {
        int32_t i_18383 = local_tid_18366;
        
        if (slt32(i_18383, 64)) {
            ((__global uint16_t *) mem_17619)[gtid_13009 * ((int64_t) 64 * d_10182) + gtid_13010 * (int64_t) 64 + sext_i32_i64(i_18383)] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) color_18085)[sext_i32_i64(i_18383)]));
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
  error_0:
    return;
}
FUTHARK_KERNEL_SIZED(FlashAttentionSmall_5957zisegmap_intrablock_13036_dim1, 1, 1)
void FlashAttentionSmall_5957zisegmap_intrablock_13036(__global int *global_failure, int64_t d_10182, int64_t m_10183, int64_t dzlz7bUZLztZRz20Umz20Udz7dUzg_10184, __global unsigned char *mem_17600, __global unsigned char *mem_17619, __global unsigned char *mem_17627)
{
    volatile __local unsigned char *red_arr_mem_18411_backing_2 = &shared_mem[0];
    const int64_t red_arr_mem_18411_backing_2_offset = 0 + (int64_t) 1048576;
    volatile __local unsigned char *color_18087_backing_1 = &shared_mem[red_arr_mem_18411_backing_2_offset];
    const int64_t color_18087_backing_1_offset = red_arr_mem_18411_backing_2_offset + (int64_t) 16384;
    volatile __local unsigned char *color_18086_backing_0 = &shared_mem[color_18087_backing_1_offset];
    const int64_t color_18086_backing_0_offset = color_18087_backing_1_offset + (int64_t) 8192;
    
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_18388;
    int32_t tblock_sizze_18391;
    int32_t wave_sizze_18390;
    int32_t block_id_18389;
    int32_t global_tid_18387;
    int64_t phys_tblock_id_13036;
    int64_t slice_18394;
    int64_t slice_18395;
    int64_t ltid_pre_18392;
    int64_t remnant_18396;
    int64_t ltid_pre_18393;
    int64_t remnant_18397;
    int64_t slice_18401;
    int64_t slice_18402;
    int64_t slice_18403;
    int64_t ltid_pre_18398;
    int64_t remnant_18404;
    int64_t ltid_pre_18399;
    int64_t remnant_18405;
    int64_t ltid_pre_18400;
    int64_t remnant_18406;
    int64_t slice_18407;
    int64_t slice_18408;
    int64_t gtid_13034;
    int64_t remnant_18409;
    int64_t gtid_13035;
    int64_t remnant_18410;
    __local unsigned char *color_18086;
    __local unsigned char *color_18087;
    int64_t binop_x_17446;
    int64_t phys_tid_13045;
    __local unsigned char *red_arr_mem_18411;
    int64_t gtid_13042;
    int64_t gtid_13043;
    int64_t gtid_13044;
    int64_t dims_flat_18413;
    float eta_p_13046;
    float eta_p_13047;
    float eta_p_18415;
    float eta_p_18416;
    bool ltid_in_bounds_18418;
    int32_t skip_threads_18419;
    bool no_carry_in_18425;
    int64_t phys_tid_13058;
    int64_t gtid_13056;
    int64_t gtid_13057;
    int32_t num_chunks_18430;
    
    local_tid_18388 = get_local_id(0);
    tblock_sizze_18391 = get_local_size(0);
    wave_sizze_18390 = LOCKSTEP_WIDTH;
    block_id_18389 = get_tblock_id(0);
    global_tid_18387 = block_id_18389 * tblock_sizze_18391 + local_tid_18388;
    phys_tblock_id_13036 = sext_i32_i64(block_id_18389);
    slice_18394 = (int64_t) 64;
    slice_18395 = (int64_t) 64 * slice_18394;
    ltid_pre_18392 = squot64(sext_i32_i64(local_tid_18388), slice_18394);
    remnant_18396 = sext_i32_i64(local_tid_18388) - ltid_pre_18392 * slice_18394;
    ltid_pre_18393 = remnant_18396;
    remnant_18397 = remnant_18396 - ltid_pre_18393;
    slice_18401 = (int64_t) 64;
    slice_18402 = (int64_t) 64 * slice_18401;
    slice_18403 = (int64_t) 64 * slice_18402;
    ltid_pre_18398 = squot64(sext_i32_i64(local_tid_18388), slice_18402);
    remnant_18404 = sext_i32_i64(local_tid_18388) - ltid_pre_18398 * slice_18402;
    ltid_pre_18399 = squot64(remnant_18404, slice_18401);
    remnant_18405 = remnant_18404 - ltid_pre_18399 * slice_18401;
    ltid_pre_18400 = remnant_18405;
    remnant_18406 = remnant_18405 - ltid_pre_18400;
    slice_18407 = m_10183;
    slice_18408 = m_10183 * slice_18407;
    gtid_13034 = squot64(sext_i32_i64(block_id_18389), slice_18407);
    remnant_18409 = sext_i32_i64(block_id_18389) - gtid_13034 * slice_18407;
    gtid_13035 = remnant_18409;
    remnant_18410 = remnant_18409 - gtid_13035;
    color_18086 = (__local unsigned char *) color_18086_backing_0;
    color_18087 = (__local unsigned char *) color_18087_backing_1;
    binop_x_17446 = (int64_t) 4096 * gtid_13035;
    phys_tid_13045 = sext_i32_i64(local_tid_18388);
    red_arr_mem_18411 = (__local unsigned char *) red_arr_mem_18411_backing_2;
    gtid_13042 = sext_i32_i64(sext_i64_i32(ltid_pre_18398));
    gtid_13043 = sext_i32_i64(sext_i64_i32(ltid_pre_18399));
    gtid_13044 = sext_i32_i64(sext_i64_i32(ltid_pre_18400));
    if ((slt64(gtid_13042, (int64_t) 64) && slt64(gtid_13043, (int64_t) 64)) && slt64(gtid_13044, (int64_t) 64)) {
        bool index_concat_cmp_17274;
        f16 index_concat_branch_17278;
        int64_t binop_y_17447;
        int64_t binop_x_17448;
        int64_t binop_x_17449;
        int64_t new_index_17450;
        int64_t binop_y_17460;
        int64_t new_index_17461;
        bool index_concat_cmp_17463;
        f16 index_concat_branch_17467;
        f16 defunc_0_f_res_13053;
        float f16_res_13054;
        
        index_concat_cmp_17274 = sle64(d_10182, gtid_13042);
        if (index_concat_cmp_17274) {
            index_concat_branch_17278 = (f16) 0.0F;
        } else {
            f16 index_concat_17277 = futrts_from_bits16(((__global uint16_t *) mem_17619)[gtid_13034 * ((int64_t) 64 * d_10182) + gtid_13042 * (int64_t) 64 + gtid_13044]);
            
            index_concat_branch_17278 = index_concat_17277;
        }
        binop_y_17447 = (int64_t) 64 * gtid_13043;
        binop_x_17448 = binop_x_17446 + binop_y_17447;
        binop_x_17449 = gtid_13044 + binop_x_17448;
        new_index_17450 = squot64(binop_x_17449, (int64_t) 64);
        binop_y_17460 = (int64_t) 64 * new_index_17450;
        new_index_17461 = binop_x_17449 - binop_y_17460;
        index_concat_cmp_17463 = sle64(dzlz7bUZLztZRz20Umz20Udz7dUzg_10184, new_index_17450);
        if (index_concat_cmp_17463) {
            index_concat_branch_17467 = (f16) 0.0F;
        } else {
            f16 index_concat_17466 = futrts_from_bits16(((__global uint16_t *) mem_17600)[new_index_17450 * (int64_t) 64 + new_index_17461]);
            
            index_concat_branch_17467 = index_concat_17466;
        }
        defunc_0_f_res_13053 = index_concat_branch_17278 * index_concat_branch_17467;
        f16_res_13054 = fpconv_f16_f32(defunc_0_f_res_13053);
        ((__local float *) red_arr_mem_18411)[gtid_13042 * (int64_t) 4096 + gtid_13043 * (int64_t) 64 + gtid_13044] = f16_res_13054;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    dims_flat_18413 = (int64_t) 262144;
    ltid_in_bounds_18418 = slt64(sext_i32_i64(local_tid_18388), (int64_t) 262144);
    // read input for in-block scan
    {
        if (ltid_in_bounds_18418) {
            eta_p_13047 = ((volatile __local float *) red_arr_mem_18411)[sext_i32_i64(local_tid_18388)];
            if ((local_tid_18388 - squot32(local_tid_18388, 32) * 32) == 0) {
                eta_p_13046 = eta_p_13047;
            }
        }
    }
    // in-block scan (hopefully no barriers needed)
    {
        skip_threads_18419 = 1;
        while (slt32(skip_threads_18419, 32)) {
            bool thread_active_18420 = sle32(skip_threads_18419, local_tid_18388 - squot32(local_tid_18388, 32) * 32) && ltid_in_bounds_18418;
            
            if (thread_active_18420) {
                // read operands
                {
                    eta_p_13046 = ((volatile __local float *) red_arr_mem_18411)[sext_i32_i64(local_tid_18388) - sext_i32_i64(skip_threads_18419)];
                }
            }
            // perform operation
            {
                bool inactive_18421 = slt64(srem64(sext_i32_i64(local_tid_18388), (int64_t) 64), sext_i32_i64(local_tid_18388) - sext_i32_i64(local_tid_18388 - skip_threads_18419));
                
                if (thread_active_18420 && inactive_18421) {
                    eta_p_13046 = eta_p_13047;
                }
                if (thread_active_18420) {
                    if (!inactive_18421) {
                        float defunc_0_op_res_13048 = eta_p_13046 + eta_p_13047;
                        
                        eta_p_13046 = defunc_0_op_res_13048;
                    }
                }
            }
            if (sle32(wave_sizze_18390, skip_threads_18419)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            if (thread_active_18420) {
                // write result
                {
                    ((volatile __local float *) red_arr_mem_18411)[sext_i32_i64(local_tid_18388)] = eta_p_13046;
                    eta_p_13047 = eta_p_13046;
                }
            }
            if (sle32(wave_sizze_18390, skip_threads_18419)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            skip_threads_18419 *= 2;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // last thread of block 'i' writes its result to offset 'i'
    {
        if ((local_tid_18388 - squot32(local_tid_18388, 32) * 32) == 31 && ltid_in_bounds_18418) {
            ((volatile __local float *) red_arr_mem_18411)[sext_i32_i64(squot32(local_tid_18388, 32))] = eta_p_13046;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
    {
        int32_t skip_threads_18422;
        
        // read input for in-block scan
        {
            if (squot32(local_tid_18388, 32) == 0 && ltid_in_bounds_18418) {
                eta_p_18416 = ((volatile __local float *) red_arr_mem_18411)[sext_i32_i64(local_tid_18388)];
                if ((local_tid_18388 - squot32(local_tid_18388, 32) * 32) == 0) {
                    eta_p_18415 = eta_p_18416;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_18422 = 1;
            while (slt32(skip_threads_18422, 32)) {
                bool thread_active_18423 = sle32(skip_threads_18422, local_tid_18388 - squot32(local_tid_18388, 32) * 32) && (squot32(local_tid_18388, 32) == 0 && ltid_in_bounds_18418);
                
                if (thread_active_18423) {
                    // read operands
                    {
                        eta_p_18415 = ((volatile __local float *) red_arr_mem_18411)[sext_i32_i64(local_tid_18388) - sext_i32_i64(skip_threads_18422)];
                    }
                }
                // perform operation
                {
                    bool inactive_18424 = slt64(srem64(sext_i32_i64(local_tid_18388 * 32 + 32 - 1), (int64_t) 64), sext_i32_i64(local_tid_18388 * 32 + 32 - 1) - sext_i32_i64((local_tid_18388 - skip_threads_18422) * 32 + 32 - 1));
                    
                    if (thread_active_18423 && inactive_18424) {
                        eta_p_18415 = eta_p_18416;
                    }
                    if (thread_active_18423) {
                        if (!inactive_18424) {
                            float defunc_0_op_res_18417 = eta_p_18415 + eta_p_18416;
                            
                            eta_p_18415 = defunc_0_op_res_18417;
                        }
                    }
                }
                if (sle32(wave_sizze_18390, skip_threads_18422)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (thread_active_18423) {
                    // write result
                    {
                        ((volatile __local float *) red_arr_mem_18411)[sext_i32_i64(local_tid_18388)] = eta_p_18415;
                        eta_p_18416 = eta_p_18415;
                    }
                }
                if (sle32(wave_sizze_18390, skip_threads_18422)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_18422 *= 2;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    no_carry_in_18425 = squot32(local_tid_18388, 32) == 0 || !ltid_in_bounds_18418;
    // carry-in for every block except the first
    {
        // read operands
        {
            if (!no_carry_in_18425) {
                eta_p_13047 = eta_p_13046;
                eta_p_13046 = ((__local float *) red_arr_mem_18411)[sext_i32_i64(squot32(local_tid_18388, 32)) - (int64_t) 1];
            }
        }
        // perform operation
        {
            bool inactive_18426 = slt64(srem64(sext_i32_i64(local_tid_18388), (int64_t) 64), sext_i32_i64(local_tid_18388) - sext_i32_i64(squot32(local_tid_18388, 32) * 32 - 1));
            
            if (!no_carry_in_18425) {
                if (inactive_18426) {
                    eta_p_13046 = eta_p_13047;
                }
            }
            if (!no_carry_in_18425) {
                if (!inactive_18426) {
                    float defunc_0_op_res_13048 = eta_p_13046 + eta_p_13047;
                    
                    eta_p_13046 = defunc_0_op_res_13048;
                }
            }
        }
        // write final result
        {
            if (!no_carry_in_18425) {
                ((__local float *) red_arr_mem_18411)[sext_i32_i64(local_tid_18388)] = eta_p_13046;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // restore correct values for first block
    {
        if (squot32(local_tid_18388, 32) == 0 && ltid_in_bounds_18418) {
            ((__local float *) red_arr_mem_18411)[sext_i32_i64(local_tid_18388)] = eta_p_13047;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    barrier(CLK_LOCAL_MEM_FENCE);
    // Save result of reduction.
    {
        int32_t num_chunks_18427 = 1;
        
        for (int32_t chunk_i_18428 = 0; chunk_i_18428 < num_chunks_18427; chunk_i_18428++) {
            int32_t i_18429 = chunk_i_18428 * 262144 + local_tid_18388;
            
            if (slt32(i_18429, 4096)) {
                ((__local float *) color_18087)[sext_i32_i64(squot32(i_18429, 64)) * (int64_t) 64 + sext_i32_i64(i_18429 - squot32(i_18429, 64) * 64)] = ((__local float *) red_arr_mem_18411)[(int64_t) 63 + sext_i32_i64(squot32(i_18429, 64)) * (int64_t) 4096 + sext_i32_i64(i_18429 - squot32(i_18429, 64) * 64) * (int64_t) 64];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    phys_tid_13058 = sext_i32_i64(local_tid_18388);
    gtid_13056 = sext_i32_i64(sext_i64_i32(ltid_pre_18392));
    gtid_13057 = sext_i32_i64(sext_i64_i32(ltid_pre_18393));
    if (slt64(gtid_13056, (int64_t) 64) && slt64(gtid_13057, (int64_t) 64)) {
        float defunc_0_f_res_13059;
        f16 f32_res_13060;
        
        defunc_0_f_res_13059 = ((__local float *) color_18087)[gtid_13056 * (int64_t) 64 + gtid_13057];
        f32_res_13060 = fpconv_f32_f16(defunc_0_f_res_13059);
        ((__local uint16_t *) color_18086)[gtid_13056 * (int64_t) 64 + gtid_13057] = futrts_to_bits16(f32_res_13060);
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    num_chunks_18430 = 1;
    for (int32_t chunk_i_18431 = 0; chunk_i_18431 < num_chunks_18430; chunk_i_18431++) {
        int32_t i_18432 = chunk_i_18431 * 262144 + local_tid_18388;
        
        if (slt32(i_18432, 4096)) {
            ((__global uint16_t *) mem_17627)[gtid_13034 * ((int64_t) 4096 * m_10183) + gtid_13035 * (int64_t) 4096 + sext_i32_i64(squot32(i_18432, 64)) * (int64_t) 64 + sext_i32_i64(i_18432 - squot32(i_18432, 64) * 64)] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) color_18086)[sext_i32_i64(squot32(i_18432, 64)) + sext_i32_i64(i_18432 - squot32(i_18432, 64) * 64) * (int64_t) 64]));
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
  error_4:
    return;
}
FUTHARK_KERNEL_SIZED(FlashAttentionSmall_5957zisegmap_intrablock_13124_dim1, 1, 1)
void FlashAttentionSmall_5957zisegmap_intrablock_13124(__global int *global_failure, int64_t d_10182, int64_t m_10183, int64_t dzlz7bUZLztZRz20Umz20Udz7dUzg_11229, int64_t q_11373, unsigned char opaque_res_11377_bits, __global unsigned char *mem_17634, __global unsigned char *mem_17639, __global unsigned char *mem_17642)
{
    bool opaque_res_11377 = opaque_res_11377_bits;
    volatile __local unsigned char *red_arr_mem_18485_backing_2 = &shared_mem[0];
    const int64_t red_arr_mem_18485_backing_2_offset = 0 + (int64_t) 64;
    volatile __local unsigned char *red_arr_mem_18480_backing_1 = &shared_mem[red_arr_mem_18485_backing_2_offset];
    const int64_t red_arr_mem_18480_backing_1_offset = red_arr_mem_18485_backing_2_offset + (int64_t) 64;
    volatile __local unsigned char *color_18088_backing_0 = &shared_mem[red_arr_mem_18480_backing_1_offset];
    const int64_t color_18088_backing_0_offset = red_arr_mem_18480_backing_1_offset + (int64_t) 2048;
    
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_18461;
    int32_t tblock_sizze_18464;
    int32_t wave_sizze_18463;
    int32_t block_id_18462;
    int32_t global_tid_18460;
    int64_t phys_tblock_id_13124;
    int64_t slice_18466;
    int64_t ltid_pre_18465;
    int64_t remnant_18467;
    int64_t slice_18469;
    int64_t ltid_pre_18468;
    int64_t remnant_18470;
    int64_t slice_18471;
    int64_t slice_18472;
    int64_t gtid_13122;
    int64_t remnant_18473;
    int64_t gtid_13123;
    int64_t remnant_18474;
    __local unsigned char *color_18088;
    f16 softmaxChunkML_res_13127;
    f16 softmaxChunkML_res_13128;
    f16 mi_old_13130;
    f16 li_old_13131;
    
    local_tid_18461 = get_local_id(0);
    tblock_sizze_18464 = get_local_size(0);
    wave_sizze_18463 = LOCKSTEP_WIDTH;
    block_id_18462 = get_tblock_id(0);
    global_tid_18460 = block_id_18462 * tblock_sizze_18464 + local_tid_18461;
    phys_tblock_id_13124 = sext_i32_i64(block_id_18462);
    slice_18466 = (int64_t) 32;
    ltid_pre_18465 = sext_i32_i64(local_tid_18461);
    remnant_18467 = sext_i32_i64(local_tid_18461) - ltid_pre_18465;
    slice_18469 = (int64_t) 1024;
    ltid_pre_18468 = sext_i32_i64(local_tid_18461);
    remnant_18470 = sext_i32_i64(local_tid_18461) - ltid_pre_18468;
    slice_18471 = d_10182;
    slice_18472 = m_10183 * slice_18471;
    gtid_13122 = squot64(sext_i32_i64(block_id_18462), slice_18471);
    remnant_18473 = sext_i32_i64(block_id_18462) - gtid_13122 * slice_18471;
    gtid_13123 = remnant_18473;
    remnant_18474 = remnant_18473 - gtid_13123;
    color_18088 = (__local unsigned char *) color_18088_backing_0;
    barrier(CLK_LOCAL_MEM_FENCE);
    mi_old_13130 = (f16) -INFINITY;
    li_old_13131 = (f16) 0.0F;
    for (int64_t i_13129 = 0; i_13129 < q_11373; i_13129++) {
        int64_t copy2shr_arg0_13132;
        int32_t num_chunks_18477;
        f16 defunc_0_reduce_comm_res_13137;
        int64_t phys_tid_13139;
        __local unsigned char *red_arr_mem_18480;
        int64_t gtid_13138;
        f16 defunc_0_f_res_13144;
        f16 r_13146;
        int32_t offset_18483;
        int32_t skip_waves_18484;
        f16 eta_p_13140;
        f16 eta_p_13141;
        f16 defunc_0_reduce_comm_res_13151;
        int64_t phys_tid_13153;
        __local unsigned char *red_arr_mem_18485;
        int64_t gtid_13152;
        f16 defunc_0_f_res_13158;
        f16 r_13160;
        int32_t offset_18488;
        int32_t skip_waves_18489;
        f16 eta_p_13154;
        f16 eta_p_13155;
        f16 max_res_13167;
        f16 real_exp_arg0_13168;
        f16 exp_res_13169;
        f16 exp_arg0_13170;
        f16 exp_res_13171;
        f16 eli_13172;
        f16 zp_rhs_13173;
        f16 li_new_13174;
        f16 mi_old_tmp_18475;
        f16 li_old_tmp_18476;
        
        copy2shr_arg0_13132 = mul64((int64_t) 1024, i_13129);
        num_chunks_18477 = 32;
        for (int32_t chunk_i_18478 = 0; chunk_i_18478 < num_chunks_18477; chunk_i_18478++) {
            int32_t i_18479 = chunk_i_18478 * 32 + local_tid_18461;
            
            if (slt32(i_18479, 1024)) {
                ((__local uint16_t *) color_18088)[sext_i32_i64(i_18479)] = futrts_to_bits16(futrts_from_bits16(((__global uint16_t *) mem_17634)[gtid_13122 * (dzlz7bUZLztZRz20Umz20Udz7dUzg_11229 * d_10182) + gtid_13123 * dzlz7bUZLztZRz20Umz20Udz7dUzg_11229 + copy2shr_arg0_13132 + sext_i32_i64(i_18479)]));
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_LOCAL_MEM_FENCE);
        if (!opaque_res_11377) {
            barrier(CLK_LOCAL_MEM_FENCE);
            if (local_tid_18461 == 0) {
                ((__local uint16_t *) color_18088)[(int64_t) 0] = futrts_to_bits16((f16) 0.0F);
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }
        phys_tid_13139 = sext_i32_i64(local_tid_18461);
        red_arr_mem_18480 = (__local unsigned char *) red_arr_mem_18480_backing_1;
        gtid_13138 = sext_i32_i64(sext_i64_i32(ltid_pre_18465));
        r_13146 = (f16) -INFINITY;
        for (int64_t i_13145 = 0; i_13145 < (int64_t) 32; i_13145++) {
            int64_t zp_lhs_13147;
            int64_t f_arg0_13148;
            f16 f_arg0_13149;
            f16 max_res_13150;
            f16 r_tmp_18482;
            
            zp_lhs_13147 = mul64((int64_t) 32, i_13145);
            f_arg0_13148 = add64(gtid_13138, zp_lhs_13147);
            f_arg0_13149 = futrts_from_bits16(((__local uint16_t *) color_18088)[f_arg0_13148]);
            max_res_13150 = fmax16(r_13146, f_arg0_13149);
            r_tmp_18482 = max_res_13150;
            r_13146 = r_tmp_18482;
        }
        defunc_0_f_res_13144 = r_13146;
        ((__local uint16_t *) red_arr_mem_18480)[gtid_13138] = futrts_to_bits16(defunc_0_f_res_13144);
        barrier(CLK_LOCAL_MEM_FENCE);
        skip_waves_18484 = 1;
        offset_18483 = 0;
        // participating threads read initial accumulator
        {
            if (slt32(local_tid_18461, 32)) {
                eta_p_13140 = futrts_from_bits16(((__local uint16_t *) red_arr_mem_18480)[sext_i32_i64(local_tid_18461 + offset_18483)]);
            }
        }
        offset_18483 = 1;
        while (slt32(offset_18483, wave_sizze_18463)) {
            if (slt32(local_tid_18461 + offset_18483, 32) && ((local_tid_18461 - squot32(local_tid_18461, wave_sizze_18463) * wave_sizze_18463) & (2 * offset_18483 - 1)) == 0) {
                // read array element
                {
                    eta_p_13141 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18480)[sext_i32_i64(local_tid_18461 + offset_18483)]);
                }
                // apply reduction operation
                {
                    f16 max_res_13142 = fmax16(eta_p_13140, eta_p_13141);
                    
                    eta_p_13140 = max_res_13142;
                }
                // write result of operation
                {
                    ((volatile __local uint16_t *) red_arr_mem_18480)[sext_i32_i64(local_tid_18461)] = futrts_to_bits16(eta_p_13140);
                }
            }
            offset_18483 *= 2;
        }
        while (slt32(skip_waves_18484, squot32(32 + wave_sizze_18463 - 1, wave_sizze_18463))) {
            barrier(CLK_LOCAL_MEM_FENCE);
            offset_18483 = skip_waves_18484 * wave_sizze_18463;
            if (slt32(local_tid_18461 + offset_18483, 32) && ((local_tid_18461 - squot32(local_tid_18461, wave_sizze_18463) * wave_sizze_18463) == 0 && (squot32(local_tid_18461, wave_sizze_18463) & (2 * skip_waves_18484 - 1)) == 0)) {
                // read array element
                {
                    eta_p_13141 = futrts_from_bits16(((__local uint16_t *) red_arr_mem_18480)[sext_i32_i64(local_tid_18461 + offset_18483)]);
                }
                // apply reduction operation
                {
                    f16 max_res_13142 = fmax16(eta_p_13140, eta_p_13141);
                    
                    eta_p_13140 = max_res_13142;
                }
                // write result of operation
                {
                    ((__local uint16_t *) red_arr_mem_18480)[sext_i32_i64(local_tid_18461)] = futrts_to_bits16(eta_p_13140);
                }
            }
            skip_waves_18484 *= 2;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_LOCAL_MEM_FENCE);
        // Save result of reduction.
        {
            defunc_0_reduce_comm_res_13137 = futrts_from_bits16(((__local uint16_t *) red_arr_mem_18480)[(int64_t) 0]);
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        phys_tid_13153 = sext_i32_i64(local_tid_18461);
        red_arr_mem_18485 = (__local unsigned char *) red_arr_mem_18485_backing_2;
        gtid_13152 = sext_i32_i64(sext_i64_i32(ltid_pre_18465));
        r_13160 = (f16) 0.0F;
        for (int64_t i_13159 = 0; i_13159 < (int64_t) 32; i_13159++) {
            int64_t zp_lhs_13161;
            int64_t f_arg0_13162;
            f16 f_arg0_13163;
            f16 real_exp_arg0_13164;
            f16 exp_res_13165;
            f16 defunc_0_bop_res_13166;
            f16 r_tmp_18487;
            
            zp_lhs_13161 = mul64((int64_t) 32, i_13159);
            f_arg0_13162 = add64(gtid_13152, zp_lhs_13161);
            f_arg0_13163 = futrts_from_bits16(((__local uint16_t *) color_18088)[f_arg0_13162]);
            real_exp_arg0_13164 = f_arg0_13163 - defunc_0_reduce_comm_res_13137;
            exp_res_13165 = futrts_exp16(real_exp_arg0_13164);
            defunc_0_bop_res_13166 = r_13160 + exp_res_13165;
            r_tmp_18487 = defunc_0_bop_res_13166;
            r_13160 = r_tmp_18487;
        }
        defunc_0_f_res_13158 = r_13160;
        ((__local uint16_t *) red_arr_mem_18485)[gtid_13152] = futrts_to_bits16(defunc_0_f_res_13158);
        barrier(CLK_LOCAL_MEM_FENCE);
        skip_waves_18489 = 1;
        offset_18488 = 0;
        // participating threads read initial accumulator
        {
            if (slt32(local_tid_18461, 32)) {
                eta_p_13154 = futrts_from_bits16(((__local uint16_t *) red_arr_mem_18485)[sext_i32_i64(local_tid_18461 + offset_18488)]);
            }
        }
        offset_18488 = 1;
        while (slt32(offset_18488, wave_sizze_18463)) {
            if (slt32(local_tid_18461 + offset_18488, 32) && ((local_tid_18461 - squot32(local_tid_18461, wave_sizze_18463) * wave_sizze_18463) & (2 * offset_18488 - 1)) == 0) {
                // read array element
                {
                    eta_p_13155 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18485)[sext_i32_i64(local_tid_18461 + offset_18488)]);
                }
                // apply reduction operation
                {
                    f16 defunc_0_op_res_13156 = eta_p_13154 + eta_p_13155;
                    
                    eta_p_13154 = defunc_0_op_res_13156;
                }
                // write result of operation
                {
                    ((volatile __local uint16_t *) red_arr_mem_18485)[sext_i32_i64(local_tid_18461)] = futrts_to_bits16(eta_p_13154);
                }
            }
            offset_18488 *= 2;
        }
        while (slt32(skip_waves_18489, squot32(32 + wave_sizze_18463 - 1, wave_sizze_18463))) {
            barrier(CLK_LOCAL_MEM_FENCE);
            offset_18488 = skip_waves_18489 * wave_sizze_18463;
            if (slt32(local_tid_18461 + offset_18488, 32) && ((local_tid_18461 - squot32(local_tid_18461, wave_sizze_18463) * wave_sizze_18463) == 0 && (squot32(local_tid_18461, wave_sizze_18463) & (2 * skip_waves_18489 - 1)) == 0)) {
                // read array element
                {
                    eta_p_13155 = futrts_from_bits16(((__local uint16_t *) red_arr_mem_18485)[sext_i32_i64(local_tid_18461 + offset_18488)]);
                }
                // apply reduction operation
                {
                    f16 defunc_0_op_res_13156 = eta_p_13154 + eta_p_13155;
                    
                    eta_p_13154 = defunc_0_op_res_13156;
                }
                // write result of operation
                {
                    ((__local uint16_t *) red_arr_mem_18485)[sext_i32_i64(local_tid_18461)] = futrts_to_bits16(eta_p_13154);
                }
            }
            skip_waves_18489 *= 2;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_LOCAL_MEM_FENCE);
        // Save result of reduction.
        {
            defunc_0_reduce_comm_res_13151 = futrts_from_bits16(((__local uint16_t *) red_arr_mem_18485)[(int64_t) 0]);
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        max_res_13167 = fmax16(mi_old_13130, defunc_0_reduce_comm_res_13137);
        real_exp_arg0_13168 = defunc_0_reduce_comm_res_13137 - max_res_13167;
        exp_res_13169 = futrts_exp16(real_exp_arg0_13168);
        exp_arg0_13170 = mi_old_13130 - max_res_13167;
        exp_res_13171 = futrts_exp16(exp_arg0_13170);
        eli_13172 = li_old_13131 * exp_res_13171;
        zp_rhs_13173 = defunc_0_reduce_comm_res_13151 * exp_res_13169;
        li_new_13174 = eli_13172 + zp_rhs_13173;
        mi_old_tmp_18475 = max_res_13167;
        li_old_tmp_18476 = li_new_13174;
        mi_old_13130 = mi_old_tmp_18475;
        li_old_13131 = li_old_tmp_18476;
    }
    softmaxChunkML_res_13127 = mi_old_13130;
    softmaxChunkML_res_13128 = li_old_13131;
    if (local_tid_18461 == 0) {
        ((__global uint16_t *) mem_17639)[gtid_13122 * d_10182 + gtid_13123] = futrts_to_bits16(softmaxChunkML_res_13127);
    }
    if (local_tid_18461 == 0) {
        ((__global uint16_t *) mem_17642)[gtid_13122 * d_10182 + gtid_13123] = futrts_to_bits16(softmaxChunkML_res_13128);
    }
    
  error_10:
    return;
}
FUTHARK_KERNEL_SIZED(FlashAttentionSmall_5957zisegmap_intrablock_13220_dim1, 1, 1)
void FlashAttentionSmall_5957zisegmap_intrablock_13220(__global int *global_failure, int64_t d_10182, int64_t m_10183, int64_t dzlz7bUZLztZRz20Umz20Udz7dUzg_10184, int64_t pad_arg0_11215, int64_t conc_tmp_11312, int64_t bytes_17649, __global unsigned char *mem_17610, __global unsigned char *mem_17647, __global unsigned char *mem_17654)
{
    volatile __local unsigned char *color_18089_backing_0 = &shared_mem[0];
    const int64_t color_18089_backing_0_offset = 0 + (bytes_17649 + srem64((int64_t) 8 - srem64(bytes_17649, (int64_t) 8), (int64_t) 8));
    
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_18505;
    int32_t tblock_sizze_18508;
    int32_t wave_sizze_18507;
    int32_t block_id_18506;
    int32_t global_tid_18504;
    int64_t phys_tblock_id_13220;
    int64_t slice_18509;
    int64_t slice_18510;
    int64_t gtid_13218;
    int64_t remnant_18511;
    int64_t gtid_13219;
    int64_t remnant_18512;
    __local unsigned char *color_18089;
    int64_t tmp_offs_18513;
    int32_t num_chunks_18514;
    int32_t num_chunks_18517;
    int32_t num_chunks_18520;
    
    local_tid_18505 = get_local_id(0);
    tblock_sizze_18508 = get_local_size(0);
    wave_sizze_18507 = LOCKSTEP_WIDTH;
    block_id_18506 = get_tblock_id(0);
    global_tid_18504 = block_id_18506 * tblock_sizze_18508 + local_tid_18505;
    phys_tblock_id_13220 = sext_i32_i64(block_id_18506);
    slice_18509 = d_10182;
    slice_18510 = m_10183 * slice_18509;
    gtid_13218 = squot64(sext_i32_i64(block_id_18506), slice_18509);
    remnant_18511 = sext_i32_i64(block_id_18506) - gtid_13218 * slice_18509;
    gtid_13219 = remnant_18511;
    remnant_18512 = remnant_18511 - gtid_13219;
    color_18089 = (__local unsigned char *) color_18089_backing_0;
    tmp_offs_18513 = (int64_t) 0;
    num_chunks_18514 = sdiv_up32(sext_i64_i32(dzlz7bUZLztZRz20Umz20Udz7dUzg_10184), 0);
    for (int32_t chunk_i_18515 = 0; chunk_i_18515 < num_chunks_18514; chunk_i_18515++) {
        int32_t i_18516 = local_tid_18505;
        
        if (slt32(i_18516, sext_i64_i32(dzlz7bUZLztZRz20Umz20Udz7dUzg_10184))) {
            ((__local uint16_t *) color_18089)[tmp_offs_18513 + sext_i32_i64(i_18516)] = futrts_to_bits16(futrts_from_bits16(((__global uint16_t *) mem_17647)[gtid_13218 * (dzlz7bUZLztZRz20Umz20Udz7dUzg_10184 * d_10182) + gtid_13219 * dzlz7bUZLztZRz20Umz20Udz7dUzg_10184 + sext_i32_i64(i_18516)]));
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    tmp_offs_18513 += dzlz7bUZLztZRz20Umz20Udz7dUzg_10184;
    num_chunks_18517 = sdiv_up32(sext_i64_i32(pad_arg0_11215), 0);
    for (int32_t chunk_i_18518 = 0; chunk_i_18518 < num_chunks_18517; chunk_i_18518++) {
        int32_t i_18519 = local_tid_18505;
        
        if (slt32(i_18519, sext_i64_i32(pad_arg0_11215))) {
            ((__local uint16_t *) color_18089)[tmp_offs_18513 + sext_i32_i64(i_18519)] = futrts_to_bits16(futrts_from_bits16(((__global uint16_t *) mem_17610)[sext_i32_i64(i_18519)]));
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    tmp_offs_18513 += pad_arg0_11215;
    num_chunks_18520 = sdiv_up32(sext_i64_i32(conc_tmp_11312), 0);
    for (int32_t chunk_i_18521 = 0; chunk_i_18521 < num_chunks_18520; chunk_i_18521++) {
        int32_t i_18522 = local_tid_18505;
        
        if (slt32(i_18522, sext_i64_i32(conc_tmp_11312))) {
            ((__global uint16_t *) mem_17654)[gtid_13218 * (conc_tmp_11312 * d_10182) + gtid_13219 * conc_tmp_11312 + sext_i32_i64(i_18522)] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) color_18089)[sext_i32_i64(i_18522)]));
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
  error_0:
    return;
}
FUTHARK_KERNEL
void FlashAttentionSmall_5957zisegmap_intrablock_13240(__global int *global_failure, int64_t d_10182, int64_t m_10183, int64_t dzlz7bUZLztZRz20Umz20Udz7dUzg_10184, int64_t flat_dim_11219, int64_t conc_tmp_11312, __global unsigned char *mem_17608, __global unsigned char *mem_17654, __global unsigned char *mem_17660)
{
    volatile __local unsigned char *red_arr_mem_18540_backing_1 = &shared_mem[0];
    const int64_t red_arr_mem_18540_backing_1_offset = 0 + ((int64_t) 2 * ((int64_t) 64 * conc_tmp_11312) + srem64((int64_t) 8 - srem64((int64_t) 2 * ((int64_t) 64 * conc_tmp_11312), (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_18090_backing_0 = &shared_mem[red_arr_mem_18540_backing_1_offset];
    const int64_t color_18090_backing_0_offset = red_arr_mem_18540_backing_1_offset + (int64_t) 128;
    
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_18526;
    int32_t tblock_sizze_18529;
    int32_t wave_sizze_18528;
    int32_t block_id_18527;
    int32_t global_tid_18525;
    int64_t phys_tblock_id_13240;
    int64_t slice_18532;
    int64_t slice_18533;
    int64_t ltid_pre_18530;
    int64_t remnant_18534;
    int64_t ltid_pre_18531;
    int64_t remnant_18535;
    int64_t slice_18536;
    int64_t slice_18537;
    int64_t gtid_13238;
    int64_t remnant_18538;
    int64_t gtid_13239;
    int64_t remnant_18539;
    __local unsigned char *color_18090;
    bool index_concat_cmp_17258;
    bool x_17301;
    int64_t phys_tid_13246;
    __local unsigned char *red_arr_mem_18540;
    int64_t gtid_13244;
    int64_t gtid_13245;
    int64_t dims_flat_18542;
    f16 eta_p_13247;
    f16 eta_p_13248;
    f16 eta_p_18544;
    f16 eta_p_18545;
    bool ltid_in_bounds_18547;
    int32_t skip_threads_18548;
    bool no_carry_in_18554;
    int32_t num_chunks_18559;
    
    local_tid_18526 = get_local_id(0);
    tblock_sizze_18529 = get_local_size(0);
    wave_sizze_18528 = LOCKSTEP_WIDTH;
    block_id_18527 = get_tblock_id(0);
    global_tid_18525 = block_id_18527 * tblock_sizze_18529 + local_tid_18526;
    phys_tblock_id_13240 = sext_i32_i64(block_id_18527);
    slice_18532 = conc_tmp_11312;
    slice_18533 = (int64_t) 64 * slice_18532;
    ltid_pre_18530 = squot64(sext_i32_i64(local_tid_18526), slice_18532);
    remnant_18534 = sext_i32_i64(local_tid_18526) - ltid_pre_18530 * slice_18532;
    ltid_pre_18531 = remnant_18534;
    remnant_18535 = remnant_18534 - ltid_pre_18531;
    slice_18536 = (int64_t) 64;
    slice_18537 = m_10183 * slice_18536;
    gtid_13238 = squot64(sext_i32_i64(block_id_18527), slice_18536);
    remnant_18538 = sext_i32_i64(block_id_18527) - gtid_13238 * slice_18536;
    gtid_13239 = remnant_18538;
    remnant_18539 = remnant_18538 - gtid_13239;
    color_18090 = (__local unsigned char *) color_18090_backing_0;
    index_concat_cmp_17258 = sle64(d_10182, gtid_13239);
    x_17301 = !index_concat_cmp_17258;
    phys_tid_13246 = sext_i32_i64(local_tid_18526);
    red_arr_mem_18540 = (__local unsigned char *) red_arr_mem_18540_backing_1;
    gtid_13244 = sext_i32_i64(sext_i64_i32(ltid_pre_18530));
    gtid_13245 = sext_i32_i64(sext_i64_i32(ltid_pre_18531));
    if (slt64(gtid_13244, (int64_t) 64) && slt64(gtid_13245, conc_tmp_11312)) {
        f16 index_concat_17261;
        f16 index_concat_branch_17262;
        bool index_concat_cmp_17252;
        f16 index_concat_branch_17256;
        f16 defunc_0_f_res_13253;
        
        if (x_17301) {
            f16 x_17303 = futrts_from_bits16(((__global uint16_t *) mem_17654)[gtid_13238 * (conc_tmp_11312 * d_10182) + gtid_13239 * conc_tmp_11312 + gtid_13245]);
            
            index_concat_17261 = x_17303;
        } else {
            index_concat_17261 = (f16) 0.0F;
        }
        if (index_concat_cmp_17258) {
            index_concat_branch_17262 = (f16) 0.0F;
        } else {
            index_concat_branch_17262 = index_concat_17261;
        }
        index_concat_cmp_17252 = sle64(dzlz7bUZLztZRz20Umz20Udz7dUzg_10184, gtid_13245);
        if (index_concat_cmp_17252) {
            index_concat_branch_17256 = (f16) 0.0F;
        } else {
            f16 index_concat_17255 = futrts_from_bits16(((__global uint16_t *) mem_17608)[gtid_13245 * (int64_t) 64 + gtid_13244]);
            
            index_concat_branch_17256 = index_concat_17255;
        }
        defunc_0_f_res_13253 = index_concat_branch_17256 * index_concat_branch_17262;
        ((__local uint16_t *) red_arr_mem_18540)[gtid_13244 * conc_tmp_11312 + gtid_13245] = futrts_to_bits16(defunc_0_f_res_13253);
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    dims_flat_18542 = (int64_t) 64 * conc_tmp_11312;
    ltid_in_bounds_18547 = slt64(sext_i32_i64(local_tid_18526), (int64_t) 64 * conc_tmp_11312);
    // read input for in-block scan
    {
        if (ltid_in_bounds_18547) {
            eta_p_13248 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18540)[sext_i32_i64(local_tid_18526)]);
            if ((local_tid_18526 - squot32(local_tid_18526, 32) * 32) == 0) {
                eta_p_13247 = eta_p_13248;
            }
        }
    }
    // in-block scan (hopefully no barriers needed)
    {
        skip_threads_18548 = 1;
        while (slt32(skip_threads_18548, 32)) {
            bool thread_active_18549 = sle32(skip_threads_18548, local_tid_18526 - squot32(local_tid_18526, 32) * 32) && ltid_in_bounds_18547;
            
            if (thread_active_18549) {
                // read operands
                {
                    eta_p_13247 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18540)[sext_i32_i64(local_tid_18526) - sext_i32_i64(skip_threads_18548)]);
                }
            }
            // perform operation
            {
                bool inactive_18550 = slt64(srem64(sext_i32_i64(local_tid_18526), conc_tmp_11312), sext_i32_i64(local_tid_18526) - sext_i32_i64(local_tid_18526 - skip_threads_18548));
                
                if (thread_active_18549 && inactive_18550) {
                    eta_p_13247 = eta_p_13248;
                }
                if (thread_active_18549) {
                    if (!inactive_18550) {
                        f16 defunc_0_op_res_13249 = eta_p_13247 + eta_p_13248;
                        
                        eta_p_13247 = defunc_0_op_res_13249;
                    }
                }
            }
            if (sle32(wave_sizze_18528, skip_threads_18548)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            if (thread_active_18549) {
                // write result
                {
                    ((volatile __local uint16_t *) red_arr_mem_18540)[sext_i32_i64(local_tid_18526)] = futrts_to_bits16(eta_p_13247);
                    eta_p_13248 = eta_p_13247;
                }
            }
            if (sle32(wave_sizze_18528, skip_threads_18548)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            skip_threads_18548 *= 2;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // last thread of block 'i' writes its result to offset 'i'
    {
        if ((local_tid_18526 - squot32(local_tid_18526, 32) * 32) == 31 && ltid_in_bounds_18547) {
            ((volatile __local uint16_t *) red_arr_mem_18540)[sext_i32_i64(squot32(local_tid_18526, 32))] = futrts_to_bits16(eta_p_13247);
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
    {
        int32_t skip_threads_18551;
        
        // read input for in-block scan
        {
            if (squot32(local_tid_18526, 32) == 0 && ltid_in_bounds_18547) {
                eta_p_18545 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18540)[sext_i32_i64(local_tid_18526)]);
                if ((local_tid_18526 - squot32(local_tid_18526, 32) * 32) == 0) {
                    eta_p_18544 = eta_p_18545;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_18551 = 1;
            while (slt32(skip_threads_18551, 32)) {
                bool thread_active_18552 = sle32(skip_threads_18551, local_tid_18526 - squot32(local_tid_18526, 32) * 32) && (squot32(local_tid_18526, 32) == 0 && ltid_in_bounds_18547);
                
                if (thread_active_18552) {
                    // read operands
                    {
                        eta_p_18544 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18540)[sext_i32_i64(local_tid_18526) - sext_i32_i64(skip_threads_18551)]);
                    }
                }
                // perform operation
                {
                    bool inactive_18553 = slt64(srem64(sext_i32_i64(local_tid_18526 * 32 + 32 - 1), conc_tmp_11312), sext_i32_i64(local_tid_18526 * 32 + 32 - 1) - sext_i32_i64((local_tid_18526 - skip_threads_18551) * 32 + 32 - 1));
                    
                    if (thread_active_18552 && inactive_18553) {
                        eta_p_18544 = eta_p_18545;
                    }
                    if (thread_active_18552) {
                        if (!inactive_18553) {
                            f16 defunc_0_op_res_18546 = eta_p_18544 + eta_p_18545;
                            
                            eta_p_18544 = defunc_0_op_res_18546;
                        }
                    }
                }
                if (sle32(wave_sizze_18528, skip_threads_18551)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (thread_active_18552) {
                    // write result
                    {
                        ((volatile __local uint16_t *) red_arr_mem_18540)[sext_i32_i64(local_tid_18526)] = futrts_to_bits16(eta_p_18544);
                        eta_p_18545 = eta_p_18544;
                    }
                }
                if (sle32(wave_sizze_18528, skip_threads_18551)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_18551 *= 2;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    no_carry_in_18554 = squot32(local_tid_18526, 32) == 0 || !ltid_in_bounds_18547;
    // carry-in for every block except the first
    {
        // read operands
        {
            if (!no_carry_in_18554) {
                eta_p_13248 = eta_p_13247;
                eta_p_13247 = futrts_from_bits16(((__local uint16_t *) red_arr_mem_18540)[sext_i32_i64(squot32(local_tid_18526, 32)) - (int64_t) 1]);
            }
        }
        // perform operation
        {
            bool inactive_18555 = slt64(srem64(sext_i32_i64(local_tid_18526), conc_tmp_11312), sext_i32_i64(local_tid_18526) - sext_i32_i64(squot32(local_tid_18526, 32) * 32 - 1));
            
            if (!no_carry_in_18554) {
                if (inactive_18555) {
                    eta_p_13247 = eta_p_13248;
                }
            }
            if (!no_carry_in_18554) {
                if (!inactive_18555) {
                    f16 defunc_0_op_res_13249 = eta_p_13247 + eta_p_13248;
                    
                    eta_p_13247 = defunc_0_op_res_13249;
                }
            }
        }
        // write final result
        {
            if (!no_carry_in_18554) {
                ((__local uint16_t *) red_arr_mem_18540)[sext_i32_i64(local_tid_18526)] = futrts_to_bits16(eta_p_13247);
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // restore correct values for first block
    {
        if (squot32(local_tid_18526, 32) == 0 && ltid_in_bounds_18547) {
            ((__local uint16_t *) red_arr_mem_18540)[sext_i32_i64(local_tid_18526)] = futrts_to_bits16(eta_p_13248);
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    barrier(CLK_LOCAL_MEM_FENCE);
    // Save result of reduction.
    {
        int32_t num_chunks_18556 = sdiv_up32(64, sext_i64_i32(flat_dim_11219));
        
        for (int32_t chunk_i_18557 = 0; chunk_i_18557 < num_chunks_18556; chunk_i_18557++) {
            int32_t i_18558 = chunk_i_18557 * sext_i64_i32(flat_dim_11219) + local_tid_18526;
            
            if (slt32(i_18558, 64)) {
                ((__local uint16_t *) color_18090)[sext_i32_i64(i_18558)] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) red_arr_mem_18540)[conc_tmp_11312 - (int64_t) 1 + sext_i32_i64(i_18558) * conc_tmp_11312]));
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    num_chunks_18559 = sdiv_up32(64, sext_i64_i32(flat_dim_11219));
    for (int32_t chunk_i_18560 = 0; chunk_i_18560 < num_chunks_18559; chunk_i_18560++) {
        int32_t i_18561 = chunk_i_18560 * sext_i64_i32(flat_dim_11219) + local_tid_18526;
        
        if (slt32(i_18561, 64)) {
            ((__global uint16_t *) mem_17660)[gtid_13238 * (int64_t) 4096 + gtid_13239 * (int64_t) 64 + sext_i32_i64(i_18561)] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) color_18090)[sext_i32_i64(i_18561)]));
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
  error_3:
    return;
}
FUTHARK_KERNEL
void builtinzhreplicate_f16zireplicate_18097(int64_t num_elems_18093, uint16_t val_18094_bits, int64_t replicate_n_18096, int64_t virt_num_tblocks_18102, int64_t num_tblocks_18103, __global unsigned char *mem_18092)
{
    f16 val_18094 = futrts_from_bits16(val_18094_bits);
    int32_t replicate_ltid_18098;
    int32_t tblock_sizze_18100;
    int32_t replicate_gid_18099;
    int32_t replicate_gtid_18097;
    int32_t phys_tblock_id_18104;
    int32_t iterations_18105;
    
    replicate_ltid_18098 = get_local_id(0);
    tblock_sizze_18100 = get_local_size(0);
    replicate_gid_18099 = get_tblock_id(0);
    replicate_gtid_18097 = replicate_gid_18099 * tblock_sizze_18100 + replicate_ltid_18098;
    phys_tblock_id_18104 = get_tblock_id(0);
    iterations_18105 = sdiv_up32(sext_i64_i32(virt_num_tblocks_18102) - phys_tblock_id_18104, sext_i64_i32(num_tblocks_18103));
    for (int32_t i_18106 = 0; i_18106 < iterations_18105; i_18106++) {
        int32_t virt_tblock_id_18107;
        int64_t global_tid_18108;
        int64_t slice_18110;
        int64_t rep_i_18109;
        int64_t remnant_18111;
        
        virt_tblock_id_18107 = phys_tblock_id_18104 + i_18106 * sext_i64_i32(num_tblocks_18103);
        global_tid_18108 = sext_i32_i64(virt_tblock_id_18107) * sext_i32_i64(tblock_sizze_18100) + sext_i32_i64(replicate_ltid_18098);
        slice_18110 = num_elems_18093;
        rep_i_18109 = global_tid_18108;
        remnant_18111 = global_tid_18108 - rep_i_18109;
        if (slt64(global_tid_18108, replicate_n_18096)) {
            ((__global uint16_t *) mem_18092)[rep_i_18109] = futrts_to_bits16(val_18094);
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
}
FUTHARK_KERNEL
void padzireplicate_18133(int64_t n_8068, int64_t pn_8070, int64_t dzlz7bUZLzpZRz20Umz20Upmz7dUzg_11303, int64_t replicate_n_18132, int64_t virt_num_tblocks_18138, int64_t num_tblocks_18139, __global unsigned char *mem_17605)
{
    int32_t replicate_ltid_18134;
    int32_t tblock_sizze_18136;
    int32_t replicate_gid_18135;
    int32_t replicate_gtid_18133;
    int32_t phys_tblock_id_18140;
    int32_t iterations_18141;
    
    replicate_ltid_18134 = get_local_id(0);
    tblock_sizze_18136 = get_local_size(0);
    replicate_gid_18135 = get_tblock_id(0);
    replicate_gtid_18133 = replicate_gid_18135 * tblock_sizze_18136 + replicate_ltid_18134;
    phys_tblock_id_18140 = get_tblock_id(0);
    iterations_18141 = sdiv_up32(sext_i64_i32(virt_num_tblocks_18138) - phys_tblock_id_18140, sext_i64_i32(num_tblocks_18139));
    for (int32_t i_18142 = 0; i_18142 < iterations_18141; i_18142++) {
        int32_t virt_tblock_id_18143;
        int64_t global_tid_18144;
        int64_t slice_18147;
        int64_t slice_18148;
        int64_t rep_i_18145;
        int64_t remnant_18149;
        int64_t rep_i_18146;
        int64_t remnant_18150;
        
        virt_tblock_id_18143 = phys_tblock_id_18140 + i_18142 * sext_i64_i32(num_tblocks_18139);
        global_tid_18144 = sext_i32_i64(virt_tblock_id_18143) * sext_i32_i64(tblock_sizze_18136) + sext_i32_i64(replicate_ltid_18134);
        slice_18147 = dzlz7bUZLzpZRz20Umz20Upmz7dUzg_11303;
        slice_18148 = pn_8070 * slice_18147;
        rep_i_18145 = squot64(global_tid_18144, slice_18147);
        remnant_18149 = global_tid_18144 - rep_i_18145 * slice_18147;
        rep_i_18146 = remnant_18149;
        remnant_18150 = remnant_18149 - rep_i_18146;
        if (slt64(global_tid_18144, replicate_n_18132)) {
            ((__global uint16_t *) mem_17605)[dzlz7bUZLzpZRz20Umz20Upmz7dUzg_11303 * n_8068 + (rep_i_18145 * dzlz7bUZLzpZRz20Umz20Upmz7dUzg_11303 + rep_i_18146)] = futrts_to_bits16((f16) 0.0F);
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
}
FUTHARK_KERNEL_SIZED(padzisegmap_intrablock_11694_dim1, 1, 1)
void padzisegmap_intrablock_11694(__global int *global_failure, int64_t n_8068, int64_t m_8069, int64_t pm_8071, int64_t dzlz7bUZLzpZRz20Umz20Upmz7dUzg_11303, int64_t bytes_17595, __global unsigned char *a_mem_17591, __global unsigned char *mem_17593, __global unsigned char *mem_17605)
{
    volatile __local unsigned char *color_18056_backing_0 = &shared_mem[0];
    const int64_t color_18056_backing_0_offset = 0 + (bytes_17595 + srem64((int64_t) 8 - srem64(bytes_17595, (int64_t) 8), (int64_t) 8));
    
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_18116;
    int32_t tblock_sizze_18119;
    int32_t wave_sizze_18118;
    int32_t block_id_18117;
    int32_t global_tid_18115;
    int64_t phys_tblock_id_11694;
    int64_t slice_18120;
    int64_t gtid_11693;
    int64_t remnant_18121;
    __local unsigned char *color_18056;
    int64_t tmp_offs_18122;
    int32_t num_chunks_18123;
    int32_t num_chunks_18126;
    int32_t num_chunks_18129;
    
    local_tid_18116 = get_local_id(0);
    tblock_sizze_18119 = get_local_size(0);
    wave_sizze_18118 = LOCKSTEP_WIDTH;
    block_id_18117 = get_tblock_id(0);
    global_tid_18115 = block_id_18117 * tblock_sizze_18119 + local_tid_18116;
    phys_tblock_id_11694 = sext_i32_i64(block_id_18117);
    slice_18120 = n_8068;
    gtid_11693 = sext_i32_i64(block_id_18117);
    remnant_18121 = sext_i32_i64(block_id_18117) - gtid_11693;
    color_18056 = (__local unsigned char *) color_18056_backing_0;
    tmp_offs_18122 = (int64_t) 0;
    num_chunks_18123 = sdiv_up32(sext_i64_i32(m_8069), 0);
    for (int32_t chunk_i_18124 = 0; chunk_i_18124 < num_chunks_18123; chunk_i_18124++) {
        int32_t i_18125 = local_tid_18116;
        
        if (slt32(i_18125, sext_i64_i32(m_8069))) {
            ((__local uint16_t *) color_18056)[tmp_offs_18122 + sext_i32_i64(i_18125)] = futrts_to_bits16(futrts_from_bits16(((__global uint16_t *) a_mem_17591)[gtid_11693 * m_8069 + sext_i32_i64(i_18125)]));
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    tmp_offs_18122 += m_8069;
    num_chunks_18126 = sdiv_up32(sext_i64_i32(pm_8071), 0);
    for (int32_t chunk_i_18127 = 0; chunk_i_18127 < num_chunks_18126; chunk_i_18127++) {
        int32_t i_18128 = local_tid_18116;
        
        if (slt32(i_18128, sext_i64_i32(pm_8071))) {
            ((__local uint16_t *) color_18056)[tmp_offs_18122 + sext_i32_i64(i_18128)] = futrts_to_bits16(futrts_from_bits16(((__global uint16_t *) mem_17593)[sext_i32_i64(i_18128)]));
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    tmp_offs_18122 += pm_8071;
    num_chunks_18129 = sdiv_up32(sext_i64_i32(dzlz7bUZLzpZRz20Umz20Upmz7dUzg_11303), 0);
    for (int32_t chunk_i_18130 = 0; chunk_i_18130 < num_chunks_18129; chunk_i_18130++) {
        int32_t i_18131 = local_tid_18116;
        
        if (slt32(i_18131, sext_i64_i32(dzlz7bUZLzpZRz20Umz20Upmz7dUzg_11303))) {
            ((__global uint16_t *) mem_17605)[gtid_11693 * dzlz7bUZLzpZRz20Umz20Upmz7dUzg_11303 + sext_i32_i64(i_18131)] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) color_18056)[sext_i32_i64(i_18131)]));
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
  error_0:
    return;
}
FUTHARK_KERNEL_SIZED(thesislike128zisegmap_15221_dim1, 1, 1)
void thesislike128zisegmap_15221(__global int *global_failure, int64_t m_10395, int64_t d_10396, int64_t dzlz7bUZLztZRz20Umz20Udz7dUzg_10397, int64_t one_intra_par_min_14426, int64_t y_14427, __global unsigned char *mem_17605, __global unsigned char *mem_17610, __global unsigned char *mem_17613, __global unsigned char *mem_17618)
{
    #define segmap_tblock_sizze_15215 (thesislike128zisegmap_15221zisegmap_tblock_sizze_15215)
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_18350;
    int32_t tblock_sizze_18353;
    int32_t wave_sizze_18352;
    int32_t block_id_18351;
    int32_t global_tid_18349;
    int64_t phys_tid_15221;
    int64_t global_tid_18354;
    int64_t slice_18355;
    int64_t slice_18356;
    int64_t slice_18357;
    int64_t gtid_15218;
    int64_t remnant_18358;
    int64_t gtid_15219;
    int64_t remnant_18359;
    int64_t gtid_15220;
    int64_t remnant_18360;
    
    local_tid_18350 = get_local_id(0);
    tblock_sizze_18353 = get_local_size(0);
    wave_sizze_18352 = LOCKSTEP_WIDTH;
    block_id_18351 = get_tblock_id(0);
    global_tid_18349 = block_id_18351 * tblock_sizze_18353 + local_tid_18350;
    phys_tid_15221 = sext_i32_i64(global_tid_18349);
    global_tid_18354 = sext_i32_i64(block_id_18351) * segmap_tblock_sizze_15215 + sext_i32_i64(local_tid_18350);
    slice_18355 = dzlz7bUZLztZRz20Umz20Udz7dUzg_10397;
    slice_18356 = d_10396 * slice_18355;
    slice_18357 = m_10395 * slice_18356;
    gtid_15218 = squot64(global_tid_18354, slice_18356);
    remnant_18358 = global_tid_18354 - gtid_15218 * slice_18356;
    gtid_15219 = squot64(remnant_18358, slice_18355);
    remnant_18359 = remnant_18358 - gtid_15219 * slice_18355;
    gtid_15220 = remnant_18359;
    remnant_18360 = remnant_18359 - gtid_15220;
    if ((slt64(gtid_15218, m_10395) && slt64(gtid_15219, d_10396)) && slt64(gtid_15220, dzlz7bUZLztZRz20Umz20Udz7dUzg_10397)) {
        f16 eta_p_15222;
        f16 eta_p_15223;
        int64_t binop_x_17251;
        int64_t binop_y_17252;
        int64_t binop_x_17253;
        int64_t binop_x_17254;
        int64_t new_index_17257;
        int64_t binop_y_17273;
        int64_t binop_x_17274;
        int64_t new_index_17276;
        int64_t binop_y_17314;
        int64_t binop_x_17315;
        int64_t new_index_17316;
        int64_t binop_y_17396;
        int64_t new_index_17397;
        f16 eta_p_15224;
        f16 real_exp_arg0_15225;
        f16 exp_res_15226;
        f16 lifted_lambda_res_15227;
        
        eta_p_15222 = futrts_from_bits16(((__global uint16_t *) mem_17610)[gtid_15218 * d_10396 + gtid_15219]);
        eta_p_15223 = futrts_from_bits16(((__global uint16_t *) mem_17613)[gtid_15218 * d_10396 + gtid_15219]);
        binop_x_17251 = one_intra_par_min_14426 * gtid_15218;
        binop_y_17252 = d_10396 * gtid_15220;
        binop_x_17253 = binop_x_17251 + binop_y_17252;
        binop_x_17254 = gtid_15219 + binop_x_17253;
        new_index_17257 = squot64(binop_x_17254, one_intra_par_min_14426);
        binop_y_17273 = one_intra_par_min_14426 * new_index_17257;
        binop_x_17274 = binop_x_17254 - binop_y_17273;
        new_index_17276 = squot64(binop_x_17274, y_14427);
        binop_y_17314 = y_14427 * new_index_17276;
        binop_x_17315 = binop_x_17274 - binop_y_17314;
        new_index_17316 = squot64(binop_x_17315, d_10396);
        binop_y_17396 = d_10396 * new_index_17316;
        new_index_17397 = binop_x_17315 - binop_y_17396;
        eta_p_15224 = futrts_from_bits16(((__global uint16_t *) mem_17605)[new_index_17257 * (d_10396 * d_10396 * m_10395) + new_index_17276 * (d_10396 * d_10396) + new_index_17316 * d_10396 + new_index_17397]);
        real_exp_arg0_15225 = eta_p_15224 - eta_p_15222;
        exp_res_15226 = futrts_exp16(real_exp_arg0_15225);
        lifted_lambda_res_15227 = exp_res_15226 / eta_p_15223;
        ((__global uint16_t *) mem_17618)[gtid_15218 * (dzlz7bUZLztZRz20Umz20Udz7dUzg_10397 * d_10396) + gtid_15219 * dzlz7bUZLztZRz20Umz20Udz7dUzg_10397 + gtid_15220] = futrts_to_bits16(lifted_lambda_res_15227);
    }
    
  error_0:
    return;
    #undef segmap_tblock_sizze_15215
}
FUTHARK_KERNEL
void thesislike128zisegmap_intrablock_14663(__global int *global_failure, int64_t m_10395, int64_t d_10396, int64_t dzlz7bUZLztZRz20Umz20Udz7dUzg_10397, int64_t q_11504, unsigned char opaque_res_11508_bits, int64_t computed_tblock_sizze_14283, int64_t y_14427, int64_t binop_x_17598, int64_t bytes_17624, int64_t bytes_17651, int64_t maxSubHelper_18063, int64_t maxSubHelper_18064, int64_t maxSubHelper_18066, int32_t num_chunks_18094, __global unsigned char *Q_mem_17591, __global unsigned char *K_mem_17592, __global unsigned char *V_mem_17593, __global unsigned char *mem_17683)
{
    bool opaque_res_11508 = opaque_res_11508_bits;
    volatile __local unsigned char *red_arr_mem_18244_backing_12 = &shared_mem[0];
    const int64_t red_arr_mem_18244_backing_12_offset = 0 + ((int64_t) 2 * (d_10396 * d_10396 * dzlz7bUZLztZRz20Umz20Udz7dUzg_10397) + srem64((int64_t) 8 - srem64((int64_t) 2 * (d_10396 * d_10396 * dzlz7bUZLztZRz20Umz20Udz7dUzg_10397), (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *red_arr_mem_18224_backing_11 = &shared_mem[red_arr_mem_18244_backing_12_offset];
    const int64_t red_arr_mem_18224_backing_11_offset = red_arr_mem_18244_backing_12_offset + ((int64_t) 2 * (d_10396 * (int64_t) 32) + srem64((int64_t) 8 - srem64((int64_t) 2 * (d_10396 * (int64_t) 32), (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *red_arr_mem_18204_backing_10 = &shared_mem[red_arr_mem_18224_backing_11_offset];
    const int64_t red_arr_mem_18204_backing_10_offset = red_arr_mem_18224_backing_11_offset + ((int64_t) 2 * (d_10396 * (int64_t) 32) + srem64((int64_t) 8 - srem64((int64_t) 2 * (d_10396 * (int64_t) 32), (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *red_arr_mem_18158_backing_9 = &shared_mem[red_arr_mem_18204_backing_10_offset];
    const int64_t red_arr_mem_18158_backing_9_offset = red_arr_mem_18204_backing_10_offset + ((int64_t) 4 * (m_10395 * d_10396 * d_10396 * d_10396) + srem64((int64_t) 8 - srem64((int64_t) 4 * (m_10395 * d_10396 * d_10396 * d_10396), (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_18075_backing_8 = &shared_mem[red_arr_mem_18158_backing_9_offset];
    const int64_t color_18075_backing_8_offset = red_arr_mem_18158_backing_9_offset + (bytes_17624 + srem64((int64_t) 8 - srem64(bytes_17624, (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_18074_backing_7 = &shared_mem[color_18075_backing_8_offset];
    const int64_t color_18074_backing_7_offset = color_18075_backing_8_offset + (bytes_17651 + srem64((int64_t) 8 - srem64(bytes_17651, (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_18073_backing_6 = &shared_mem[color_18074_backing_7_offset];
    const int64_t color_18073_backing_6_offset = color_18074_backing_7_offset + (bytes_17651 + srem64((int64_t) 8 - srem64(bytes_17651, (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_18072_backing_5 = &shared_mem[color_18073_backing_6_offset];
    const int64_t color_18072_backing_5_offset = color_18073_backing_6_offset + (binop_x_17598 + srem64((int64_t) 8 - srem64(binop_x_17598, (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_18071_backing_4 = &shared_mem[color_18072_backing_5_offset];
    const int64_t color_18071_backing_4_offset = color_18072_backing_5_offset + (binop_x_17598 + srem64((int64_t) 8 - srem64(binop_x_17598, (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_18070_backing_3 = &shared_mem[color_18071_backing_4_offset];
    const int64_t color_18070_backing_3_offset = color_18071_backing_4_offset + (binop_x_17598 + srem64((int64_t) 8 - srem64(binop_x_17598, (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_18069_backing_2 = &shared_mem[color_18070_backing_3_offset];
    const int64_t color_18069_backing_2_offset = color_18070_backing_3_offset + (maxSubHelper_18066 + srem64((int64_t) 8 - srem64(maxSubHelper_18066, (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_18068_backing_1 = &shared_mem[color_18069_backing_2_offset];
    const int64_t color_18068_backing_1_offset = color_18069_backing_2_offset + (maxSubHelper_18064 + srem64((int64_t) 8 - srem64(maxSubHelper_18064, (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_18067_backing_0 = &shared_mem[color_18068_backing_1_offset];
    const int64_t color_18067_backing_0_offset = color_18068_backing_1_offset + (maxSubHelper_18063 + srem64((int64_t) 8 - srem64(maxSubHelper_18063, (int64_t) 8), (int64_t) 8));
    
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_18101;
    int32_t tblock_sizze_18104;
    int32_t wave_sizze_18103;
    int32_t block_id_18102;
    int32_t global_tid_18100;
    int64_t phys_tblock_id_14663;
    int64_t slice_18108;
    int64_t slice_18109;
    int64_t slice_18110;
    int64_t ltid_pre_18105;
    int64_t remnant_18111;
    int64_t ltid_pre_18106;
    int64_t remnant_18112;
    int64_t ltid_pre_18107;
    int64_t remnant_18113;
    int64_t slice_18118;
    int64_t slice_18119;
    int64_t slice_18120;
    int64_t slice_18121;
    int64_t ltid_pre_18114;
    int64_t remnant_18122;
    int64_t ltid_pre_18115;
    int64_t remnant_18123;
    int64_t ltid_pre_18116;
    int64_t remnant_18124;
    int64_t ltid_pre_18117;
    int64_t remnant_18125;
    int64_t slice_18127;
    int64_t ltid_pre_18126;
    int64_t remnant_18128;
    int64_t slice_18131;
    int64_t slice_18132;
    int64_t ltid_pre_18129;
    int64_t remnant_18133;
    int64_t ltid_pre_18130;
    int64_t remnant_18134;
    int64_t slice_18137;
    int64_t slice_18138;
    int64_t ltid_pre_18135;
    int64_t remnant_18139;
    int64_t ltid_pre_18136;
    int64_t remnant_18140;
    int64_t slice_18144;
    int64_t slice_18145;
    int64_t slice_18146;
    int64_t ltid_pre_18141;
    int64_t remnant_18147;
    int64_t ltid_pre_18142;
    int64_t remnant_18148;
    int64_t ltid_pre_18143;
    int64_t remnant_18149;
    int64_t slice_18152;
    int64_t slice_18153;
    int64_t ltid_pre_18150;
    int64_t remnant_18154;
    int64_t ltid_pre_18151;
    int64_t remnant_18155;
    int64_t slice_18156;
    int64_t gtid_14662;
    int64_t remnant_18157;
    __local unsigned char *color_18067;
    __local unsigned char *color_18068;
    __local unsigned char *color_18069;
    __local unsigned char *color_18070;
    __local unsigned char *color_18071;
    __local unsigned char *color_18072;
    __local unsigned char *color_18073;
    __local unsigned char *color_18074;
    __local unsigned char *color_18075;
    int64_t phys_tid_14671;
    __local unsigned char *red_arr_mem_18158;
    int64_t gtid_14667;
    int64_t gtid_14668;
    int64_t gtid_14669;
    int64_t gtid_14670;
    int64_t dims_flat_18160;
    float eta_p_14672;
    float eta_p_14673;
    float eta_p_18162;
    float eta_p_18163;
    bool ltid_in_bounds_18165;
    int32_t skip_threads_18166;
    bool no_carry_in_18172;
    int64_t phys_tid_14686;
    int64_t gtid_14683;
    int64_t gtid_14684;
    int64_t gtid_14685;
    int32_t num_chunks_18177;
    __local unsigned char *ext_mem_17673;
    __local unsigned char *ext_mem_unused_17998;
    __local unsigned char *ext_mem_17672;
    __local unsigned char *ext_mem_unused_18007;
    __local unsigned char *mem_param_17646;
    __local unsigned char *mem_param_17649;
    __local unsigned char *mem_param_out_17999;
    __local unsigned char *mem_param_out_18008;
    int64_t phys_tid_14769;
    int64_t gtid_14767;
    int64_t gtid_14768;
    int64_t phys_tid_14781;
    __local unsigned char *red_arr_mem_18244;
    int64_t gtid_14778;
    int64_t gtid_14779;
    int64_t gtid_14780;
    int64_t dims_flat_18246;
    f16 eta_p_14782;
    f16 eta_p_14783;
    f16 eta_p_18248;
    f16 eta_p_18249;
    bool ltid_in_bounds_18251;
    int32_t skip_threads_18252;
    bool no_carry_in_18258;
    int32_t num_chunks_18263;
    
    local_tid_18101 = get_local_id(0);
    tblock_sizze_18104 = get_local_size(0);
    wave_sizze_18103 = LOCKSTEP_WIDTH;
    block_id_18102 = get_tblock_id(0);
    global_tid_18100 = block_id_18102 * tblock_sizze_18104 + local_tid_18101;
    phys_tblock_id_14663 = sext_i32_i64(block_id_18102);
    slice_18108 = d_10396;
    slice_18109 = d_10396 * slice_18108;
    slice_18110 = m_10395 * slice_18109;
    ltid_pre_18105 = squot64(sext_i32_i64(local_tid_18101), slice_18109);
    remnant_18111 = sext_i32_i64(local_tid_18101) - ltid_pre_18105 * slice_18109;
    ltid_pre_18106 = squot64(remnant_18111, slice_18108);
    remnant_18112 = remnant_18111 - ltid_pre_18106 * slice_18108;
    ltid_pre_18107 = remnant_18112;
    remnant_18113 = remnant_18112 - ltid_pre_18107;
    slice_18118 = d_10396;
    slice_18119 = d_10396 * slice_18118;
    slice_18120 = d_10396 * slice_18119;
    slice_18121 = m_10395 * slice_18120;
    ltid_pre_18114 = squot64(sext_i32_i64(local_tid_18101), slice_18120);
    remnant_18122 = sext_i32_i64(local_tid_18101) - ltid_pre_18114 * slice_18120;
    ltid_pre_18115 = squot64(remnant_18122, slice_18119);
    remnant_18123 = remnant_18122 - ltid_pre_18115 * slice_18119;
    ltid_pre_18116 = squot64(remnant_18123, slice_18118);
    remnant_18124 = remnant_18123 - ltid_pre_18116 * slice_18118;
    ltid_pre_18117 = remnant_18124;
    remnant_18125 = remnant_18124 - ltid_pre_18117;
    slice_18127 = d_10396;
    ltid_pre_18126 = sext_i32_i64(local_tid_18101);
    remnant_18128 = sext_i32_i64(local_tid_18101) - ltid_pre_18126;
    slice_18131 = (int64_t) 32;
    slice_18132 = d_10396 * slice_18131;
    ltid_pre_18129 = squot64(sext_i32_i64(local_tid_18101), slice_18131);
    remnant_18133 = sext_i32_i64(local_tid_18101) - ltid_pre_18129 * slice_18131;
    ltid_pre_18130 = remnant_18133;
    remnant_18134 = remnant_18133 - ltid_pre_18130;
    slice_18137 = (int64_t) 1024;
    slice_18138 = d_10396 * slice_18137;
    ltid_pre_18135 = squot64(sext_i32_i64(local_tid_18101), slice_18137);
    remnant_18139 = sext_i32_i64(local_tid_18101) - ltid_pre_18135 * slice_18137;
    ltid_pre_18136 = remnant_18139;
    remnant_18140 = remnant_18139 - ltid_pre_18136;
    slice_18144 = dzlz7bUZLztZRz20Umz20Udz7dUzg_10397;
    slice_18145 = d_10396 * slice_18144;
    slice_18146 = d_10396 * slice_18145;
    ltid_pre_18141 = squot64(sext_i32_i64(local_tid_18101), slice_18145);
    remnant_18147 = sext_i32_i64(local_tid_18101) - ltid_pre_18141 * slice_18145;
    ltid_pre_18142 = squot64(remnant_18147, slice_18144);
    remnant_18148 = remnant_18147 - ltid_pre_18142 * slice_18144;
    ltid_pre_18143 = remnant_18148;
    remnant_18149 = remnant_18148 - ltid_pre_18143;
    slice_18152 = dzlz7bUZLztZRz20Umz20Udz7dUzg_10397;
    slice_18153 = d_10396 * slice_18152;
    ltid_pre_18150 = squot64(sext_i32_i64(local_tid_18101), slice_18152);
    remnant_18154 = sext_i32_i64(local_tid_18101) - ltid_pre_18150 * slice_18152;
    ltid_pre_18151 = remnant_18154;
    remnant_18155 = remnant_18154 - ltid_pre_18151;
    slice_18156 = m_10395;
    gtid_14662 = sext_i32_i64(block_id_18102);
    remnant_18157 = sext_i32_i64(block_id_18102) - gtid_14662;
    color_18067 = (__local unsigned char *) color_18067_backing_0;
    color_18068 = (__local unsigned char *) color_18068_backing_1;
    color_18069 = (__local unsigned char *) color_18069_backing_2;
    color_18070 = (__local unsigned char *) color_18070_backing_3;
    color_18071 = (__local unsigned char *) color_18071_backing_4;
    color_18072 = (__local unsigned char *) color_18072_backing_5;
    color_18073 = (__local unsigned char *) color_18073_backing_6;
    color_18074 = (__local unsigned char *) color_18074_backing_7;
    color_18075 = (__local unsigned char *) color_18075_backing_8;
    phys_tid_14671 = sext_i32_i64(local_tid_18101);
    red_arr_mem_18158 = (__local unsigned char *) red_arr_mem_18158_backing_9;
    gtid_14667 = sext_i32_i64(sext_i64_i32(ltid_pre_18114));
    gtid_14668 = sext_i32_i64(sext_i64_i32(ltid_pre_18115));
    gtid_14669 = sext_i32_i64(sext_i64_i32(ltid_pre_18116));
    gtid_14670 = sext_i32_i64(sext_i64_i32(ltid_pre_18117));
    if (((slt64(gtid_14667, m_10395) && slt64(gtid_14668, d_10396)) && slt64(gtid_14669, d_10396)) && slt64(gtid_14670, d_10396)) {
        f16 eta_p_14678;
        int64_t binop_x_17232;
        int64_t binop_y_17233;
        int64_t binop_x_17234;
        int64_t binop_x_17235;
        int64_t new_index_17236;
        int64_t binop_y_17248;
        int64_t new_index_17249;
        f16 eta_p_14679;
        f16 defunc_0_f_res_14680;
        float f16_res_14681;
        
        eta_p_14678 = futrts_from_bits16(((__global uint16_t *) Q_mem_17591)[gtid_14662 * (d_10396 * d_10396) + gtid_14668 * d_10396 + gtid_14670]);
        binop_x_17232 = y_14427 * gtid_14667;
        binop_y_17233 = d_10396 * gtid_14669;
        binop_x_17234 = binop_x_17232 + binop_y_17233;
        binop_x_17235 = gtid_14670 + binop_x_17234;
        new_index_17236 = squot64(binop_x_17235, d_10396);
        binop_y_17248 = d_10396 * new_index_17236;
        new_index_17249 = binop_x_17235 - binop_y_17248;
        eta_p_14679 = futrts_from_bits16(((__global uint16_t *) K_mem_17592)[new_index_17236 * d_10396 + new_index_17249]);
        defunc_0_f_res_14680 = eta_p_14678 * eta_p_14679;
        f16_res_14681 = fpconv_f16_f32(defunc_0_f_res_14680);
        ((__local float *) red_arr_mem_18158)[gtid_14667 * (d_10396 * d_10396 * d_10396) + gtid_14668 * (d_10396 * d_10396) + gtid_14669 * d_10396 + gtid_14670] = f16_res_14681;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    dims_flat_18160 = m_10395 * d_10396 * d_10396 * d_10396;
    ltid_in_bounds_18165 = slt64(sext_i32_i64(local_tid_18101), m_10395 * d_10396 * d_10396 * d_10396);
    // read input for in-block scan
    {
        if (ltid_in_bounds_18165) {
            eta_p_14673 = ((volatile __local float *) red_arr_mem_18158)[sext_i32_i64(local_tid_18101)];
            if ((local_tid_18101 - squot32(local_tid_18101, 32) * 32) == 0) {
                eta_p_14672 = eta_p_14673;
            }
        }
    }
    // in-block scan (hopefully no barriers needed)
    {
        skip_threads_18166 = 1;
        while (slt32(skip_threads_18166, 32)) {
            bool thread_active_18167 = sle32(skip_threads_18166, local_tid_18101 - squot32(local_tid_18101, 32) * 32) && ltid_in_bounds_18165;
            
            if (thread_active_18167) {
                // read operands
                {
                    eta_p_14672 = ((volatile __local float *) red_arr_mem_18158)[sext_i32_i64(local_tid_18101) - sext_i32_i64(skip_threads_18166)];
                }
            }
            // perform operation
            {
                bool inactive_18168 = slt64(srem64(sext_i32_i64(local_tid_18101), d_10396), sext_i32_i64(local_tid_18101) - sext_i32_i64(local_tid_18101 - skip_threads_18166));
                
                if (thread_active_18167 && inactive_18168) {
                    eta_p_14672 = eta_p_14673;
                }
                if (thread_active_18167) {
                    if (!inactive_18168) {
                        float defunc_0_op_res_14674 = eta_p_14672 + eta_p_14673;
                        
                        eta_p_14672 = defunc_0_op_res_14674;
                    }
                }
            }
            if (sle32(wave_sizze_18103, skip_threads_18166)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            if (thread_active_18167) {
                // write result
                {
                    ((volatile __local float *) red_arr_mem_18158)[sext_i32_i64(local_tid_18101)] = eta_p_14672;
                    eta_p_14673 = eta_p_14672;
                }
            }
            if (sle32(wave_sizze_18103, skip_threads_18166)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            skip_threads_18166 *= 2;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // last thread of block 'i' writes its result to offset 'i'
    {
        if ((local_tid_18101 - squot32(local_tid_18101, 32) * 32) == 31 && ltid_in_bounds_18165) {
            ((volatile __local float *) red_arr_mem_18158)[sext_i32_i64(squot32(local_tid_18101, 32))] = eta_p_14672;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
    {
        int32_t skip_threads_18169;
        
        // read input for in-block scan
        {
            if (squot32(local_tid_18101, 32) == 0 && ltid_in_bounds_18165) {
                eta_p_18163 = ((volatile __local float *) red_arr_mem_18158)[sext_i32_i64(local_tid_18101)];
                if ((local_tid_18101 - squot32(local_tid_18101, 32) * 32) == 0) {
                    eta_p_18162 = eta_p_18163;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_18169 = 1;
            while (slt32(skip_threads_18169, 32)) {
                bool thread_active_18170 = sle32(skip_threads_18169, local_tid_18101 - squot32(local_tid_18101, 32) * 32) && (squot32(local_tid_18101, 32) == 0 && ltid_in_bounds_18165);
                
                if (thread_active_18170) {
                    // read operands
                    {
                        eta_p_18162 = ((volatile __local float *) red_arr_mem_18158)[sext_i32_i64(local_tid_18101) - sext_i32_i64(skip_threads_18169)];
                    }
                }
                // perform operation
                {
                    bool inactive_18171 = slt64(srem64(sext_i32_i64(local_tid_18101 * 32 + 32 - 1), d_10396), sext_i32_i64(local_tid_18101 * 32 + 32 - 1) - sext_i32_i64((local_tid_18101 - skip_threads_18169) * 32 + 32 - 1));
                    
                    if (thread_active_18170 && inactive_18171) {
                        eta_p_18162 = eta_p_18163;
                    }
                    if (thread_active_18170) {
                        if (!inactive_18171) {
                            float defunc_0_op_res_18164 = eta_p_18162 + eta_p_18163;
                            
                            eta_p_18162 = defunc_0_op_res_18164;
                        }
                    }
                }
                if (sle32(wave_sizze_18103, skip_threads_18169)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (thread_active_18170) {
                    // write result
                    {
                        ((volatile __local float *) red_arr_mem_18158)[sext_i32_i64(local_tid_18101)] = eta_p_18162;
                        eta_p_18163 = eta_p_18162;
                    }
                }
                if (sle32(wave_sizze_18103, skip_threads_18169)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_18169 *= 2;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    no_carry_in_18172 = squot32(local_tid_18101, 32) == 0 || !ltid_in_bounds_18165;
    // carry-in for every block except the first
    {
        // read operands
        {
            if (!no_carry_in_18172) {
                eta_p_14673 = eta_p_14672;
                eta_p_14672 = ((__local float *) red_arr_mem_18158)[sext_i32_i64(squot32(local_tid_18101, 32)) - (int64_t) 1];
            }
        }
        // perform operation
        {
            bool inactive_18173 = slt64(srem64(sext_i32_i64(local_tid_18101), d_10396), sext_i32_i64(local_tid_18101) - sext_i32_i64(squot32(local_tid_18101, 32) * 32 - 1));
            
            if (!no_carry_in_18172) {
                if (inactive_18173) {
                    eta_p_14672 = eta_p_14673;
                }
            }
            if (!no_carry_in_18172) {
                if (!inactive_18173) {
                    float defunc_0_op_res_14674 = eta_p_14672 + eta_p_14673;
                    
                    eta_p_14672 = defunc_0_op_res_14674;
                }
            }
        }
        // write final result
        {
            if (!no_carry_in_18172) {
                ((__local float *) red_arr_mem_18158)[sext_i32_i64(local_tid_18101)] = eta_p_14672;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // restore correct values for first block
    {
        if (squot32(local_tid_18101, 32) == 0 && ltid_in_bounds_18165) {
            ((__local float *) red_arr_mem_18158)[sext_i32_i64(local_tid_18101)] = eta_p_14673;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    barrier(CLK_LOCAL_MEM_FENCE);
    // Save result of reduction.
    {
        int32_t num_chunks_18174 = sdiv_up32(sext_i64_i32(m_10395) * sext_i64_i32(d_10396) * sext_i64_i32(d_10396), sext_i64_i32(computed_tblock_sizze_14283));
        
        for (int32_t chunk_i_18175 = 0; chunk_i_18175 < num_chunks_18174; chunk_i_18175++) {
            int32_t i_18176 = chunk_i_18175 * sext_i64_i32(computed_tblock_sizze_14283) + local_tid_18101;
            
            if (slt32(i_18176, sext_i64_i32(m_10395) * sext_i64_i32(d_10396) * sext_i64_i32(d_10396))) {
                ((__local float *) color_18068)[sext_i32_i64(squot32(i_18176, sext_i64_i32(d_10396) * sext_i64_i32(d_10396))) * (d_10396 * d_10396) + sext_i32_i64(squot32(i_18176 - squot32(i_18176, sext_i64_i32(d_10396) * sext_i64_i32(d_10396)) * (sext_i64_i32(d_10396) * sext_i64_i32(d_10396)), sext_i64_i32(d_10396))) * d_10396 + sext_i32_i64(i_18176 - squot32(i_18176, sext_i64_i32(d_10396) * sext_i64_i32(d_10396)) * (sext_i64_i32(d_10396) * sext_i64_i32(d_10396)) - squot32(i_18176 - squot32(i_18176, sext_i64_i32(d_10396) * sext_i64_i32(d_10396)) * (sext_i64_i32(d_10396) * sext_i64_i32(d_10396)), sext_i64_i32(d_10396)) * sext_i64_i32(d_10396))] = ((__local float *) red_arr_mem_18158)[d_10396 - (int64_t) 1 + sext_i32_i64(squot32(i_18176, sext_i64_i32(d_10396) * sext_i64_i32(d_10396))) * (d_10396 * d_10396 * d_10396) + sext_i32_i64(squot32(i_18176 - squot32(i_18176, sext_i64_i32(d_10396) * sext_i64_i32(d_10396)) * (sext_i64_i32(d_10396) * sext_i64_i32(d_10396)), sext_i64_i32(d_10396))) * (d_10396 * d_10396) + sext_i32_i64(i_18176 - squot32(i_18176, sext_i64_i32(d_10396) * sext_i64_i32(d_10396)) * (sext_i64_i32(d_10396) * sext_i64_i32(d_10396)) - squot32(i_18176 - squot32(i_18176, sext_i64_i32(d_10396) * sext_i64_i32(d_10396)) * (sext_i64_i32(d_10396) * sext_i64_i32(d_10396)), sext_i64_i32(d_10396)) * sext_i64_i32(d_10396)) * d_10396];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    phys_tid_14686 = sext_i32_i64(local_tid_18101);
    gtid_14683 = sext_i32_i64(sext_i64_i32(ltid_pre_18105));
    gtid_14684 = sext_i32_i64(sext_i64_i32(ltid_pre_18106));
    gtid_14685 = sext_i32_i64(sext_i64_i32(ltid_pre_18107));
    if ((slt64(gtid_14683, m_10395) && slt64(gtid_14684, d_10396)) && slt64(gtid_14685, d_10396)) {
        float defunc_0_f_res_14687;
        f16 f32_res_14688;
        
        defunc_0_f_res_14687 = ((__local float *) color_18068)[gtid_14683 * (d_10396 * d_10396) + gtid_14684 * d_10396 + gtid_14685];
        f32_res_14688 = fpconv_f32_f16(defunc_0_f_res_14687);
        ((__local uint16_t *) color_18067)[gtid_14683 * (d_10396 * d_10396) + gtid_14684 * d_10396 + gtid_14685] = futrts_to_bits16(f32_res_14688);
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    num_chunks_18177 = sdiv_up32(sext_i64_i32(m_10395) * sext_i64_i32(d_10396) * sext_i64_i32(d_10396), sext_i64_i32(computed_tblock_sizze_14283));
    for (int32_t chunk_i_18178 = 0; chunk_i_18178 < num_chunks_18177; chunk_i_18178++) {
        int32_t i_18179 = chunk_i_18178 * sext_i64_i32(computed_tblock_sizze_14283) + local_tid_18101;
        
        if (slt32(i_18179, sext_i64_i32(m_10395) * sext_i64_i32(d_10396) * sext_i64_i32(d_10396))) {
            ((__local uint16_t *) color_18075)[sext_i32_i64(squot32(i_18179, sext_i64_i32(d_10396) * sext_i64_i32(d_10396))) * (d_10396 * d_10396) + sext_i32_i64(squot32(i_18179 - squot32(i_18179, sext_i64_i32(d_10396) * sext_i64_i32(d_10396)) * (sext_i64_i32(d_10396) * sext_i64_i32(d_10396)), sext_i64_i32(d_10396))) * d_10396 + sext_i32_i64(i_18179 - squot32(i_18179, sext_i64_i32(d_10396) * sext_i64_i32(d_10396)) * (sext_i64_i32(d_10396) * sext_i64_i32(d_10396)) - squot32(i_18179 - squot32(i_18179, sext_i64_i32(d_10396) * sext_i64_i32(d_10396)) * (sext_i64_i32(d_10396) * sext_i64_i32(d_10396)), sext_i64_i32(d_10396)) * sext_i64_i32(d_10396))] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) color_18067)[sext_i32_i64(squot32(i_18179, sext_i64_i32(d_10396) * sext_i64_i32(d_10396))) * (d_10396 * d_10396) + sext_i32_i64(squot32(i_18179 - squot32(i_18179, sext_i64_i32(d_10396) * sext_i64_i32(d_10396)) * (sext_i64_i32(d_10396) * sext_i64_i32(d_10396)), sext_i64_i32(d_10396))) + sext_i32_i64(i_18179 - squot32(i_18179, sext_i64_i32(d_10396) * sext_i64_i32(d_10396)) * (sext_i64_i32(d_10396) * sext_i64_i32(d_10396)) - squot32(i_18179 - squot32(i_18179, sext_i64_i32(d_10396) * sext_i64_i32(d_10396)) * (sext_i64_i32(d_10396) * sext_i64_i32(d_10396)), sext_i64_i32(d_10396)) * sext_i64_i32(d_10396)) * d_10396]));
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    for (int32_t chunk_i_18182 = 0; chunk_i_18182 < num_chunks_18094; chunk_i_18182++) {
        int32_t i_18183;
        int64_t slice_18184;
        int64_t rep_i_18181;
        int64_t remnant_18185;
        
        i_18183 = chunk_i_18182 * sext_i64_i32(computed_tblock_sizze_14283) + local_tid_18101;
        slice_18184 = d_10396;
        rep_i_18181 = sext_i32_i64(i_18183);
        remnant_18185 = sext_i32_i64(i_18183) - rep_i_18181;
        if (sle64((int64_t) 0, rep_i_18181) && slt64(rep_i_18181, d_10396)) {
            ((__local uint16_t *) color_18068)[rep_i_18181] = futrts_to_bits16((f16) -INFINITY);
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    for (int32_t chunk_i_18188 = 0; chunk_i_18188 < num_chunks_18094; chunk_i_18188++) {
        int32_t i_18189;
        int64_t slice_18190;
        int64_t rep_i_18187;
        int64_t remnant_18191;
        
        i_18189 = chunk_i_18188 * sext_i64_i32(computed_tblock_sizze_14283) + local_tid_18101;
        slice_18190 = d_10396;
        rep_i_18187 = sext_i32_i64(i_18189);
        remnant_18191 = sext_i32_i64(i_18189) - rep_i_18187;
        if (sle64((int64_t) 0, rep_i_18187) && slt64(rep_i_18187, d_10396)) {
            ((__local uint16_t *) color_18067)[rep_i_18187] = futrts_to_bits16((f16) 0.0F);
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    barrier(CLK_LOCAL_MEM_FENCE);
    mem_param_17646 = color_18068;
    mem_param_out_17999 = color_18071;
    mem_param_17649 = color_18067;
    mem_param_out_18008 = color_18070;
    for (int64_t i_14700 = 0; i_14700 < q_11504; i_14700++) {
        int64_t copy2shr_arg0_14703;
        int32_t num_chunks_18198;
        __local unsigned char *ext_mem_17659;
        int64_t phys_tid_14716;
        __local unsigned char *red_arr_mem_18204;
        int64_t gtid_14714;
        int64_t gtid_14715;
        int64_t dims_flat_18207;
        f16 eta_p_14717;
        f16 eta_p_14718;
        f16 eta_p_18209;
        f16 eta_p_18210;
        bool ltid_in_bounds_18212;
        int32_t skip_threads_18213;
        bool no_carry_in_18219;
        int64_t phys_tid_14732;
        __local unsigned char *red_arr_mem_18224;
        int64_t gtid_14730;
        int64_t gtid_14731;
        int64_t dims_flat_18227;
        f16 eta_p_14733;
        f16 eta_p_14734;
        f16 eta_p_18229;
        f16 eta_p_18230;
        bool ltid_in_bounds_18232;
        int32_t skip_threads_18233;
        bool no_carry_in_18239;
        int64_t phys_tid_14751;
        int64_t gtid_14750;
        __local unsigned char *mem_param_tmp_18192;
        __local unsigned char *mem_param_out_tmp_18193;
        __local unsigned char *mem_param_tmp_18194;
        __local unsigned char *mem_param_out_tmp_18195;
        
        copy2shr_arg0_14703 = mul64((int64_t) 1024, i_14700);
        num_chunks_18198 = sdiv_up32(sext_i64_i32(d_10396) * 1024, sext_i64_i32(computed_tblock_sizze_14283));
        for (int32_t chunk_i_18199 = 0; chunk_i_18199 < num_chunks_18198; chunk_i_18199++) {
            int32_t i_18200 = chunk_i_18199 * sext_i64_i32(computed_tblock_sizze_14283) + local_tid_18101;
            
            if (slt32(i_18200, sext_i64_i32(d_10396) * 1024)) {
                ((__local uint16_t *) color_18069)[sext_i32_i64(squot32(i_18200, 1024)) * (int64_t) 1024 + sext_i32_i64(i_18200 - squot32(i_18200, 1024) * 1024)] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) color_18075)[d_10396 * copy2shr_arg0_14703 + sext_i32_i64(squot32(i_18200, 1024)) + sext_i32_i64(i_18200 - squot32(i_18200, 1024) * 1024) * d_10396]));
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_LOCAL_MEM_FENCE);
        if (opaque_res_11508) {
            int32_t num_chunks_18201 = sdiv_up32(sext_i64_i32(d_10396) * 1024, sext_i64_i32(computed_tblock_sizze_14283));
            
            for (int32_t chunk_i_18202 = 0; chunk_i_18202 < num_chunks_18201; chunk_i_18202++) {
                int32_t i_18203 = chunk_i_18202 * sext_i64_i32(computed_tblock_sizze_14283) + local_tid_18101;
                
                if (slt32(i_18203, sext_i64_i32(d_10396) * 1024)) {
                    ((__local uint16_t *) color_18073)[sext_i32_i64(squot32(i_18203, 1024)) * (int64_t) 1024 + sext_i32_i64(i_18203 - squot32(i_18203, 1024) * 1024)] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) color_18075)[d_10396 * copy2shr_arg0_14703 + sext_i32_i64(squot32(i_18203, 1024)) + sext_i32_i64(i_18203 - squot32(i_18203, 1024) * 1024) * d_10396]));
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            ext_mem_17659 = color_18073;
        } else {
            int64_t phys_tid_14710;
            int64_t gtid_14709;
            
            phys_tid_14710 = sext_i32_i64(local_tid_18101);
            gtid_14709 = sext_i32_i64(sext_i64_i32(ltid_pre_18126));
            if (slt64(gtid_14709, d_10396)) {
                ((__local uint16_t *) color_18069)[gtid_14709 * (int64_t) 1024] = futrts_to_bits16((f16) 0.0F);
                for (int64_t i_0 = 0; i_0 < (int64_t) 1024; i_0++) {
                    ((__local uint16_t *) color_18074)[gtid_14709 * (int64_t) 1024 + i_0] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) color_18069)[gtid_14709 * (int64_t) 1024 + i_0]));
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            ext_mem_17659 = color_18074;
        }
        phys_tid_14716 = sext_i32_i64(local_tid_18101);
        red_arr_mem_18204 = (__local unsigned char *) red_arr_mem_18204_backing_10;
        gtid_14714 = sext_i32_i64(sext_i64_i32(ltid_pre_18129));
        gtid_14715 = sext_i32_i64(sext_i64_i32(ltid_pre_18130));
        if (slt64(gtid_14714, d_10396) && slt64(gtid_14715, (int64_t) 32)) {
            f16 defunc_0_f_res_14722;
            f16 r_14724 = (f16) -INFINITY;
            
            for (int64_t i_14723 = 0; i_14723 < (int64_t) 32; i_14723++) {
                int64_t zp_lhs_14725;
                int64_t f_arg0_14726;
                f16 f_arg0_14727;
                f16 max_res_14728;
                f16 r_tmp_18206;
                
                zp_lhs_14725 = mul64((int64_t) 32, i_14723);
                f_arg0_14726 = add64(gtid_14715, zp_lhs_14725);
                f_arg0_14727 = futrts_from_bits16(((__local uint16_t *) ext_mem_17659)[gtid_14714 * (int64_t) 1024 + f_arg0_14726]);
                max_res_14728 = fmax16(r_14724, f_arg0_14727);
                r_tmp_18206 = max_res_14728;
                r_14724 = r_tmp_18206;
            }
            defunc_0_f_res_14722 = r_14724;
            ((__local uint16_t *) red_arr_mem_18204)[gtid_14714 * (int64_t) 32 + gtid_14715] = futrts_to_bits16(defunc_0_f_res_14722);
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        dims_flat_18207 = d_10396 * (int64_t) 32;
        ltid_in_bounds_18212 = slt64(sext_i32_i64(local_tid_18101), d_10396 * (int64_t) 32);
        // read input for in-block scan
        {
            if (ltid_in_bounds_18212) {
                eta_p_14718 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18204)[sext_i32_i64(local_tid_18101)]);
                if ((local_tid_18101 - squot32(local_tid_18101, 32) * 32) == 0) {
                    eta_p_14717 = eta_p_14718;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_18213 = 1;
            while (slt32(skip_threads_18213, 32)) {
                bool thread_active_18214 = sle32(skip_threads_18213, local_tid_18101 - squot32(local_tid_18101, 32) * 32) && ltid_in_bounds_18212;
                
                if (thread_active_18214) {
                    // read operands
                    {
                        eta_p_14717 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18204)[sext_i32_i64(local_tid_18101) - sext_i32_i64(skip_threads_18213)]);
                    }
                }
                // perform operation
                {
                    bool inactive_18215 = slt64(srem64(sext_i32_i64(local_tid_18101), (int64_t) 32), sext_i32_i64(local_tid_18101) - sext_i32_i64(local_tid_18101 - skip_threads_18213));
                    
                    if (thread_active_18214 && inactive_18215) {
                        eta_p_14717 = eta_p_14718;
                    }
                    if (thread_active_18214) {
                        if (!inactive_18215) {
                            f16 max_res_14719 = fmax16(eta_p_14717, eta_p_14718);
                            
                            eta_p_14717 = max_res_14719;
                        }
                    }
                }
                if (sle32(wave_sizze_18103, skip_threads_18213)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (thread_active_18214) {
                    // write result
                    {
                        ((volatile __local uint16_t *) red_arr_mem_18204)[sext_i32_i64(local_tid_18101)] = futrts_to_bits16(eta_p_14717);
                        eta_p_14718 = eta_p_14717;
                    }
                }
                if (sle32(wave_sizze_18103, skip_threads_18213)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_18213 *= 2;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // last thread of block 'i' writes its result to offset 'i'
        {
            if ((local_tid_18101 - squot32(local_tid_18101, 32) * 32) == 31 && ltid_in_bounds_18212) {
                ((volatile __local uint16_t *) red_arr_mem_18204)[sext_i32_i64(squot32(local_tid_18101, 32))] = futrts_to_bits16(eta_p_14717);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
        {
            int32_t skip_threads_18216;
            
            // read input for in-block scan
            {
                if (squot32(local_tid_18101, 32) == 0 && ltid_in_bounds_18212) {
                    eta_p_18210 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18204)[sext_i32_i64(local_tid_18101)]);
                    if ((local_tid_18101 - squot32(local_tid_18101, 32) * 32) == 0) {
                        eta_p_18209 = eta_p_18210;
                    }
                }
            }
            // in-block scan (hopefully no barriers needed)
            {
                skip_threads_18216 = 1;
                while (slt32(skip_threads_18216, 32)) {
                    bool thread_active_18217 = sle32(skip_threads_18216, local_tid_18101 - squot32(local_tid_18101, 32) * 32) && (squot32(local_tid_18101, 32) == 0 && ltid_in_bounds_18212);
                    
                    if (thread_active_18217) {
                        // read operands
                        {
                            eta_p_18209 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18204)[sext_i32_i64(local_tid_18101) - sext_i32_i64(skip_threads_18216)]);
                        }
                    }
                    // perform operation
                    {
                        bool inactive_18218 = slt64(srem64(sext_i32_i64(local_tid_18101 * 32 + 32 - 1), (int64_t) 32), sext_i32_i64(local_tid_18101 * 32 + 32 - 1) - sext_i32_i64((local_tid_18101 - skip_threads_18216) * 32 + 32 - 1));
                        
                        if (thread_active_18217 && inactive_18218) {
                            eta_p_18209 = eta_p_18210;
                        }
                        if (thread_active_18217) {
                            if (!inactive_18218) {
                                f16 max_res_18211 = fmax16(eta_p_18209, eta_p_18210);
                                
                                eta_p_18209 = max_res_18211;
                            }
                        }
                    }
                    if (sle32(wave_sizze_18103, skip_threads_18216)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    if (thread_active_18217) {
                        // write result
                        {
                            ((volatile __local uint16_t *) red_arr_mem_18204)[sext_i32_i64(local_tid_18101)] = futrts_to_bits16(eta_p_18209);
                            eta_p_18210 = eta_p_18209;
                        }
                    }
                    if (sle32(wave_sizze_18103, skip_threads_18216)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    skip_threads_18216 *= 2;
                }
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        no_carry_in_18219 = squot32(local_tid_18101, 32) == 0 || !ltid_in_bounds_18212;
        // carry-in for every block except the first
        {
            // read operands
            {
                if (!no_carry_in_18219) {
                    eta_p_14718 = eta_p_14717;
                    eta_p_14717 = futrts_from_bits16(((__local uint16_t *) red_arr_mem_18204)[sext_i32_i64(squot32(local_tid_18101, 32)) - (int64_t) 1]);
                }
            }
            // perform operation
            {
                bool inactive_18220 = slt64(srem64(sext_i32_i64(local_tid_18101), (int64_t) 32), sext_i32_i64(local_tid_18101) - sext_i32_i64(squot32(local_tid_18101, 32) * 32 - 1));
                
                if (!no_carry_in_18219) {
                    if (inactive_18220) {
                        eta_p_14717 = eta_p_14718;
                    }
                }
                if (!no_carry_in_18219) {
                    if (!inactive_18220) {
                        f16 max_res_14719 = fmax16(eta_p_14717, eta_p_14718);
                        
                        eta_p_14717 = max_res_14719;
                    }
                }
            }
            // write final result
            {
                if (!no_carry_in_18219) {
                    ((__local uint16_t *) red_arr_mem_18204)[sext_i32_i64(local_tid_18101)] = futrts_to_bits16(eta_p_14717);
                }
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // restore correct values for first block
        {
            if (squot32(local_tid_18101, 32) == 0 && ltid_in_bounds_18212) {
                ((__local uint16_t *) red_arr_mem_18204)[sext_i32_i64(local_tid_18101)] = futrts_to_bits16(eta_p_14718);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_LOCAL_MEM_FENCE);
        // Save result of reduction.
        {
            int32_t num_chunks_18221 = sdiv_up32(sext_i64_i32(d_10396), sext_i64_i32(computed_tblock_sizze_14283));
            
            for (int32_t chunk_i_18222 = 0; chunk_i_18222 < num_chunks_18221; chunk_i_18222++) {
                int32_t i_18223 = chunk_i_18222 * sext_i64_i32(computed_tblock_sizze_14283) + local_tid_18101;
                
                if (slt32(i_18223, sext_i64_i32(d_10396))) {
                    ((__local uint16_t *) color_18072)[sext_i32_i64(i_18223)] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) red_arr_mem_18204)[(int64_t) 31 + sext_i32_i64(i_18223) * (int64_t) 32]));
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        phys_tid_14732 = sext_i32_i64(local_tid_18101);
        red_arr_mem_18224 = (__local unsigned char *) red_arr_mem_18224_backing_11;
        gtid_14730 = sext_i32_i64(sext_i64_i32(ltid_pre_18129));
        gtid_14731 = sext_i32_i64(sext_i64_i32(ltid_pre_18130));
        if (slt64(gtid_14730, d_10396) && slt64(gtid_14731, (int64_t) 32)) {
            f16 defunc_0_reduce_comm_res_14737;
            f16 defunc_0_f_res_14739;
            f16 r_14741;
            
            defunc_0_reduce_comm_res_14737 = futrts_from_bits16(((__local uint16_t *) color_18072)[gtid_14730]);
            r_14741 = (f16) 0.0F;
            for (int64_t i_14740 = 0; i_14740 < (int64_t) 32; i_14740++) {
                int64_t zp_lhs_14742;
                int64_t f_arg0_14743;
                f16 f_arg0_14744;
                f16 real_exp_arg0_14745;
                f16 exp_res_14746;
                f16 defunc_0_bop_res_14747;
                f16 r_tmp_18226;
                
                zp_lhs_14742 = mul64((int64_t) 32, i_14740);
                f_arg0_14743 = add64(gtid_14731, zp_lhs_14742);
                f_arg0_14744 = futrts_from_bits16(((__local uint16_t *) ext_mem_17659)[gtid_14730 * (int64_t) 1024 + f_arg0_14743]);
                real_exp_arg0_14745 = f_arg0_14744 - defunc_0_reduce_comm_res_14737;
                exp_res_14746 = futrts_exp16(real_exp_arg0_14745);
                defunc_0_bop_res_14747 = r_14741 + exp_res_14746;
                r_tmp_18226 = defunc_0_bop_res_14747;
                r_14741 = r_tmp_18226;
            }
            defunc_0_f_res_14739 = r_14741;
            ((__local uint16_t *) red_arr_mem_18224)[gtid_14730 * (int64_t) 32 + gtid_14731] = futrts_to_bits16(defunc_0_f_res_14739);
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        dims_flat_18227 = d_10396 * (int64_t) 32;
        ltid_in_bounds_18232 = slt64(sext_i32_i64(local_tid_18101), d_10396 * (int64_t) 32);
        // read input for in-block scan
        {
            if (ltid_in_bounds_18232) {
                eta_p_14734 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18224)[sext_i32_i64(local_tid_18101)]);
                if ((local_tid_18101 - squot32(local_tid_18101, 32) * 32) == 0) {
                    eta_p_14733 = eta_p_14734;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_18233 = 1;
            while (slt32(skip_threads_18233, 32)) {
                bool thread_active_18234 = sle32(skip_threads_18233, local_tid_18101 - squot32(local_tid_18101, 32) * 32) && ltid_in_bounds_18232;
                
                if (thread_active_18234) {
                    // read operands
                    {
                        eta_p_14733 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18224)[sext_i32_i64(local_tid_18101) - sext_i32_i64(skip_threads_18233)]);
                    }
                }
                // perform operation
                {
                    bool inactive_18235 = slt64(srem64(sext_i32_i64(local_tid_18101), (int64_t) 32), sext_i32_i64(local_tid_18101) - sext_i32_i64(local_tid_18101 - skip_threads_18233));
                    
                    if (thread_active_18234 && inactive_18235) {
                        eta_p_14733 = eta_p_14734;
                    }
                    if (thread_active_18234) {
                        if (!inactive_18235) {
                            f16 defunc_0_op_res_14735 = eta_p_14733 + eta_p_14734;
                            
                            eta_p_14733 = defunc_0_op_res_14735;
                        }
                    }
                }
                if (sle32(wave_sizze_18103, skip_threads_18233)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (thread_active_18234) {
                    // write result
                    {
                        ((volatile __local uint16_t *) red_arr_mem_18224)[sext_i32_i64(local_tid_18101)] = futrts_to_bits16(eta_p_14733);
                        eta_p_14734 = eta_p_14733;
                    }
                }
                if (sle32(wave_sizze_18103, skip_threads_18233)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_18233 *= 2;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // last thread of block 'i' writes its result to offset 'i'
        {
            if ((local_tid_18101 - squot32(local_tid_18101, 32) * 32) == 31 && ltid_in_bounds_18232) {
                ((volatile __local uint16_t *) red_arr_mem_18224)[sext_i32_i64(squot32(local_tid_18101, 32))] = futrts_to_bits16(eta_p_14733);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
        {
            int32_t skip_threads_18236;
            
            // read input for in-block scan
            {
                if (squot32(local_tid_18101, 32) == 0 && ltid_in_bounds_18232) {
                    eta_p_18230 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18224)[sext_i32_i64(local_tid_18101)]);
                    if ((local_tid_18101 - squot32(local_tid_18101, 32) * 32) == 0) {
                        eta_p_18229 = eta_p_18230;
                    }
                }
            }
            // in-block scan (hopefully no barriers needed)
            {
                skip_threads_18236 = 1;
                while (slt32(skip_threads_18236, 32)) {
                    bool thread_active_18237 = sle32(skip_threads_18236, local_tid_18101 - squot32(local_tid_18101, 32) * 32) && (squot32(local_tid_18101, 32) == 0 && ltid_in_bounds_18232);
                    
                    if (thread_active_18237) {
                        // read operands
                        {
                            eta_p_18229 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18224)[sext_i32_i64(local_tid_18101) - sext_i32_i64(skip_threads_18236)]);
                        }
                    }
                    // perform operation
                    {
                        bool inactive_18238 = slt64(srem64(sext_i32_i64(local_tid_18101 * 32 + 32 - 1), (int64_t) 32), sext_i32_i64(local_tid_18101 * 32 + 32 - 1) - sext_i32_i64((local_tid_18101 - skip_threads_18236) * 32 + 32 - 1));
                        
                        if (thread_active_18237 && inactive_18238) {
                            eta_p_18229 = eta_p_18230;
                        }
                        if (thread_active_18237) {
                            if (!inactive_18238) {
                                f16 defunc_0_op_res_18231 = eta_p_18229 + eta_p_18230;
                                
                                eta_p_18229 = defunc_0_op_res_18231;
                            }
                        }
                    }
                    if (sle32(wave_sizze_18103, skip_threads_18236)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    if (thread_active_18237) {
                        // write result
                        {
                            ((volatile __local uint16_t *) red_arr_mem_18224)[sext_i32_i64(local_tid_18101)] = futrts_to_bits16(eta_p_18229);
                            eta_p_18230 = eta_p_18229;
                        }
                    }
                    if (sle32(wave_sizze_18103, skip_threads_18236)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    skip_threads_18236 *= 2;
                }
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        no_carry_in_18239 = squot32(local_tid_18101, 32) == 0 || !ltid_in_bounds_18232;
        // carry-in for every block except the first
        {
            // read operands
            {
                if (!no_carry_in_18239) {
                    eta_p_14734 = eta_p_14733;
                    eta_p_14733 = futrts_from_bits16(((__local uint16_t *) red_arr_mem_18224)[sext_i32_i64(squot32(local_tid_18101, 32)) - (int64_t) 1]);
                }
            }
            // perform operation
            {
                bool inactive_18240 = slt64(srem64(sext_i32_i64(local_tid_18101), (int64_t) 32), sext_i32_i64(local_tid_18101) - sext_i32_i64(squot32(local_tid_18101, 32) * 32 - 1));
                
                if (!no_carry_in_18239) {
                    if (inactive_18240) {
                        eta_p_14733 = eta_p_14734;
                    }
                }
                if (!no_carry_in_18239) {
                    if (!inactive_18240) {
                        f16 defunc_0_op_res_14735 = eta_p_14733 + eta_p_14734;
                        
                        eta_p_14733 = defunc_0_op_res_14735;
                    }
                }
            }
            // write final result
            {
                if (!no_carry_in_18239) {
                    ((__local uint16_t *) red_arr_mem_18224)[sext_i32_i64(local_tid_18101)] = futrts_to_bits16(eta_p_14733);
                }
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // restore correct values for first block
        {
            if (squot32(local_tid_18101, 32) == 0 && ltid_in_bounds_18232) {
                ((__local uint16_t *) red_arr_mem_18224)[sext_i32_i64(local_tid_18101)] = futrts_to_bits16(eta_p_14734);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_LOCAL_MEM_FENCE);
        // Save result of reduction.
        {
            int32_t num_chunks_18241 = sdiv_up32(sext_i64_i32(d_10396), sext_i64_i32(computed_tblock_sizze_14283));
            
            for (int32_t chunk_i_18242 = 0; chunk_i_18242 < num_chunks_18241; chunk_i_18242++) {
                int32_t i_18243 = chunk_i_18242 * sext_i64_i32(computed_tblock_sizze_14283) + local_tid_18101;
                
                if (slt32(i_18243, sext_i64_i32(d_10396))) {
                    ((__local uint16_t *) color_18069)[sext_i32_i64(i_18243)] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) red_arr_mem_18224)[(int64_t) 31 + sext_i32_i64(i_18243) * (int64_t) 32]));
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        phys_tid_14751 = sext_i32_i64(local_tid_18101);
        gtid_14750 = sext_i32_i64(sext_i64_i32(ltid_pre_18126));
        if (slt64(gtid_14750, d_10396)) {
            f16 mi_old_14752;
            f16 li_old_14753;
            f16 defunc_0_reduce_comm_res_14754;
            f16 defunc_0_reduce_comm_res_14755;
            f16 max_res_14756;
            f16 real_exp_arg0_14757;
            f16 exp_res_14758;
            f16 exp_arg0_14759;
            f16 exp_res_14760;
            f16 eli_14761;
            f16 zp_rhs_14762;
            f16 li_new_14763;
            
            mi_old_14752 = futrts_from_bits16(((__local uint16_t *) mem_param_17646)[gtid_14750]);
            li_old_14753 = futrts_from_bits16(((__local uint16_t *) mem_param_17649)[gtid_14750]);
            defunc_0_reduce_comm_res_14754 = futrts_from_bits16(((__local uint16_t *) color_18072)[gtid_14750]);
            defunc_0_reduce_comm_res_14755 = futrts_from_bits16(((__local uint16_t *) color_18069)[gtid_14750]);
            max_res_14756 = fmax16(mi_old_14752, defunc_0_reduce_comm_res_14754);
            real_exp_arg0_14757 = defunc_0_reduce_comm_res_14754 - max_res_14756;
            exp_res_14758 = futrts_exp16(real_exp_arg0_14757);
            exp_arg0_14759 = mi_old_14752 - max_res_14756;
            exp_res_14760 = futrts_exp16(exp_arg0_14759);
            eli_14761 = li_old_14753 * exp_res_14760;
            zp_rhs_14762 = defunc_0_reduce_comm_res_14755 * exp_res_14758;
            li_new_14763 = eli_14761 + zp_rhs_14762;
            ((__local uint16_t *) mem_param_out_17999)[gtid_14750] = futrts_to_bits16(max_res_14756);
            ((__local uint16_t *) mem_param_out_18008)[gtid_14750] = futrts_to_bits16(li_new_14763);
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        mem_param_tmp_18192 = mem_param_out_17999;
        mem_param_out_tmp_18193 = mem_param_17646;
        mem_param_tmp_18194 = mem_param_out_18008;
        mem_param_out_tmp_18195 = mem_param_17649;
        mem_param_17646 = mem_param_tmp_18192;
        mem_param_out_17999 = mem_param_out_tmp_18193;
        mem_param_17649 = mem_param_tmp_18194;
        mem_param_out_18008 = mem_param_out_tmp_18195;
    }
    ext_mem_17673 = mem_param_17646;
    ext_mem_unused_17998 = mem_param_out_17999;
    ext_mem_17672 = mem_param_17649;
    ext_mem_unused_18007 = mem_param_out_18008;
    phys_tid_14769 = sext_i32_i64(local_tid_18101);
    gtid_14767 = sext_i32_i64(sext_i64_i32(ltid_pre_18150));
    gtid_14768 = sext_i32_i64(sext_i64_i32(ltid_pre_18151));
    if (slt64(gtid_14767, d_10396) && slt64(gtid_14768, dzlz7bUZLztZRz20Umz20Udz7dUzg_10397)) {
        f16 eta_p_14770;
        f16 eta_p_14771;
        f16 eta_p_14772;
        f16 real_exp_arg0_14773;
        f16 exp_res_14774;
        f16 lifted_lambda_res_14775;
        
        eta_p_14770 = futrts_from_bits16(((__local uint16_t *) ext_mem_17673)[gtid_14767]);
        eta_p_14771 = futrts_from_bits16(((__local uint16_t *) ext_mem_17672)[gtid_14767]);
        eta_p_14772 = futrts_from_bits16(((__local uint16_t *) color_18075)[gtid_14767 + gtid_14768 * d_10396]);
        real_exp_arg0_14773 = eta_p_14772 - eta_p_14770;
        exp_res_14774 = futrts_exp16(real_exp_arg0_14773);
        lifted_lambda_res_14775 = exp_res_14774 / eta_p_14771;
        ((__local uint16_t *) color_18069)[gtid_14767 * dzlz7bUZLztZRz20Umz20Udz7dUzg_10397 + gtid_14768] = futrts_to_bits16(lifted_lambda_res_14775);
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    phys_tid_14781 = sext_i32_i64(local_tid_18101);
    red_arr_mem_18244 = (__local unsigned char *) red_arr_mem_18244_backing_12;
    gtid_14778 = sext_i32_i64(sext_i64_i32(ltid_pre_18141));
    gtid_14779 = sext_i32_i64(sext_i64_i32(ltid_pre_18142));
    gtid_14780 = sext_i32_i64(sext_i64_i32(ltid_pre_18143));
    if ((slt64(gtid_14778, d_10396) && slt64(gtid_14779, d_10396)) && slt64(gtid_14780, dzlz7bUZLztZRz20Umz20Udz7dUzg_10397)) {
        f16 eta_p_14787;
        f16 eta_p_14788;
        f16 defunc_0_f_res_14789;
        
        eta_p_14787 = futrts_from_bits16(((__local uint16_t *) color_18069)[gtid_14778 * dzlz7bUZLztZRz20Umz20Udz7dUzg_10397 + gtid_14780]);
        eta_p_14788 = futrts_from_bits16(((__global uint16_t *) V_mem_17593)[gtid_14780 * d_10396 + gtid_14779]);
        defunc_0_f_res_14789 = eta_p_14787 * eta_p_14788;
        ((__local uint16_t *) red_arr_mem_18244)[gtid_14778 * (dzlz7bUZLztZRz20Umz20Udz7dUzg_10397 * d_10396) + gtid_14779 * dzlz7bUZLztZRz20Umz20Udz7dUzg_10397 + gtid_14780] = futrts_to_bits16(defunc_0_f_res_14789);
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    dims_flat_18246 = d_10396 * d_10396 * dzlz7bUZLztZRz20Umz20Udz7dUzg_10397;
    ltid_in_bounds_18251 = slt64(sext_i32_i64(local_tid_18101), d_10396 * d_10396 * dzlz7bUZLztZRz20Umz20Udz7dUzg_10397);
    // read input for in-block scan
    {
        if (ltid_in_bounds_18251) {
            eta_p_14783 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18244)[sext_i32_i64(local_tid_18101)]);
            if ((local_tid_18101 - squot32(local_tid_18101, 32) * 32) == 0) {
                eta_p_14782 = eta_p_14783;
            }
        }
    }
    // in-block scan (hopefully no barriers needed)
    {
        skip_threads_18252 = 1;
        while (slt32(skip_threads_18252, 32)) {
            bool thread_active_18253 = sle32(skip_threads_18252, local_tid_18101 - squot32(local_tid_18101, 32) * 32) && ltid_in_bounds_18251;
            
            if (thread_active_18253) {
                // read operands
                {
                    eta_p_14782 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18244)[sext_i32_i64(local_tid_18101) - sext_i32_i64(skip_threads_18252)]);
                }
            }
            // perform operation
            {
                bool inactive_18254 = slt64(srem64(sext_i32_i64(local_tid_18101), dzlz7bUZLztZRz20Umz20Udz7dUzg_10397), sext_i32_i64(local_tid_18101) - sext_i32_i64(local_tid_18101 - skip_threads_18252));
                
                if (thread_active_18253 && inactive_18254) {
                    eta_p_14782 = eta_p_14783;
                }
                if (thread_active_18253) {
                    if (!inactive_18254) {
                        f16 defunc_0_op_res_14784 = eta_p_14782 + eta_p_14783;
                        
                        eta_p_14782 = defunc_0_op_res_14784;
                    }
                }
            }
            if (sle32(wave_sizze_18103, skip_threads_18252)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            if (thread_active_18253) {
                // write result
                {
                    ((volatile __local uint16_t *) red_arr_mem_18244)[sext_i32_i64(local_tid_18101)] = futrts_to_bits16(eta_p_14782);
                    eta_p_14783 = eta_p_14782;
                }
            }
            if (sle32(wave_sizze_18103, skip_threads_18252)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            skip_threads_18252 *= 2;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // last thread of block 'i' writes its result to offset 'i'
    {
        if ((local_tid_18101 - squot32(local_tid_18101, 32) * 32) == 31 && ltid_in_bounds_18251) {
            ((volatile __local uint16_t *) red_arr_mem_18244)[sext_i32_i64(squot32(local_tid_18101, 32))] = futrts_to_bits16(eta_p_14782);
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
    {
        int32_t skip_threads_18255;
        
        // read input for in-block scan
        {
            if (squot32(local_tid_18101, 32) == 0 && ltid_in_bounds_18251) {
                eta_p_18249 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18244)[sext_i32_i64(local_tid_18101)]);
                if ((local_tid_18101 - squot32(local_tid_18101, 32) * 32) == 0) {
                    eta_p_18248 = eta_p_18249;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_18255 = 1;
            while (slt32(skip_threads_18255, 32)) {
                bool thread_active_18256 = sle32(skip_threads_18255, local_tid_18101 - squot32(local_tid_18101, 32) * 32) && (squot32(local_tid_18101, 32) == 0 && ltid_in_bounds_18251);
                
                if (thread_active_18256) {
                    // read operands
                    {
                        eta_p_18248 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18244)[sext_i32_i64(local_tid_18101) - sext_i32_i64(skip_threads_18255)]);
                    }
                }
                // perform operation
                {
                    bool inactive_18257 = slt64(srem64(sext_i32_i64(local_tid_18101 * 32 + 32 - 1), dzlz7bUZLztZRz20Umz20Udz7dUzg_10397), sext_i32_i64(local_tid_18101 * 32 + 32 - 1) - sext_i32_i64((local_tid_18101 - skip_threads_18255) * 32 + 32 - 1));
                    
                    if (thread_active_18256 && inactive_18257) {
                        eta_p_18248 = eta_p_18249;
                    }
                    if (thread_active_18256) {
                        if (!inactive_18257) {
                            f16 defunc_0_op_res_18250 = eta_p_18248 + eta_p_18249;
                            
                            eta_p_18248 = defunc_0_op_res_18250;
                        }
                    }
                }
                if (sle32(wave_sizze_18103, skip_threads_18255)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (thread_active_18256) {
                    // write result
                    {
                        ((volatile __local uint16_t *) red_arr_mem_18244)[sext_i32_i64(local_tid_18101)] = futrts_to_bits16(eta_p_18248);
                        eta_p_18249 = eta_p_18248;
                    }
                }
                if (sle32(wave_sizze_18103, skip_threads_18255)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_18255 *= 2;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    no_carry_in_18258 = squot32(local_tid_18101, 32) == 0 || !ltid_in_bounds_18251;
    // carry-in for every block except the first
    {
        // read operands
        {
            if (!no_carry_in_18258) {
                eta_p_14783 = eta_p_14782;
                eta_p_14782 = futrts_from_bits16(((__local uint16_t *) red_arr_mem_18244)[sext_i32_i64(squot32(local_tid_18101, 32)) - (int64_t) 1]);
            }
        }
        // perform operation
        {
            bool inactive_18259 = slt64(srem64(sext_i32_i64(local_tid_18101), dzlz7bUZLztZRz20Umz20Udz7dUzg_10397), sext_i32_i64(local_tid_18101) - sext_i32_i64(squot32(local_tid_18101, 32) * 32 - 1));
            
            if (!no_carry_in_18258) {
                if (inactive_18259) {
                    eta_p_14782 = eta_p_14783;
                }
            }
            if (!no_carry_in_18258) {
                if (!inactive_18259) {
                    f16 defunc_0_op_res_14784 = eta_p_14782 + eta_p_14783;
                    
                    eta_p_14782 = defunc_0_op_res_14784;
                }
            }
        }
        // write final result
        {
            if (!no_carry_in_18258) {
                ((__local uint16_t *) red_arr_mem_18244)[sext_i32_i64(local_tid_18101)] = futrts_to_bits16(eta_p_14782);
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // restore correct values for first block
    {
        if (squot32(local_tid_18101, 32) == 0 && ltid_in_bounds_18251) {
            ((__local uint16_t *) red_arr_mem_18244)[sext_i32_i64(local_tid_18101)] = futrts_to_bits16(eta_p_14783);
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    barrier(CLK_LOCAL_MEM_FENCE);
    // Save result of reduction.
    {
        int32_t num_chunks_18260 = sdiv_up32(sext_i64_i32(d_10396) * sext_i64_i32(d_10396), sext_i64_i32(computed_tblock_sizze_14283));
        
        for (int32_t chunk_i_18261 = 0; chunk_i_18261 < num_chunks_18260; chunk_i_18261++) {
            int32_t i_18262 = chunk_i_18261 * sext_i64_i32(computed_tblock_sizze_14283) + local_tid_18101;
            
            if (slt32(i_18262, sext_i64_i32(d_10396) * sext_i64_i32(d_10396))) {
                ((__local uint16_t *) color_18067)[sext_i32_i64(squot32(i_18262, sext_i64_i32(d_10396))) * d_10396 + sext_i32_i64(i_18262 - squot32(i_18262, sext_i64_i32(d_10396)) * sext_i64_i32(d_10396))] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) red_arr_mem_18244)[dzlz7bUZLztZRz20Umz20Udz7dUzg_10397 - (int64_t) 1 + sext_i32_i64(squot32(i_18262, sext_i64_i32(d_10396))) * (dzlz7bUZLztZRz20Umz20Udz7dUzg_10397 * d_10396) + sext_i32_i64(i_18262 - squot32(i_18262, sext_i64_i32(d_10396)) * sext_i64_i32(d_10396)) * dzlz7bUZLztZRz20Umz20Udz7dUzg_10397]));
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    num_chunks_18263 = sdiv_up32(sext_i64_i32(d_10396) * sext_i64_i32(d_10396), sext_i64_i32(computed_tblock_sizze_14283));
    for (int32_t chunk_i_18264 = 0; chunk_i_18264 < num_chunks_18263; chunk_i_18264++) {
        int32_t i_18265 = chunk_i_18264 * sext_i64_i32(computed_tblock_sizze_14283) + local_tid_18101;
        
        if (slt32(i_18265, sext_i64_i32(d_10396) * sext_i64_i32(d_10396))) {
            ((__global uint16_t *) mem_17683)[gtid_14662 * (d_10396 * d_10396) + sext_i32_i64(squot32(i_18265, sext_i64_i32(d_10396))) * d_10396 + sext_i32_i64(i_18265 - squot32(i_18265, sext_i64_i32(d_10396)) * sext_i64_i32(d_10396))] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) color_18067)[sext_i32_i64(squot32(i_18265, sext_i64_i32(d_10396))) * d_10396 + sext_i32_i64(i_18265 - squot32(i_18265, sext_i64_i32(d_10396)) * sext_i64_i32(d_10396))]));
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
  error_18:
    return;
}
FUTHARK_KERNEL
void thesislike128zisegmap_intrablock_15103(__global int *global_failure, int64_t m_10395, int64_t d_10396, int64_t y_14427, int64_t computed_tblock_sizze_15097, int64_t bytes_17596, int64_t bytes_17599, __global unsigned char *Q_mem_17591, __global unsigned char *K_mem_17592, __global unsigned char *mem_17605)
{
    volatile __local unsigned char *red_arr_mem_18293_backing_2 = &shared_mem[0];
    const int64_t red_arr_mem_18293_backing_2_offset = 0 + ((int64_t) 4 * (d_10396 * d_10396 * d_10396) + srem64((int64_t) 8 - srem64((int64_t) 4 * (d_10396 * d_10396 * d_10396), (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_18077_backing_1 = &shared_mem[red_arr_mem_18293_backing_2_offset];
    const int64_t color_18077_backing_1_offset = red_arr_mem_18293_backing_2_offset + (bytes_17596 + srem64((int64_t) 8 - srem64(bytes_17596, (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_18076_backing_0 = &shared_mem[color_18077_backing_1_offset];
    const int64_t color_18076_backing_0_offset = color_18077_backing_1_offset + (bytes_17599 + srem64((int64_t) 8 - srem64(bytes_17599, (int64_t) 8), (int64_t) 8));
    
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_18270;
    int32_t tblock_sizze_18273;
    int32_t wave_sizze_18272;
    int32_t block_id_18271;
    int32_t global_tid_18269;
    int64_t phys_tblock_id_15103;
    int64_t slice_18276;
    int64_t slice_18277;
    int64_t ltid_pre_18274;
    int64_t remnant_18278;
    int64_t ltid_pre_18275;
    int64_t remnant_18279;
    int64_t slice_18283;
    int64_t slice_18284;
    int64_t slice_18285;
    int64_t ltid_pre_18280;
    int64_t remnant_18286;
    int64_t ltid_pre_18281;
    int64_t remnant_18287;
    int64_t ltid_pre_18282;
    int64_t remnant_18288;
    int64_t slice_18289;
    int64_t slice_18290;
    int64_t gtid_15101;
    int64_t remnant_18291;
    int64_t gtid_15102;
    int64_t remnant_18292;
    __local unsigned char *color_18076;
    __local unsigned char *color_18077;
    int64_t binop_x_17399;
    int64_t phys_tid_15112;
    __local unsigned char *red_arr_mem_18293;
    int64_t gtid_15109;
    int64_t gtid_15110;
    int64_t gtid_15111;
    int64_t dims_flat_18295;
    float eta_p_15113;
    float eta_p_15114;
    float eta_p_18297;
    float eta_p_18298;
    bool ltid_in_bounds_18300;
    int32_t skip_threads_18301;
    bool no_carry_in_18307;
    int64_t phys_tid_15125;
    int64_t gtid_15123;
    int64_t gtid_15124;
    int32_t num_chunks_18312;
    
    local_tid_18270 = get_local_id(0);
    tblock_sizze_18273 = get_local_size(0);
    wave_sizze_18272 = LOCKSTEP_WIDTH;
    block_id_18271 = get_tblock_id(0);
    global_tid_18269 = block_id_18271 * tblock_sizze_18273 + local_tid_18270;
    phys_tblock_id_15103 = sext_i32_i64(block_id_18271);
    slice_18276 = d_10396;
    slice_18277 = d_10396 * slice_18276;
    ltid_pre_18274 = squot64(sext_i32_i64(local_tid_18270), slice_18276);
    remnant_18278 = sext_i32_i64(local_tid_18270) - ltid_pre_18274 * slice_18276;
    ltid_pre_18275 = remnant_18278;
    remnant_18279 = remnant_18278 - ltid_pre_18275;
    slice_18283 = d_10396;
    slice_18284 = d_10396 * slice_18283;
    slice_18285 = d_10396 * slice_18284;
    ltid_pre_18280 = squot64(sext_i32_i64(local_tid_18270), slice_18284);
    remnant_18286 = sext_i32_i64(local_tid_18270) - ltid_pre_18280 * slice_18284;
    ltid_pre_18281 = squot64(remnant_18286, slice_18283);
    remnant_18287 = remnant_18286 - ltid_pre_18281 * slice_18283;
    ltid_pre_18282 = remnant_18287;
    remnant_18288 = remnant_18287 - ltid_pre_18282;
    slice_18289 = m_10395;
    slice_18290 = m_10395 * slice_18289;
    gtid_15101 = squot64(sext_i32_i64(block_id_18271), slice_18289);
    remnant_18291 = sext_i32_i64(block_id_18271) - gtid_15101 * slice_18289;
    gtid_15102 = remnant_18291;
    remnant_18292 = remnant_18291 - gtid_15102;
    color_18076 = (__local unsigned char *) color_18076_backing_0;
    color_18077 = (__local unsigned char *) color_18077_backing_1;
    binop_x_17399 = y_14427 * gtid_15102;
    phys_tid_15112 = sext_i32_i64(local_tid_18270);
    red_arr_mem_18293 = (__local unsigned char *) red_arr_mem_18293_backing_2;
    gtid_15109 = sext_i32_i64(sext_i64_i32(ltid_pre_18280));
    gtid_15110 = sext_i32_i64(sext_i64_i32(ltid_pre_18281));
    gtid_15111 = sext_i32_i64(sext_i64_i32(ltid_pre_18282));
    if ((slt64(gtid_15109, d_10396) && slt64(gtid_15110, d_10396)) && slt64(gtid_15111, d_10396)) {
        f16 eta_p_15118;
        int64_t binop_y_17400;
        int64_t binop_x_17401;
        int64_t binop_x_17402;
        int64_t new_index_17403;
        int64_t binop_y_17415;
        int64_t new_index_17416;
        f16 eta_p_15119;
        f16 defunc_0_f_res_15120;
        float f16_res_15121;
        
        eta_p_15118 = futrts_from_bits16(((__global uint16_t *) Q_mem_17591)[gtid_15101 * (d_10396 * d_10396) + gtid_15109 * d_10396 + gtid_15111]);
        binop_y_17400 = d_10396 * gtid_15110;
        binop_x_17401 = binop_x_17399 + binop_y_17400;
        binop_x_17402 = gtid_15111 + binop_x_17401;
        new_index_17403 = squot64(binop_x_17402, d_10396);
        binop_y_17415 = d_10396 * new_index_17403;
        new_index_17416 = binop_x_17402 - binop_y_17415;
        eta_p_15119 = futrts_from_bits16(((__global uint16_t *) K_mem_17592)[new_index_17403 * d_10396 + new_index_17416]);
        defunc_0_f_res_15120 = eta_p_15118 * eta_p_15119;
        f16_res_15121 = fpconv_f16_f32(defunc_0_f_res_15120);
        ((__local float *) red_arr_mem_18293)[gtid_15109 * (d_10396 * d_10396) + gtid_15110 * d_10396 + gtid_15111] = f16_res_15121;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    dims_flat_18295 = d_10396 * d_10396 * d_10396;
    ltid_in_bounds_18300 = slt64(sext_i32_i64(local_tid_18270), d_10396 * d_10396 * d_10396);
    // read input for in-block scan
    {
        if (ltid_in_bounds_18300) {
            eta_p_15114 = ((volatile __local float *) red_arr_mem_18293)[sext_i32_i64(local_tid_18270)];
            if ((local_tid_18270 - squot32(local_tid_18270, 32) * 32) == 0) {
                eta_p_15113 = eta_p_15114;
            }
        }
    }
    // in-block scan (hopefully no barriers needed)
    {
        skip_threads_18301 = 1;
        while (slt32(skip_threads_18301, 32)) {
            bool thread_active_18302 = sle32(skip_threads_18301, local_tid_18270 - squot32(local_tid_18270, 32) * 32) && ltid_in_bounds_18300;
            
            if (thread_active_18302) {
                // read operands
                {
                    eta_p_15113 = ((volatile __local float *) red_arr_mem_18293)[sext_i32_i64(local_tid_18270) - sext_i32_i64(skip_threads_18301)];
                }
            }
            // perform operation
            {
                bool inactive_18303 = slt64(srem64(sext_i32_i64(local_tid_18270), d_10396), sext_i32_i64(local_tid_18270) - sext_i32_i64(local_tid_18270 - skip_threads_18301));
                
                if (thread_active_18302 && inactive_18303) {
                    eta_p_15113 = eta_p_15114;
                }
                if (thread_active_18302) {
                    if (!inactive_18303) {
                        float defunc_0_op_res_15115 = eta_p_15113 + eta_p_15114;
                        
                        eta_p_15113 = defunc_0_op_res_15115;
                    }
                }
            }
            if (sle32(wave_sizze_18272, skip_threads_18301)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            if (thread_active_18302) {
                // write result
                {
                    ((volatile __local float *) red_arr_mem_18293)[sext_i32_i64(local_tid_18270)] = eta_p_15113;
                    eta_p_15114 = eta_p_15113;
                }
            }
            if (sle32(wave_sizze_18272, skip_threads_18301)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            skip_threads_18301 *= 2;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // last thread of block 'i' writes its result to offset 'i'
    {
        if ((local_tid_18270 - squot32(local_tid_18270, 32) * 32) == 31 && ltid_in_bounds_18300) {
            ((volatile __local float *) red_arr_mem_18293)[sext_i32_i64(squot32(local_tid_18270, 32))] = eta_p_15113;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
    {
        int32_t skip_threads_18304;
        
        // read input for in-block scan
        {
            if (squot32(local_tid_18270, 32) == 0 && ltid_in_bounds_18300) {
                eta_p_18298 = ((volatile __local float *) red_arr_mem_18293)[sext_i32_i64(local_tid_18270)];
                if ((local_tid_18270 - squot32(local_tid_18270, 32) * 32) == 0) {
                    eta_p_18297 = eta_p_18298;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_18304 = 1;
            while (slt32(skip_threads_18304, 32)) {
                bool thread_active_18305 = sle32(skip_threads_18304, local_tid_18270 - squot32(local_tid_18270, 32) * 32) && (squot32(local_tid_18270, 32) == 0 && ltid_in_bounds_18300);
                
                if (thread_active_18305) {
                    // read operands
                    {
                        eta_p_18297 = ((volatile __local float *) red_arr_mem_18293)[sext_i32_i64(local_tid_18270) - sext_i32_i64(skip_threads_18304)];
                    }
                }
                // perform operation
                {
                    bool inactive_18306 = slt64(srem64(sext_i32_i64(local_tid_18270 * 32 + 32 - 1), d_10396), sext_i32_i64(local_tid_18270 * 32 + 32 - 1) - sext_i32_i64((local_tid_18270 - skip_threads_18304) * 32 + 32 - 1));
                    
                    if (thread_active_18305 && inactive_18306) {
                        eta_p_18297 = eta_p_18298;
                    }
                    if (thread_active_18305) {
                        if (!inactive_18306) {
                            float defunc_0_op_res_18299 = eta_p_18297 + eta_p_18298;
                            
                            eta_p_18297 = defunc_0_op_res_18299;
                        }
                    }
                }
                if (sle32(wave_sizze_18272, skip_threads_18304)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (thread_active_18305) {
                    // write result
                    {
                        ((volatile __local float *) red_arr_mem_18293)[sext_i32_i64(local_tid_18270)] = eta_p_18297;
                        eta_p_18298 = eta_p_18297;
                    }
                }
                if (sle32(wave_sizze_18272, skip_threads_18304)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_18304 *= 2;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    no_carry_in_18307 = squot32(local_tid_18270, 32) == 0 || !ltid_in_bounds_18300;
    // carry-in for every block except the first
    {
        // read operands
        {
            if (!no_carry_in_18307) {
                eta_p_15114 = eta_p_15113;
                eta_p_15113 = ((__local float *) red_arr_mem_18293)[sext_i32_i64(squot32(local_tid_18270, 32)) - (int64_t) 1];
            }
        }
        // perform operation
        {
            bool inactive_18308 = slt64(srem64(sext_i32_i64(local_tid_18270), d_10396), sext_i32_i64(local_tid_18270) - sext_i32_i64(squot32(local_tid_18270, 32) * 32 - 1));
            
            if (!no_carry_in_18307) {
                if (inactive_18308) {
                    eta_p_15113 = eta_p_15114;
                }
            }
            if (!no_carry_in_18307) {
                if (!inactive_18308) {
                    float defunc_0_op_res_15115 = eta_p_15113 + eta_p_15114;
                    
                    eta_p_15113 = defunc_0_op_res_15115;
                }
            }
        }
        // write final result
        {
            if (!no_carry_in_18307) {
                ((__local float *) red_arr_mem_18293)[sext_i32_i64(local_tid_18270)] = eta_p_15113;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // restore correct values for first block
    {
        if (squot32(local_tid_18270, 32) == 0 && ltid_in_bounds_18300) {
            ((__local float *) red_arr_mem_18293)[sext_i32_i64(local_tid_18270)] = eta_p_15114;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    barrier(CLK_LOCAL_MEM_FENCE);
    // Save result of reduction.
    {
        int32_t num_chunks_18309 = sdiv_up32(sext_i64_i32(d_10396) * sext_i64_i32(d_10396), sext_i64_i32(computed_tblock_sizze_15097));
        
        for (int32_t chunk_i_18310 = 0; chunk_i_18310 < num_chunks_18309; chunk_i_18310++) {
            int32_t i_18311 = chunk_i_18310 * sext_i64_i32(computed_tblock_sizze_15097) + local_tid_18270;
            
            if (slt32(i_18311, sext_i64_i32(d_10396) * sext_i64_i32(d_10396))) {
                ((__local float *) color_18077)[sext_i32_i64(squot32(i_18311, sext_i64_i32(d_10396))) * d_10396 + sext_i32_i64(i_18311 - squot32(i_18311, sext_i64_i32(d_10396)) * sext_i64_i32(d_10396))] = ((__local float *) red_arr_mem_18293)[d_10396 - (int64_t) 1 + sext_i32_i64(squot32(i_18311, sext_i64_i32(d_10396))) * (d_10396 * d_10396) + sext_i32_i64(i_18311 - squot32(i_18311, sext_i64_i32(d_10396)) * sext_i64_i32(d_10396)) * d_10396];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    phys_tid_15125 = sext_i32_i64(local_tid_18270);
    gtid_15123 = sext_i32_i64(sext_i64_i32(ltid_pre_18274));
    gtid_15124 = sext_i32_i64(sext_i64_i32(ltid_pre_18275));
    if (slt64(gtid_15123, d_10396) && slt64(gtid_15124, d_10396)) {
        float defunc_0_f_res_15126;
        f16 f32_res_15127;
        
        defunc_0_f_res_15126 = ((__local float *) color_18077)[gtid_15123 * d_10396 + gtid_15124];
        f32_res_15127 = fpconv_f32_f16(defunc_0_f_res_15126);
        ((__local uint16_t *) color_18076)[gtid_15123 * d_10396 + gtid_15124] = futrts_to_bits16(f32_res_15127);
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    num_chunks_18312 = sdiv_up32(sext_i64_i32(d_10396) * sext_i64_i32(d_10396), sext_i64_i32(computed_tblock_sizze_15097));
    for (int32_t chunk_i_18313 = 0; chunk_i_18313 < num_chunks_18312; chunk_i_18313++) {
        int32_t i_18314 = chunk_i_18313 * sext_i64_i32(computed_tblock_sizze_15097) + local_tid_18270;
        
        if (slt32(i_18314, sext_i64_i32(d_10396) * sext_i64_i32(d_10396))) {
            ((__global uint16_t *) mem_17605)[gtid_15101 * (d_10396 * d_10396 * m_10395) + gtid_15102 * (d_10396 * d_10396) + sext_i32_i64(squot32(i_18314, sext_i64_i32(d_10396))) * d_10396 + sext_i32_i64(i_18314 - squot32(i_18314, sext_i64_i32(d_10396)) * sext_i64_i32(d_10396))] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) color_18076)[sext_i32_i64(squot32(i_18314, sext_i64_i32(d_10396))) + sext_i32_i64(i_18314 - squot32(i_18314, sext_i64_i32(d_10396)) * sext_i64_i32(d_10396)) * d_10396]));
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
  error_4:
    return;
}
FUTHARK_KERNEL_SIZED(thesislike128zisegmap_intrablock_15147_dim1, 1, 1)
void thesislike128zisegmap_intrablock_15147(__global int *global_failure, int64_t m_10395, int64_t d_10396, int64_t arg_10470, int64_t q_11504, unsigned char opaque_res_11508_bits, __global unsigned char *mem_17605, __global unsigned char *mem_17610, __global unsigned char *mem_17613)
{
    bool opaque_res_11508 = opaque_res_11508_bits;
    volatile __local unsigned char *red_arr_mem_18343_backing_2 = &shared_mem[0];
    const int64_t red_arr_mem_18343_backing_2_offset = 0 + (int64_t) 64;
    volatile __local unsigned char *red_arr_mem_18338_backing_1 = &shared_mem[red_arr_mem_18343_backing_2_offset];
    const int64_t red_arr_mem_18338_backing_1_offset = red_arr_mem_18343_backing_2_offset + (int64_t) 64;
    volatile __local unsigned char *color_18078_backing_0 = &shared_mem[red_arr_mem_18338_backing_1_offset];
    const int64_t color_18078_backing_0_offset = red_arr_mem_18338_backing_1_offset + (int64_t) 2048;
    
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_18319;
    int32_t tblock_sizze_18322;
    int32_t wave_sizze_18321;
    int32_t block_id_18320;
    int32_t global_tid_18318;
    int64_t phys_tblock_id_15147;
    int64_t slice_18324;
    int64_t ltid_pre_18323;
    int64_t remnant_18325;
    int64_t slice_18327;
    int64_t ltid_pre_18326;
    int64_t remnant_18328;
    int64_t slice_18329;
    int64_t slice_18330;
    int64_t gtid_15145;
    int64_t remnant_18331;
    int64_t gtid_15146;
    int64_t remnant_18332;
    __local unsigned char *color_18078;
    f16 softmaxChunkML_res_15150;
    f16 softmaxChunkML_res_15151;
    f16 mi_old_15153;
    f16 li_old_15154;
    
    local_tid_18319 = get_local_id(0);
    tblock_sizze_18322 = get_local_size(0);
    wave_sizze_18321 = LOCKSTEP_WIDTH;
    block_id_18320 = get_tblock_id(0);
    global_tid_18318 = block_id_18320 * tblock_sizze_18322 + local_tid_18319;
    phys_tblock_id_15147 = sext_i32_i64(block_id_18320);
    slice_18324 = (int64_t) 32;
    ltid_pre_18323 = sext_i32_i64(local_tid_18319);
    remnant_18325 = sext_i32_i64(local_tid_18319) - ltid_pre_18323;
    slice_18327 = (int64_t) 1024;
    ltid_pre_18326 = sext_i32_i64(local_tid_18319);
    remnant_18328 = sext_i32_i64(local_tid_18319) - ltid_pre_18326;
    slice_18329 = d_10396;
    slice_18330 = m_10395 * slice_18329;
    gtid_15145 = squot64(sext_i32_i64(block_id_18320), slice_18329);
    remnant_18331 = sext_i32_i64(block_id_18320) - gtid_15145 * slice_18329;
    gtid_15146 = remnant_18331;
    remnant_18332 = remnant_18331 - gtid_15146;
    color_18078 = (__local unsigned char *) color_18078_backing_0;
    barrier(CLK_LOCAL_MEM_FENCE);
    mi_old_15153 = (f16) -INFINITY;
    li_old_15154 = (f16) 0.0F;
    for (int64_t i_15152 = 0; i_15152 < q_11504; i_15152++) {
        int64_t copy2shr_arg0_15155;
        int32_t num_chunks_18335;
        f16 defunc_0_reduce_comm_res_15160;
        int64_t phys_tid_15162;
        __local unsigned char *red_arr_mem_18338;
        int64_t gtid_15161;
        f16 defunc_0_f_res_15167;
        f16 r_15169;
        int32_t offset_18341;
        int32_t skip_waves_18342;
        f16 eta_p_15163;
        f16 eta_p_15164;
        f16 defunc_0_reduce_comm_res_15174;
        int64_t phys_tid_15176;
        __local unsigned char *red_arr_mem_18343;
        int64_t gtid_15175;
        f16 defunc_0_f_res_15181;
        f16 r_15183;
        int32_t offset_18346;
        int32_t skip_waves_18347;
        f16 eta_p_15177;
        f16 eta_p_15178;
        f16 max_res_15190;
        f16 real_exp_arg0_15191;
        f16 exp_res_15192;
        f16 exp_arg0_15193;
        f16 exp_res_15194;
        f16 eli_15195;
        f16 zp_rhs_15196;
        f16 li_new_15197;
        f16 mi_old_tmp_18333;
        f16 li_old_tmp_18334;
        
        copy2shr_arg0_15155 = mul64((int64_t) 1024, i_15152);
        num_chunks_18335 = 32;
        for (int32_t chunk_i_18336 = 0; chunk_i_18336 < num_chunks_18335; chunk_i_18336++) {
            int32_t i_18337 = chunk_i_18336 * 32 + local_tid_18319;
            
            if (slt32(i_18337, 1024)) {
                ((__local uint16_t *) color_18078)[sext_i32_i64(i_18337)] = futrts_to_bits16(futrts_from_bits16(((__global uint16_t *) mem_17605)[gtid_15145 * (d_10396 * arg_10470) + gtid_15146 + d_10396 * copy2shr_arg0_15155 + sext_i32_i64(i_18337) * d_10396]));
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_LOCAL_MEM_FENCE);
        if (!opaque_res_11508) {
            barrier(CLK_LOCAL_MEM_FENCE);
            if (local_tid_18319 == 0) {
                ((__local uint16_t *) color_18078)[(int64_t) 0] = futrts_to_bits16((f16) 0.0F);
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }
        phys_tid_15162 = sext_i32_i64(local_tid_18319);
        red_arr_mem_18338 = (__local unsigned char *) red_arr_mem_18338_backing_1;
        gtid_15161 = sext_i32_i64(sext_i64_i32(ltid_pre_18323));
        r_15169 = (f16) -INFINITY;
        for (int64_t i_15168 = 0; i_15168 < (int64_t) 32; i_15168++) {
            int64_t zp_lhs_15170;
            int64_t f_arg0_15171;
            f16 f_arg0_15172;
            f16 max_res_15173;
            f16 r_tmp_18340;
            
            zp_lhs_15170 = mul64((int64_t) 32, i_15168);
            f_arg0_15171 = add64(gtid_15161, zp_lhs_15170);
            f_arg0_15172 = futrts_from_bits16(((__local uint16_t *) color_18078)[f_arg0_15171]);
            max_res_15173 = fmax16(r_15169, f_arg0_15172);
            r_tmp_18340 = max_res_15173;
            r_15169 = r_tmp_18340;
        }
        defunc_0_f_res_15167 = r_15169;
        ((__local uint16_t *) red_arr_mem_18338)[gtid_15161] = futrts_to_bits16(defunc_0_f_res_15167);
        barrier(CLK_LOCAL_MEM_FENCE);
        skip_waves_18342 = 1;
        offset_18341 = 0;
        // participating threads read initial accumulator
        {
            if (slt32(local_tid_18319, 32)) {
                eta_p_15163 = futrts_from_bits16(((__local uint16_t *) red_arr_mem_18338)[sext_i32_i64(local_tid_18319 + offset_18341)]);
            }
        }
        offset_18341 = 1;
        while (slt32(offset_18341, wave_sizze_18321)) {
            if (slt32(local_tid_18319 + offset_18341, 32) && ((local_tid_18319 - squot32(local_tid_18319, wave_sizze_18321) * wave_sizze_18321) & (2 * offset_18341 - 1)) == 0) {
                // read array element
                {
                    eta_p_15164 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18338)[sext_i32_i64(local_tid_18319 + offset_18341)]);
                }
                // apply reduction operation
                {
                    f16 max_res_15165 = fmax16(eta_p_15163, eta_p_15164);
                    
                    eta_p_15163 = max_res_15165;
                }
                // write result of operation
                {
                    ((volatile __local uint16_t *) red_arr_mem_18338)[sext_i32_i64(local_tid_18319)] = futrts_to_bits16(eta_p_15163);
                }
            }
            offset_18341 *= 2;
        }
        while (slt32(skip_waves_18342, squot32(32 + wave_sizze_18321 - 1, wave_sizze_18321))) {
            barrier(CLK_LOCAL_MEM_FENCE);
            offset_18341 = skip_waves_18342 * wave_sizze_18321;
            if (slt32(local_tid_18319 + offset_18341, 32) && ((local_tid_18319 - squot32(local_tid_18319, wave_sizze_18321) * wave_sizze_18321) == 0 && (squot32(local_tid_18319, wave_sizze_18321) & (2 * skip_waves_18342 - 1)) == 0)) {
                // read array element
                {
                    eta_p_15164 = futrts_from_bits16(((__local uint16_t *) red_arr_mem_18338)[sext_i32_i64(local_tid_18319 + offset_18341)]);
                }
                // apply reduction operation
                {
                    f16 max_res_15165 = fmax16(eta_p_15163, eta_p_15164);
                    
                    eta_p_15163 = max_res_15165;
                }
                // write result of operation
                {
                    ((__local uint16_t *) red_arr_mem_18338)[sext_i32_i64(local_tid_18319)] = futrts_to_bits16(eta_p_15163);
                }
            }
            skip_waves_18342 *= 2;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_LOCAL_MEM_FENCE);
        // Save result of reduction.
        {
            defunc_0_reduce_comm_res_15160 = futrts_from_bits16(((__local uint16_t *) red_arr_mem_18338)[(int64_t) 0]);
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        phys_tid_15176 = sext_i32_i64(local_tid_18319);
        red_arr_mem_18343 = (__local unsigned char *) red_arr_mem_18343_backing_2;
        gtid_15175 = sext_i32_i64(sext_i64_i32(ltid_pre_18323));
        r_15183 = (f16) 0.0F;
        for (int64_t i_15182 = 0; i_15182 < (int64_t) 32; i_15182++) {
            int64_t zp_lhs_15184;
            int64_t f_arg0_15185;
            f16 f_arg0_15186;
            f16 real_exp_arg0_15187;
            f16 exp_res_15188;
            f16 defunc_0_bop_res_15189;
            f16 r_tmp_18345;
            
            zp_lhs_15184 = mul64((int64_t) 32, i_15182);
            f_arg0_15185 = add64(gtid_15175, zp_lhs_15184);
            f_arg0_15186 = futrts_from_bits16(((__local uint16_t *) color_18078)[f_arg0_15185]);
            real_exp_arg0_15187 = f_arg0_15186 - defunc_0_reduce_comm_res_15160;
            exp_res_15188 = futrts_exp16(real_exp_arg0_15187);
            defunc_0_bop_res_15189 = r_15183 + exp_res_15188;
            r_tmp_18345 = defunc_0_bop_res_15189;
            r_15183 = r_tmp_18345;
        }
        defunc_0_f_res_15181 = r_15183;
        ((__local uint16_t *) red_arr_mem_18343)[gtid_15175] = futrts_to_bits16(defunc_0_f_res_15181);
        barrier(CLK_LOCAL_MEM_FENCE);
        skip_waves_18347 = 1;
        offset_18346 = 0;
        // participating threads read initial accumulator
        {
            if (slt32(local_tid_18319, 32)) {
                eta_p_15177 = futrts_from_bits16(((__local uint16_t *) red_arr_mem_18343)[sext_i32_i64(local_tid_18319 + offset_18346)]);
            }
        }
        offset_18346 = 1;
        while (slt32(offset_18346, wave_sizze_18321)) {
            if (slt32(local_tid_18319 + offset_18346, 32) && ((local_tid_18319 - squot32(local_tid_18319, wave_sizze_18321) * wave_sizze_18321) & (2 * offset_18346 - 1)) == 0) {
                // read array element
                {
                    eta_p_15178 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18343)[sext_i32_i64(local_tid_18319 + offset_18346)]);
                }
                // apply reduction operation
                {
                    f16 defunc_0_op_res_15179 = eta_p_15177 + eta_p_15178;
                    
                    eta_p_15177 = defunc_0_op_res_15179;
                }
                // write result of operation
                {
                    ((volatile __local uint16_t *) red_arr_mem_18343)[sext_i32_i64(local_tid_18319)] = futrts_to_bits16(eta_p_15177);
                }
            }
            offset_18346 *= 2;
        }
        while (slt32(skip_waves_18347, squot32(32 + wave_sizze_18321 - 1, wave_sizze_18321))) {
            barrier(CLK_LOCAL_MEM_FENCE);
            offset_18346 = skip_waves_18347 * wave_sizze_18321;
            if (slt32(local_tid_18319 + offset_18346, 32) && ((local_tid_18319 - squot32(local_tid_18319, wave_sizze_18321) * wave_sizze_18321) == 0 && (squot32(local_tid_18319, wave_sizze_18321) & (2 * skip_waves_18347 - 1)) == 0)) {
                // read array element
                {
                    eta_p_15178 = futrts_from_bits16(((__local uint16_t *) red_arr_mem_18343)[sext_i32_i64(local_tid_18319 + offset_18346)]);
                }
                // apply reduction operation
                {
                    f16 defunc_0_op_res_15179 = eta_p_15177 + eta_p_15178;
                    
                    eta_p_15177 = defunc_0_op_res_15179;
                }
                // write result of operation
                {
                    ((__local uint16_t *) red_arr_mem_18343)[sext_i32_i64(local_tid_18319)] = futrts_to_bits16(eta_p_15177);
                }
            }
            skip_waves_18347 *= 2;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_LOCAL_MEM_FENCE);
        // Save result of reduction.
        {
            defunc_0_reduce_comm_res_15174 = futrts_from_bits16(((__local uint16_t *) red_arr_mem_18343)[(int64_t) 0]);
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        max_res_15190 = fmax16(mi_old_15153, defunc_0_reduce_comm_res_15160);
        real_exp_arg0_15191 = defunc_0_reduce_comm_res_15160 - max_res_15190;
        exp_res_15192 = futrts_exp16(real_exp_arg0_15191);
        exp_arg0_15193 = mi_old_15153 - max_res_15190;
        exp_res_15194 = futrts_exp16(exp_arg0_15193);
        eli_15195 = li_old_15154 * exp_res_15194;
        zp_rhs_15196 = defunc_0_reduce_comm_res_15174 * exp_res_15192;
        li_new_15197 = eli_15195 + zp_rhs_15196;
        mi_old_tmp_18333 = max_res_15190;
        li_old_tmp_18334 = li_new_15197;
        mi_old_15153 = mi_old_tmp_18333;
        li_old_15154 = li_old_tmp_18334;
    }
    softmaxChunkML_res_15150 = mi_old_15153;
    softmaxChunkML_res_15151 = li_old_15154;
    if (local_tid_18319 == 0) {
        ((__global uint16_t *) mem_17610)[gtid_15145 * d_10396 + gtid_15146] = futrts_to_bits16(softmaxChunkML_res_15150);
    }
    if (local_tid_18319 == 0) {
        ((__global uint16_t *) mem_17613)[gtid_15145 * d_10396 + gtid_15146] = futrts_to_bits16(softmaxChunkML_res_15151);
    }
    
  error_10:
    return;
}
FUTHARK_KERNEL
void thesislike128zisegmap_intrablock_15244(__global int *global_failure, int64_t m_10395, int64_t d_10396, int64_t dzlz7bUZLztZRz20Umz20Udz7dUzg_10397, int64_t one_intra_par_min_14430, int64_t binop_x_17598, __global unsigned char *V_mem_17593, __global unsigned char *mem_17618, __global unsigned char *mem_17625)
{
    volatile __local unsigned char *red_arr_mem_18378_backing_1 = &shared_mem[0];
    const int64_t red_arr_mem_18378_backing_1_offset = 0 + ((int64_t) 2 * (d_10396 * dzlz7bUZLztZRz20Umz20Udz7dUzg_10397) + srem64((int64_t) 8 - srem64((int64_t) 2 * (d_10396 * dzlz7bUZLztZRz20Umz20Udz7dUzg_10397), (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_18079_backing_0 = &shared_mem[red_arr_mem_18378_backing_1_offset];
    const int64_t color_18079_backing_0_offset = red_arr_mem_18378_backing_1_offset + (binop_x_17598 + srem64((int64_t) 8 - srem64(binop_x_17598, (int64_t) 8), (int64_t) 8));
    
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_18364;
    int32_t tblock_sizze_18367;
    int32_t wave_sizze_18366;
    int32_t block_id_18365;
    int32_t global_tid_18363;
    int64_t phys_tblock_id_15244;
    int64_t slice_18370;
    int64_t slice_18371;
    int64_t ltid_pre_18368;
    int64_t remnant_18372;
    int64_t ltid_pre_18369;
    int64_t remnant_18373;
    int64_t slice_18374;
    int64_t slice_18375;
    int64_t gtid_15242;
    int64_t remnant_18376;
    int64_t gtid_15243;
    int64_t remnant_18377;
    __local unsigned char *color_18079;
    int64_t phys_tid_15250;
    __local unsigned char *red_arr_mem_18378;
    int64_t gtid_15248;
    int64_t gtid_15249;
    int64_t dims_flat_18380;
    f16 eta_p_15251;
    f16 eta_p_15252;
    f16 eta_p_18382;
    f16 eta_p_18383;
    bool ltid_in_bounds_18385;
    int32_t skip_threads_18386;
    bool no_carry_in_18392;
    int32_t num_chunks_18397;
    
    local_tid_18364 = get_local_id(0);
    tblock_sizze_18367 = get_local_size(0);
    wave_sizze_18366 = LOCKSTEP_WIDTH;
    block_id_18365 = get_tblock_id(0);
    global_tid_18363 = block_id_18365 * tblock_sizze_18367 + local_tid_18364;
    phys_tblock_id_15244 = sext_i32_i64(block_id_18365);
    slice_18370 = dzlz7bUZLztZRz20Umz20Udz7dUzg_10397;
    slice_18371 = d_10396 * slice_18370;
    ltid_pre_18368 = squot64(sext_i32_i64(local_tid_18364), slice_18370);
    remnant_18372 = sext_i32_i64(local_tid_18364) - ltid_pre_18368 * slice_18370;
    ltid_pre_18369 = remnant_18372;
    remnant_18373 = remnant_18372 - ltid_pre_18369;
    slice_18374 = d_10396;
    slice_18375 = m_10395 * slice_18374;
    gtid_15242 = squot64(sext_i32_i64(block_id_18365), slice_18374);
    remnant_18376 = sext_i32_i64(block_id_18365) - gtid_15242 * slice_18374;
    gtid_15243 = remnant_18376;
    remnant_18377 = remnant_18376 - gtid_15243;
    color_18079 = (__local unsigned char *) color_18079_backing_0;
    phys_tid_15250 = sext_i32_i64(local_tid_18364);
    red_arr_mem_18378 = (__local unsigned char *) red_arr_mem_18378_backing_1;
    gtid_15248 = sext_i32_i64(sext_i64_i32(ltid_pre_18368));
    gtid_15249 = sext_i32_i64(sext_i64_i32(ltid_pre_18369));
    if (slt64(gtid_15248, d_10396) && slt64(gtid_15249, dzlz7bUZLztZRz20Umz20Udz7dUzg_10397)) {
        f16 eta_p_15255;
        f16 eta_p_15256;
        f16 defunc_0_f_res_15257;
        
        eta_p_15255 = futrts_from_bits16(((__global uint16_t *) mem_17618)[gtid_15242 * (dzlz7bUZLztZRz20Umz20Udz7dUzg_10397 * d_10396) + gtid_15243 * dzlz7bUZLztZRz20Umz20Udz7dUzg_10397 + gtid_15249]);
        eta_p_15256 = futrts_from_bits16(((__global uint16_t *) V_mem_17593)[gtid_15249 * d_10396 + gtid_15248]);
        defunc_0_f_res_15257 = eta_p_15255 * eta_p_15256;
        ((__local uint16_t *) red_arr_mem_18378)[gtid_15248 * dzlz7bUZLztZRz20Umz20Udz7dUzg_10397 + gtid_15249] = futrts_to_bits16(defunc_0_f_res_15257);
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    dims_flat_18380 = d_10396 * dzlz7bUZLztZRz20Umz20Udz7dUzg_10397;
    ltid_in_bounds_18385 = slt64(sext_i32_i64(local_tid_18364), d_10396 * dzlz7bUZLztZRz20Umz20Udz7dUzg_10397);
    // read input for in-block scan
    {
        if (ltid_in_bounds_18385) {
            eta_p_15252 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18378)[sext_i32_i64(local_tid_18364)]);
            if ((local_tid_18364 - squot32(local_tid_18364, 32) * 32) == 0) {
                eta_p_15251 = eta_p_15252;
            }
        }
    }
    // in-block scan (hopefully no barriers needed)
    {
        skip_threads_18386 = 1;
        while (slt32(skip_threads_18386, 32)) {
            bool thread_active_18387 = sle32(skip_threads_18386, local_tid_18364 - squot32(local_tid_18364, 32) * 32) && ltid_in_bounds_18385;
            
            if (thread_active_18387) {
                // read operands
                {
                    eta_p_15251 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18378)[sext_i32_i64(local_tid_18364) - sext_i32_i64(skip_threads_18386)]);
                }
            }
            // perform operation
            {
                bool inactive_18388 = slt64(srem64(sext_i32_i64(local_tid_18364), dzlz7bUZLztZRz20Umz20Udz7dUzg_10397), sext_i32_i64(local_tid_18364) - sext_i32_i64(local_tid_18364 - skip_threads_18386));
                
                if (thread_active_18387 && inactive_18388) {
                    eta_p_15251 = eta_p_15252;
                }
                if (thread_active_18387) {
                    if (!inactive_18388) {
                        f16 defunc_0_op_res_15253 = eta_p_15251 + eta_p_15252;
                        
                        eta_p_15251 = defunc_0_op_res_15253;
                    }
                }
            }
            if (sle32(wave_sizze_18366, skip_threads_18386)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            if (thread_active_18387) {
                // write result
                {
                    ((volatile __local uint16_t *) red_arr_mem_18378)[sext_i32_i64(local_tid_18364)] = futrts_to_bits16(eta_p_15251);
                    eta_p_15252 = eta_p_15251;
                }
            }
            if (sle32(wave_sizze_18366, skip_threads_18386)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            skip_threads_18386 *= 2;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // last thread of block 'i' writes its result to offset 'i'
    {
        if ((local_tid_18364 - squot32(local_tid_18364, 32) * 32) == 31 && ltid_in_bounds_18385) {
            ((volatile __local uint16_t *) red_arr_mem_18378)[sext_i32_i64(squot32(local_tid_18364, 32))] = futrts_to_bits16(eta_p_15251);
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
    {
        int32_t skip_threads_18389;
        
        // read input for in-block scan
        {
            if (squot32(local_tid_18364, 32) == 0 && ltid_in_bounds_18385) {
                eta_p_18383 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18378)[sext_i32_i64(local_tid_18364)]);
                if ((local_tid_18364 - squot32(local_tid_18364, 32) * 32) == 0) {
                    eta_p_18382 = eta_p_18383;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_18389 = 1;
            while (slt32(skip_threads_18389, 32)) {
                bool thread_active_18390 = sle32(skip_threads_18389, local_tid_18364 - squot32(local_tid_18364, 32) * 32) && (squot32(local_tid_18364, 32) == 0 && ltid_in_bounds_18385);
                
                if (thread_active_18390) {
                    // read operands
                    {
                        eta_p_18382 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18378)[sext_i32_i64(local_tid_18364) - sext_i32_i64(skip_threads_18389)]);
                    }
                }
                // perform operation
                {
                    bool inactive_18391 = slt64(srem64(sext_i32_i64(local_tid_18364 * 32 + 32 - 1), dzlz7bUZLztZRz20Umz20Udz7dUzg_10397), sext_i32_i64(local_tid_18364 * 32 + 32 - 1) - sext_i32_i64((local_tid_18364 - skip_threads_18389) * 32 + 32 - 1));
                    
                    if (thread_active_18390 && inactive_18391) {
                        eta_p_18382 = eta_p_18383;
                    }
                    if (thread_active_18390) {
                        if (!inactive_18391) {
                            f16 defunc_0_op_res_18384 = eta_p_18382 + eta_p_18383;
                            
                            eta_p_18382 = defunc_0_op_res_18384;
                        }
                    }
                }
                if (sle32(wave_sizze_18366, skip_threads_18389)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (thread_active_18390) {
                    // write result
                    {
                        ((volatile __local uint16_t *) red_arr_mem_18378)[sext_i32_i64(local_tid_18364)] = futrts_to_bits16(eta_p_18382);
                        eta_p_18383 = eta_p_18382;
                    }
                }
                if (sle32(wave_sizze_18366, skip_threads_18389)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_18389 *= 2;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    no_carry_in_18392 = squot32(local_tid_18364, 32) == 0 || !ltid_in_bounds_18385;
    // carry-in for every block except the first
    {
        // read operands
        {
            if (!no_carry_in_18392) {
                eta_p_15252 = eta_p_15251;
                eta_p_15251 = futrts_from_bits16(((__local uint16_t *) red_arr_mem_18378)[sext_i32_i64(squot32(local_tid_18364, 32)) - (int64_t) 1]);
            }
        }
        // perform operation
        {
            bool inactive_18393 = slt64(srem64(sext_i32_i64(local_tid_18364), dzlz7bUZLztZRz20Umz20Udz7dUzg_10397), sext_i32_i64(local_tid_18364) - sext_i32_i64(squot32(local_tid_18364, 32) * 32 - 1));
            
            if (!no_carry_in_18392) {
                if (inactive_18393) {
                    eta_p_15251 = eta_p_15252;
                }
            }
            if (!no_carry_in_18392) {
                if (!inactive_18393) {
                    f16 defunc_0_op_res_15253 = eta_p_15251 + eta_p_15252;
                    
                    eta_p_15251 = defunc_0_op_res_15253;
                }
            }
        }
        // write final result
        {
            if (!no_carry_in_18392) {
                ((__local uint16_t *) red_arr_mem_18378)[sext_i32_i64(local_tid_18364)] = futrts_to_bits16(eta_p_15251);
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // restore correct values for first block
    {
        if (squot32(local_tid_18364, 32) == 0 && ltid_in_bounds_18385) {
            ((__local uint16_t *) red_arr_mem_18378)[sext_i32_i64(local_tid_18364)] = futrts_to_bits16(eta_p_15252);
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    barrier(CLK_LOCAL_MEM_FENCE);
    // Save result of reduction.
    {
        int32_t num_chunks_18394 = sdiv_up32(sext_i64_i32(d_10396), sext_i64_i32(one_intra_par_min_14430));
        
        for (int32_t chunk_i_18395 = 0; chunk_i_18395 < num_chunks_18394; chunk_i_18395++) {
            int32_t i_18396 = chunk_i_18395 * sext_i64_i32(one_intra_par_min_14430) + local_tid_18364;
            
            if (slt32(i_18396, sext_i64_i32(d_10396))) {
                ((__local uint16_t *) color_18079)[sext_i32_i64(i_18396)] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) red_arr_mem_18378)[dzlz7bUZLztZRz20Umz20Udz7dUzg_10397 - (int64_t) 1 + sext_i32_i64(i_18396) * dzlz7bUZLztZRz20Umz20Udz7dUzg_10397]));
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    num_chunks_18397 = sdiv_up32(sext_i64_i32(d_10396), sext_i64_i32(one_intra_par_min_14430));
    for (int32_t chunk_i_18398 = 0; chunk_i_18398 < num_chunks_18397; chunk_i_18398++) {
        int32_t i_18399 = chunk_i_18398 * sext_i64_i32(one_intra_par_min_14430) + local_tid_18364;
        
        if (slt32(i_18399, sext_i64_i32(d_10396))) {
            ((__global uint16_t *) mem_17625)[gtid_15242 * (d_10396 * d_10396) + gtid_15243 * d_10396 + sext_i32_i64(i_18399)] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) color_18079)[sext_i32_i64(i_18399)]));
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
  error_3:
    return;
}
FUTHARK_KERNEL_SIZED(thesislike256zisegmap_16201_dim1, 1, 1)
void thesislike256zisegmap_16201(__global int *global_failure, int64_t m_10413, int64_t d_10414, int64_t dzlz7bUZLztZRz20Umz20Udz7dUzg_10415, int64_t one_intra_par_min_15406, int64_t y_15407, __global unsigned char *mem_17605, __global unsigned char *mem_17610, __global unsigned char *mem_17613, __global unsigned char *mem_17618)
{
    #define segmap_tblock_sizze_16195 (thesislike256zisegmap_16201zisegmap_tblock_sizze_16195)
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_18350;
    int32_t tblock_sizze_18353;
    int32_t wave_sizze_18352;
    int32_t block_id_18351;
    int32_t global_tid_18349;
    int64_t phys_tid_16201;
    int64_t global_tid_18354;
    int64_t slice_18355;
    int64_t slice_18356;
    int64_t slice_18357;
    int64_t gtid_16198;
    int64_t remnant_18358;
    int64_t gtid_16199;
    int64_t remnant_18359;
    int64_t gtid_16200;
    int64_t remnant_18360;
    
    local_tid_18350 = get_local_id(0);
    tblock_sizze_18353 = get_local_size(0);
    wave_sizze_18352 = LOCKSTEP_WIDTH;
    block_id_18351 = get_tblock_id(0);
    global_tid_18349 = block_id_18351 * tblock_sizze_18353 + local_tid_18350;
    phys_tid_16201 = sext_i32_i64(global_tid_18349);
    global_tid_18354 = sext_i32_i64(block_id_18351) * segmap_tblock_sizze_16195 + sext_i32_i64(local_tid_18350);
    slice_18355 = dzlz7bUZLztZRz20Umz20Udz7dUzg_10415;
    slice_18356 = d_10414 * slice_18355;
    slice_18357 = m_10413 * slice_18356;
    gtid_16198 = squot64(global_tid_18354, slice_18356);
    remnant_18358 = global_tid_18354 - gtid_16198 * slice_18356;
    gtid_16199 = squot64(remnant_18358, slice_18355);
    remnant_18359 = remnant_18358 - gtid_16199 * slice_18355;
    gtid_16200 = remnant_18359;
    remnant_18360 = remnant_18359 - gtid_16200;
    if ((slt64(gtid_16198, m_10413) && slt64(gtid_16199, d_10414)) && slt64(gtid_16200, dzlz7bUZLztZRz20Umz20Udz7dUzg_10415)) {
        f16 eta_p_16202;
        f16 eta_p_16203;
        int64_t binop_x_17251;
        int64_t binop_y_17252;
        int64_t binop_x_17253;
        int64_t binop_x_17254;
        int64_t new_index_17257;
        int64_t binop_y_17273;
        int64_t binop_x_17274;
        int64_t new_index_17276;
        int64_t binop_y_17314;
        int64_t binop_x_17315;
        int64_t new_index_17316;
        int64_t binop_y_17396;
        int64_t new_index_17397;
        f16 eta_p_16204;
        f16 real_exp_arg0_16205;
        f16 exp_res_16206;
        f16 lifted_lambda_res_16207;
        
        eta_p_16202 = futrts_from_bits16(((__global uint16_t *) mem_17610)[gtid_16198 * d_10414 + gtid_16199]);
        eta_p_16203 = futrts_from_bits16(((__global uint16_t *) mem_17613)[gtid_16198 * d_10414 + gtid_16199]);
        binop_x_17251 = one_intra_par_min_15406 * gtid_16198;
        binop_y_17252 = d_10414 * gtid_16200;
        binop_x_17253 = binop_x_17251 + binop_y_17252;
        binop_x_17254 = gtid_16199 + binop_x_17253;
        new_index_17257 = squot64(binop_x_17254, one_intra_par_min_15406);
        binop_y_17273 = one_intra_par_min_15406 * new_index_17257;
        binop_x_17274 = binop_x_17254 - binop_y_17273;
        new_index_17276 = squot64(binop_x_17274, y_15407);
        binop_y_17314 = y_15407 * new_index_17276;
        binop_x_17315 = binop_x_17274 - binop_y_17314;
        new_index_17316 = squot64(binop_x_17315, d_10414);
        binop_y_17396 = d_10414 * new_index_17316;
        new_index_17397 = binop_x_17315 - binop_y_17396;
        eta_p_16204 = futrts_from_bits16(((__global uint16_t *) mem_17605)[new_index_17257 * (d_10414 * d_10414 * m_10413) + new_index_17276 * (d_10414 * d_10414) + new_index_17316 * d_10414 + new_index_17397]);
        real_exp_arg0_16205 = eta_p_16204 - eta_p_16202;
        exp_res_16206 = futrts_exp16(real_exp_arg0_16205);
        lifted_lambda_res_16207 = exp_res_16206 / eta_p_16203;
        ((__global uint16_t *) mem_17618)[gtid_16198 * (dzlz7bUZLztZRz20Umz20Udz7dUzg_10415 * d_10414) + gtid_16199 * dzlz7bUZLztZRz20Umz20Udz7dUzg_10415 + gtid_16200] = futrts_to_bits16(lifted_lambda_res_16207);
    }
    
  error_0:
    return;
    #undef segmap_tblock_sizze_16195
}
FUTHARK_KERNEL
void thesislike256zisegmap_intrablock_15643(__global int *global_failure, int64_t m_10413, int64_t d_10414, int64_t dzlz7bUZLztZRz20Umz20Udz7dUzg_10415, int64_t q_11504, unsigned char opaque_res_11508_bits, int64_t computed_tblock_sizze_15263, int64_t y_15407, int64_t binop_x_17598, int64_t bytes_17624, int64_t bytes_17651, int64_t maxSubHelper_18063, int64_t maxSubHelper_18064, int64_t maxSubHelper_18066, int32_t num_chunks_18094, __global unsigned char *Q_mem_17591, __global unsigned char *K_mem_17592, __global unsigned char *V_mem_17593, __global unsigned char *mem_17683)
{
    bool opaque_res_11508 = opaque_res_11508_bits;
    volatile __local unsigned char *red_arr_mem_18244_backing_12 = &shared_mem[0];
    const int64_t red_arr_mem_18244_backing_12_offset = 0 + ((int64_t) 2 * (d_10414 * d_10414 * dzlz7bUZLztZRz20Umz20Udz7dUzg_10415) + srem64((int64_t) 8 - srem64((int64_t) 2 * (d_10414 * d_10414 * dzlz7bUZLztZRz20Umz20Udz7dUzg_10415), (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *red_arr_mem_18224_backing_11 = &shared_mem[red_arr_mem_18244_backing_12_offset];
    const int64_t red_arr_mem_18224_backing_11_offset = red_arr_mem_18244_backing_12_offset + ((int64_t) 2 * (d_10414 * (int64_t) 32) + srem64((int64_t) 8 - srem64((int64_t) 2 * (d_10414 * (int64_t) 32), (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *red_arr_mem_18204_backing_10 = &shared_mem[red_arr_mem_18224_backing_11_offset];
    const int64_t red_arr_mem_18204_backing_10_offset = red_arr_mem_18224_backing_11_offset + ((int64_t) 2 * (d_10414 * (int64_t) 32) + srem64((int64_t) 8 - srem64((int64_t) 2 * (d_10414 * (int64_t) 32), (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *red_arr_mem_18158_backing_9 = &shared_mem[red_arr_mem_18204_backing_10_offset];
    const int64_t red_arr_mem_18158_backing_9_offset = red_arr_mem_18204_backing_10_offset + ((int64_t) 4 * (m_10413 * d_10414 * d_10414 * d_10414) + srem64((int64_t) 8 - srem64((int64_t) 4 * (m_10413 * d_10414 * d_10414 * d_10414), (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_18075_backing_8 = &shared_mem[red_arr_mem_18158_backing_9_offset];
    const int64_t color_18075_backing_8_offset = red_arr_mem_18158_backing_9_offset + (bytes_17624 + srem64((int64_t) 8 - srem64(bytes_17624, (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_18074_backing_7 = &shared_mem[color_18075_backing_8_offset];
    const int64_t color_18074_backing_7_offset = color_18075_backing_8_offset + (bytes_17651 + srem64((int64_t) 8 - srem64(bytes_17651, (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_18073_backing_6 = &shared_mem[color_18074_backing_7_offset];
    const int64_t color_18073_backing_6_offset = color_18074_backing_7_offset + (bytes_17651 + srem64((int64_t) 8 - srem64(bytes_17651, (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_18072_backing_5 = &shared_mem[color_18073_backing_6_offset];
    const int64_t color_18072_backing_5_offset = color_18073_backing_6_offset + (binop_x_17598 + srem64((int64_t) 8 - srem64(binop_x_17598, (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_18071_backing_4 = &shared_mem[color_18072_backing_5_offset];
    const int64_t color_18071_backing_4_offset = color_18072_backing_5_offset + (binop_x_17598 + srem64((int64_t) 8 - srem64(binop_x_17598, (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_18070_backing_3 = &shared_mem[color_18071_backing_4_offset];
    const int64_t color_18070_backing_3_offset = color_18071_backing_4_offset + (binop_x_17598 + srem64((int64_t) 8 - srem64(binop_x_17598, (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_18069_backing_2 = &shared_mem[color_18070_backing_3_offset];
    const int64_t color_18069_backing_2_offset = color_18070_backing_3_offset + (maxSubHelper_18066 + srem64((int64_t) 8 - srem64(maxSubHelper_18066, (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_18068_backing_1 = &shared_mem[color_18069_backing_2_offset];
    const int64_t color_18068_backing_1_offset = color_18069_backing_2_offset + (maxSubHelper_18064 + srem64((int64_t) 8 - srem64(maxSubHelper_18064, (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_18067_backing_0 = &shared_mem[color_18068_backing_1_offset];
    const int64_t color_18067_backing_0_offset = color_18068_backing_1_offset + (maxSubHelper_18063 + srem64((int64_t) 8 - srem64(maxSubHelper_18063, (int64_t) 8), (int64_t) 8));
    
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_18101;
    int32_t tblock_sizze_18104;
    int32_t wave_sizze_18103;
    int32_t block_id_18102;
    int32_t global_tid_18100;
    int64_t phys_tblock_id_15643;
    int64_t slice_18108;
    int64_t slice_18109;
    int64_t slice_18110;
    int64_t ltid_pre_18105;
    int64_t remnant_18111;
    int64_t ltid_pre_18106;
    int64_t remnant_18112;
    int64_t ltid_pre_18107;
    int64_t remnant_18113;
    int64_t slice_18118;
    int64_t slice_18119;
    int64_t slice_18120;
    int64_t slice_18121;
    int64_t ltid_pre_18114;
    int64_t remnant_18122;
    int64_t ltid_pre_18115;
    int64_t remnant_18123;
    int64_t ltid_pre_18116;
    int64_t remnant_18124;
    int64_t ltid_pre_18117;
    int64_t remnant_18125;
    int64_t slice_18127;
    int64_t ltid_pre_18126;
    int64_t remnant_18128;
    int64_t slice_18131;
    int64_t slice_18132;
    int64_t ltid_pre_18129;
    int64_t remnant_18133;
    int64_t ltid_pre_18130;
    int64_t remnant_18134;
    int64_t slice_18137;
    int64_t slice_18138;
    int64_t ltid_pre_18135;
    int64_t remnant_18139;
    int64_t ltid_pre_18136;
    int64_t remnant_18140;
    int64_t slice_18144;
    int64_t slice_18145;
    int64_t slice_18146;
    int64_t ltid_pre_18141;
    int64_t remnant_18147;
    int64_t ltid_pre_18142;
    int64_t remnant_18148;
    int64_t ltid_pre_18143;
    int64_t remnant_18149;
    int64_t slice_18152;
    int64_t slice_18153;
    int64_t ltid_pre_18150;
    int64_t remnant_18154;
    int64_t ltid_pre_18151;
    int64_t remnant_18155;
    int64_t slice_18156;
    int64_t gtid_15642;
    int64_t remnant_18157;
    __local unsigned char *color_18067;
    __local unsigned char *color_18068;
    __local unsigned char *color_18069;
    __local unsigned char *color_18070;
    __local unsigned char *color_18071;
    __local unsigned char *color_18072;
    __local unsigned char *color_18073;
    __local unsigned char *color_18074;
    __local unsigned char *color_18075;
    int64_t phys_tid_15651;
    __local unsigned char *red_arr_mem_18158;
    int64_t gtid_15647;
    int64_t gtid_15648;
    int64_t gtid_15649;
    int64_t gtid_15650;
    int64_t dims_flat_18160;
    float eta_p_15652;
    float eta_p_15653;
    float eta_p_18162;
    float eta_p_18163;
    bool ltid_in_bounds_18165;
    int32_t skip_threads_18166;
    bool no_carry_in_18172;
    int64_t phys_tid_15666;
    int64_t gtid_15663;
    int64_t gtid_15664;
    int64_t gtid_15665;
    int32_t num_chunks_18177;
    __local unsigned char *ext_mem_17673;
    __local unsigned char *ext_mem_unused_17998;
    __local unsigned char *ext_mem_17672;
    __local unsigned char *ext_mem_unused_18007;
    __local unsigned char *mem_param_17646;
    __local unsigned char *mem_param_17649;
    __local unsigned char *mem_param_out_17999;
    __local unsigned char *mem_param_out_18008;
    int64_t phys_tid_15749;
    int64_t gtid_15747;
    int64_t gtid_15748;
    int64_t phys_tid_15761;
    __local unsigned char *red_arr_mem_18244;
    int64_t gtid_15758;
    int64_t gtid_15759;
    int64_t gtid_15760;
    int64_t dims_flat_18246;
    f16 eta_p_15762;
    f16 eta_p_15763;
    f16 eta_p_18248;
    f16 eta_p_18249;
    bool ltid_in_bounds_18251;
    int32_t skip_threads_18252;
    bool no_carry_in_18258;
    int32_t num_chunks_18263;
    
    local_tid_18101 = get_local_id(0);
    tblock_sizze_18104 = get_local_size(0);
    wave_sizze_18103 = LOCKSTEP_WIDTH;
    block_id_18102 = get_tblock_id(0);
    global_tid_18100 = block_id_18102 * tblock_sizze_18104 + local_tid_18101;
    phys_tblock_id_15643 = sext_i32_i64(block_id_18102);
    slice_18108 = d_10414;
    slice_18109 = d_10414 * slice_18108;
    slice_18110 = m_10413 * slice_18109;
    ltid_pre_18105 = squot64(sext_i32_i64(local_tid_18101), slice_18109);
    remnant_18111 = sext_i32_i64(local_tid_18101) - ltid_pre_18105 * slice_18109;
    ltid_pre_18106 = squot64(remnant_18111, slice_18108);
    remnant_18112 = remnant_18111 - ltid_pre_18106 * slice_18108;
    ltid_pre_18107 = remnant_18112;
    remnant_18113 = remnant_18112 - ltid_pre_18107;
    slice_18118 = d_10414;
    slice_18119 = d_10414 * slice_18118;
    slice_18120 = d_10414 * slice_18119;
    slice_18121 = m_10413 * slice_18120;
    ltid_pre_18114 = squot64(sext_i32_i64(local_tid_18101), slice_18120);
    remnant_18122 = sext_i32_i64(local_tid_18101) - ltid_pre_18114 * slice_18120;
    ltid_pre_18115 = squot64(remnant_18122, slice_18119);
    remnant_18123 = remnant_18122 - ltid_pre_18115 * slice_18119;
    ltid_pre_18116 = squot64(remnant_18123, slice_18118);
    remnant_18124 = remnant_18123 - ltid_pre_18116 * slice_18118;
    ltid_pre_18117 = remnant_18124;
    remnant_18125 = remnant_18124 - ltid_pre_18117;
    slice_18127 = d_10414;
    ltid_pre_18126 = sext_i32_i64(local_tid_18101);
    remnant_18128 = sext_i32_i64(local_tid_18101) - ltid_pre_18126;
    slice_18131 = (int64_t) 32;
    slice_18132 = d_10414 * slice_18131;
    ltid_pre_18129 = squot64(sext_i32_i64(local_tid_18101), slice_18131);
    remnant_18133 = sext_i32_i64(local_tid_18101) - ltid_pre_18129 * slice_18131;
    ltid_pre_18130 = remnant_18133;
    remnant_18134 = remnant_18133 - ltid_pre_18130;
    slice_18137 = (int64_t) 1024;
    slice_18138 = d_10414 * slice_18137;
    ltid_pre_18135 = squot64(sext_i32_i64(local_tid_18101), slice_18137);
    remnant_18139 = sext_i32_i64(local_tid_18101) - ltid_pre_18135 * slice_18137;
    ltid_pre_18136 = remnant_18139;
    remnant_18140 = remnant_18139 - ltid_pre_18136;
    slice_18144 = dzlz7bUZLztZRz20Umz20Udz7dUzg_10415;
    slice_18145 = d_10414 * slice_18144;
    slice_18146 = d_10414 * slice_18145;
    ltid_pre_18141 = squot64(sext_i32_i64(local_tid_18101), slice_18145);
    remnant_18147 = sext_i32_i64(local_tid_18101) - ltid_pre_18141 * slice_18145;
    ltid_pre_18142 = squot64(remnant_18147, slice_18144);
    remnant_18148 = remnant_18147 - ltid_pre_18142 * slice_18144;
    ltid_pre_18143 = remnant_18148;
    remnant_18149 = remnant_18148 - ltid_pre_18143;
    slice_18152 = dzlz7bUZLztZRz20Umz20Udz7dUzg_10415;
    slice_18153 = d_10414 * slice_18152;
    ltid_pre_18150 = squot64(sext_i32_i64(local_tid_18101), slice_18152);
    remnant_18154 = sext_i32_i64(local_tid_18101) - ltid_pre_18150 * slice_18152;
    ltid_pre_18151 = remnant_18154;
    remnant_18155 = remnant_18154 - ltid_pre_18151;
    slice_18156 = m_10413;
    gtid_15642 = sext_i32_i64(block_id_18102);
    remnant_18157 = sext_i32_i64(block_id_18102) - gtid_15642;
    color_18067 = (__local unsigned char *) color_18067_backing_0;
    color_18068 = (__local unsigned char *) color_18068_backing_1;
    color_18069 = (__local unsigned char *) color_18069_backing_2;
    color_18070 = (__local unsigned char *) color_18070_backing_3;
    color_18071 = (__local unsigned char *) color_18071_backing_4;
    color_18072 = (__local unsigned char *) color_18072_backing_5;
    color_18073 = (__local unsigned char *) color_18073_backing_6;
    color_18074 = (__local unsigned char *) color_18074_backing_7;
    color_18075 = (__local unsigned char *) color_18075_backing_8;
    phys_tid_15651 = sext_i32_i64(local_tid_18101);
    red_arr_mem_18158 = (__local unsigned char *) red_arr_mem_18158_backing_9;
    gtid_15647 = sext_i32_i64(sext_i64_i32(ltid_pre_18114));
    gtid_15648 = sext_i32_i64(sext_i64_i32(ltid_pre_18115));
    gtid_15649 = sext_i32_i64(sext_i64_i32(ltid_pre_18116));
    gtid_15650 = sext_i32_i64(sext_i64_i32(ltid_pre_18117));
    if (((slt64(gtid_15647, m_10413) && slt64(gtid_15648, d_10414)) && slt64(gtid_15649, d_10414)) && slt64(gtid_15650, d_10414)) {
        f16 eta_p_15658;
        int64_t binop_x_17232;
        int64_t binop_y_17233;
        int64_t binop_x_17234;
        int64_t binop_x_17235;
        int64_t new_index_17236;
        int64_t binop_y_17248;
        int64_t new_index_17249;
        f16 eta_p_15659;
        f16 defunc_0_f_res_15660;
        float f16_res_15661;
        
        eta_p_15658 = futrts_from_bits16(((__global uint16_t *) Q_mem_17591)[gtid_15642 * (d_10414 * d_10414) + gtid_15648 * d_10414 + gtid_15650]);
        binop_x_17232 = y_15407 * gtid_15647;
        binop_y_17233 = d_10414 * gtid_15649;
        binop_x_17234 = binop_x_17232 + binop_y_17233;
        binop_x_17235 = gtid_15650 + binop_x_17234;
        new_index_17236 = squot64(binop_x_17235, d_10414);
        binop_y_17248 = d_10414 * new_index_17236;
        new_index_17249 = binop_x_17235 - binop_y_17248;
        eta_p_15659 = futrts_from_bits16(((__global uint16_t *) K_mem_17592)[new_index_17236 * d_10414 + new_index_17249]);
        defunc_0_f_res_15660 = eta_p_15658 * eta_p_15659;
        f16_res_15661 = fpconv_f16_f32(defunc_0_f_res_15660);
        ((__local float *) red_arr_mem_18158)[gtid_15647 * (d_10414 * d_10414 * d_10414) + gtid_15648 * (d_10414 * d_10414) + gtid_15649 * d_10414 + gtid_15650] = f16_res_15661;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    dims_flat_18160 = m_10413 * d_10414 * d_10414 * d_10414;
    ltid_in_bounds_18165 = slt64(sext_i32_i64(local_tid_18101), m_10413 * d_10414 * d_10414 * d_10414);
    // read input for in-block scan
    {
        if (ltid_in_bounds_18165) {
            eta_p_15653 = ((volatile __local float *) red_arr_mem_18158)[sext_i32_i64(local_tid_18101)];
            if ((local_tid_18101 - squot32(local_tid_18101, 32) * 32) == 0) {
                eta_p_15652 = eta_p_15653;
            }
        }
    }
    // in-block scan (hopefully no barriers needed)
    {
        skip_threads_18166 = 1;
        while (slt32(skip_threads_18166, 32)) {
            bool thread_active_18167 = sle32(skip_threads_18166, local_tid_18101 - squot32(local_tid_18101, 32) * 32) && ltid_in_bounds_18165;
            
            if (thread_active_18167) {
                // read operands
                {
                    eta_p_15652 = ((volatile __local float *) red_arr_mem_18158)[sext_i32_i64(local_tid_18101) - sext_i32_i64(skip_threads_18166)];
                }
            }
            // perform operation
            {
                bool inactive_18168 = slt64(srem64(sext_i32_i64(local_tid_18101), d_10414), sext_i32_i64(local_tid_18101) - sext_i32_i64(local_tid_18101 - skip_threads_18166));
                
                if (thread_active_18167 && inactive_18168) {
                    eta_p_15652 = eta_p_15653;
                }
                if (thread_active_18167) {
                    if (!inactive_18168) {
                        float defunc_0_op_res_15654 = eta_p_15652 + eta_p_15653;
                        
                        eta_p_15652 = defunc_0_op_res_15654;
                    }
                }
            }
            if (sle32(wave_sizze_18103, skip_threads_18166)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            if (thread_active_18167) {
                // write result
                {
                    ((volatile __local float *) red_arr_mem_18158)[sext_i32_i64(local_tid_18101)] = eta_p_15652;
                    eta_p_15653 = eta_p_15652;
                }
            }
            if (sle32(wave_sizze_18103, skip_threads_18166)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            skip_threads_18166 *= 2;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // last thread of block 'i' writes its result to offset 'i'
    {
        if ((local_tid_18101 - squot32(local_tid_18101, 32) * 32) == 31 && ltid_in_bounds_18165) {
            ((volatile __local float *) red_arr_mem_18158)[sext_i32_i64(squot32(local_tid_18101, 32))] = eta_p_15652;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
    {
        int32_t skip_threads_18169;
        
        // read input for in-block scan
        {
            if (squot32(local_tid_18101, 32) == 0 && ltid_in_bounds_18165) {
                eta_p_18163 = ((volatile __local float *) red_arr_mem_18158)[sext_i32_i64(local_tid_18101)];
                if ((local_tid_18101 - squot32(local_tid_18101, 32) * 32) == 0) {
                    eta_p_18162 = eta_p_18163;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_18169 = 1;
            while (slt32(skip_threads_18169, 32)) {
                bool thread_active_18170 = sle32(skip_threads_18169, local_tid_18101 - squot32(local_tid_18101, 32) * 32) && (squot32(local_tid_18101, 32) == 0 && ltid_in_bounds_18165);
                
                if (thread_active_18170) {
                    // read operands
                    {
                        eta_p_18162 = ((volatile __local float *) red_arr_mem_18158)[sext_i32_i64(local_tid_18101) - sext_i32_i64(skip_threads_18169)];
                    }
                }
                // perform operation
                {
                    bool inactive_18171 = slt64(srem64(sext_i32_i64(local_tid_18101 * 32 + 32 - 1), d_10414), sext_i32_i64(local_tid_18101 * 32 + 32 - 1) - sext_i32_i64((local_tid_18101 - skip_threads_18169) * 32 + 32 - 1));
                    
                    if (thread_active_18170 && inactive_18171) {
                        eta_p_18162 = eta_p_18163;
                    }
                    if (thread_active_18170) {
                        if (!inactive_18171) {
                            float defunc_0_op_res_18164 = eta_p_18162 + eta_p_18163;
                            
                            eta_p_18162 = defunc_0_op_res_18164;
                        }
                    }
                }
                if (sle32(wave_sizze_18103, skip_threads_18169)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (thread_active_18170) {
                    // write result
                    {
                        ((volatile __local float *) red_arr_mem_18158)[sext_i32_i64(local_tid_18101)] = eta_p_18162;
                        eta_p_18163 = eta_p_18162;
                    }
                }
                if (sle32(wave_sizze_18103, skip_threads_18169)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_18169 *= 2;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    no_carry_in_18172 = squot32(local_tid_18101, 32) == 0 || !ltid_in_bounds_18165;
    // carry-in for every block except the first
    {
        // read operands
        {
            if (!no_carry_in_18172) {
                eta_p_15653 = eta_p_15652;
                eta_p_15652 = ((__local float *) red_arr_mem_18158)[sext_i32_i64(squot32(local_tid_18101, 32)) - (int64_t) 1];
            }
        }
        // perform operation
        {
            bool inactive_18173 = slt64(srem64(sext_i32_i64(local_tid_18101), d_10414), sext_i32_i64(local_tid_18101) - sext_i32_i64(squot32(local_tid_18101, 32) * 32 - 1));
            
            if (!no_carry_in_18172) {
                if (inactive_18173) {
                    eta_p_15652 = eta_p_15653;
                }
            }
            if (!no_carry_in_18172) {
                if (!inactive_18173) {
                    float defunc_0_op_res_15654 = eta_p_15652 + eta_p_15653;
                    
                    eta_p_15652 = defunc_0_op_res_15654;
                }
            }
        }
        // write final result
        {
            if (!no_carry_in_18172) {
                ((__local float *) red_arr_mem_18158)[sext_i32_i64(local_tid_18101)] = eta_p_15652;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // restore correct values for first block
    {
        if (squot32(local_tid_18101, 32) == 0 && ltid_in_bounds_18165) {
            ((__local float *) red_arr_mem_18158)[sext_i32_i64(local_tid_18101)] = eta_p_15653;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    barrier(CLK_LOCAL_MEM_FENCE);
    // Save result of reduction.
    {
        int32_t num_chunks_18174 = sdiv_up32(sext_i64_i32(m_10413) * sext_i64_i32(d_10414) * sext_i64_i32(d_10414), sext_i64_i32(computed_tblock_sizze_15263));
        
        for (int32_t chunk_i_18175 = 0; chunk_i_18175 < num_chunks_18174; chunk_i_18175++) {
            int32_t i_18176 = chunk_i_18175 * sext_i64_i32(computed_tblock_sizze_15263) + local_tid_18101;
            
            if (slt32(i_18176, sext_i64_i32(m_10413) * sext_i64_i32(d_10414) * sext_i64_i32(d_10414))) {
                ((__local float *) color_18068)[sext_i32_i64(squot32(i_18176, sext_i64_i32(d_10414) * sext_i64_i32(d_10414))) * (d_10414 * d_10414) + sext_i32_i64(squot32(i_18176 - squot32(i_18176, sext_i64_i32(d_10414) * sext_i64_i32(d_10414)) * (sext_i64_i32(d_10414) * sext_i64_i32(d_10414)), sext_i64_i32(d_10414))) * d_10414 + sext_i32_i64(i_18176 - squot32(i_18176, sext_i64_i32(d_10414) * sext_i64_i32(d_10414)) * (sext_i64_i32(d_10414) * sext_i64_i32(d_10414)) - squot32(i_18176 - squot32(i_18176, sext_i64_i32(d_10414) * sext_i64_i32(d_10414)) * (sext_i64_i32(d_10414) * sext_i64_i32(d_10414)), sext_i64_i32(d_10414)) * sext_i64_i32(d_10414))] = ((__local float *) red_arr_mem_18158)[d_10414 - (int64_t) 1 + sext_i32_i64(squot32(i_18176, sext_i64_i32(d_10414) * sext_i64_i32(d_10414))) * (d_10414 * d_10414 * d_10414) + sext_i32_i64(squot32(i_18176 - squot32(i_18176, sext_i64_i32(d_10414) * sext_i64_i32(d_10414)) * (sext_i64_i32(d_10414) * sext_i64_i32(d_10414)), sext_i64_i32(d_10414))) * (d_10414 * d_10414) + sext_i32_i64(i_18176 - squot32(i_18176, sext_i64_i32(d_10414) * sext_i64_i32(d_10414)) * (sext_i64_i32(d_10414) * sext_i64_i32(d_10414)) - squot32(i_18176 - squot32(i_18176, sext_i64_i32(d_10414) * sext_i64_i32(d_10414)) * (sext_i64_i32(d_10414) * sext_i64_i32(d_10414)), sext_i64_i32(d_10414)) * sext_i64_i32(d_10414)) * d_10414];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    phys_tid_15666 = sext_i32_i64(local_tid_18101);
    gtid_15663 = sext_i32_i64(sext_i64_i32(ltid_pre_18105));
    gtid_15664 = sext_i32_i64(sext_i64_i32(ltid_pre_18106));
    gtid_15665 = sext_i32_i64(sext_i64_i32(ltid_pre_18107));
    if ((slt64(gtid_15663, m_10413) && slt64(gtid_15664, d_10414)) && slt64(gtid_15665, d_10414)) {
        float defunc_0_f_res_15667;
        f16 f32_res_15668;
        
        defunc_0_f_res_15667 = ((__local float *) color_18068)[gtid_15663 * (d_10414 * d_10414) + gtid_15664 * d_10414 + gtid_15665];
        f32_res_15668 = fpconv_f32_f16(defunc_0_f_res_15667);
        ((__local uint16_t *) color_18067)[gtid_15663 * (d_10414 * d_10414) + gtid_15664 * d_10414 + gtid_15665] = futrts_to_bits16(f32_res_15668);
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    num_chunks_18177 = sdiv_up32(sext_i64_i32(m_10413) * sext_i64_i32(d_10414) * sext_i64_i32(d_10414), sext_i64_i32(computed_tblock_sizze_15263));
    for (int32_t chunk_i_18178 = 0; chunk_i_18178 < num_chunks_18177; chunk_i_18178++) {
        int32_t i_18179 = chunk_i_18178 * sext_i64_i32(computed_tblock_sizze_15263) + local_tid_18101;
        
        if (slt32(i_18179, sext_i64_i32(m_10413) * sext_i64_i32(d_10414) * sext_i64_i32(d_10414))) {
            ((__local uint16_t *) color_18075)[sext_i32_i64(squot32(i_18179, sext_i64_i32(d_10414) * sext_i64_i32(d_10414))) * (d_10414 * d_10414) + sext_i32_i64(squot32(i_18179 - squot32(i_18179, sext_i64_i32(d_10414) * sext_i64_i32(d_10414)) * (sext_i64_i32(d_10414) * sext_i64_i32(d_10414)), sext_i64_i32(d_10414))) * d_10414 + sext_i32_i64(i_18179 - squot32(i_18179, sext_i64_i32(d_10414) * sext_i64_i32(d_10414)) * (sext_i64_i32(d_10414) * sext_i64_i32(d_10414)) - squot32(i_18179 - squot32(i_18179, sext_i64_i32(d_10414) * sext_i64_i32(d_10414)) * (sext_i64_i32(d_10414) * sext_i64_i32(d_10414)), sext_i64_i32(d_10414)) * sext_i64_i32(d_10414))] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) color_18067)[sext_i32_i64(squot32(i_18179, sext_i64_i32(d_10414) * sext_i64_i32(d_10414))) * (d_10414 * d_10414) + sext_i32_i64(squot32(i_18179 - squot32(i_18179, sext_i64_i32(d_10414) * sext_i64_i32(d_10414)) * (sext_i64_i32(d_10414) * sext_i64_i32(d_10414)), sext_i64_i32(d_10414))) + sext_i32_i64(i_18179 - squot32(i_18179, sext_i64_i32(d_10414) * sext_i64_i32(d_10414)) * (sext_i64_i32(d_10414) * sext_i64_i32(d_10414)) - squot32(i_18179 - squot32(i_18179, sext_i64_i32(d_10414) * sext_i64_i32(d_10414)) * (sext_i64_i32(d_10414) * sext_i64_i32(d_10414)), sext_i64_i32(d_10414)) * sext_i64_i32(d_10414)) * d_10414]));
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    for (int32_t chunk_i_18182 = 0; chunk_i_18182 < num_chunks_18094; chunk_i_18182++) {
        int32_t i_18183;
        int64_t slice_18184;
        int64_t rep_i_18181;
        int64_t remnant_18185;
        
        i_18183 = chunk_i_18182 * sext_i64_i32(computed_tblock_sizze_15263) + local_tid_18101;
        slice_18184 = d_10414;
        rep_i_18181 = sext_i32_i64(i_18183);
        remnant_18185 = sext_i32_i64(i_18183) - rep_i_18181;
        if (sle64((int64_t) 0, rep_i_18181) && slt64(rep_i_18181, d_10414)) {
            ((__local uint16_t *) color_18068)[rep_i_18181] = futrts_to_bits16((f16) -INFINITY);
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    for (int32_t chunk_i_18188 = 0; chunk_i_18188 < num_chunks_18094; chunk_i_18188++) {
        int32_t i_18189;
        int64_t slice_18190;
        int64_t rep_i_18187;
        int64_t remnant_18191;
        
        i_18189 = chunk_i_18188 * sext_i64_i32(computed_tblock_sizze_15263) + local_tid_18101;
        slice_18190 = d_10414;
        rep_i_18187 = sext_i32_i64(i_18189);
        remnant_18191 = sext_i32_i64(i_18189) - rep_i_18187;
        if (sle64((int64_t) 0, rep_i_18187) && slt64(rep_i_18187, d_10414)) {
            ((__local uint16_t *) color_18067)[rep_i_18187] = futrts_to_bits16((f16) 0.0F);
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    barrier(CLK_LOCAL_MEM_FENCE);
    mem_param_17646 = color_18068;
    mem_param_out_17999 = color_18071;
    mem_param_17649 = color_18067;
    mem_param_out_18008 = color_18070;
    for (int64_t i_15680 = 0; i_15680 < q_11504; i_15680++) {
        int64_t copy2shr_arg0_15683;
        int32_t num_chunks_18198;
        __local unsigned char *ext_mem_17659;
        int64_t phys_tid_15696;
        __local unsigned char *red_arr_mem_18204;
        int64_t gtid_15694;
        int64_t gtid_15695;
        int64_t dims_flat_18207;
        f16 eta_p_15697;
        f16 eta_p_15698;
        f16 eta_p_18209;
        f16 eta_p_18210;
        bool ltid_in_bounds_18212;
        int32_t skip_threads_18213;
        bool no_carry_in_18219;
        int64_t phys_tid_15712;
        __local unsigned char *red_arr_mem_18224;
        int64_t gtid_15710;
        int64_t gtid_15711;
        int64_t dims_flat_18227;
        f16 eta_p_15713;
        f16 eta_p_15714;
        f16 eta_p_18229;
        f16 eta_p_18230;
        bool ltid_in_bounds_18232;
        int32_t skip_threads_18233;
        bool no_carry_in_18239;
        int64_t phys_tid_15731;
        int64_t gtid_15730;
        __local unsigned char *mem_param_tmp_18192;
        __local unsigned char *mem_param_out_tmp_18193;
        __local unsigned char *mem_param_tmp_18194;
        __local unsigned char *mem_param_out_tmp_18195;
        
        copy2shr_arg0_15683 = mul64((int64_t) 1024, i_15680);
        num_chunks_18198 = sdiv_up32(sext_i64_i32(d_10414) * 1024, sext_i64_i32(computed_tblock_sizze_15263));
        for (int32_t chunk_i_18199 = 0; chunk_i_18199 < num_chunks_18198; chunk_i_18199++) {
            int32_t i_18200 = chunk_i_18199 * sext_i64_i32(computed_tblock_sizze_15263) + local_tid_18101;
            
            if (slt32(i_18200, sext_i64_i32(d_10414) * 1024)) {
                ((__local uint16_t *) color_18069)[sext_i32_i64(squot32(i_18200, 1024)) * (int64_t) 1024 + sext_i32_i64(i_18200 - squot32(i_18200, 1024) * 1024)] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) color_18075)[d_10414 * copy2shr_arg0_15683 + sext_i32_i64(squot32(i_18200, 1024)) + sext_i32_i64(i_18200 - squot32(i_18200, 1024) * 1024) * d_10414]));
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_LOCAL_MEM_FENCE);
        if (opaque_res_11508) {
            int32_t num_chunks_18201 = sdiv_up32(sext_i64_i32(d_10414) * 1024, sext_i64_i32(computed_tblock_sizze_15263));
            
            for (int32_t chunk_i_18202 = 0; chunk_i_18202 < num_chunks_18201; chunk_i_18202++) {
                int32_t i_18203 = chunk_i_18202 * sext_i64_i32(computed_tblock_sizze_15263) + local_tid_18101;
                
                if (slt32(i_18203, sext_i64_i32(d_10414) * 1024)) {
                    ((__local uint16_t *) color_18073)[sext_i32_i64(squot32(i_18203, 1024)) * (int64_t) 1024 + sext_i32_i64(i_18203 - squot32(i_18203, 1024) * 1024)] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) color_18075)[d_10414 * copy2shr_arg0_15683 + sext_i32_i64(squot32(i_18203, 1024)) + sext_i32_i64(i_18203 - squot32(i_18203, 1024) * 1024) * d_10414]));
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            ext_mem_17659 = color_18073;
        } else {
            int64_t phys_tid_15690;
            int64_t gtid_15689;
            
            phys_tid_15690 = sext_i32_i64(local_tid_18101);
            gtid_15689 = sext_i32_i64(sext_i64_i32(ltid_pre_18126));
            if (slt64(gtid_15689, d_10414)) {
                ((__local uint16_t *) color_18069)[gtid_15689 * (int64_t) 1024] = futrts_to_bits16((f16) 0.0F);
                for (int64_t i_0 = 0; i_0 < (int64_t) 1024; i_0++) {
                    ((__local uint16_t *) color_18074)[gtid_15689 * (int64_t) 1024 + i_0] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) color_18069)[gtid_15689 * (int64_t) 1024 + i_0]));
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            ext_mem_17659 = color_18074;
        }
        phys_tid_15696 = sext_i32_i64(local_tid_18101);
        red_arr_mem_18204 = (__local unsigned char *) red_arr_mem_18204_backing_10;
        gtid_15694 = sext_i32_i64(sext_i64_i32(ltid_pre_18129));
        gtid_15695 = sext_i32_i64(sext_i64_i32(ltid_pre_18130));
        if (slt64(gtid_15694, d_10414) && slt64(gtid_15695, (int64_t) 32)) {
            f16 defunc_0_f_res_15702;
            f16 r_15704 = (f16) -INFINITY;
            
            for (int64_t i_15703 = 0; i_15703 < (int64_t) 32; i_15703++) {
                int64_t zp_lhs_15705;
                int64_t f_arg0_15706;
                f16 f_arg0_15707;
                f16 max_res_15708;
                f16 r_tmp_18206;
                
                zp_lhs_15705 = mul64((int64_t) 32, i_15703);
                f_arg0_15706 = add64(gtid_15695, zp_lhs_15705);
                f_arg0_15707 = futrts_from_bits16(((__local uint16_t *) ext_mem_17659)[gtid_15694 * (int64_t) 1024 + f_arg0_15706]);
                max_res_15708 = fmax16(r_15704, f_arg0_15707);
                r_tmp_18206 = max_res_15708;
                r_15704 = r_tmp_18206;
            }
            defunc_0_f_res_15702 = r_15704;
            ((__local uint16_t *) red_arr_mem_18204)[gtid_15694 * (int64_t) 32 + gtid_15695] = futrts_to_bits16(defunc_0_f_res_15702);
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        dims_flat_18207 = d_10414 * (int64_t) 32;
        ltid_in_bounds_18212 = slt64(sext_i32_i64(local_tid_18101), d_10414 * (int64_t) 32);
        // read input for in-block scan
        {
            if (ltid_in_bounds_18212) {
                eta_p_15698 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18204)[sext_i32_i64(local_tid_18101)]);
                if ((local_tid_18101 - squot32(local_tid_18101, 32) * 32) == 0) {
                    eta_p_15697 = eta_p_15698;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_18213 = 1;
            while (slt32(skip_threads_18213, 32)) {
                bool thread_active_18214 = sle32(skip_threads_18213, local_tid_18101 - squot32(local_tid_18101, 32) * 32) && ltid_in_bounds_18212;
                
                if (thread_active_18214) {
                    // read operands
                    {
                        eta_p_15697 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18204)[sext_i32_i64(local_tid_18101) - sext_i32_i64(skip_threads_18213)]);
                    }
                }
                // perform operation
                {
                    bool inactive_18215 = slt64(srem64(sext_i32_i64(local_tid_18101), (int64_t) 32), sext_i32_i64(local_tid_18101) - sext_i32_i64(local_tid_18101 - skip_threads_18213));
                    
                    if (thread_active_18214 && inactive_18215) {
                        eta_p_15697 = eta_p_15698;
                    }
                    if (thread_active_18214) {
                        if (!inactive_18215) {
                            f16 max_res_15699 = fmax16(eta_p_15697, eta_p_15698);
                            
                            eta_p_15697 = max_res_15699;
                        }
                    }
                }
                if (sle32(wave_sizze_18103, skip_threads_18213)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (thread_active_18214) {
                    // write result
                    {
                        ((volatile __local uint16_t *) red_arr_mem_18204)[sext_i32_i64(local_tid_18101)] = futrts_to_bits16(eta_p_15697);
                        eta_p_15698 = eta_p_15697;
                    }
                }
                if (sle32(wave_sizze_18103, skip_threads_18213)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_18213 *= 2;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // last thread of block 'i' writes its result to offset 'i'
        {
            if ((local_tid_18101 - squot32(local_tid_18101, 32) * 32) == 31 && ltid_in_bounds_18212) {
                ((volatile __local uint16_t *) red_arr_mem_18204)[sext_i32_i64(squot32(local_tid_18101, 32))] = futrts_to_bits16(eta_p_15697);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
        {
            int32_t skip_threads_18216;
            
            // read input for in-block scan
            {
                if (squot32(local_tid_18101, 32) == 0 && ltid_in_bounds_18212) {
                    eta_p_18210 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18204)[sext_i32_i64(local_tid_18101)]);
                    if ((local_tid_18101 - squot32(local_tid_18101, 32) * 32) == 0) {
                        eta_p_18209 = eta_p_18210;
                    }
                }
            }
            // in-block scan (hopefully no barriers needed)
            {
                skip_threads_18216 = 1;
                while (slt32(skip_threads_18216, 32)) {
                    bool thread_active_18217 = sle32(skip_threads_18216, local_tid_18101 - squot32(local_tid_18101, 32) * 32) && (squot32(local_tid_18101, 32) == 0 && ltid_in_bounds_18212);
                    
                    if (thread_active_18217) {
                        // read operands
                        {
                            eta_p_18209 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18204)[sext_i32_i64(local_tid_18101) - sext_i32_i64(skip_threads_18216)]);
                        }
                    }
                    // perform operation
                    {
                        bool inactive_18218 = slt64(srem64(sext_i32_i64(local_tid_18101 * 32 + 32 - 1), (int64_t) 32), sext_i32_i64(local_tid_18101 * 32 + 32 - 1) - sext_i32_i64((local_tid_18101 - skip_threads_18216) * 32 + 32 - 1));
                        
                        if (thread_active_18217 && inactive_18218) {
                            eta_p_18209 = eta_p_18210;
                        }
                        if (thread_active_18217) {
                            if (!inactive_18218) {
                                f16 max_res_18211 = fmax16(eta_p_18209, eta_p_18210);
                                
                                eta_p_18209 = max_res_18211;
                            }
                        }
                    }
                    if (sle32(wave_sizze_18103, skip_threads_18216)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    if (thread_active_18217) {
                        // write result
                        {
                            ((volatile __local uint16_t *) red_arr_mem_18204)[sext_i32_i64(local_tid_18101)] = futrts_to_bits16(eta_p_18209);
                            eta_p_18210 = eta_p_18209;
                        }
                    }
                    if (sle32(wave_sizze_18103, skip_threads_18216)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    skip_threads_18216 *= 2;
                }
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        no_carry_in_18219 = squot32(local_tid_18101, 32) == 0 || !ltid_in_bounds_18212;
        // carry-in for every block except the first
        {
            // read operands
            {
                if (!no_carry_in_18219) {
                    eta_p_15698 = eta_p_15697;
                    eta_p_15697 = futrts_from_bits16(((__local uint16_t *) red_arr_mem_18204)[sext_i32_i64(squot32(local_tid_18101, 32)) - (int64_t) 1]);
                }
            }
            // perform operation
            {
                bool inactive_18220 = slt64(srem64(sext_i32_i64(local_tid_18101), (int64_t) 32), sext_i32_i64(local_tid_18101) - sext_i32_i64(squot32(local_tid_18101, 32) * 32 - 1));
                
                if (!no_carry_in_18219) {
                    if (inactive_18220) {
                        eta_p_15697 = eta_p_15698;
                    }
                }
                if (!no_carry_in_18219) {
                    if (!inactive_18220) {
                        f16 max_res_15699 = fmax16(eta_p_15697, eta_p_15698);
                        
                        eta_p_15697 = max_res_15699;
                    }
                }
            }
            // write final result
            {
                if (!no_carry_in_18219) {
                    ((__local uint16_t *) red_arr_mem_18204)[sext_i32_i64(local_tid_18101)] = futrts_to_bits16(eta_p_15697);
                }
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // restore correct values for first block
        {
            if (squot32(local_tid_18101, 32) == 0 && ltid_in_bounds_18212) {
                ((__local uint16_t *) red_arr_mem_18204)[sext_i32_i64(local_tid_18101)] = futrts_to_bits16(eta_p_15698);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_LOCAL_MEM_FENCE);
        // Save result of reduction.
        {
            int32_t num_chunks_18221 = sdiv_up32(sext_i64_i32(d_10414), sext_i64_i32(computed_tblock_sizze_15263));
            
            for (int32_t chunk_i_18222 = 0; chunk_i_18222 < num_chunks_18221; chunk_i_18222++) {
                int32_t i_18223 = chunk_i_18222 * sext_i64_i32(computed_tblock_sizze_15263) + local_tid_18101;
                
                if (slt32(i_18223, sext_i64_i32(d_10414))) {
                    ((__local uint16_t *) color_18072)[sext_i32_i64(i_18223)] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) red_arr_mem_18204)[(int64_t) 31 + sext_i32_i64(i_18223) * (int64_t) 32]));
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        phys_tid_15712 = sext_i32_i64(local_tid_18101);
        red_arr_mem_18224 = (__local unsigned char *) red_arr_mem_18224_backing_11;
        gtid_15710 = sext_i32_i64(sext_i64_i32(ltid_pre_18129));
        gtid_15711 = sext_i32_i64(sext_i64_i32(ltid_pre_18130));
        if (slt64(gtid_15710, d_10414) && slt64(gtid_15711, (int64_t) 32)) {
            f16 defunc_0_reduce_comm_res_15717;
            f16 defunc_0_f_res_15719;
            f16 r_15721;
            
            defunc_0_reduce_comm_res_15717 = futrts_from_bits16(((__local uint16_t *) color_18072)[gtid_15710]);
            r_15721 = (f16) 0.0F;
            for (int64_t i_15720 = 0; i_15720 < (int64_t) 32; i_15720++) {
                int64_t zp_lhs_15722;
                int64_t f_arg0_15723;
                f16 f_arg0_15724;
                f16 real_exp_arg0_15725;
                f16 exp_res_15726;
                f16 defunc_0_bop_res_15727;
                f16 r_tmp_18226;
                
                zp_lhs_15722 = mul64((int64_t) 32, i_15720);
                f_arg0_15723 = add64(gtid_15711, zp_lhs_15722);
                f_arg0_15724 = futrts_from_bits16(((__local uint16_t *) ext_mem_17659)[gtid_15710 * (int64_t) 1024 + f_arg0_15723]);
                real_exp_arg0_15725 = f_arg0_15724 - defunc_0_reduce_comm_res_15717;
                exp_res_15726 = futrts_exp16(real_exp_arg0_15725);
                defunc_0_bop_res_15727 = r_15721 + exp_res_15726;
                r_tmp_18226 = defunc_0_bop_res_15727;
                r_15721 = r_tmp_18226;
            }
            defunc_0_f_res_15719 = r_15721;
            ((__local uint16_t *) red_arr_mem_18224)[gtid_15710 * (int64_t) 32 + gtid_15711] = futrts_to_bits16(defunc_0_f_res_15719);
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        dims_flat_18227 = d_10414 * (int64_t) 32;
        ltid_in_bounds_18232 = slt64(sext_i32_i64(local_tid_18101), d_10414 * (int64_t) 32);
        // read input for in-block scan
        {
            if (ltid_in_bounds_18232) {
                eta_p_15714 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18224)[sext_i32_i64(local_tid_18101)]);
                if ((local_tid_18101 - squot32(local_tid_18101, 32) * 32) == 0) {
                    eta_p_15713 = eta_p_15714;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_18233 = 1;
            while (slt32(skip_threads_18233, 32)) {
                bool thread_active_18234 = sle32(skip_threads_18233, local_tid_18101 - squot32(local_tid_18101, 32) * 32) && ltid_in_bounds_18232;
                
                if (thread_active_18234) {
                    // read operands
                    {
                        eta_p_15713 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18224)[sext_i32_i64(local_tid_18101) - sext_i32_i64(skip_threads_18233)]);
                    }
                }
                // perform operation
                {
                    bool inactive_18235 = slt64(srem64(sext_i32_i64(local_tid_18101), (int64_t) 32), sext_i32_i64(local_tid_18101) - sext_i32_i64(local_tid_18101 - skip_threads_18233));
                    
                    if (thread_active_18234 && inactive_18235) {
                        eta_p_15713 = eta_p_15714;
                    }
                    if (thread_active_18234) {
                        if (!inactive_18235) {
                            f16 defunc_0_op_res_15715 = eta_p_15713 + eta_p_15714;
                            
                            eta_p_15713 = defunc_0_op_res_15715;
                        }
                    }
                }
                if (sle32(wave_sizze_18103, skip_threads_18233)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (thread_active_18234) {
                    // write result
                    {
                        ((volatile __local uint16_t *) red_arr_mem_18224)[sext_i32_i64(local_tid_18101)] = futrts_to_bits16(eta_p_15713);
                        eta_p_15714 = eta_p_15713;
                    }
                }
                if (sle32(wave_sizze_18103, skip_threads_18233)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_18233 *= 2;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // last thread of block 'i' writes its result to offset 'i'
        {
            if ((local_tid_18101 - squot32(local_tid_18101, 32) * 32) == 31 && ltid_in_bounds_18232) {
                ((volatile __local uint16_t *) red_arr_mem_18224)[sext_i32_i64(squot32(local_tid_18101, 32))] = futrts_to_bits16(eta_p_15713);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
        {
            int32_t skip_threads_18236;
            
            // read input for in-block scan
            {
                if (squot32(local_tid_18101, 32) == 0 && ltid_in_bounds_18232) {
                    eta_p_18230 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18224)[sext_i32_i64(local_tid_18101)]);
                    if ((local_tid_18101 - squot32(local_tid_18101, 32) * 32) == 0) {
                        eta_p_18229 = eta_p_18230;
                    }
                }
            }
            // in-block scan (hopefully no barriers needed)
            {
                skip_threads_18236 = 1;
                while (slt32(skip_threads_18236, 32)) {
                    bool thread_active_18237 = sle32(skip_threads_18236, local_tid_18101 - squot32(local_tid_18101, 32) * 32) && (squot32(local_tid_18101, 32) == 0 && ltid_in_bounds_18232);
                    
                    if (thread_active_18237) {
                        // read operands
                        {
                            eta_p_18229 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18224)[sext_i32_i64(local_tid_18101) - sext_i32_i64(skip_threads_18236)]);
                        }
                    }
                    // perform operation
                    {
                        bool inactive_18238 = slt64(srem64(sext_i32_i64(local_tid_18101 * 32 + 32 - 1), (int64_t) 32), sext_i32_i64(local_tid_18101 * 32 + 32 - 1) - sext_i32_i64((local_tid_18101 - skip_threads_18236) * 32 + 32 - 1));
                        
                        if (thread_active_18237 && inactive_18238) {
                            eta_p_18229 = eta_p_18230;
                        }
                        if (thread_active_18237) {
                            if (!inactive_18238) {
                                f16 defunc_0_op_res_18231 = eta_p_18229 + eta_p_18230;
                                
                                eta_p_18229 = defunc_0_op_res_18231;
                            }
                        }
                    }
                    if (sle32(wave_sizze_18103, skip_threads_18236)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    if (thread_active_18237) {
                        // write result
                        {
                            ((volatile __local uint16_t *) red_arr_mem_18224)[sext_i32_i64(local_tid_18101)] = futrts_to_bits16(eta_p_18229);
                            eta_p_18230 = eta_p_18229;
                        }
                    }
                    if (sle32(wave_sizze_18103, skip_threads_18236)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    skip_threads_18236 *= 2;
                }
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        no_carry_in_18239 = squot32(local_tid_18101, 32) == 0 || !ltid_in_bounds_18232;
        // carry-in for every block except the first
        {
            // read operands
            {
                if (!no_carry_in_18239) {
                    eta_p_15714 = eta_p_15713;
                    eta_p_15713 = futrts_from_bits16(((__local uint16_t *) red_arr_mem_18224)[sext_i32_i64(squot32(local_tid_18101, 32)) - (int64_t) 1]);
                }
            }
            // perform operation
            {
                bool inactive_18240 = slt64(srem64(sext_i32_i64(local_tid_18101), (int64_t) 32), sext_i32_i64(local_tid_18101) - sext_i32_i64(squot32(local_tid_18101, 32) * 32 - 1));
                
                if (!no_carry_in_18239) {
                    if (inactive_18240) {
                        eta_p_15713 = eta_p_15714;
                    }
                }
                if (!no_carry_in_18239) {
                    if (!inactive_18240) {
                        f16 defunc_0_op_res_15715 = eta_p_15713 + eta_p_15714;
                        
                        eta_p_15713 = defunc_0_op_res_15715;
                    }
                }
            }
            // write final result
            {
                if (!no_carry_in_18239) {
                    ((__local uint16_t *) red_arr_mem_18224)[sext_i32_i64(local_tid_18101)] = futrts_to_bits16(eta_p_15713);
                }
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // restore correct values for first block
        {
            if (squot32(local_tid_18101, 32) == 0 && ltid_in_bounds_18232) {
                ((__local uint16_t *) red_arr_mem_18224)[sext_i32_i64(local_tid_18101)] = futrts_to_bits16(eta_p_15714);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_LOCAL_MEM_FENCE);
        // Save result of reduction.
        {
            int32_t num_chunks_18241 = sdiv_up32(sext_i64_i32(d_10414), sext_i64_i32(computed_tblock_sizze_15263));
            
            for (int32_t chunk_i_18242 = 0; chunk_i_18242 < num_chunks_18241; chunk_i_18242++) {
                int32_t i_18243 = chunk_i_18242 * sext_i64_i32(computed_tblock_sizze_15263) + local_tid_18101;
                
                if (slt32(i_18243, sext_i64_i32(d_10414))) {
                    ((__local uint16_t *) color_18069)[sext_i32_i64(i_18243)] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) red_arr_mem_18224)[(int64_t) 31 + sext_i32_i64(i_18243) * (int64_t) 32]));
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        phys_tid_15731 = sext_i32_i64(local_tid_18101);
        gtid_15730 = sext_i32_i64(sext_i64_i32(ltid_pre_18126));
        if (slt64(gtid_15730, d_10414)) {
            f16 mi_old_15732;
            f16 li_old_15733;
            f16 defunc_0_reduce_comm_res_15734;
            f16 defunc_0_reduce_comm_res_15735;
            f16 max_res_15736;
            f16 real_exp_arg0_15737;
            f16 exp_res_15738;
            f16 exp_arg0_15739;
            f16 exp_res_15740;
            f16 eli_15741;
            f16 zp_rhs_15742;
            f16 li_new_15743;
            
            mi_old_15732 = futrts_from_bits16(((__local uint16_t *) mem_param_17646)[gtid_15730]);
            li_old_15733 = futrts_from_bits16(((__local uint16_t *) mem_param_17649)[gtid_15730]);
            defunc_0_reduce_comm_res_15734 = futrts_from_bits16(((__local uint16_t *) color_18072)[gtid_15730]);
            defunc_0_reduce_comm_res_15735 = futrts_from_bits16(((__local uint16_t *) color_18069)[gtid_15730]);
            max_res_15736 = fmax16(mi_old_15732, defunc_0_reduce_comm_res_15734);
            real_exp_arg0_15737 = defunc_0_reduce_comm_res_15734 - max_res_15736;
            exp_res_15738 = futrts_exp16(real_exp_arg0_15737);
            exp_arg0_15739 = mi_old_15732 - max_res_15736;
            exp_res_15740 = futrts_exp16(exp_arg0_15739);
            eli_15741 = li_old_15733 * exp_res_15740;
            zp_rhs_15742 = defunc_0_reduce_comm_res_15735 * exp_res_15738;
            li_new_15743 = eli_15741 + zp_rhs_15742;
            ((__local uint16_t *) mem_param_out_17999)[gtid_15730] = futrts_to_bits16(max_res_15736);
            ((__local uint16_t *) mem_param_out_18008)[gtid_15730] = futrts_to_bits16(li_new_15743);
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        mem_param_tmp_18192 = mem_param_out_17999;
        mem_param_out_tmp_18193 = mem_param_17646;
        mem_param_tmp_18194 = mem_param_out_18008;
        mem_param_out_tmp_18195 = mem_param_17649;
        mem_param_17646 = mem_param_tmp_18192;
        mem_param_out_17999 = mem_param_out_tmp_18193;
        mem_param_17649 = mem_param_tmp_18194;
        mem_param_out_18008 = mem_param_out_tmp_18195;
    }
    ext_mem_17673 = mem_param_17646;
    ext_mem_unused_17998 = mem_param_out_17999;
    ext_mem_17672 = mem_param_17649;
    ext_mem_unused_18007 = mem_param_out_18008;
    phys_tid_15749 = sext_i32_i64(local_tid_18101);
    gtid_15747 = sext_i32_i64(sext_i64_i32(ltid_pre_18150));
    gtid_15748 = sext_i32_i64(sext_i64_i32(ltid_pre_18151));
    if (slt64(gtid_15747, d_10414) && slt64(gtid_15748, dzlz7bUZLztZRz20Umz20Udz7dUzg_10415)) {
        f16 eta_p_15750;
        f16 eta_p_15751;
        f16 eta_p_15752;
        f16 real_exp_arg0_15753;
        f16 exp_res_15754;
        f16 lifted_lambda_res_15755;
        
        eta_p_15750 = futrts_from_bits16(((__local uint16_t *) ext_mem_17673)[gtid_15747]);
        eta_p_15751 = futrts_from_bits16(((__local uint16_t *) ext_mem_17672)[gtid_15747]);
        eta_p_15752 = futrts_from_bits16(((__local uint16_t *) color_18075)[gtid_15747 + gtid_15748 * d_10414]);
        real_exp_arg0_15753 = eta_p_15752 - eta_p_15750;
        exp_res_15754 = futrts_exp16(real_exp_arg0_15753);
        lifted_lambda_res_15755 = exp_res_15754 / eta_p_15751;
        ((__local uint16_t *) color_18069)[gtid_15747 * dzlz7bUZLztZRz20Umz20Udz7dUzg_10415 + gtid_15748] = futrts_to_bits16(lifted_lambda_res_15755);
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    phys_tid_15761 = sext_i32_i64(local_tid_18101);
    red_arr_mem_18244 = (__local unsigned char *) red_arr_mem_18244_backing_12;
    gtid_15758 = sext_i32_i64(sext_i64_i32(ltid_pre_18141));
    gtid_15759 = sext_i32_i64(sext_i64_i32(ltid_pre_18142));
    gtid_15760 = sext_i32_i64(sext_i64_i32(ltid_pre_18143));
    if ((slt64(gtid_15758, d_10414) && slt64(gtid_15759, d_10414)) && slt64(gtid_15760, dzlz7bUZLztZRz20Umz20Udz7dUzg_10415)) {
        f16 eta_p_15767;
        f16 eta_p_15768;
        f16 defunc_0_f_res_15769;
        
        eta_p_15767 = futrts_from_bits16(((__local uint16_t *) color_18069)[gtid_15758 * dzlz7bUZLztZRz20Umz20Udz7dUzg_10415 + gtid_15760]);
        eta_p_15768 = futrts_from_bits16(((__global uint16_t *) V_mem_17593)[gtid_15760 * d_10414 + gtid_15759]);
        defunc_0_f_res_15769 = eta_p_15767 * eta_p_15768;
        ((__local uint16_t *) red_arr_mem_18244)[gtid_15758 * (dzlz7bUZLztZRz20Umz20Udz7dUzg_10415 * d_10414) + gtid_15759 * dzlz7bUZLztZRz20Umz20Udz7dUzg_10415 + gtid_15760] = futrts_to_bits16(defunc_0_f_res_15769);
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    dims_flat_18246 = d_10414 * d_10414 * dzlz7bUZLztZRz20Umz20Udz7dUzg_10415;
    ltid_in_bounds_18251 = slt64(sext_i32_i64(local_tid_18101), d_10414 * d_10414 * dzlz7bUZLztZRz20Umz20Udz7dUzg_10415);
    // read input for in-block scan
    {
        if (ltid_in_bounds_18251) {
            eta_p_15763 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18244)[sext_i32_i64(local_tid_18101)]);
            if ((local_tid_18101 - squot32(local_tid_18101, 32) * 32) == 0) {
                eta_p_15762 = eta_p_15763;
            }
        }
    }
    // in-block scan (hopefully no barriers needed)
    {
        skip_threads_18252 = 1;
        while (slt32(skip_threads_18252, 32)) {
            bool thread_active_18253 = sle32(skip_threads_18252, local_tid_18101 - squot32(local_tid_18101, 32) * 32) && ltid_in_bounds_18251;
            
            if (thread_active_18253) {
                // read operands
                {
                    eta_p_15762 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18244)[sext_i32_i64(local_tid_18101) - sext_i32_i64(skip_threads_18252)]);
                }
            }
            // perform operation
            {
                bool inactive_18254 = slt64(srem64(sext_i32_i64(local_tid_18101), dzlz7bUZLztZRz20Umz20Udz7dUzg_10415), sext_i32_i64(local_tid_18101) - sext_i32_i64(local_tid_18101 - skip_threads_18252));
                
                if (thread_active_18253 && inactive_18254) {
                    eta_p_15762 = eta_p_15763;
                }
                if (thread_active_18253) {
                    if (!inactive_18254) {
                        f16 defunc_0_op_res_15764 = eta_p_15762 + eta_p_15763;
                        
                        eta_p_15762 = defunc_0_op_res_15764;
                    }
                }
            }
            if (sle32(wave_sizze_18103, skip_threads_18252)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            if (thread_active_18253) {
                // write result
                {
                    ((volatile __local uint16_t *) red_arr_mem_18244)[sext_i32_i64(local_tid_18101)] = futrts_to_bits16(eta_p_15762);
                    eta_p_15763 = eta_p_15762;
                }
            }
            if (sle32(wave_sizze_18103, skip_threads_18252)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            skip_threads_18252 *= 2;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // last thread of block 'i' writes its result to offset 'i'
    {
        if ((local_tid_18101 - squot32(local_tid_18101, 32) * 32) == 31 && ltid_in_bounds_18251) {
            ((volatile __local uint16_t *) red_arr_mem_18244)[sext_i32_i64(squot32(local_tid_18101, 32))] = futrts_to_bits16(eta_p_15762);
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
    {
        int32_t skip_threads_18255;
        
        // read input for in-block scan
        {
            if (squot32(local_tid_18101, 32) == 0 && ltid_in_bounds_18251) {
                eta_p_18249 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18244)[sext_i32_i64(local_tid_18101)]);
                if ((local_tid_18101 - squot32(local_tid_18101, 32) * 32) == 0) {
                    eta_p_18248 = eta_p_18249;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_18255 = 1;
            while (slt32(skip_threads_18255, 32)) {
                bool thread_active_18256 = sle32(skip_threads_18255, local_tid_18101 - squot32(local_tid_18101, 32) * 32) && (squot32(local_tid_18101, 32) == 0 && ltid_in_bounds_18251);
                
                if (thread_active_18256) {
                    // read operands
                    {
                        eta_p_18248 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18244)[sext_i32_i64(local_tid_18101) - sext_i32_i64(skip_threads_18255)]);
                    }
                }
                // perform operation
                {
                    bool inactive_18257 = slt64(srem64(sext_i32_i64(local_tid_18101 * 32 + 32 - 1), dzlz7bUZLztZRz20Umz20Udz7dUzg_10415), sext_i32_i64(local_tid_18101 * 32 + 32 - 1) - sext_i32_i64((local_tid_18101 - skip_threads_18255) * 32 + 32 - 1));
                    
                    if (thread_active_18256 && inactive_18257) {
                        eta_p_18248 = eta_p_18249;
                    }
                    if (thread_active_18256) {
                        if (!inactive_18257) {
                            f16 defunc_0_op_res_18250 = eta_p_18248 + eta_p_18249;
                            
                            eta_p_18248 = defunc_0_op_res_18250;
                        }
                    }
                }
                if (sle32(wave_sizze_18103, skip_threads_18255)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (thread_active_18256) {
                    // write result
                    {
                        ((volatile __local uint16_t *) red_arr_mem_18244)[sext_i32_i64(local_tid_18101)] = futrts_to_bits16(eta_p_18248);
                        eta_p_18249 = eta_p_18248;
                    }
                }
                if (sle32(wave_sizze_18103, skip_threads_18255)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_18255 *= 2;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    no_carry_in_18258 = squot32(local_tid_18101, 32) == 0 || !ltid_in_bounds_18251;
    // carry-in for every block except the first
    {
        // read operands
        {
            if (!no_carry_in_18258) {
                eta_p_15763 = eta_p_15762;
                eta_p_15762 = futrts_from_bits16(((__local uint16_t *) red_arr_mem_18244)[sext_i32_i64(squot32(local_tid_18101, 32)) - (int64_t) 1]);
            }
        }
        // perform operation
        {
            bool inactive_18259 = slt64(srem64(sext_i32_i64(local_tid_18101), dzlz7bUZLztZRz20Umz20Udz7dUzg_10415), sext_i32_i64(local_tid_18101) - sext_i32_i64(squot32(local_tid_18101, 32) * 32 - 1));
            
            if (!no_carry_in_18258) {
                if (inactive_18259) {
                    eta_p_15762 = eta_p_15763;
                }
            }
            if (!no_carry_in_18258) {
                if (!inactive_18259) {
                    f16 defunc_0_op_res_15764 = eta_p_15762 + eta_p_15763;
                    
                    eta_p_15762 = defunc_0_op_res_15764;
                }
            }
        }
        // write final result
        {
            if (!no_carry_in_18258) {
                ((__local uint16_t *) red_arr_mem_18244)[sext_i32_i64(local_tid_18101)] = futrts_to_bits16(eta_p_15762);
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // restore correct values for first block
    {
        if (squot32(local_tid_18101, 32) == 0 && ltid_in_bounds_18251) {
            ((__local uint16_t *) red_arr_mem_18244)[sext_i32_i64(local_tid_18101)] = futrts_to_bits16(eta_p_15763);
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    barrier(CLK_LOCAL_MEM_FENCE);
    // Save result of reduction.
    {
        int32_t num_chunks_18260 = sdiv_up32(sext_i64_i32(d_10414) * sext_i64_i32(d_10414), sext_i64_i32(computed_tblock_sizze_15263));
        
        for (int32_t chunk_i_18261 = 0; chunk_i_18261 < num_chunks_18260; chunk_i_18261++) {
            int32_t i_18262 = chunk_i_18261 * sext_i64_i32(computed_tblock_sizze_15263) + local_tid_18101;
            
            if (slt32(i_18262, sext_i64_i32(d_10414) * sext_i64_i32(d_10414))) {
                ((__local uint16_t *) color_18067)[sext_i32_i64(squot32(i_18262, sext_i64_i32(d_10414))) * d_10414 + sext_i32_i64(i_18262 - squot32(i_18262, sext_i64_i32(d_10414)) * sext_i64_i32(d_10414))] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) red_arr_mem_18244)[dzlz7bUZLztZRz20Umz20Udz7dUzg_10415 - (int64_t) 1 + sext_i32_i64(squot32(i_18262, sext_i64_i32(d_10414))) * (dzlz7bUZLztZRz20Umz20Udz7dUzg_10415 * d_10414) + sext_i32_i64(i_18262 - squot32(i_18262, sext_i64_i32(d_10414)) * sext_i64_i32(d_10414)) * dzlz7bUZLztZRz20Umz20Udz7dUzg_10415]));
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    num_chunks_18263 = sdiv_up32(sext_i64_i32(d_10414) * sext_i64_i32(d_10414), sext_i64_i32(computed_tblock_sizze_15263));
    for (int32_t chunk_i_18264 = 0; chunk_i_18264 < num_chunks_18263; chunk_i_18264++) {
        int32_t i_18265 = chunk_i_18264 * sext_i64_i32(computed_tblock_sizze_15263) + local_tid_18101;
        
        if (slt32(i_18265, sext_i64_i32(d_10414) * sext_i64_i32(d_10414))) {
            ((__global uint16_t *) mem_17683)[gtid_15642 * (d_10414 * d_10414) + sext_i32_i64(squot32(i_18265, sext_i64_i32(d_10414))) * d_10414 + sext_i32_i64(i_18265 - squot32(i_18265, sext_i64_i32(d_10414)) * sext_i64_i32(d_10414))] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) color_18067)[sext_i32_i64(squot32(i_18265, sext_i64_i32(d_10414))) * d_10414 + sext_i32_i64(i_18265 - squot32(i_18265, sext_i64_i32(d_10414)) * sext_i64_i32(d_10414))]));
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
  error_18:
    return;
}
FUTHARK_KERNEL
void thesislike256zisegmap_intrablock_16083(__global int *global_failure, int64_t m_10413, int64_t d_10414, int64_t y_15407, int64_t computed_tblock_sizze_16077, int64_t bytes_17596, int64_t bytes_17599, __global unsigned char *Q_mem_17591, __global unsigned char *K_mem_17592, __global unsigned char *mem_17605)
{
    volatile __local unsigned char *red_arr_mem_18293_backing_2 = &shared_mem[0];
    const int64_t red_arr_mem_18293_backing_2_offset = 0 + ((int64_t) 4 * (d_10414 * d_10414 * d_10414) + srem64((int64_t) 8 - srem64((int64_t) 4 * (d_10414 * d_10414 * d_10414), (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_18077_backing_1 = &shared_mem[red_arr_mem_18293_backing_2_offset];
    const int64_t color_18077_backing_1_offset = red_arr_mem_18293_backing_2_offset + (bytes_17596 + srem64((int64_t) 8 - srem64(bytes_17596, (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_18076_backing_0 = &shared_mem[color_18077_backing_1_offset];
    const int64_t color_18076_backing_0_offset = color_18077_backing_1_offset + (bytes_17599 + srem64((int64_t) 8 - srem64(bytes_17599, (int64_t) 8), (int64_t) 8));
    
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_18270;
    int32_t tblock_sizze_18273;
    int32_t wave_sizze_18272;
    int32_t block_id_18271;
    int32_t global_tid_18269;
    int64_t phys_tblock_id_16083;
    int64_t slice_18276;
    int64_t slice_18277;
    int64_t ltid_pre_18274;
    int64_t remnant_18278;
    int64_t ltid_pre_18275;
    int64_t remnant_18279;
    int64_t slice_18283;
    int64_t slice_18284;
    int64_t slice_18285;
    int64_t ltid_pre_18280;
    int64_t remnant_18286;
    int64_t ltid_pre_18281;
    int64_t remnant_18287;
    int64_t ltid_pre_18282;
    int64_t remnant_18288;
    int64_t slice_18289;
    int64_t slice_18290;
    int64_t gtid_16081;
    int64_t remnant_18291;
    int64_t gtid_16082;
    int64_t remnant_18292;
    __local unsigned char *color_18076;
    __local unsigned char *color_18077;
    int64_t binop_x_17399;
    int64_t phys_tid_16092;
    __local unsigned char *red_arr_mem_18293;
    int64_t gtid_16089;
    int64_t gtid_16090;
    int64_t gtid_16091;
    int64_t dims_flat_18295;
    float eta_p_16093;
    float eta_p_16094;
    float eta_p_18297;
    float eta_p_18298;
    bool ltid_in_bounds_18300;
    int32_t skip_threads_18301;
    bool no_carry_in_18307;
    int64_t phys_tid_16105;
    int64_t gtid_16103;
    int64_t gtid_16104;
    int32_t num_chunks_18312;
    
    local_tid_18270 = get_local_id(0);
    tblock_sizze_18273 = get_local_size(0);
    wave_sizze_18272 = LOCKSTEP_WIDTH;
    block_id_18271 = get_tblock_id(0);
    global_tid_18269 = block_id_18271 * tblock_sizze_18273 + local_tid_18270;
    phys_tblock_id_16083 = sext_i32_i64(block_id_18271);
    slice_18276 = d_10414;
    slice_18277 = d_10414 * slice_18276;
    ltid_pre_18274 = squot64(sext_i32_i64(local_tid_18270), slice_18276);
    remnant_18278 = sext_i32_i64(local_tid_18270) - ltid_pre_18274 * slice_18276;
    ltid_pre_18275 = remnant_18278;
    remnant_18279 = remnant_18278 - ltid_pre_18275;
    slice_18283 = d_10414;
    slice_18284 = d_10414 * slice_18283;
    slice_18285 = d_10414 * slice_18284;
    ltid_pre_18280 = squot64(sext_i32_i64(local_tid_18270), slice_18284);
    remnant_18286 = sext_i32_i64(local_tid_18270) - ltid_pre_18280 * slice_18284;
    ltid_pre_18281 = squot64(remnant_18286, slice_18283);
    remnant_18287 = remnant_18286 - ltid_pre_18281 * slice_18283;
    ltid_pre_18282 = remnant_18287;
    remnant_18288 = remnant_18287 - ltid_pre_18282;
    slice_18289 = m_10413;
    slice_18290 = m_10413 * slice_18289;
    gtid_16081 = squot64(sext_i32_i64(block_id_18271), slice_18289);
    remnant_18291 = sext_i32_i64(block_id_18271) - gtid_16081 * slice_18289;
    gtid_16082 = remnant_18291;
    remnant_18292 = remnant_18291 - gtid_16082;
    color_18076 = (__local unsigned char *) color_18076_backing_0;
    color_18077 = (__local unsigned char *) color_18077_backing_1;
    binop_x_17399 = y_15407 * gtid_16082;
    phys_tid_16092 = sext_i32_i64(local_tid_18270);
    red_arr_mem_18293 = (__local unsigned char *) red_arr_mem_18293_backing_2;
    gtid_16089 = sext_i32_i64(sext_i64_i32(ltid_pre_18280));
    gtid_16090 = sext_i32_i64(sext_i64_i32(ltid_pre_18281));
    gtid_16091 = sext_i32_i64(sext_i64_i32(ltid_pre_18282));
    if ((slt64(gtid_16089, d_10414) && slt64(gtid_16090, d_10414)) && slt64(gtid_16091, d_10414)) {
        f16 eta_p_16098;
        int64_t binop_y_17400;
        int64_t binop_x_17401;
        int64_t binop_x_17402;
        int64_t new_index_17403;
        int64_t binop_y_17415;
        int64_t new_index_17416;
        f16 eta_p_16099;
        f16 defunc_0_f_res_16100;
        float f16_res_16101;
        
        eta_p_16098 = futrts_from_bits16(((__global uint16_t *) Q_mem_17591)[gtid_16081 * (d_10414 * d_10414) + gtid_16089 * d_10414 + gtid_16091]);
        binop_y_17400 = d_10414 * gtid_16090;
        binop_x_17401 = binop_x_17399 + binop_y_17400;
        binop_x_17402 = gtid_16091 + binop_x_17401;
        new_index_17403 = squot64(binop_x_17402, d_10414);
        binop_y_17415 = d_10414 * new_index_17403;
        new_index_17416 = binop_x_17402 - binop_y_17415;
        eta_p_16099 = futrts_from_bits16(((__global uint16_t *) K_mem_17592)[new_index_17403 * d_10414 + new_index_17416]);
        defunc_0_f_res_16100 = eta_p_16098 * eta_p_16099;
        f16_res_16101 = fpconv_f16_f32(defunc_0_f_res_16100);
        ((__local float *) red_arr_mem_18293)[gtid_16089 * (d_10414 * d_10414) + gtid_16090 * d_10414 + gtid_16091] = f16_res_16101;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    dims_flat_18295 = d_10414 * d_10414 * d_10414;
    ltid_in_bounds_18300 = slt64(sext_i32_i64(local_tid_18270), d_10414 * d_10414 * d_10414);
    // read input for in-block scan
    {
        if (ltid_in_bounds_18300) {
            eta_p_16094 = ((volatile __local float *) red_arr_mem_18293)[sext_i32_i64(local_tid_18270)];
            if ((local_tid_18270 - squot32(local_tid_18270, 32) * 32) == 0) {
                eta_p_16093 = eta_p_16094;
            }
        }
    }
    // in-block scan (hopefully no barriers needed)
    {
        skip_threads_18301 = 1;
        while (slt32(skip_threads_18301, 32)) {
            bool thread_active_18302 = sle32(skip_threads_18301, local_tid_18270 - squot32(local_tid_18270, 32) * 32) && ltid_in_bounds_18300;
            
            if (thread_active_18302) {
                // read operands
                {
                    eta_p_16093 = ((volatile __local float *) red_arr_mem_18293)[sext_i32_i64(local_tid_18270) - sext_i32_i64(skip_threads_18301)];
                }
            }
            // perform operation
            {
                bool inactive_18303 = slt64(srem64(sext_i32_i64(local_tid_18270), d_10414), sext_i32_i64(local_tid_18270) - sext_i32_i64(local_tid_18270 - skip_threads_18301));
                
                if (thread_active_18302 && inactive_18303) {
                    eta_p_16093 = eta_p_16094;
                }
                if (thread_active_18302) {
                    if (!inactive_18303) {
                        float defunc_0_op_res_16095 = eta_p_16093 + eta_p_16094;
                        
                        eta_p_16093 = defunc_0_op_res_16095;
                    }
                }
            }
            if (sle32(wave_sizze_18272, skip_threads_18301)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            if (thread_active_18302) {
                // write result
                {
                    ((volatile __local float *) red_arr_mem_18293)[sext_i32_i64(local_tid_18270)] = eta_p_16093;
                    eta_p_16094 = eta_p_16093;
                }
            }
            if (sle32(wave_sizze_18272, skip_threads_18301)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            skip_threads_18301 *= 2;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // last thread of block 'i' writes its result to offset 'i'
    {
        if ((local_tid_18270 - squot32(local_tid_18270, 32) * 32) == 31 && ltid_in_bounds_18300) {
            ((volatile __local float *) red_arr_mem_18293)[sext_i32_i64(squot32(local_tid_18270, 32))] = eta_p_16093;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
    {
        int32_t skip_threads_18304;
        
        // read input for in-block scan
        {
            if (squot32(local_tid_18270, 32) == 0 && ltid_in_bounds_18300) {
                eta_p_18298 = ((volatile __local float *) red_arr_mem_18293)[sext_i32_i64(local_tid_18270)];
                if ((local_tid_18270 - squot32(local_tid_18270, 32) * 32) == 0) {
                    eta_p_18297 = eta_p_18298;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_18304 = 1;
            while (slt32(skip_threads_18304, 32)) {
                bool thread_active_18305 = sle32(skip_threads_18304, local_tid_18270 - squot32(local_tid_18270, 32) * 32) && (squot32(local_tid_18270, 32) == 0 && ltid_in_bounds_18300);
                
                if (thread_active_18305) {
                    // read operands
                    {
                        eta_p_18297 = ((volatile __local float *) red_arr_mem_18293)[sext_i32_i64(local_tid_18270) - sext_i32_i64(skip_threads_18304)];
                    }
                }
                // perform operation
                {
                    bool inactive_18306 = slt64(srem64(sext_i32_i64(local_tid_18270 * 32 + 32 - 1), d_10414), sext_i32_i64(local_tid_18270 * 32 + 32 - 1) - sext_i32_i64((local_tid_18270 - skip_threads_18304) * 32 + 32 - 1));
                    
                    if (thread_active_18305 && inactive_18306) {
                        eta_p_18297 = eta_p_18298;
                    }
                    if (thread_active_18305) {
                        if (!inactive_18306) {
                            float defunc_0_op_res_18299 = eta_p_18297 + eta_p_18298;
                            
                            eta_p_18297 = defunc_0_op_res_18299;
                        }
                    }
                }
                if (sle32(wave_sizze_18272, skip_threads_18304)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (thread_active_18305) {
                    // write result
                    {
                        ((volatile __local float *) red_arr_mem_18293)[sext_i32_i64(local_tid_18270)] = eta_p_18297;
                        eta_p_18298 = eta_p_18297;
                    }
                }
                if (sle32(wave_sizze_18272, skip_threads_18304)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_18304 *= 2;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    no_carry_in_18307 = squot32(local_tid_18270, 32) == 0 || !ltid_in_bounds_18300;
    // carry-in for every block except the first
    {
        // read operands
        {
            if (!no_carry_in_18307) {
                eta_p_16094 = eta_p_16093;
                eta_p_16093 = ((__local float *) red_arr_mem_18293)[sext_i32_i64(squot32(local_tid_18270, 32)) - (int64_t) 1];
            }
        }
        // perform operation
        {
            bool inactive_18308 = slt64(srem64(sext_i32_i64(local_tid_18270), d_10414), sext_i32_i64(local_tid_18270) - sext_i32_i64(squot32(local_tid_18270, 32) * 32 - 1));
            
            if (!no_carry_in_18307) {
                if (inactive_18308) {
                    eta_p_16093 = eta_p_16094;
                }
            }
            if (!no_carry_in_18307) {
                if (!inactive_18308) {
                    float defunc_0_op_res_16095 = eta_p_16093 + eta_p_16094;
                    
                    eta_p_16093 = defunc_0_op_res_16095;
                }
            }
        }
        // write final result
        {
            if (!no_carry_in_18307) {
                ((__local float *) red_arr_mem_18293)[sext_i32_i64(local_tid_18270)] = eta_p_16093;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // restore correct values for first block
    {
        if (squot32(local_tid_18270, 32) == 0 && ltid_in_bounds_18300) {
            ((__local float *) red_arr_mem_18293)[sext_i32_i64(local_tid_18270)] = eta_p_16094;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    barrier(CLK_LOCAL_MEM_FENCE);
    // Save result of reduction.
    {
        int32_t num_chunks_18309 = sdiv_up32(sext_i64_i32(d_10414) * sext_i64_i32(d_10414), sext_i64_i32(computed_tblock_sizze_16077));
        
        for (int32_t chunk_i_18310 = 0; chunk_i_18310 < num_chunks_18309; chunk_i_18310++) {
            int32_t i_18311 = chunk_i_18310 * sext_i64_i32(computed_tblock_sizze_16077) + local_tid_18270;
            
            if (slt32(i_18311, sext_i64_i32(d_10414) * sext_i64_i32(d_10414))) {
                ((__local float *) color_18077)[sext_i32_i64(squot32(i_18311, sext_i64_i32(d_10414))) * d_10414 + sext_i32_i64(i_18311 - squot32(i_18311, sext_i64_i32(d_10414)) * sext_i64_i32(d_10414))] = ((__local float *) red_arr_mem_18293)[d_10414 - (int64_t) 1 + sext_i32_i64(squot32(i_18311, sext_i64_i32(d_10414))) * (d_10414 * d_10414) + sext_i32_i64(i_18311 - squot32(i_18311, sext_i64_i32(d_10414)) * sext_i64_i32(d_10414)) * d_10414];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    phys_tid_16105 = sext_i32_i64(local_tid_18270);
    gtid_16103 = sext_i32_i64(sext_i64_i32(ltid_pre_18274));
    gtid_16104 = sext_i32_i64(sext_i64_i32(ltid_pre_18275));
    if (slt64(gtid_16103, d_10414) && slt64(gtid_16104, d_10414)) {
        float defunc_0_f_res_16106;
        f16 f32_res_16107;
        
        defunc_0_f_res_16106 = ((__local float *) color_18077)[gtid_16103 * d_10414 + gtid_16104];
        f32_res_16107 = fpconv_f32_f16(defunc_0_f_res_16106);
        ((__local uint16_t *) color_18076)[gtid_16103 * d_10414 + gtid_16104] = futrts_to_bits16(f32_res_16107);
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    num_chunks_18312 = sdiv_up32(sext_i64_i32(d_10414) * sext_i64_i32(d_10414), sext_i64_i32(computed_tblock_sizze_16077));
    for (int32_t chunk_i_18313 = 0; chunk_i_18313 < num_chunks_18312; chunk_i_18313++) {
        int32_t i_18314 = chunk_i_18313 * sext_i64_i32(computed_tblock_sizze_16077) + local_tid_18270;
        
        if (slt32(i_18314, sext_i64_i32(d_10414) * sext_i64_i32(d_10414))) {
            ((__global uint16_t *) mem_17605)[gtid_16081 * (d_10414 * d_10414 * m_10413) + gtid_16082 * (d_10414 * d_10414) + sext_i32_i64(squot32(i_18314, sext_i64_i32(d_10414))) * d_10414 + sext_i32_i64(i_18314 - squot32(i_18314, sext_i64_i32(d_10414)) * sext_i64_i32(d_10414))] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) color_18076)[sext_i32_i64(squot32(i_18314, sext_i64_i32(d_10414))) + sext_i32_i64(i_18314 - squot32(i_18314, sext_i64_i32(d_10414)) * sext_i64_i32(d_10414)) * d_10414]));
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
  error_4:
    return;
}
FUTHARK_KERNEL_SIZED(thesislike256zisegmap_intrablock_16127_dim1, 1, 1)
void thesislike256zisegmap_intrablock_16127(__global int *global_failure, int64_t m_10413, int64_t d_10414, int64_t arg_10470, int64_t q_11504, unsigned char opaque_res_11508_bits, __global unsigned char *mem_17605, __global unsigned char *mem_17610, __global unsigned char *mem_17613)
{
    bool opaque_res_11508 = opaque_res_11508_bits;
    volatile __local unsigned char *red_arr_mem_18343_backing_2 = &shared_mem[0];
    const int64_t red_arr_mem_18343_backing_2_offset = 0 + (int64_t) 64;
    volatile __local unsigned char *red_arr_mem_18338_backing_1 = &shared_mem[red_arr_mem_18343_backing_2_offset];
    const int64_t red_arr_mem_18338_backing_1_offset = red_arr_mem_18343_backing_2_offset + (int64_t) 64;
    volatile __local unsigned char *color_18078_backing_0 = &shared_mem[red_arr_mem_18338_backing_1_offset];
    const int64_t color_18078_backing_0_offset = red_arr_mem_18338_backing_1_offset + (int64_t) 2048;
    
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_18319;
    int32_t tblock_sizze_18322;
    int32_t wave_sizze_18321;
    int32_t block_id_18320;
    int32_t global_tid_18318;
    int64_t phys_tblock_id_16127;
    int64_t slice_18324;
    int64_t ltid_pre_18323;
    int64_t remnant_18325;
    int64_t slice_18327;
    int64_t ltid_pre_18326;
    int64_t remnant_18328;
    int64_t slice_18329;
    int64_t slice_18330;
    int64_t gtid_16125;
    int64_t remnant_18331;
    int64_t gtid_16126;
    int64_t remnant_18332;
    __local unsigned char *color_18078;
    f16 softmaxChunkML_res_16130;
    f16 softmaxChunkML_res_16131;
    f16 mi_old_16133;
    f16 li_old_16134;
    
    local_tid_18319 = get_local_id(0);
    tblock_sizze_18322 = get_local_size(0);
    wave_sizze_18321 = LOCKSTEP_WIDTH;
    block_id_18320 = get_tblock_id(0);
    global_tid_18318 = block_id_18320 * tblock_sizze_18322 + local_tid_18319;
    phys_tblock_id_16127 = sext_i32_i64(block_id_18320);
    slice_18324 = (int64_t) 32;
    ltid_pre_18323 = sext_i32_i64(local_tid_18319);
    remnant_18325 = sext_i32_i64(local_tid_18319) - ltid_pre_18323;
    slice_18327 = (int64_t) 1024;
    ltid_pre_18326 = sext_i32_i64(local_tid_18319);
    remnant_18328 = sext_i32_i64(local_tid_18319) - ltid_pre_18326;
    slice_18329 = d_10414;
    slice_18330 = m_10413 * slice_18329;
    gtid_16125 = squot64(sext_i32_i64(block_id_18320), slice_18329);
    remnant_18331 = sext_i32_i64(block_id_18320) - gtid_16125 * slice_18329;
    gtid_16126 = remnant_18331;
    remnant_18332 = remnant_18331 - gtid_16126;
    color_18078 = (__local unsigned char *) color_18078_backing_0;
    barrier(CLK_LOCAL_MEM_FENCE);
    mi_old_16133 = (f16) -INFINITY;
    li_old_16134 = (f16) 0.0F;
    for (int64_t i_16132 = 0; i_16132 < q_11504; i_16132++) {
        int64_t copy2shr_arg0_16135;
        int32_t num_chunks_18335;
        f16 defunc_0_reduce_comm_res_16140;
        int64_t phys_tid_16142;
        __local unsigned char *red_arr_mem_18338;
        int64_t gtid_16141;
        f16 defunc_0_f_res_16147;
        f16 r_16149;
        int32_t offset_18341;
        int32_t skip_waves_18342;
        f16 eta_p_16143;
        f16 eta_p_16144;
        f16 defunc_0_reduce_comm_res_16154;
        int64_t phys_tid_16156;
        __local unsigned char *red_arr_mem_18343;
        int64_t gtid_16155;
        f16 defunc_0_f_res_16161;
        f16 r_16163;
        int32_t offset_18346;
        int32_t skip_waves_18347;
        f16 eta_p_16157;
        f16 eta_p_16158;
        f16 max_res_16170;
        f16 real_exp_arg0_16171;
        f16 exp_res_16172;
        f16 exp_arg0_16173;
        f16 exp_res_16174;
        f16 eli_16175;
        f16 zp_rhs_16176;
        f16 li_new_16177;
        f16 mi_old_tmp_18333;
        f16 li_old_tmp_18334;
        
        copy2shr_arg0_16135 = mul64((int64_t) 1024, i_16132);
        num_chunks_18335 = 32;
        for (int32_t chunk_i_18336 = 0; chunk_i_18336 < num_chunks_18335; chunk_i_18336++) {
            int32_t i_18337 = chunk_i_18336 * 32 + local_tid_18319;
            
            if (slt32(i_18337, 1024)) {
                ((__local uint16_t *) color_18078)[sext_i32_i64(i_18337)] = futrts_to_bits16(futrts_from_bits16(((__global uint16_t *) mem_17605)[gtid_16125 * (d_10414 * arg_10470) + gtid_16126 + d_10414 * copy2shr_arg0_16135 + sext_i32_i64(i_18337) * d_10414]));
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_LOCAL_MEM_FENCE);
        if (!opaque_res_11508) {
            barrier(CLK_LOCAL_MEM_FENCE);
            if (local_tid_18319 == 0) {
                ((__local uint16_t *) color_18078)[(int64_t) 0] = futrts_to_bits16((f16) 0.0F);
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }
        phys_tid_16142 = sext_i32_i64(local_tid_18319);
        red_arr_mem_18338 = (__local unsigned char *) red_arr_mem_18338_backing_1;
        gtid_16141 = sext_i32_i64(sext_i64_i32(ltid_pre_18323));
        r_16149 = (f16) -INFINITY;
        for (int64_t i_16148 = 0; i_16148 < (int64_t) 32; i_16148++) {
            int64_t zp_lhs_16150;
            int64_t f_arg0_16151;
            f16 f_arg0_16152;
            f16 max_res_16153;
            f16 r_tmp_18340;
            
            zp_lhs_16150 = mul64((int64_t) 32, i_16148);
            f_arg0_16151 = add64(gtid_16141, zp_lhs_16150);
            f_arg0_16152 = futrts_from_bits16(((__local uint16_t *) color_18078)[f_arg0_16151]);
            max_res_16153 = fmax16(r_16149, f_arg0_16152);
            r_tmp_18340 = max_res_16153;
            r_16149 = r_tmp_18340;
        }
        defunc_0_f_res_16147 = r_16149;
        ((__local uint16_t *) red_arr_mem_18338)[gtid_16141] = futrts_to_bits16(defunc_0_f_res_16147);
        barrier(CLK_LOCAL_MEM_FENCE);
        skip_waves_18342 = 1;
        offset_18341 = 0;
        // participating threads read initial accumulator
        {
            if (slt32(local_tid_18319, 32)) {
                eta_p_16143 = futrts_from_bits16(((__local uint16_t *) red_arr_mem_18338)[sext_i32_i64(local_tid_18319 + offset_18341)]);
            }
        }
        offset_18341 = 1;
        while (slt32(offset_18341, wave_sizze_18321)) {
            if (slt32(local_tid_18319 + offset_18341, 32) && ((local_tid_18319 - squot32(local_tid_18319, wave_sizze_18321) * wave_sizze_18321) & (2 * offset_18341 - 1)) == 0) {
                // read array element
                {
                    eta_p_16144 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18338)[sext_i32_i64(local_tid_18319 + offset_18341)]);
                }
                // apply reduction operation
                {
                    f16 max_res_16145 = fmax16(eta_p_16143, eta_p_16144);
                    
                    eta_p_16143 = max_res_16145;
                }
                // write result of operation
                {
                    ((volatile __local uint16_t *) red_arr_mem_18338)[sext_i32_i64(local_tid_18319)] = futrts_to_bits16(eta_p_16143);
                }
            }
            offset_18341 *= 2;
        }
        while (slt32(skip_waves_18342, squot32(32 + wave_sizze_18321 - 1, wave_sizze_18321))) {
            barrier(CLK_LOCAL_MEM_FENCE);
            offset_18341 = skip_waves_18342 * wave_sizze_18321;
            if (slt32(local_tid_18319 + offset_18341, 32) && ((local_tid_18319 - squot32(local_tid_18319, wave_sizze_18321) * wave_sizze_18321) == 0 && (squot32(local_tid_18319, wave_sizze_18321) & (2 * skip_waves_18342 - 1)) == 0)) {
                // read array element
                {
                    eta_p_16144 = futrts_from_bits16(((__local uint16_t *) red_arr_mem_18338)[sext_i32_i64(local_tid_18319 + offset_18341)]);
                }
                // apply reduction operation
                {
                    f16 max_res_16145 = fmax16(eta_p_16143, eta_p_16144);
                    
                    eta_p_16143 = max_res_16145;
                }
                // write result of operation
                {
                    ((__local uint16_t *) red_arr_mem_18338)[sext_i32_i64(local_tid_18319)] = futrts_to_bits16(eta_p_16143);
                }
            }
            skip_waves_18342 *= 2;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_LOCAL_MEM_FENCE);
        // Save result of reduction.
        {
            defunc_0_reduce_comm_res_16140 = futrts_from_bits16(((__local uint16_t *) red_arr_mem_18338)[(int64_t) 0]);
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        phys_tid_16156 = sext_i32_i64(local_tid_18319);
        red_arr_mem_18343 = (__local unsigned char *) red_arr_mem_18343_backing_2;
        gtid_16155 = sext_i32_i64(sext_i64_i32(ltid_pre_18323));
        r_16163 = (f16) 0.0F;
        for (int64_t i_16162 = 0; i_16162 < (int64_t) 32; i_16162++) {
            int64_t zp_lhs_16164;
            int64_t f_arg0_16165;
            f16 f_arg0_16166;
            f16 real_exp_arg0_16167;
            f16 exp_res_16168;
            f16 defunc_0_bop_res_16169;
            f16 r_tmp_18345;
            
            zp_lhs_16164 = mul64((int64_t) 32, i_16162);
            f_arg0_16165 = add64(gtid_16155, zp_lhs_16164);
            f_arg0_16166 = futrts_from_bits16(((__local uint16_t *) color_18078)[f_arg0_16165]);
            real_exp_arg0_16167 = f_arg0_16166 - defunc_0_reduce_comm_res_16140;
            exp_res_16168 = futrts_exp16(real_exp_arg0_16167);
            defunc_0_bop_res_16169 = r_16163 + exp_res_16168;
            r_tmp_18345 = defunc_0_bop_res_16169;
            r_16163 = r_tmp_18345;
        }
        defunc_0_f_res_16161 = r_16163;
        ((__local uint16_t *) red_arr_mem_18343)[gtid_16155] = futrts_to_bits16(defunc_0_f_res_16161);
        barrier(CLK_LOCAL_MEM_FENCE);
        skip_waves_18347 = 1;
        offset_18346 = 0;
        // participating threads read initial accumulator
        {
            if (slt32(local_tid_18319, 32)) {
                eta_p_16157 = futrts_from_bits16(((__local uint16_t *) red_arr_mem_18343)[sext_i32_i64(local_tid_18319 + offset_18346)]);
            }
        }
        offset_18346 = 1;
        while (slt32(offset_18346, wave_sizze_18321)) {
            if (slt32(local_tid_18319 + offset_18346, 32) && ((local_tid_18319 - squot32(local_tid_18319, wave_sizze_18321) * wave_sizze_18321) & (2 * offset_18346 - 1)) == 0) {
                // read array element
                {
                    eta_p_16158 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18343)[sext_i32_i64(local_tid_18319 + offset_18346)]);
                }
                // apply reduction operation
                {
                    f16 defunc_0_op_res_16159 = eta_p_16157 + eta_p_16158;
                    
                    eta_p_16157 = defunc_0_op_res_16159;
                }
                // write result of operation
                {
                    ((volatile __local uint16_t *) red_arr_mem_18343)[sext_i32_i64(local_tid_18319)] = futrts_to_bits16(eta_p_16157);
                }
            }
            offset_18346 *= 2;
        }
        while (slt32(skip_waves_18347, squot32(32 + wave_sizze_18321 - 1, wave_sizze_18321))) {
            barrier(CLK_LOCAL_MEM_FENCE);
            offset_18346 = skip_waves_18347 * wave_sizze_18321;
            if (slt32(local_tid_18319 + offset_18346, 32) && ((local_tid_18319 - squot32(local_tid_18319, wave_sizze_18321) * wave_sizze_18321) == 0 && (squot32(local_tid_18319, wave_sizze_18321) & (2 * skip_waves_18347 - 1)) == 0)) {
                // read array element
                {
                    eta_p_16158 = futrts_from_bits16(((__local uint16_t *) red_arr_mem_18343)[sext_i32_i64(local_tid_18319 + offset_18346)]);
                }
                // apply reduction operation
                {
                    f16 defunc_0_op_res_16159 = eta_p_16157 + eta_p_16158;
                    
                    eta_p_16157 = defunc_0_op_res_16159;
                }
                // write result of operation
                {
                    ((__local uint16_t *) red_arr_mem_18343)[sext_i32_i64(local_tid_18319)] = futrts_to_bits16(eta_p_16157);
                }
            }
            skip_waves_18347 *= 2;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_LOCAL_MEM_FENCE);
        // Save result of reduction.
        {
            defunc_0_reduce_comm_res_16154 = futrts_from_bits16(((__local uint16_t *) red_arr_mem_18343)[(int64_t) 0]);
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        max_res_16170 = fmax16(mi_old_16133, defunc_0_reduce_comm_res_16140);
        real_exp_arg0_16171 = defunc_0_reduce_comm_res_16140 - max_res_16170;
        exp_res_16172 = futrts_exp16(real_exp_arg0_16171);
        exp_arg0_16173 = mi_old_16133 - max_res_16170;
        exp_res_16174 = futrts_exp16(exp_arg0_16173);
        eli_16175 = li_old_16134 * exp_res_16174;
        zp_rhs_16176 = defunc_0_reduce_comm_res_16154 * exp_res_16172;
        li_new_16177 = eli_16175 + zp_rhs_16176;
        mi_old_tmp_18333 = max_res_16170;
        li_old_tmp_18334 = li_new_16177;
        mi_old_16133 = mi_old_tmp_18333;
        li_old_16134 = li_old_tmp_18334;
    }
    softmaxChunkML_res_16130 = mi_old_16133;
    softmaxChunkML_res_16131 = li_old_16134;
    if (local_tid_18319 == 0) {
        ((__global uint16_t *) mem_17610)[gtid_16125 * d_10414 + gtid_16126] = futrts_to_bits16(softmaxChunkML_res_16130);
    }
    if (local_tid_18319 == 0) {
        ((__global uint16_t *) mem_17613)[gtid_16125 * d_10414 + gtid_16126] = futrts_to_bits16(softmaxChunkML_res_16131);
    }
    
  error_10:
    return;
}
FUTHARK_KERNEL
void thesislike256zisegmap_intrablock_16224(__global int *global_failure, int64_t m_10413, int64_t d_10414, int64_t dzlz7bUZLztZRz20Umz20Udz7dUzg_10415, int64_t one_intra_par_min_15410, int64_t binop_x_17598, __global unsigned char *V_mem_17593, __global unsigned char *mem_17618, __global unsigned char *mem_17625)
{
    volatile __local unsigned char *red_arr_mem_18378_backing_1 = &shared_mem[0];
    const int64_t red_arr_mem_18378_backing_1_offset = 0 + ((int64_t) 2 * (d_10414 * dzlz7bUZLztZRz20Umz20Udz7dUzg_10415) + srem64((int64_t) 8 - srem64((int64_t) 2 * (d_10414 * dzlz7bUZLztZRz20Umz20Udz7dUzg_10415), (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_18079_backing_0 = &shared_mem[red_arr_mem_18378_backing_1_offset];
    const int64_t color_18079_backing_0_offset = red_arr_mem_18378_backing_1_offset + (binop_x_17598 + srem64((int64_t) 8 - srem64(binop_x_17598, (int64_t) 8), (int64_t) 8));
    
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_18364;
    int32_t tblock_sizze_18367;
    int32_t wave_sizze_18366;
    int32_t block_id_18365;
    int32_t global_tid_18363;
    int64_t phys_tblock_id_16224;
    int64_t slice_18370;
    int64_t slice_18371;
    int64_t ltid_pre_18368;
    int64_t remnant_18372;
    int64_t ltid_pre_18369;
    int64_t remnant_18373;
    int64_t slice_18374;
    int64_t slice_18375;
    int64_t gtid_16222;
    int64_t remnant_18376;
    int64_t gtid_16223;
    int64_t remnant_18377;
    __local unsigned char *color_18079;
    int64_t phys_tid_16230;
    __local unsigned char *red_arr_mem_18378;
    int64_t gtid_16228;
    int64_t gtid_16229;
    int64_t dims_flat_18380;
    f16 eta_p_16231;
    f16 eta_p_16232;
    f16 eta_p_18382;
    f16 eta_p_18383;
    bool ltid_in_bounds_18385;
    int32_t skip_threads_18386;
    bool no_carry_in_18392;
    int32_t num_chunks_18397;
    
    local_tid_18364 = get_local_id(0);
    tblock_sizze_18367 = get_local_size(0);
    wave_sizze_18366 = LOCKSTEP_WIDTH;
    block_id_18365 = get_tblock_id(0);
    global_tid_18363 = block_id_18365 * tblock_sizze_18367 + local_tid_18364;
    phys_tblock_id_16224 = sext_i32_i64(block_id_18365);
    slice_18370 = dzlz7bUZLztZRz20Umz20Udz7dUzg_10415;
    slice_18371 = d_10414 * slice_18370;
    ltid_pre_18368 = squot64(sext_i32_i64(local_tid_18364), slice_18370);
    remnant_18372 = sext_i32_i64(local_tid_18364) - ltid_pre_18368 * slice_18370;
    ltid_pre_18369 = remnant_18372;
    remnant_18373 = remnant_18372 - ltid_pre_18369;
    slice_18374 = d_10414;
    slice_18375 = m_10413 * slice_18374;
    gtid_16222 = squot64(sext_i32_i64(block_id_18365), slice_18374);
    remnant_18376 = sext_i32_i64(block_id_18365) - gtid_16222 * slice_18374;
    gtid_16223 = remnant_18376;
    remnant_18377 = remnant_18376 - gtid_16223;
    color_18079 = (__local unsigned char *) color_18079_backing_0;
    phys_tid_16230 = sext_i32_i64(local_tid_18364);
    red_arr_mem_18378 = (__local unsigned char *) red_arr_mem_18378_backing_1;
    gtid_16228 = sext_i32_i64(sext_i64_i32(ltid_pre_18368));
    gtid_16229 = sext_i32_i64(sext_i64_i32(ltid_pre_18369));
    if (slt64(gtid_16228, d_10414) && slt64(gtid_16229, dzlz7bUZLztZRz20Umz20Udz7dUzg_10415)) {
        f16 eta_p_16235;
        f16 eta_p_16236;
        f16 defunc_0_f_res_16237;
        
        eta_p_16235 = futrts_from_bits16(((__global uint16_t *) mem_17618)[gtid_16222 * (dzlz7bUZLztZRz20Umz20Udz7dUzg_10415 * d_10414) + gtid_16223 * dzlz7bUZLztZRz20Umz20Udz7dUzg_10415 + gtid_16229]);
        eta_p_16236 = futrts_from_bits16(((__global uint16_t *) V_mem_17593)[gtid_16229 * d_10414 + gtid_16228]);
        defunc_0_f_res_16237 = eta_p_16235 * eta_p_16236;
        ((__local uint16_t *) red_arr_mem_18378)[gtid_16228 * dzlz7bUZLztZRz20Umz20Udz7dUzg_10415 + gtid_16229] = futrts_to_bits16(defunc_0_f_res_16237);
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    dims_flat_18380 = d_10414 * dzlz7bUZLztZRz20Umz20Udz7dUzg_10415;
    ltid_in_bounds_18385 = slt64(sext_i32_i64(local_tid_18364), d_10414 * dzlz7bUZLztZRz20Umz20Udz7dUzg_10415);
    // read input for in-block scan
    {
        if (ltid_in_bounds_18385) {
            eta_p_16232 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18378)[sext_i32_i64(local_tid_18364)]);
            if ((local_tid_18364 - squot32(local_tid_18364, 32) * 32) == 0) {
                eta_p_16231 = eta_p_16232;
            }
        }
    }
    // in-block scan (hopefully no barriers needed)
    {
        skip_threads_18386 = 1;
        while (slt32(skip_threads_18386, 32)) {
            bool thread_active_18387 = sle32(skip_threads_18386, local_tid_18364 - squot32(local_tid_18364, 32) * 32) && ltid_in_bounds_18385;
            
            if (thread_active_18387) {
                // read operands
                {
                    eta_p_16231 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18378)[sext_i32_i64(local_tid_18364) - sext_i32_i64(skip_threads_18386)]);
                }
            }
            // perform operation
            {
                bool inactive_18388 = slt64(srem64(sext_i32_i64(local_tid_18364), dzlz7bUZLztZRz20Umz20Udz7dUzg_10415), sext_i32_i64(local_tid_18364) - sext_i32_i64(local_tid_18364 - skip_threads_18386));
                
                if (thread_active_18387 && inactive_18388) {
                    eta_p_16231 = eta_p_16232;
                }
                if (thread_active_18387) {
                    if (!inactive_18388) {
                        f16 defunc_0_op_res_16233 = eta_p_16231 + eta_p_16232;
                        
                        eta_p_16231 = defunc_0_op_res_16233;
                    }
                }
            }
            if (sle32(wave_sizze_18366, skip_threads_18386)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            if (thread_active_18387) {
                // write result
                {
                    ((volatile __local uint16_t *) red_arr_mem_18378)[sext_i32_i64(local_tid_18364)] = futrts_to_bits16(eta_p_16231);
                    eta_p_16232 = eta_p_16231;
                }
            }
            if (sle32(wave_sizze_18366, skip_threads_18386)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            skip_threads_18386 *= 2;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // last thread of block 'i' writes its result to offset 'i'
    {
        if ((local_tid_18364 - squot32(local_tid_18364, 32) * 32) == 31 && ltid_in_bounds_18385) {
            ((volatile __local uint16_t *) red_arr_mem_18378)[sext_i32_i64(squot32(local_tid_18364, 32))] = futrts_to_bits16(eta_p_16231);
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
    {
        int32_t skip_threads_18389;
        
        // read input for in-block scan
        {
            if (squot32(local_tid_18364, 32) == 0 && ltid_in_bounds_18385) {
                eta_p_18383 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18378)[sext_i32_i64(local_tid_18364)]);
                if ((local_tid_18364 - squot32(local_tid_18364, 32) * 32) == 0) {
                    eta_p_18382 = eta_p_18383;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_18389 = 1;
            while (slt32(skip_threads_18389, 32)) {
                bool thread_active_18390 = sle32(skip_threads_18389, local_tid_18364 - squot32(local_tid_18364, 32) * 32) && (squot32(local_tid_18364, 32) == 0 && ltid_in_bounds_18385);
                
                if (thread_active_18390) {
                    // read operands
                    {
                        eta_p_18382 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18378)[sext_i32_i64(local_tid_18364) - sext_i32_i64(skip_threads_18389)]);
                    }
                }
                // perform operation
                {
                    bool inactive_18391 = slt64(srem64(sext_i32_i64(local_tid_18364 * 32 + 32 - 1), dzlz7bUZLztZRz20Umz20Udz7dUzg_10415), sext_i32_i64(local_tid_18364 * 32 + 32 - 1) - sext_i32_i64((local_tid_18364 - skip_threads_18389) * 32 + 32 - 1));
                    
                    if (thread_active_18390 && inactive_18391) {
                        eta_p_18382 = eta_p_18383;
                    }
                    if (thread_active_18390) {
                        if (!inactive_18391) {
                            f16 defunc_0_op_res_18384 = eta_p_18382 + eta_p_18383;
                            
                            eta_p_18382 = defunc_0_op_res_18384;
                        }
                    }
                }
                if (sle32(wave_sizze_18366, skip_threads_18389)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (thread_active_18390) {
                    // write result
                    {
                        ((volatile __local uint16_t *) red_arr_mem_18378)[sext_i32_i64(local_tid_18364)] = futrts_to_bits16(eta_p_18382);
                        eta_p_18383 = eta_p_18382;
                    }
                }
                if (sle32(wave_sizze_18366, skip_threads_18389)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_18389 *= 2;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    no_carry_in_18392 = squot32(local_tid_18364, 32) == 0 || !ltid_in_bounds_18385;
    // carry-in for every block except the first
    {
        // read operands
        {
            if (!no_carry_in_18392) {
                eta_p_16232 = eta_p_16231;
                eta_p_16231 = futrts_from_bits16(((__local uint16_t *) red_arr_mem_18378)[sext_i32_i64(squot32(local_tid_18364, 32)) - (int64_t) 1]);
            }
        }
        // perform operation
        {
            bool inactive_18393 = slt64(srem64(sext_i32_i64(local_tid_18364), dzlz7bUZLztZRz20Umz20Udz7dUzg_10415), sext_i32_i64(local_tid_18364) - sext_i32_i64(squot32(local_tid_18364, 32) * 32 - 1));
            
            if (!no_carry_in_18392) {
                if (inactive_18393) {
                    eta_p_16231 = eta_p_16232;
                }
            }
            if (!no_carry_in_18392) {
                if (!inactive_18393) {
                    f16 defunc_0_op_res_16233 = eta_p_16231 + eta_p_16232;
                    
                    eta_p_16231 = defunc_0_op_res_16233;
                }
            }
        }
        // write final result
        {
            if (!no_carry_in_18392) {
                ((__local uint16_t *) red_arr_mem_18378)[sext_i32_i64(local_tid_18364)] = futrts_to_bits16(eta_p_16231);
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // restore correct values for first block
    {
        if (squot32(local_tid_18364, 32) == 0 && ltid_in_bounds_18385) {
            ((__local uint16_t *) red_arr_mem_18378)[sext_i32_i64(local_tid_18364)] = futrts_to_bits16(eta_p_16232);
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    barrier(CLK_LOCAL_MEM_FENCE);
    // Save result of reduction.
    {
        int32_t num_chunks_18394 = sdiv_up32(sext_i64_i32(d_10414), sext_i64_i32(one_intra_par_min_15410));
        
        for (int32_t chunk_i_18395 = 0; chunk_i_18395 < num_chunks_18394; chunk_i_18395++) {
            int32_t i_18396 = chunk_i_18395 * sext_i64_i32(one_intra_par_min_15410) + local_tid_18364;
            
            if (slt32(i_18396, sext_i64_i32(d_10414))) {
                ((__local uint16_t *) color_18079)[sext_i32_i64(i_18396)] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) red_arr_mem_18378)[dzlz7bUZLztZRz20Umz20Udz7dUzg_10415 - (int64_t) 1 + sext_i32_i64(i_18396) * dzlz7bUZLztZRz20Umz20Udz7dUzg_10415]));
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    num_chunks_18397 = sdiv_up32(sext_i64_i32(d_10414), sext_i64_i32(one_intra_par_min_15410));
    for (int32_t chunk_i_18398 = 0; chunk_i_18398 < num_chunks_18397; chunk_i_18398++) {
        int32_t i_18399 = chunk_i_18398 * sext_i64_i32(one_intra_par_min_15410) + local_tid_18364;
        
        if (slt32(i_18399, sext_i64_i32(d_10414))) {
            ((__global uint16_t *) mem_17625)[gtid_16222 * (d_10414 * d_10414) + gtid_16223 * d_10414 + sext_i32_i64(i_18399)] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) color_18079)[sext_i32_i64(i_18399)]));
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
  error_3:
    return;
}
FUTHARK_KERNEL_SIZED(thesislike512zisegmap_17181_dim1, 1, 1)
void thesislike512zisegmap_17181(__global int *global_failure, int64_t m_10431, int64_t d_10432, int64_t dzlz7bUZLztZRz20Umz20Udz7dUzg_10433, int64_t one_intra_par_min_16386, int64_t y_16387, __global unsigned char *mem_17605, __global unsigned char *mem_17610, __global unsigned char *mem_17613, __global unsigned char *mem_17618)
{
    #define segmap_tblock_sizze_17175 (thesislike512zisegmap_17181zisegmap_tblock_sizze_17175)
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_18350;
    int32_t tblock_sizze_18353;
    int32_t wave_sizze_18352;
    int32_t block_id_18351;
    int32_t global_tid_18349;
    int64_t phys_tid_17181;
    int64_t global_tid_18354;
    int64_t slice_18355;
    int64_t slice_18356;
    int64_t slice_18357;
    int64_t gtid_17178;
    int64_t remnant_18358;
    int64_t gtid_17179;
    int64_t remnant_18359;
    int64_t gtid_17180;
    int64_t remnant_18360;
    
    local_tid_18350 = get_local_id(0);
    tblock_sizze_18353 = get_local_size(0);
    wave_sizze_18352 = LOCKSTEP_WIDTH;
    block_id_18351 = get_tblock_id(0);
    global_tid_18349 = block_id_18351 * tblock_sizze_18353 + local_tid_18350;
    phys_tid_17181 = sext_i32_i64(global_tid_18349);
    global_tid_18354 = sext_i32_i64(block_id_18351) * segmap_tblock_sizze_17175 + sext_i32_i64(local_tid_18350);
    slice_18355 = dzlz7bUZLztZRz20Umz20Udz7dUzg_10433;
    slice_18356 = d_10432 * slice_18355;
    slice_18357 = m_10431 * slice_18356;
    gtid_17178 = squot64(global_tid_18354, slice_18356);
    remnant_18358 = global_tid_18354 - gtid_17178 * slice_18356;
    gtid_17179 = squot64(remnant_18358, slice_18355);
    remnant_18359 = remnant_18358 - gtid_17179 * slice_18355;
    gtid_17180 = remnant_18359;
    remnant_18360 = remnant_18359 - gtid_17180;
    if ((slt64(gtid_17178, m_10431) && slt64(gtid_17179, d_10432)) && slt64(gtid_17180, dzlz7bUZLztZRz20Umz20Udz7dUzg_10433)) {
        f16 eta_p_17182;
        f16 eta_p_17183;
        int64_t binop_x_17251;
        int64_t binop_y_17252;
        int64_t binop_x_17253;
        int64_t binop_x_17254;
        int64_t new_index_17257;
        int64_t binop_y_17273;
        int64_t binop_x_17274;
        int64_t new_index_17276;
        int64_t binop_y_17314;
        int64_t binop_x_17315;
        int64_t new_index_17316;
        int64_t binop_y_17396;
        int64_t new_index_17397;
        f16 eta_p_17184;
        f16 real_exp_arg0_17185;
        f16 exp_res_17186;
        f16 lifted_lambda_res_17187;
        
        eta_p_17182 = futrts_from_bits16(((__global uint16_t *) mem_17610)[gtid_17178 * d_10432 + gtid_17179]);
        eta_p_17183 = futrts_from_bits16(((__global uint16_t *) mem_17613)[gtid_17178 * d_10432 + gtid_17179]);
        binop_x_17251 = one_intra_par_min_16386 * gtid_17178;
        binop_y_17252 = d_10432 * gtid_17180;
        binop_x_17253 = binop_x_17251 + binop_y_17252;
        binop_x_17254 = gtid_17179 + binop_x_17253;
        new_index_17257 = squot64(binop_x_17254, one_intra_par_min_16386);
        binop_y_17273 = one_intra_par_min_16386 * new_index_17257;
        binop_x_17274 = binop_x_17254 - binop_y_17273;
        new_index_17276 = squot64(binop_x_17274, y_16387);
        binop_y_17314 = y_16387 * new_index_17276;
        binop_x_17315 = binop_x_17274 - binop_y_17314;
        new_index_17316 = squot64(binop_x_17315, d_10432);
        binop_y_17396 = d_10432 * new_index_17316;
        new_index_17397 = binop_x_17315 - binop_y_17396;
        eta_p_17184 = futrts_from_bits16(((__global uint16_t *) mem_17605)[new_index_17257 * (d_10432 * d_10432 * m_10431) + new_index_17276 * (d_10432 * d_10432) + new_index_17316 * d_10432 + new_index_17397]);
        real_exp_arg0_17185 = eta_p_17184 - eta_p_17182;
        exp_res_17186 = futrts_exp16(real_exp_arg0_17185);
        lifted_lambda_res_17187 = exp_res_17186 / eta_p_17183;
        ((__global uint16_t *) mem_17618)[gtid_17178 * (dzlz7bUZLztZRz20Umz20Udz7dUzg_10433 * d_10432) + gtid_17179 * dzlz7bUZLztZRz20Umz20Udz7dUzg_10433 + gtid_17180] = futrts_to_bits16(lifted_lambda_res_17187);
    }
    
  error_0:
    return;
    #undef segmap_tblock_sizze_17175
}
FUTHARK_KERNEL
void thesislike512zisegmap_intrablock_16623(__global int *global_failure, int64_t m_10431, int64_t d_10432, int64_t dzlz7bUZLztZRz20Umz20Udz7dUzg_10433, int64_t q_11504, unsigned char opaque_res_11508_bits, int64_t computed_tblock_sizze_16243, int64_t y_16387, int64_t binop_x_17598, int64_t bytes_17624, int64_t bytes_17651, int64_t maxSubHelper_18063, int64_t maxSubHelper_18064, int64_t maxSubHelper_18066, int32_t num_chunks_18094, __global unsigned char *Q_mem_17591, __global unsigned char *K_mem_17592, __global unsigned char *V_mem_17593, __global unsigned char *mem_17683)
{
    bool opaque_res_11508 = opaque_res_11508_bits;
    volatile __local unsigned char *red_arr_mem_18244_backing_12 = &shared_mem[0];
    const int64_t red_arr_mem_18244_backing_12_offset = 0 + ((int64_t) 2 * (d_10432 * d_10432 * dzlz7bUZLztZRz20Umz20Udz7dUzg_10433) + srem64((int64_t) 8 - srem64((int64_t) 2 * (d_10432 * d_10432 * dzlz7bUZLztZRz20Umz20Udz7dUzg_10433), (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *red_arr_mem_18224_backing_11 = &shared_mem[red_arr_mem_18244_backing_12_offset];
    const int64_t red_arr_mem_18224_backing_11_offset = red_arr_mem_18244_backing_12_offset + ((int64_t) 2 * (d_10432 * (int64_t) 32) + srem64((int64_t) 8 - srem64((int64_t) 2 * (d_10432 * (int64_t) 32), (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *red_arr_mem_18204_backing_10 = &shared_mem[red_arr_mem_18224_backing_11_offset];
    const int64_t red_arr_mem_18204_backing_10_offset = red_arr_mem_18224_backing_11_offset + ((int64_t) 2 * (d_10432 * (int64_t) 32) + srem64((int64_t) 8 - srem64((int64_t) 2 * (d_10432 * (int64_t) 32), (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *red_arr_mem_18158_backing_9 = &shared_mem[red_arr_mem_18204_backing_10_offset];
    const int64_t red_arr_mem_18158_backing_9_offset = red_arr_mem_18204_backing_10_offset + ((int64_t) 4 * (m_10431 * d_10432 * d_10432 * d_10432) + srem64((int64_t) 8 - srem64((int64_t) 4 * (m_10431 * d_10432 * d_10432 * d_10432), (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_18075_backing_8 = &shared_mem[red_arr_mem_18158_backing_9_offset];
    const int64_t color_18075_backing_8_offset = red_arr_mem_18158_backing_9_offset + (bytes_17624 + srem64((int64_t) 8 - srem64(bytes_17624, (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_18074_backing_7 = &shared_mem[color_18075_backing_8_offset];
    const int64_t color_18074_backing_7_offset = color_18075_backing_8_offset + (bytes_17651 + srem64((int64_t) 8 - srem64(bytes_17651, (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_18073_backing_6 = &shared_mem[color_18074_backing_7_offset];
    const int64_t color_18073_backing_6_offset = color_18074_backing_7_offset + (bytes_17651 + srem64((int64_t) 8 - srem64(bytes_17651, (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_18072_backing_5 = &shared_mem[color_18073_backing_6_offset];
    const int64_t color_18072_backing_5_offset = color_18073_backing_6_offset + (binop_x_17598 + srem64((int64_t) 8 - srem64(binop_x_17598, (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_18071_backing_4 = &shared_mem[color_18072_backing_5_offset];
    const int64_t color_18071_backing_4_offset = color_18072_backing_5_offset + (binop_x_17598 + srem64((int64_t) 8 - srem64(binop_x_17598, (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_18070_backing_3 = &shared_mem[color_18071_backing_4_offset];
    const int64_t color_18070_backing_3_offset = color_18071_backing_4_offset + (binop_x_17598 + srem64((int64_t) 8 - srem64(binop_x_17598, (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_18069_backing_2 = &shared_mem[color_18070_backing_3_offset];
    const int64_t color_18069_backing_2_offset = color_18070_backing_3_offset + (maxSubHelper_18066 + srem64((int64_t) 8 - srem64(maxSubHelper_18066, (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_18068_backing_1 = &shared_mem[color_18069_backing_2_offset];
    const int64_t color_18068_backing_1_offset = color_18069_backing_2_offset + (maxSubHelper_18064 + srem64((int64_t) 8 - srem64(maxSubHelper_18064, (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_18067_backing_0 = &shared_mem[color_18068_backing_1_offset];
    const int64_t color_18067_backing_0_offset = color_18068_backing_1_offset + (maxSubHelper_18063 + srem64((int64_t) 8 - srem64(maxSubHelper_18063, (int64_t) 8), (int64_t) 8));
    
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_18101;
    int32_t tblock_sizze_18104;
    int32_t wave_sizze_18103;
    int32_t block_id_18102;
    int32_t global_tid_18100;
    int64_t phys_tblock_id_16623;
    int64_t slice_18108;
    int64_t slice_18109;
    int64_t slice_18110;
    int64_t ltid_pre_18105;
    int64_t remnant_18111;
    int64_t ltid_pre_18106;
    int64_t remnant_18112;
    int64_t ltid_pre_18107;
    int64_t remnant_18113;
    int64_t slice_18118;
    int64_t slice_18119;
    int64_t slice_18120;
    int64_t slice_18121;
    int64_t ltid_pre_18114;
    int64_t remnant_18122;
    int64_t ltid_pre_18115;
    int64_t remnant_18123;
    int64_t ltid_pre_18116;
    int64_t remnant_18124;
    int64_t ltid_pre_18117;
    int64_t remnant_18125;
    int64_t slice_18127;
    int64_t ltid_pre_18126;
    int64_t remnant_18128;
    int64_t slice_18131;
    int64_t slice_18132;
    int64_t ltid_pre_18129;
    int64_t remnant_18133;
    int64_t ltid_pre_18130;
    int64_t remnant_18134;
    int64_t slice_18137;
    int64_t slice_18138;
    int64_t ltid_pre_18135;
    int64_t remnant_18139;
    int64_t ltid_pre_18136;
    int64_t remnant_18140;
    int64_t slice_18144;
    int64_t slice_18145;
    int64_t slice_18146;
    int64_t ltid_pre_18141;
    int64_t remnant_18147;
    int64_t ltid_pre_18142;
    int64_t remnant_18148;
    int64_t ltid_pre_18143;
    int64_t remnant_18149;
    int64_t slice_18152;
    int64_t slice_18153;
    int64_t ltid_pre_18150;
    int64_t remnant_18154;
    int64_t ltid_pre_18151;
    int64_t remnant_18155;
    int64_t slice_18156;
    int64_t gtid_16622;
    int64_t remnant_18157;
    __local unsigned char *color_18067;
    __local unsigned char *color_18068;
    __local unsigned char *color_18069;
    __local unsigned char *color_18070;
    __local unsigned char *color_18071;
    __local unsigned char *color_18072;
    __local unsigned char *color_18073;
    __local unsigned char *color_18074;
    __local unsigned char *color_18075;
    int64_t phys_tid_16631;
    __local unsigned char *red_arr_mem_18158;
    int64_t gtid_16627;
    int64_t gtid_16628;
    int64_t gtid_16629;
    int64_t gtid_16630;
    int64_t dims_flat_18160;
    float eta_p_16632;
    float eta_p_16633;
    float eta_p_18162;
    float eta_p_18163;
    bool ltid_in_bounds_18165;
    int32_t skip_threads_18166;
    bool no_carry_in_18172;
    int64_t phys_tid_16646;
    int64_t gtid_16643;
    int64_t gtid_16644;
    int64_t gtid_16645;
    int32_t num_chunks_18177;
    __local unsigned char *ext_mem_17673;
    __local unsigned char *ext_mem_unused_17998;
    __local unsigned char *ext_mem_17672;
    __local unsigned char *ext_mem_unused_18007;
    __local unsigned char *mem_param_17646;
    __local unsigned char *mem_param_17649;
    __local unsigned char *mem_param_out_17999;
    __local unsigned char *mem_param_out_18008;
    int64_t phys_tid_16729;
    int64_t gtid_16727;
    int64_t gtid_16728;
    int64_t phys_tid_16741;
    __local unsigned char *red_arr_mem_18244;
    int64_t gtid_16738;
    int64_t gtid_16739;
    int64_t gtid_16740;
    int64_t dims_flat_18246;
    f16 eta_p_16742;
    f16 eta_p_16743;
    f16 eta_p_18248;
    f16 eta_p_18249;
    bool ltid_in_bounds_18251;
    int32_t skip_threads_18252;
    bool no_carry_in_18258;
    int32_t num_chunks_18263;
    
    local_tid_18101 = get_local_id(0);
    tblock_sizze_18104 = get_local_size(0);
    wave_sizze_18103 = LOCKSTEP_WIDTH;
    block_id_18102 = get_tblock_id(0);
    global_tid_18100 = block_id_18102 * tblock_sizze_18104 + local_tid_18101;
    phys_tblock_id_16623 = sext_i32_i64(block_id_18102);
    slice_18108 = d_10432;
    slice_18109 = d_10432 * slice_18108;
    slice_18110 = m_10431 * slice_18109;
    ltid_pre_18105 = squot64(sext_i32_i64(local_tid_18101), slice_18109);
    remnant_18111 = sext_i32_i64(local_tid_18101) - ltid_pre_18105 * slice_18109;
    ltid_pre_18106 = squot64(remnant_18111, slice_18108);
    remnant_18112 = remnant_18111 - ltid_pre_18106 * slice_18108;
    ltid_pre_18107 = remnant_18112;
    remnant_18113 = remnant_18112 - ltid_pre_18107;
    slice_18118 = d_10432;
    slice_18119 = d_10432 * slice_18118;
    slice_18120 = d_10432 * slice_18119;
    slice_18121 = m_10431 * slice_18120;
    ltid_pre_18114 = squot64(sext_i32_i64(local_tid_18101), slice_18120);
    remnant_18122 = sext_i32_i64(local_tid_18101) - ltid_pre_18114 * slice_18120;
    ltid_pre_18115 = squot64(remnant_18122, slice_18119);
    remnant_18123 = remnant_18122 - ltid_pre_18115 * slice_18119;
    ltid_pre_18116 = squot64(remnant_18123, slice_18118);
    remnant_18124 = remnant_18123 - ltid_pre_18116 * slice_18118;
    ltid_pre_18117 = remnant_18124;
    remnant_18125 = remnant_18124 - ltid_pre_18117;
    slice_18127 = d_10432;
    ltid_pre_18126 = sext_i32_i64(local_tid_18101);
    remnant_18128 = sext_i32_i64(local_tid_18101) - ltid_pre_18126;
    slice_18131 = (int64_t) 32;
    slice_18132 = d_10432 * slice_18131;
    ltid_pre_18129 = squot64(sext_i32_i64(local_tid_18101), slice_18131);
    remnant_18133 = sext_i32_i64(local_tid_18101) - ltid_pre_18129 * slice_18131;
    ltid_pre_18130 = remnant_18133;
    remnant_18134 = remnant_18133 - ltid_pre_18130;
    slice_18137 = (int64_t) 1024;
    slice_18138 = d_10432 * slice_18137;
    ltid_pre_18135 = squot64(sext_i32_i64(local_tid_18101), slice_18137);
    remnant_18139 = sext_i32_i64(local_tid_18101) - ltid_pre_18135 * slice_18137;
    ltid_pre_18136 = remnant_18139;
    remnant_18140 = remnant_18139 - ltid_pre_18136;
    slice_18144 = dzlz7bUZLztZRz20Umz20Udz7dUzg_10433;
    slice_18145 = d_10432 * slice_18144;
    slice_18146 = d_10432 * slice_18145;
    ltid_pre_18141 = squot64(sext_i32_i64(local_tid_18101), slice_18145);
    remnant_18147 = sext_i32_i64(local_tid_18101) - ltid_pre_18141 * slice_18145;
    ltid_pre_18142 = squot64(remnant_18147, slice_18144);
    remnant_18148 = remnant_18147 - ltid_pre_18142 * slice_18144;
    ltid_pre_18143 = remnant_18148;
    remnant_18149 = remnant_18148 - ltid_pre_18143;
    slice_18152 = dzlz7bUZLztZRz20Umz20Udz7dUzg_10433;
    slice_18153 = d_10432 * slice_18152;
    ltid_pre_18150 = squot64(sext_i32_i64(local_tid_18101), slice_18152);
    remnant_18154 = sext_i32_i64(local_tid_18101) - ltid_pre_18150 * slice_18152;
    ltid_pre_18151 = remnant_18154;
    remnant_18155 = remnant_18154 - ltid_pre_18151;
    slice_18156 = m_10431;
    gtid_16622 = sext_i32_i64(block_id_18102);
    remnant_18157 = sext_i32_i64(block_id_18102) - gtid_16622;
    color_18067 = (__local unsigned char *) color_18067_backing_0;
    color_18068 = (__local unsigned char *) color_18068_backing_1;
    color_18069 = (__local unsigned char *) color_18069_backing_2;
    color_18070 = (__local unsigned char *) color_18070_backing_3;
    color_18071 = (__local unsigned char *) color_18071_backing_4;
    color_18072 = (__local unsigned char *) color_18072_backing_5;
    color_18073 = (__local unsigned char *) color_18073_backing_6;
    color_18074 = (__local unsigned char *) color_18074_backing_7;
    color_18075 = (__local unsigned char *) color_18075_backing_8;
    phys_tid_16631 = sext_i32_i64(local_tid_18101);
    red_arr_mem_18158 = (__local unsigned char *) red_arr_mem_18158_backing_9;
    gtid_16627 = sext_i32_i64(sext_i64_i32(ltid_pre_18114));
    gtid_16628 = sext_i32_i64(sext_i64_i32(ltid_pre_18115));
    gtid_16629 = sext_i32_i64(sext_i64_i32(ltid_pre_18116));
    gtid_16630 = sext_i32_i64(sext_i64_i32(ltid_pre_18117));
    if (((slt64(gtid_16627, m_10431) && slt64(gtid_16628, d_10432)) && slt64(gtid_16629, d_10432)) && slt64(gtid_16630, d_10432)) {
        f16 eta_p_16638;
        int64_t binop_x_17232;
        int64_t binop_y_17233;
        int64_t binop_x_17234;
        int64_t binop_x_17235;
        int64_t new_index_17236;
        int64_t binop_y_17248;
        int64_t new_index_17249;
        f16 eta_p_16639;
        f16 defunc_0_f_res_16640;
        float f16_res_16641;
        
        eta_p_16638 = futrts_from_bits16(((__global uint16_t *) Q_mem_17591)[gtid_16622 * (d_10432 * d_10432) + gtid_16628 * d_10432 + gtid_16630]);
        binop_x_17232 = y_16387 * gtid_16627;
        binop_y_17233 = d_10432 * gtid_16629;
        binop_x_17234 = binop_x_17232 + binop_y_17233;
        binop_x_17235 = gtid_16630 + binop_x_17234;
        new_index_17236 = squot64(binop_x_17235, d_10432);
        binop_y_17248 = d_10432 * new_index_17236;
        new_index_17249 = binop_x_17235 - binop_y_17248;
        eta_p_16639 = futrts_from_bits16(((__global uint16_t *) K_mem_17592)[new_index_17236 * d_10432 + new_index_17249]);
        defunc_0_f_res_16640 = eta_p_16638 * eta_p_16639;
        f16_res_16641 = fpconv_f16_f32(defunc_0_f_res_16640);
        ((__local float *) red_arr_mem_18158)[gtid_16627 * (d_10432 * d_10432 * d_10432) + gtid_16628 * (d_10432 * d_10432) + gtid_16629 * d_10432 + gtid_16630] = f16_res_16641;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    dims_flat_18160 = m_10431 * d_10432 * d_10432 * d_10432;
    ltid_in_bounds_18165 = slt64(sext_i32_i64(local_tid_18101), m_10431 * d_10432 * d_10432 * d_10432);
    // read input for in-block scan
    {
        if (ltid_in_bounds_18165) {
            eta_p_16633 = ((volatile __local float *) red_arr_mem_18158)[sext_i32_i64(local_tid_18101)];
            if ((local_tid_18101 - squot32(local_tid_18101, 32) * 32) == 0) {
                eta_p_16632 = eta_p_16633;
            }
        }
    }
    // in-block scan (hopefully no barriers needed)
    {
        skip_threads_18166 = 1;
        while (slt32(skip_threads_18166, 32)) {
            bool thread_active_18167 = sle32(skip_threads_18166, local_tid_18101 - squot32(local_tid_18101, 32) * 32) && ltid_in_bounds_18165;
            
            if (thread_active_18167) {
                // read operands
                {
                    eta_p_16632 = ((volatile __local float *) red_arr_mem_18158)[sext_i32_i64(local_tid_18101) - sext_i32_i64(skip_threads_18166)];
                }
            }
            // perform operation
            {
                bool inactive_18168 = slt64(srem64(sext_i32_i64(local_tid_18101), d_10432), sext_i32_i64(local_tid_18101) - sext_i32_i64(local_tid_18101 - skip_threads_18166));
                
                if (thread_active_18167 && inactive_18168) {
                    eta_p_16632 = eta_p_16633;
                }
                if (thread_active_18167) {
                    if (!inactive_18168) {
                        float defunc_0_op_res_16634 = eta_p_16632 + eta_p_16633;
                        
                        eta_p_16632 = defunc_0_op_res_16634;
                    }
                }
            }
            if (sle32(wave_sizze_18103, skip_threads_18166)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            if (thread_active_18167) {
                // write result
                {
                    ((volatile __local float *) red_arr_mem_18158)[sext_i32_i64(local_tid_18101)] = eta_p_16632;
                    eta_p_16633 = eta_p_16632;
                }
            }
            if (sle32(wave_sizze_18103, skip_threads_18166)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            skip_threads_18166 *= 2;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // last thread of block 'i' writes its result to offset 'i'
    {
        if ((local_tid_18101 - squot32(local_tid_18101, 32) * 32) == 31 && ltid_in_bounds_18165) {
            ((volatile __local float *) red_arr_mem_18158)[sext_i32_i64(squot32(local_tid_18101, 32))] = eta_p_16632;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
    {
        int32_t skip_threads_18169;
        
        // read input for in-block scan
        {
            if (squot32(local_tid_18101, 32) == 0 && ltid_in_bounds_18165) {
                eta_p_18163 = ((volatile __local float *) red_arr_mem_18158)[sext_i32_i64(local_tid_18101)];
                if ((local_tid_18101 - squot32(local_tid_18101, 32) * 32) == 0) {
                    eta_p_18162 = eta_p_18163;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_18169 = 1;
            while (slt32(skip_threads_18169, 32)) {
                bool thread_active_18170 = sle32(skip_threads_18169, local_tid_18101 - squot32(local_tid_18101, 32) * 32) && (squot32(local_tid_18101, 32) == 0 && ltid_in_bounds_18165);
                
                if (thread_active_18170) {
                    // read operands
                    {
                        eta_p_18162 = ((volatile __local float *) red_arr_mem_18158)[sext_i32_i64(local_tid_18101) - sext_i32_i64(skip_threads_18169)];
                    }
                }
                // perform operation
                {
                    bool inactive_18171 = slt64(srem64(sext_i32_i64(local_tid_18101 * 32 + 32 - 1), d_10432), sext_i32_i64(local_tid_18101 * 32 + 32 - 1) - sext_i32_i64((local_tid_18101 - skip_threads_18169) * 32 + 32 - 1));
                    
                    if (thread_active_18170 && inactive_18171) {
                        eta_p_18162 = eta_p_18163;
                    }
                    if (thread_active_18170) {
                        if (!inactive_18171) {
                            float defunc_0_op_res_18164 = eta_p_18162 + eta_p_18163;
                            
                            eta_p_18162 = defunc_0_op_res_18164;
                        }
                    }
                }
                if (sle32(wave_sizze_18103, skip_threads_18169)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (thread_active_18170) {
                    // write result
                    {
                        ((volatile __local float *) red_arr_mem_18158)[sext_i32_i64(local_tid_18101)] = eta_p_18162;
                        eta_p_18163 = eta_p_18162;
                    }
                }
                if (sle32(wave_sizze_18103, skip_threads_18169)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_18169 *= 2;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    no_carry_in_18172 = squot32(local_tid_18101, 32) == 0 || !ltid_in_bounds_18165;
    // carry-in for every block except the first
    {
        // read operands
        {
            if (!no_carry_in_18172) {
                eta_p_16633 = eta_p_16632;
                eta_p_16632 = ((__local float *) red_arr_mem_18158)[sext_i32_i64(squot32(local_tid_18101, 32)) - (int64_t) 1];
            }
        }
        // perform operation
        {
            bool inactive_18173 = slt64(srem64(sext_i32_i64(local_tid_18101), d_10432), sext_i32_i64(local_tid_18101) - sext_i32_i64(squot32(local_tid_18101, 32) * 32 - 1));
            
            if (!no_carry_in_18172) {
                if (inactive_18173) {
                    eta_p_16632 = eta_p_16633;
                }
            }
            if (!no_carry_in_18172) {
                if (!inactive_18173) {
                    float defunc_0_op_res_16634 = eta_p_16632 + eta_p_16633;
                    
                    eta_p_16632 = defunc_0_op_res_16634;
                }
            }
        }
        // write final result
        {
            if (!no_carry_in_18172) {
                ((__local float *) red_arr_mem_18158)[sext_i32_i64(local_tid_18101)] = eta_p_16632;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // restore correct values for first block
    {
        if (squot32(local_tid_18101, 32) == 0 && ltid_in_bounds_18165) {
            ((__local float *) red_arr_mem_18158)[sext_i32_i64(local_tid_18101)] = eta_p_16633;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    barrier(CLK_LOCAL_MEM_FENCE);
    // Save result of reduction.
    {
        int32_t num_chunks_18174 = sdiv_up32(sext_i64_i32(m_10431) * sext_i64_i32(d_10432) * sext_i64_i32(d_10432), sext_i64_i32(computed_tblock_sizze_16243));
        
        for (int32_t chunk_i_18175 = 0; chunk_i_18175 < num_chunks_18174; chunk_i_18175++) {
            int32_t i_18176 = chunk_i_18175 * sext_i64_i32(computed_tblock_sizze_16243) + local_tid_18101;
            
            if (slt32(i_18176, sext_i64_i32(m_10431) * sext_i64_i32(d_10432) * sext_i64_i32(d_10432))) {
                ((__local float *) color_18068)[sext_i32_i64(squot32(i_18176, sext_i64_i32(d_10432) * sext_i64_i32(d_10432))) * (d_10432 * d_10432) + sext_i32_i64(squot32(i_18176 - squot32(i_18176, sext_i64_i32(d_10432) * sext_i64_i32(d_10432)) * (sext_i64_i32(d_10432) * sext_i64_i32(d_10432)), sext_i64_i32(d_10432))) * d_10432 + sext_i32_i64(i_18176 - squot32(i_18176, sext_i64_i32(d_10432) * sext_i64_i32(d_10432)) * (sext_i64_i32(d_10432) * sext_i64_i32(d_10432)) - squot32(i_18176 - squot32(i_18176, sext_i64_i32(d_10432) * sext_i64_i32(d_10432)) * (sext_i64_i32(d_10432) * sext_i64_i32(d_10432)), sext_i64_i32(d_10432)) * sext_i64_i32(d_10432))] = ((__local float *) red_arr_mem_18158)[d_10432 - (int64_t) 1 + sext_i32_i64(squot32(i_18176, sext_i64_i32(d_10432) * sext_i64_i32(d_10432))) * (d_10432 * d_10432 * d_10432) + sext_i32_i64(squot32(i_18176 - squot32(i_18176, sext_i64_i32(d_10432) * sext_i64_i32(d_10432)) * (sext_i64_i32(d_10432) * sext_i64_i32(d_10432)), sext_i64_i32(d_10432))) * (d_10432 * d_10432) + sext_i32_i64(i_18176 - squot32(i_18176, sext_i64_i32(d_10432) * sext_i64_i32(d_10432)) * (sext_i64_i32(d_10432) * sext_i64_i32(d_10432)) - squot32(i_18176 - squot32(i_18176, sext_i64_i32(d_10432) * sext_i64_i32(d_10432)) * (sext_i64_i32(d_10432) * sext_i64_i32(d_10432)), sext_i64_i32(d_10432)) * sext_i64_i32(d_10432)) * d_10432];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    phys_tid_16646 = sext_i32_i64(local_tid_18101);
    gtid_16643 = sext_i32_i64(sext_i64_i32(ltid_pre_18105));
    gtid_16644 = sext_i32_i64(sext_i64_i32(ltid_pre_18106));
    gtid_16645 = sext_i32_i64(sext_i64_i32(ltid_pre_18107));
    if ((slt64(gtid_16643, m_10431) && slt64(gtid_16644, d_10432)) && slt64(gtid_16645, d_10432)) {
        float defunc_0_f_res_16647;
        f16 f32_res_16648;
        
        defunc_0_f_res_16647 = ((__local float *) color_18068)[gtid_16643 * (d_10432 * d_10432) + gtid_16644 * d_10432 + gtid_16645];
        f32_res_16648 = fpconv_f32_f16(defunc_0_f_res_16647);
        ((__local uint16_t *) color_18067)[gtid_16643 * (d_10432 * d_10432) + gtid_16644 * d_10432 + gtid_16645] = futrts_to_bits16(f32_res_16648);
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    num_chunks_18177 = sdiv_up32(sext_i64_i32(m_10431) * sext_i64_i32(d_10432) * sext_i64_i32(d_10432), sext_i64_i32(computed_tblock_sizze_16243));
    for (int32_t chunk_i_18178 = 0; chunk_i_18178 < num_chunks_18177; chunk_i_18178++) {
        int32_t i_18179 = chunk_i_18178 * sext_i64_i32(computed_tblock_sizze_16243) + local_tid_18101;
        
        if (slt32(i_18179, sext_i64_i32(m_10431) * sext_i64_i32(d_10432) * sext_i64_i32(d_10432))) {
            ((__local uint16_t *) color_18075)[sext_i32_i64(squot32(i_18179, sext_i64_i32(d_10432) * sext_i64_i32(d_10432))) * (d_10432 * d_10432) + sext_i32_i64(squot32(i_18179 - squot32(i_18179, sext_i64_i32(d_10432) * sext_i64_i32(d_10432)) * (sext_i64_i32(d_10432) * sext_i64_i32(d_10432)), sext_i64_i32(d_10432))) * d_10432 + sext_i32_i64(i_18179 - squot32(i_18179, sext_i64_i32(d_10432) * sext_i64_i32(d_10432)) * (sext_i64_i32(d_10432) * sext_i64_i32(d_10432)) - squot32(i_18179 - squot32(i_18179, sext_i64_i32(d_10432) * sext_i64_i32(d_10432)) * (sext_i64_i32(d_10432) * sext_i64_i32(d_10432)), sext_i64_i32(d_10432)) * sext_i64_i32(d_10432))] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) color_18067)[sext_i32_i64(squot32(i_18179, sext_i64_i32(d_10432) * sext_i64_i32(d_10432))) * (d_10432 * d_10432) + sext_i32_i64(squot32(i_18179 - squot32(i_18179, sext_i64_i32(d_10432) * sext_i64_i32(d_10432)) * (sext_i64_i32(d_10432) * sext_i64_i32(d_10432)), sext_i64_i32(d_10432))) + sext_i32_i64(i_18179 - squot32(i_18179, sext_i64_i32(d_10432) * sext_i64_i32(d_10432)) * (sext_i64_i32(d_10432) * sext_i64_i32(d_10432)) - squot32(i_18179 - squot32(i_18179, sext_i64_i32(d_10432) * sext_i64_i32(d_10432)) * (sext_i64_i32(d_10432) * sext_i64_i32(d_10432)), sext_i64_i32(d_10432)) * sext_i64_i32(d_10432)) * d_10432]));
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    for (int32_t chunk_i_18182 = 0; chunk_i_18182 < num_chunks_18094; chunk_i_18182++) {
        int32_t i_18183;
        int64_t slice_18184;
        int64_t rep_i_18181;
        int64_t remnant_18185;
        
        i_18183 = chunk_i_18182 * sext_i64_i32(computed_tblock_sizze_16243) + local_tid_18101;
        slice_18184 = d_10432;
        rep_i_18181 = sext_i32_i64(i_18183);
        remnant_18185 = sext_i32_i64(i_18183) - rep_i_18181;
        if (sle64((int64_t) 0, rep_i_18181) && slt64(rep_i_18181, d_10432)) {
            ((__local uint16_t *) color_18068)[rep_i_18181] = futrts_to_bits16((f16) -INFINITY);
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    for (int32_t chunk_i_18188 = 0; chunk_i_18188 < num_chunks_18094; chunk_i_18188++) {
        int32_t i_18189;
        int64_t slice_18190;
        int64_t rep_i_18187;
        int64_t remnant_18191;
        
        i_18189 = chunk_i_18188 * sext_i64_i32(computed_tblock_sizze_16243) + local_tid_18101;
        slice_18190 = d_10432;
        rep_i_18187 = sext_i32_i64(i_18189);
        remnant_18191 = sext_i32_i64(i_18189) - rep_i_18187;
        if (sle64((int64_t) 0, rep_i_18187) && slt64(rep_i_18187, d_10432)) {
            ((__local uint16_t *) color_18067)[rep_i_18187] = futrts_to_bits16((f16) 0.0F);
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    barrier(CLK_LOCAL_MEM_FENCE);
    mem_param_17646 = color_18068;
    mem_param_out_17999 = color_18071;
    mem_param_17649 = color_18067;
    mem_param_out_18008 = color_18070;
    for (int64_t i_16660 = 0; i_16660 < q_11504; i_16660++) {
        int64_t copy2shr_arg0_16663;
        int32_t num_chunks_18198;
        __local unsigned char *ext_mem_17659;
        int64_t phys_tid_16676;
        __local unsigned char *red_arr_mem_18204;
        int64_t gtid_16674;
        int64_t gtid_16675;
        int64_t dims_flat_18207;
        f16 eta_p_16677;
        f16 eta_p_16678;
        f16 eta_p_18209;
        f16 eta_p_18210;
        bool ltid_in_bounds_18212;
        int32_t skip_threads_18213;
        bool no_carry_in_18219;
        int64_t phys_tid_16692;
        __local unsigned char *red_arr_mem_18224;
        int64_t gtid_16690;
        int64_t gtid_16691;
        int64_t dims_flat_18227;
        f16 eta_p_16693;
        f16 eta_p_16694;
        f16 eta_p_18229;
        f16 eta_p_18230;
        bool ltid_in_bounds_18232;
        int32_t skip_threads_18233;
        bool no_carry_in_18239;
        int64_t phys_tid_16711;
        int64_t gtid_16710;
        __local unsigned char *mem_param_tmp_18192;
        __local unsigned char *mem_param_out_tmp_18193;
        __local unsigned char *mem_param_tmp_18194;
        __local unsigned char *mem_param_out_tmp_18195;
        
        copy2shr_arg0_16663 = mul64((int64_t) 1024, i_16660);
        num_chunks_18198 = sdiv_up32(sext_i64_i32(d_10432) * 1024, sext_i64_i32(computed_tblock_sizze_16243));
        for (int32_t chunk_i_18199 = 0; chunk_i_18199 < num_chunks_18198; chunk_i_18199++) {
            int32_t i_18200 = chunk_i_18199 * sext_i64_i32(computed_tblock_sizze_16243) + local_tid_18101;
            
            if (slt32(i_18200, sext_i64_i32(d_10432) * 1024)) {
                ((__local uint16_t *) color_18069)[sext_i32_i64(squot32(i_18200, 1024)) * (int64_t) 1024 + sext_i32_i64(i_18200 - squot32(i_18200, 1024) * 1024)] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) color_18075)[d_10432 * copy2shr_arg0_16663 + sext_i32_i64(squot32(i_18200, 1024)) + sext_i32_i64(i_18200 - squot32(i_18200, 1024) * 1024) * d_10432]));
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_LOCAL_MEM_FENCE);
        if (opaque_res_11508) {
            int32_t num_chunks_18201 = sdiv_up32(sext_i64_i32(d_10432) * 1024, sext_i64_i32(computed_tblock_sizze_16243));
            
            for (int32_t chunk_i_18202 = 0; chunk_i_18202 < num_chunks_18201; chunk_i_18202++) {
                int32_t i_18203 = chunk_i_18202 * sext_i64_i32(computed_tblock_sizze_16243) + local_tid_18101;
                
                if (slt32(i_18203, sext_i64_i32(d_10432) * 1024)) {
                    ((__local uint16_t *) color_18073)[sext_i32_i64(squot32(i_18203, 1024)) * (int64_t) 1024 + sext_i32_i64(i_18203 - squot32(i_18203, 1024) * 1024)] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) color_18075)[d_10432 * copy2shr_arg0_16663 + sext_i32_i64(squot32(i_18203, 1024)) + sext_i32_i64(i_18203 - squot32(i_18203, 1024) * 1024) * d_10432]));
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            ext_mem_17659 = color_18073;
        } else {
            int64_t phys_tid_16670;
            int64_t gtid_16669;
            
            phys_tid_16670 = sext_i32_i64(local_tid_18101);
            gtid_16669 = sext_i32_i64(sext_i64_i32(ltid_pre_18126));
            if (slt64(gtid_16669, d_10432)) {
                ((__local uint16_t *) color_18069)[gtid_16669 * (int64_t) 1024] = futrts_to_bits16((f16) 0.0F);
                for (int64_t i_0 = 0; i_0 < (int64_t) 1024; i_0++) {
                    ((__local uint16_t *) color_18074)[gtid_16669 * (int64_t) 1024 + i_0] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) color_18069)[gtid_16669 * (int64_t) 1024 + i_0]));
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            ext_mem_17659 = color_18074;
        }
        phys_tid_16676 = sext_i32_i64(local_tid_18101);
        red_arr_mem_18204 = (__local unsigned char *) red_arr_mem_18204_backing_10;
        gtid_16674 = sext_i32_i64(sext_i64_i32(ltid_pre_18129));
        gtid_16675 = sext_i32_i64(sext_i64_i32(ltid_pre_18130));
        if (slt64(gtid_16674, d_10432) && slt64(gtid_16675, (int64_t) 32)) {
            f16 defunc_0_f_res_16682;
            f16 r_16684 = (f16) -INFINITY;
            
            for (int64_t i_16683 = 0; i_16683 < (int64_t) 32; i_16683++) {
                int64_t zp_lhs_16685;
                int64_t f_arg0_16686;
                f16 f_arg0_16687;
                f16 max_res_16688;
                f16 r_tmp_18206;
                
                zp_lhs_16685 = mul64((int64_t) 32, i_16683);
                f_arg0_16686 = add64(gtid_16675, zp_lhs_16685);
                f_arg0_16687 = futrts_from_bits16(((__local uint16_t *) ext_mem_17659)[gtid_16674 * (int64_t) 1024 + f_arg0_16686]);
                max_res_16688 = fmax16(r_16684, f_arg0_16687);
                r_tmp_18206 = max_res_16688;
                r_16684 = r_tmp_18206;
            }
            defunc_0_f_res_16682 = r_16684;
            ((__local uint16_t *) red_arr_mem_18204)[gtid_16674 * (int64_t) 32 + gtid_16675] = futrts_to_bits16(defunc_0_f_res_16682);
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        dims_flat_18207 = d_10432 * (int64_t) 32;
        ltid_in_bounds_18212 = slt64(sext_i32_i64(local_tid_18101), d_10432 * (int64_t) 32);
        // read input for in-block scan
        {
            if (ltid_in_bounds_18212) {
                eta_p_16678 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18204)[sext_i32_i64(local_tid_18101)]);
                if ((local_tid_18101 - squot32(local_tid_18101, 32) * 32) == 0) {
                    eta_p_16677 = eta_p_16678;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_18213 = 1;
            while (slt32(skip_threads_18213, 32)) {
                bool thread_active_18214 = sle32(skip_threads_18213, local_tid_18101 - squot32(local_tid_18101, 32) * 32) && ltid_in_bounds_18212;
                
                if (thread_active_18214) {
                    // read operands
                    {
                        eta_p_16677 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18204)[sext_i32_i64(local_tid_18101) - sext_i32_i64(skip_threads_18213)]);
                    }
                }
                // perform operation
                {
                    bool inactive_18215 = slt64(srem64(sext_i32_i64(local_tid_18101), (int64_t) 32), sext_i32_i64(local_tid_18101) - sext_i32_i64(local_tid_18101 - skip_threads_18213));
                    
                    if (thread_active_18214 && inactive_18215) {
                        eta_p_16677 = eta_p_16678;
                    }
                    if (thread_active_18214) {
                        if (!inactive_18215) {
                            f16 max_res_16679 = fmax16(eta_p_16677, eta_p_16678);
                            
                            eta_p_16677 = max_res_16679;
                        }
                    }
                }
                if (sle32(wave_sizze_18103, skip_threads_18213)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (thread_active_18214) {
                    // write result
                    {
                        ((volatile __local uint16_t *) red_arr_mem_18204)[sext_i32_i64(local_tid_18101)] = futrts_to_bits16(eta_p_16677);
                        eta_p_16678 = eta_p_16677;
                    }
                }
                if (sle32(wave_sizze_18103, skip_threads_18213)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_18213 *= 2;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // last thread of block 'i' writes its result to offset 'i'
        {
            if ((local_tid_18101 - squot32(local_tid_18101, 32) * 32) == 31 && ltid_in_bounds_18212) {
                ((volatile __local uint16_t *) red_arr_mem_18204)[sext_i32_i64(squot32(local_tid_18101, 32))] = futrts_to_bits16(eta_p_16677);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
        {
            int32_t skip_threads_18216;
            
            // read input for in-block scan
            {
                if (squot32(local_tid_18101, 32) == 0 && ltid_in_bounds_18212) {
                    eta_p_18210 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18204)[sext_i32_i64(local_tid_18101)]);
                    if ((local_tid_18101 - squot32(local_tid_18101, 32) * 32) == 0) {
                        eta_p_18209 = eta_p_18210;
                    }
                }
            }
            // in-block scan (hopefully no barriers needed)
            {
                skip_threads_18216 = 1;
                while (slt32(skip_threads_18216, 32)) {
                    bool thread_active_18217 = sle32(skip_threads_18216, local_tid_18101 - squot32(local_tid_18101, 32) * 32) && (squot32(local_tid_18101, 32) == 0 && ltid_in_bounds_18212);
                    
                    if (thread_active_18217) {
                        // read operands
                        {
                            eta_p_18209 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18204)[sext_i32_i64(local_tid_18101) - sext_i32_i64(skip_threads_18216)]);
                        }
                    }
                    // perform operation
                    {
                        bool inactive_18218 = slt64(srem64(sext_i32_i64(local_tid_18101 * 32 + 32 - 1), (int64_t) 32), sext_i32_i64(local_tid_18101 * 32 + 32 - 1) - sext_i32_i64((local_tid_18101 - skip_threads_18216) * 32 + 32 - 1));
                        
                        if (thread_active_18217 && inactive_18218) {
                            eta_p_18209 = eta_p_18210;
                        }
                        if (thread_active_18217) {
                            if (!inactive_18218) {
                                f16 max_res_18211 = fmax16(eta_p_18209, eta_p_18210);
                                
                                eta_p_18209 = max_res_18211;
                            }
                        }
                    }
                    if (sle32(wave_sizze_18103, skip_threads_18216)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    if (thread_active_18217) {
                        // write result
                        {
                            ((volatile __local uint16_t *) red_arr_mem_18204)[sext_i32_i64(local_tid_18101)] = futrts_to_bits16(eta_p_18209);
                            eta_p_18210 = eta_p_18209;
                        }
                    }
                    if (sle32(wave_sizze_18103, skip_threads_18216)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    skip_threads_18216 *= 2;
                }
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        no_carry_in_18219 = squot32(local_tid_18101, 32) == 0 || !ltid_in_bounds_18212;
        // carry-in for every block except the first
        {
            // read operands
            {
                if (!no_carry_in_18219) {
                    eta_p_16678 = eta_p_16677;
                    eta_p_16677 = futrts_from_bits16(((__local uint16_t *) red_arr_mem_18204)[sext_i32_i64(squot32(local_tid_18101, 32)) - (int64_t) 1]);
                }
            }
            // perform operation
            {
                bool inactive_18220 = slt64(srem64(sext_i32_i64(local_tid_18101), (int64_t) 32), sext_i32_i64(local_tid_18101) - sext_i32_i64(squot32(local_tid_18101, 32) * 32 - 1));
                
                if (!no_carry_in_18219) {
                    if (inactive_18220) {
                        eta_p_16677 = eta_p_16678;
                    }
                }
                if (!no_carry_in_18219) {
                    if (!inactive_18220) {
                        f16 max_res_16679 = fmax16(eta_p_16677, eta_p_16678);
                        
                        eta_p_16677 = max_res_16679;
                    }
                }
            }
            // write final result
            {
                if (!no_carry_in_18219) {
                    ((__local uint16_t *) red_arr_mem_18204)[sext_i32_i64(local_tid_18101)] = futrts_to_bits16(eta_p_16677);
                }
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // restore correct values for first block
        {
            if (squot32(local_tid_18101, 32) == 0 && ltid_in_bounds_18212) {
                ((__local uint16_t *) red_arr_mem_18204)[sext_i32_i64(local_tid_18101)] = futrts_to_bits16(eta_p_16678);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_LOCAL_MEM_FENCE);
        // Save result of reduction.
        {
            int32_t num_chunks_18221 = sdiv_up32(sext_i64_i32(d_10432), sext_i64_i32(computed_tblock_sizze_16243));
            
            for (int32_t chunk_i_18222 = 0; chunk_i_18222 < num_chunks_18221; chunk_i_18222++) {
                int32_t i_18223 = chunk_i_18222 * sext_i64_i32(computed_tblock_sizze_16243) + local_tid_18101;
                
                if (slt32(i_18223, sext_i64_i32(d_10432))) {
                    ((__local uint16_t *) color_18072)[sext_i32_i64(i_18223)] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) red_arr_mem_18204)[(int64_t) 31 + sext_i32_i64(i_18223) * (int64_t) 32]));
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        phys_tid_16692 = sext_i32_i64(local_tid_18101);
        red_arr_mem_18224 = (__local unsigned char *) red_arr_mem_18224_backing_11;
        gtid_16690 = sext_i32_i64(sext_i64_i32(ltid_pre_18129));
        gtid_16691 = sext_i32_i64(sext_i64_i32(ltid_pre_18130));
        if (slt64(gtid_16690, d_10432) && slt64(gtid_16691, (int64_t) 32)) {
            f16 defunc_0_reduce_comm_res_16697;
            f16 defunc_0_f_res_16699;
            f16 r_16701;
            
            defunc_0_reduce_comm_res_16697 = futrts_from_bits16(((__local uint16_t *) color_18072)[gtid_16690]);
            r_16701 = (f16) 0.0F;
            for (int64_t i_16700 = 0; i_16700 < (int64_t) 32; i_16700++) {
                int64_t zp_lhs_16702;
                int64_t f_arg0_16703;
                f16 f_arg0_16704;
                f16 real_exp_arg0_16705;
                f16 exp_res_16706;
                f16 defunc_0_bop_res_16707;
                f16 r_tmp_18226;
                
                zp_lhs_16702 = mul64((int64_t) 32, i_16700);
                f_arg0_16703 = add64(gtid_16691, zp_lhs_16702);
                f_arg0_16704 = futrts_from_bits16(((__local uint16_t *) ext_mem_17659)[gtid_16690 * (int64_t) 1024 + f_arg0_16703]);
                real_exp_arg0_16705 = f_arg0_16704 - defunc_0_reduce_comm_res_16697;
                exp_res_16706 = futrts_exp16(real_exp_arg0_16705);
                defunc_0_bop_res_16707 = r_16701 + exp_res_16706;
                r_tmp_18226 = defunc_0_bop_res_16707;
                r_16701 = r_tmp_18226;
            }
            defunc_0_f_res_16699 = r_16701;
            ((__local uint16_t *) red_arr_mem_18224)[gtid_16690 * (int64_t) 32 + gtid_16691] = futrts_to_bits16(defunc_0_f_res_16699);
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        dims_flat_18227 = d_10432 * (int64_t) 32;
        ltid_in_bounds_18232 = slt64(sext_i32_i64(local_tid_18101), d_10432 * (int64_t) 32);
        // read input for in-block scan
        {
            if (ltid_in_bounds_18232) {
                eta_p_16694 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18224)[sext_i32_i64(local_tid_18101)]);
                if ((local_tid_18101 - squot32(local_tid_18101, 32) * 32) == 0) {
                    eta_p_16693 = eta_p_16694;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_18233 = 1;
            while (slt32(skip_threads_18233, 32)) {
                bool thread_active_18234 = sle32(skip_threads_18233, local_tid_18101 - squot32(local_tid_18101, 32) * 32) && ltid_in_bounds_18232;
                
                if (thread_active_18234) {
                    // read operands
                    {
                        eta_p_16693 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18224)[sext_i32_i64(local_tid_18101) - sext_i32_i64(skip_threads_18233)]);
                    }
                }
                // perform operation
                {
                    bool inactive_18235 = slt64(srem64(sext_i32_i64(local_tid_18101), (int64_t) 32), sext_i32_i64(local_tid_18101) - sext_i32_i64(local_tid_18101 - skip_threads_18233));
                    
                    if (thread_active_18234 && inactive_18235) {
                        eta_p_16693 = eta_p_16694;
                    }
                    if (thread_active_18234) {
                        if (!inactive_18235) {
                            f16 defunc_0_op_res_16695 = eta_p_16693 + eta_p_16694;
                            
                            eta_p_16693 = defunc_0_op_res_16695;
                        }
                    }
                }
                if (sle32(wave_sizze_18103, skip_threads_18233)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (thread_active_18234) {
                    // write result
                    {
                        ((volatile __local uint16_t *) red_arr_mem_18224)[sext_i32_i64(local_tid_18101)] = futrts_to_bits16(eta_p_16693);
                        eta_p_16694 = eta_p_16693;
                    }
                }
                if (sle32(wave_sizze_18103, skip_threads_18233)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_18233 *= 2;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // last thread of block 'i' writes its result to offset 'i'
        {
            if ((local_tid_18101 - squot32(local_tid_18101, 32) * 32) == 31 && ltid_in_bounds_18232) {
                ((volatile __local uint16_t *) red_arr_mem_18224)[sext_i32_i64(squot32(local_tid_18101, 32))] = futrts_to_bits16(eta_p_16693);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
        {
            int32_t skip_threads_18236;
            
            // read input for in-block scan
            {
                if (squot32(local_tid_18101, 32) == 0 && ltid_in_bounds_18232) {
                    eta_p_18230 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18224)[sext_i32_i64(local_tid_18101)]);
                    if ((local_tid_18101 - squot32(local_tid_18101, 32) * 32) == 0) {
                        eta_p_18229 = eta_p_18230;
                    }
                }
            }
            // in-block scan (hopefully no barriers needed)
            {
                skip_threads_18236 = 1;
                while (slt32(skip_threads_18236, 32)) {
                    bool thread_active_18237 = sle32(skip_threads_18236, local_tid_18101 - squot32(local_tid_18101, 32) * 32) && (squot32(local_tid_18101, 32) == 0 && ltid_in_bounds_18232);
                    
                    if (thread_active_18237) {
                        // read operands
                        {
                            eta_p_18229 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18224)[sext_i32_i64(local_tid_18101) - sext_i32_i64(skip_threads_18236)]);
                        }
                    }
                    // perform operation
                    {
                        bool inactive_18238 = slt64(srem64(sext_i32_i64(local_tid_18101 * 32 + 32 - 1), (int64_t) 32), sext_i32_i64(local_tid_18101 * 32 + 32 - 1) - sext_i32_i64((local_tid_18101 - skip_threads_18236) * 32 + 32 - 1));
                        
                        if (thread_active_18237 && inactive_18238) {
                            eta_p_18229 = eta_p_18230;
                        }
                        if (thread_active_18237) {
                            if (!inactive_18238) {
                                f16 defunc_0_op_res_18231 = eta_p_18229 + eta_p_18230;
                                
                                eta_p_18229 = defunc_0_op_res_18231;
                            }
                        }
                    }
                    if (sle32(wave_sizze_18103, skip_threads_18236)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    if (thread_active_18237) {
                        // write result
                        {
                            ((volatile __local uint16_t *) red_arr_mem_18224)[sext_i32_i64(local_tid_18101)] = futrts_to_bits16(eta_p_18229);
                            eta_p_18230 = eta_p_18229;
                        }
                    }
                    if (sle32(wave_sizze_18103, skip_threads_18236)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    skip_threads_18236 *= 2;
                }
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        no_carry_in_18239 = squot32(local_tid_18101, 32) == 0 || !ltid_in_bounds_18232;
        // carry-in for every block except the first
        {
            // read operands
            {
                if (!no_carry_in_18239) {
                    eta_p_16694 = eta_p_16693;
                    eta_p_16693 = futrts_from_bits16(((__local uint16_t *) red_arr_mem_18224)[sext_i32_i64(squot32(local_tid_18101, 32)) - (int64_t) 1]);
                }
            }
            // perform operation
            {
                bool inactive_18240 = slt64(srem64(sext_i32_i64(local_tid_18101), (int64_t) 32), sext_i32_i64(local_tid_18101) - sext_i32_i64(squot32(local_tid_18101, 32) * 32 - 1));
                
                if (!no_carry_in_18239) {
                    if (inactive_18240) {
                        eta_p_16693 = eta_p_16694;
                    }
                }
                if (!no_carry_in_18239) {
                    if (!inactive_18240) {
                        f16 defunc_0_op_res_16695 = eta_p_16693 + eta_p_16694;
                        
                        eta_p_16693 = defunc_0_op_res_16695;
                    }
                }
            }
            // write final result
            {
                if (!no_carry_in_18239) {
                    ((__local uint16_t *) red_arr_mem_18224)[sext_i32_i64(local_tid_18101)] = futrts_to_bits16(eta_p_16693);
                }
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // restore correct values for first block
        {
            if (squot32(local_tid_18101, 32) == 0 && ltid_in_bounds_18232) {
                ((__local uint16_t *) red_arr_mem_18224)[sext_i32_i64(local_tid_18101)] = futrts_to_bits16(eta_p_16694);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_LOCAL_MEM_FENCE);
        // Save result of reduction.
        {
            int32_t num_chunks_18241 = sdiv_up32(sext_i64_i32(d_10432), sext_i64_i32(computed_tblock_sizze_16243));
            
            for (int32_t chunk_i_18242 = 0; chunk_i_18242 < num_chunks_18241; chunk_i_18242++) {
                int32_t i_18243 = chunk_i_18242 * sext_i64_i32(computed_tblock_sizze_16243) + local_tid_18101;
                
                if (slt32(i_18243, sext_i64_i32(d_10432))) {
                    ((__local uint16_t *) color_18069)[sext_i32_i64(i_18243)] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) red_arr_mem_18224)[(int64_t) 31 + sext_i32_i64(i_18243) * (int64_t) 32]));
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        phys_tid_16711 = sext_i32_i64(local_tid_18101);
        gtid_16710 = sext_i32_i64(sext_i64_i32(ltid_pre_18126));
        if (slt64(gtid_16710, d_10432)) {
            f16 mi_old_16712;
            f16 li_old_16713;
            f16 defunc_0_reduce_comm_res_16714;
            f16 defunc_0_reduce_comm_res_16715;
            f16 max_res_16716;
            f16 real_exp_arg0_16717;
            f16 exp_res_16718;
            f16 exp_arg0_16719;
            f16 exp_res_16720;
            f16 eli_16721;
            f16 zp_rhs_16722;
            f16 li_new_16723;
            
            mi_old_16712 = futrts_from_bits16(((__local uint16_t *) mem_param_17646)[gtid_16710]);
            li_old_16713 = futrts_from_bits16(((__local uint16_t *) mem_param_17649)[gtid_16710]);
            defunc_0_reduce_comm_res_16714 = futrts_from_bits16(((__local uint16_t *) color_18072)[gtid_16710]);
            defunc_0_reduce_comm_res_16715 = futrts_from_bits16(((__local uint16_t *) color_18069)[gtid_16710]);
            max_res_16716 = fmax16(mi_old_16712, defunc_0_reduce_comm_res_16714);
            real_exp_arg0_16717 = defunc_0_reduce_comm_res_16714 - max_res_16716;
            exp_res_16718 = futrts_exp16(real_exp_arg0_16717);
            exp_arg0_16719 = mi_old_16712 - max_res_16716;
            exp_res_16720 = futrts_exp16(exp_arg0_16719);
            eli_16721 = li_old_16713 * exp_res_16720;
            zp_rhs_16722 = defunc_0_reduce_comm_res_16715 * exp_res_16718;
            li_new_16723 = eli_16721 + zp_rhs_16722;
            ((__local uint16_t *) mem_param_out_17999)[gtid_16710] = futrts_to_bits16(max_res_16716);
            ((__local uint16_t *) mem_param_out_18008)[gtid_16710] = futrts_to_bits16(li_new_16723);
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        mem_param_tmp_18192 = mem_param_out_17999;
        mem_param_out_tmp_18193 = mem_param_17646;
        mem_param_tmp_18194 = mem_param_out_18008;
        mem_param_out_tmp_18195 = mem_param_17649;
        mem_param_17646 = mem_param_tmp_18192;
        mem_param_out_17999 = mem_param_out_tmp_18193;
        mem_param_17649 = mem_param_tmp_18194;
        mem_param_out_18008 = mem_param_out_tmp_18195;
    }
    ext_mem_17673 = mem_param_17646;
    ext_mem_unused_17998 = mem_param_out_17999;
    ext_mem_17672 = mem_param_17649;
    ext_mem_unused_18007 = mem_param_out_18008;
    phys_tid_16729 = sext_i32_i64(local_tid_18101);
    gtid_16727 = sext_i32_i64(sext_i64_i32(ltid_pre_18150));
    gtid_16728 = sext_i32_i64(sext_i64_i32(ltid_pre_18151));
    if (slt64(gtid_16727, d_10432) && slt64(gtid_16728, dzlz7bUZLztZRz20Umz20Udz7dUzg_10433)) {
        f16 eta_p_16730;
        f16 eta_p_16731;
        f16 eta_p_16732;
        f16 real_exp_arg0_16733;
        f16 exp_res_16734;
        f16 lifted_lambda_res_16735;
        
        eta_p_16730 = futrts_from_bits16(((__local uint16_t *) ext_mem_17673)[gtid_16727]);
        eta_p_16731 = futrts_from_bits16(((__local uint16_t *) ext_mem_17672)[gtid_16727]);
        eta_p_16732 = futrts_from_bits16(((__local uint16_t *) color_18075)[gtid_16727 + gtid_16728 * d_10432]);
        real_exp_arg0_16733 = eta_p_16732 - eta_p_16730;
        exp_res_16734 = futrts_exp16(real_exp_arg0_16733);
        lifted_lambda_res_16735 = exp_res_16734 / eta_p_16731;
        ((__local uint16_t *) color_18069)[gtid_16727 * dzlz7bUZLztZRz20Umz20Udz7dUzg_10433 + gtid_16728] = futrts_to_bits16(lifted_lambda_res_16735);
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    phys_tid_16741 = sext_i32_i64(local_tid_18101);
    red_arr_mem_18244 = (__local unsigned char *) red_arr_mem_18244_backing_12;
    gtid_16738 = sext_i32_i64(sext_i64_i32(ltid_pre_18141));
    gtid_16739 = sext_i32_i64(sext_i64_i32(ltid_pre_18142));
    gtid_16740 = sext_i32_i64(sext_i64_i32(ltid_pre_18143));
    if ((slt64(gtid_16738, d_10432) && slt64(gtid_16739, d_10432)) && slt64(gtid_16740, dzlz7bUZLztZRz20Umz20Udz7dUzg_10433)) {
        f16 eta_p_16747;
        f16 eta_p_16748;
        f16 defunc_0_f_res_16749;
        
        eta_p_16747 = futrts_from_bits16(((__local uint16_t *) color_18069)[gtid_16738 * dzlz7bUZLztZRz20Umz20Udz7dUzg_10433 + gtid_16740]);
        eta_p_16748 = futrts_from_bits16(((__global uint16_t *) V_mem_17593)[gtid_16740 * d_10432 + gtid_16739]);
        defunc_0_f_res_16749 = eta_p_16747 * eta_p_16748;
        ((__local uint16_t *) red_arr_mem_18244)[gtid_16738 * (dzlz7bUZLztZRz20Umz20Udz7dUzg_10433 * d_10432) + gtid_16739 * dzlz7bUZLztZRz20Umz20Udz7dUzg_10433 + gtid_16740] = futrts_to_bits16(defunc_0_f_res_16749);
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    dims_flat_18246 = d_10432 * d_10432 * dzlz7bUZLztZRz20Umz20Udz7dUzg_10433;
    ltid_in_bounds_18251 = slt64(sext_i32_i64(local_tid_18101), d_10432 * d_10432 * dzlz7bUZLztZRz20Umz20Udz7dUzg_10433);
    // read input for in-block scan
    {
        if (ltid_in_bounds_18251) {
            eta_p_16743 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18244)[sext_i32_i64(local_tid_18101)]);
            if ((local_tid_18101 - squot32(local_tid_18101, 32) * 32) == 0) {
                eta_p_16742 = eta_p_16743;
            }
        }
    }
    // in-block scan (hopefully no barriers needed)
    {
        skip_threads_18252 = 1;
        while (slt32(skip_threads_18252, 32)) {
            bool thread_active_18253 = sle32(skip_threads_18252, local_tid_18101 - squot32(local_tid_18101, 32) * 32) && ltid_in_bounds_18251;
            
            if (thread_active_18253) {
                // read operands
                {
                    eta_p_16742 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18244)[sext_i32_i64(local_tid_18101) - sext_i32_i64(skip_threads_18252)]);
                }
            }
            // perform operation
            {
                bool inactive_18254 = slt64(srem64(sext_i32_i64(local_tid_18101), dzlz7bUZLztZRz20Umz20Udz7dUzg_10433), sext_i32_i64(local_tid_18101) - sext_i32_i64(local_tid_18101 - skip_threads_18252));
                
                if (thread_active_18253 && inactive_18254) {
                    eta_p_16742 = eta_p_16743;
                }
                if (thread_active_18253) {
                    if (!inactive_18254) {
                        f16 defunc_0_op_res_16744 = eta_p_16742 + eta_p_16743;
                        
                        eta_p_16742 = defunc_0_op_res_16744;
                    }
                }
            }
            if (sle32(wave_sizze_18103, skip_threads_18252)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            if (thread_active_18253) {
                // write result
                {
                    ((volatile __local uint16_t *) red_arr_mem_18244)[sext_i32_i64(local_tid_18101)] = futrts_to_bits16(eta_p_16742);
                    eta_p_16743 = eta_p_16742;
                }
            }
            if (sle32(wave_sizze_18103, skip_threads_18252)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            skip_threads_18252 *= 2;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // last thread of block 'i' writes its result to offset 'i'
    {
        if ((local_tid_18101 - squot32(local_tid_18101, 32) * 32) == 31 && ltid_in_bounds_18251) {
            ((volatile __local uint16_t *) red_arr_mem_18244)[sext_i32_i64(squot32(local_tid_18101, 32))] = futrts_to_bits16(eta_p_16742);
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
    {
        int32_t skip_threads_18255;
        
        // read input for in-block scan
        {
            if (squot32(local_tid_18101, 32) == 0 && ltid_in_bounds_18251) {
                eta_p_18249 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18244)[sext_i32_i64(local_tid_18101)]);
                if ((local_tid_18101 - squot32(local_tid_18101, 32) * 32) == 0) {
                    eta_p_18248 = eta_p_18249;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_18255 = 1;
            while (slt32(skip_threads_18255, 32)) {
                bool thread_active_18256 = sle32(skip_threads_18255, local_tid_18101 - squot32(local_tid_18101, 32) * 32) && (squot32(local_tid_18101, 32) == 0 && ltid_in_bounds_18251);
                
                if (thread_active_18256) {
                    // read operands
                    {
                        eta_p_18248 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18244)[sext_i32_i64(local_tid_18101) - sext_i32_i64(skip_threads_18255)]);
                    }
                }
                // perform operation
                {
                    bool inactive_18257 = slt64(srem64(sext_i32_i64(local_tid_18101 * 32 + 32 - 1), dzlz7bUZLztZRz20Umz20Udz7dUzg_10433), sext_i32_i64(local_tid_18101 * 32 + 32 - 1) - sext_i32_i64((local_tid_18101 - skip_threads_18255) * 32 + 32 - 1));
                    
                    if (thread_active_18256 && inactive_18257) {
                        eta_p_18248 = eta_p_18249;
                    }
                    if (thread_active_18256) {
                        if (!inactive_18257) {
                            f16 defunc_0_op_res_18250 = eta_p_18248 + eta_p_18249;
                            
                            eta_p_18248 = defunc_0_op_res_18250;
                        }
                    }
                }
                if (sle32(wave_sizze_18103, skip_threads_18255)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (thread_active_18256) {
                    // write result
                    {
                        ((volatile __local uint16_t *) red_arr_mem_18244)[sext_i32_i64(local_tid_18101)] = futrts_to_bits16(eta_p_18248);
                        eta_p_18249 = eta_p_18248;
                    }
                }
                if (sle32(wave_sizze_18103, skip_threads_18255)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_18255 *= 2;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    no_carry_in_18258 = squot32(local_tid_18101, 32) == 0 || !ltid_in_bounds_18251;
    // carry-in for every block except the first
    {
        // read operands
        {
            if (!no_carry_in_18258) {
                eta_p_16743 = eta_p_16742;
                eta_p_16742 = futrts_from_bits16(((__local uint16_t *) red_arr_mem_18244)[sext_i32_i64(squot32(local_tid_18101, 32)) - (int64_t) 1]);
            }
        }
        // perform operation
        {
            bool inactive_18259 = slt64(srem64(sext_i32_i64(local_tid_18101), dzlz7bUZLztZRz20Umz20Udz7dUzg_10433), sext_i32_i64(local_tid_18101) - sext_i32_i64(squot32(local_tid_18101, 32) * 32 - 1));
            
            if (!no_carry_in_18258) {
                if (inactive_18259) {
                    eta_p_16742 = eta_p_16743;
                }
            }
            if (!no_carry_in_18258) {
                if (!inactive_18259) {
                    f16 defunc_0_op_res_16744 = eta_p_16742 + eta_p_16743;
                    
                    eta_p_16742 = defunc_0_op_res_16744;
                }
            }
        }
        // write final result
        {
            if (!no_carry_in_18258) {
                ((__local uint16_t *) red_arr_mem_18244)[sext_i32_i64(local_tid_18101)] = futrts_to_bits16(eta_p_16742);
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // restore correct values for first block
    {
        if (squot32(local_tid_18101, 32) == 0 && ltid_in_bounds_18251) {
            ((__local uint16_t *) red_arr_mem_18244)[sext_i32_i64(local_tid_18101)] = futrts_to_bits16(eta_p_16743);
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    barrier(CLK_LOCAL_MEM_FENCE);
    // Save result of reduction.
    {
        int32_t num_chunks_18260 = sdiv_up32(sext_i64_i32(d_10432) * sext_i64_i32(d_10432), sext_i64_i32(computed_tblock_sizze_16243));
        
        for (int32_t chunk_i_18261 = 0; chunk_i_18261 < num_chunks_18260; chunk_i_18261++) {
            int32_t i_18262 = chunk_i_18261 * sext_i64_i32(computed_tblock_sizze_16243) + local_tid_18101;
            
            if (slt32(i_18262, sext_i64_i32(d_10432) * sext_i64_i32(d_10432))) {
                ((__local uint16_t *) color_18067)[sext_i32_i64(squot32(i_18262, sext_i64_i32(d_10432))) * d_10432 + sext_i32_i64(i_18262 - squot32(i_18262, sext_i64_i32(d_10432)) * sext_i64_i32(d_10432))] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) red_arr_mem_18244)[dzlz7bUZLztZRz20Umz20Udz7dUzg_10433 - (int64_t) 1 + sext_i32_i64(squot32(i_18262, sext_i64_i32(d_10432))) * (dzlz7bUZLztZRz20Umz20Udz7dUzg_10433 * d_10432) + sext_i32_i64(i_18262 - squot32(i_18262, sext_i64_i32(d_10432)) * sext_i64_i32(d_10432)) * dzlz7bUZLztZRz20Umz20Udz7dUzg_10433]));
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    num_chunks_18263 = sdiv_up32(sext_i64_i32(d_10432) * sext_i64_i32(d_10432), sext_i64_i32(computed_tblock_sizze_16243));
    for (int32_t chunk_i_18264 = 0; chunk_i_18264 < num_chunks_18263; chunk_i_18264++) {
        int32_t i_18265 = chunk_i_18264 * sext_i64_i32(computed_tblock_sizze_16243) + local_tid_18101;
        
        if (slt32(i_18265, sext_i64_i32(d_10432) * sext_i64_i32(d_10432))) {
            ((__global uint16_t *) mem_17683)[gtid_16622 * (d_10432 * d_10432) + sext_i32_i64(squot32(i_18265, sext_i64_i32(d_10432))) * d_10432 + sext_i32_i64(i_18265 - squot32(i_18265, sext_i64_i32(d_10432)) * sext_i64_i32(d_10432))] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) color_18067)[sext_i32_i64(squot32(i_18265, sext_i64_i32(d_10432))) * d_10432 + sext_i32_i64(i_18265 - squot32(i_18265, sext_i64_i32(d_10432)) * sext_i64_i32(d_10432))]));
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
  error_18:
    return;
}
FUTHARK_KERNEL
void thesislike512zisegmap_intrablock_17063(__global int *global_failure, int64_t m_10431, int64_t d_10432, int64_t y_16387, int64_t computed_tblock_sizze_17057, int64_t bytes_17596, int64_t bytes_17599, __global unsigned char *Q_mem_17591, __global unsigned char *K_mem_17592, __global unsigned char *mem_17605)
{
    volatile __local unsigned char *red_arr_mem_18293_backing_2 = &shared_mem[0];
    const int64_t red_arr_mem_18293_backing_2_offset = 0 + ((int64_t) 4 * (d_10432 * d_10432 * d_10432) + srem64((int64_t) 8 - srem64((int64_t) 4 * (d_10432 * d_10432 * d_10432), (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_18077_backing_1 = &shared_mem[red_arr_mem_18293_backing_2_offset];
    const int64_t color_18077_backing_1_offset = red_arr_mem_18293_backing_2_offset + (bytes_17596 + srem64((int64_t) 8 - srem64(bytes_17596, (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_18076_backing_0 = &shared_mem[color_18077_backing_1_offset];
    const int64_t color_18076_backing_0_offset = color_18077_backing_1_offset + (bytes_17599 + srem64((int64_t) 8 - srem64(bytes_17599, (int64_t) 8), (int64_t) 8));
    
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_18270;
    int32_t tblock_sizze_18273;
    int32_t wave_sizze_18272;
    int32_t block_id_18271;
    int32_t global_tid_18269;
    int64_t phys_tblock_id_17063;
    int64_t slice_18276;
    int64_t slice_18277;
    int64_t ltid_pre_18274;
    int64_t remnant_18278;
    int64_t ltid_pre_18275;
    int64_t remnant_18279;
    int64_t slice_18283;
    int64_t slice_18284;
    int64_t slice_18285;
    int64_t ltid_pre_18280;
    int64_t remnant_18286;
    int64_t ltid_pre_18281;
    int64_t remnant_18287;
    int64_t ltid_pre_18282;
    int64_t remnant_18288;
    int64_t slice_18289;
    int64_t slice_18290;
    int64_t gtid_17061;
    int64_t remnant_18291;
    int64_t gtid_17062;
    int64_t remnant_18292;
    __local unsigned char *color_18076;
    __local unsigned char *color_18077;
    int64_t binop_x_17399;
    int64_t phys_tid_17072;
    __local unsigned char *red_arr_mem_18293;
    int64_t gtid_17069;
    int64_t gtid_17070;
    int64_t gtid_17071;
    int64_t dims_flat_18295;
    float eta_p_17073;
    float eta_p_17074;
    float eta_p_18297;
    float eta_p_18298;
    bool ltid_in_bounds_18300;
    int32_t skip_threads_18301;
    bool no_carry_in_18307;
    int64_t phys_tid_17085;
    int64_t gtid_17083;
    int64_t gtid_17084;
    int32_t num_chunks_18312;
    
    local_tid_18270 = get_local_id(0);
    tblock_sizze_18273 = get_local_size(0);
    wave_sizze_18272 = LOCKSTEP_WIDTH;
    block_id_18271 = get_tblock_id(0);
    global_tid_18269 = block_id_18271 * tblock_sizze_18273 + local_tid_18270;
    phys_tblock_id_17063 = sext_i32_i64(block_id_18271);
    slice_18276 = d_10432;
    slice_18277 = d_10432 * slice_18276;
    ltid_pre_18274 = squot64(sext_i32_i64(local_tid_18270), slice_18276);
    remnant_18278 = sext_i32_i64(local_tid_18270) - ltid_pre_18274 * slice_18276;
    ltid_pre_18275 = remnant_18278;
    remnant_18279 = remnant_18278 - ltid_pre_18275;
    slice_18283 = d_10432;
    slice_18284 = d_10432 * slice_18283;
    slice_18285 = d_10432 * slice_18284;
    ltid_pre_18280 = squot64(sext_i32_i64(local_tid_18270), slice_18284);
    remnant_18286 = sext_i32_i64(local_tid_18270) - ltid_pre_18280 * slice_18284;
    ltid_pre_18281 = squot64(remnant_18286, slice_18283);
    remnant_18287 = remnant_18286 - ltid_pre_18281 * slice_18283;
    ltid_pre_18282 = remnant_18287;
    remnant_18288 = remnant_18287 - ltid_pre_18282;
    slice_18289 = m_10431;
    slice_18290 = m_10431 * slice_18289;
    gtid_17061 = squot64(sext_i32_i64(block_id_18271), slice_18289);
    remnant_18291 = sext_i32_i64(block_id_18271) - gtid_17061 * slice_18289;
    gtid_17062 = remnant_18291;
    remnant_18292 = remnant_18291 - gtid_17062;
    color_18076 = (__local unsigned char *) color_18076_backing_0;
    color_18077 = (__local unsigned char *) color_18077_backing_1;
    binop_x_17399 = y_16387 * gtid_17062;
    phys_tid_17072 = sext_i32_i64(local_tid_18270);
    red_arr_mem_18293 = (__local unsigned char *) red_arr_mem_18293_backing_2;
    gtid_17069 = sext_i32_i64(sext_i64_i32(ltid_pre_18280));
    gtid_17070 = sext_i32_i64(sext_i64_i32(ltid_pre_18281));
    gtid_17071 = sext_i32_i64(sext_i64_i32(ltid_pre_18282));
    if ((slt64(gtid_17069, d_10432) && slt64(gtid_17070, d_10432)) && slt64(gtid_17071, d_10432)) {
        f16 eta_p_17078;
        int64_t binop_y_17400;
        int64_t binop_x_17401;
        int64_t binop_x_17402;
        int64_t new_index_17403;
        int64_t binop_y_17415;
        int64_t new_index_17416;
        f16 eta_p_17079;
        f16 defunc_0_f_res_17080;
        float f16_res_17081;
        
        eta_p_17078 = futrts_from_bits16(((__global uint16_t *) Q_mem_17591)[gtid_17061 * (d_10432 * d_10432) + gtid_17069 * d_10432 + gtid_17071]);
        binop_y_17400 = d_10432 * gtid_17070;
        binop_x_17401 = binop_x_17399 + binop_y_17400;
        binop_x_17402 = gtid_17071 + binop_x_17401;
        new_index_17403 = squot64(binop_x_17402, d_10432);
        binop_y_17415 = d_10432 * new_index_17403;
        new_index_17416 = binop_x_17402 - binop_y_17415;
        eta_p_17079 = futrts_from_bits16(((__global uint16_t *) K_mem_17592)[new_index_17403 * d_10432 + new_index_17416]);
        defunc_0_f_res_17080 = eta_p_17078 * eta_p_17079;
        f16_res_17081 = fpconv_f16_f32(defunc_0_f_res_17080);
        ((__local float *) red_arr_mem_18293)[gtid_17069 * (d_10432 * d_10432) + gtid_17070 * d_10432 + gtid_17071] = f16_res_17081;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    dims_flat_18295 = d_10432 * d_10432 * d_10432;
    ltid_in_bounds_18300 = slt64(sext_i32_i64(local_tid_18270), d_10432 * d_10432 * d_10432);
    // read input for in-block scan
    {
        if (ltid_in_bounds_18300) {
            eta_p_17074 = ((volatile __local float *) red_arr_mem_18293)[sext_i32_i64(local_tid_18270)];
            if ((local_tid_18270 - squot32(local_tid_18270, 32) * 32) == 0) {
                eta_p_17073 = eta_p_17074;
            }
        }
    }
    // in-block scan (hopefully no barriers needed)
    {
        skip_threads_18301 = 1;
        while (slt32(skip_threads_18301, 32)) {
            bool thread_active_18302 = sle32(skip_threads_18301, local_tid_18270 - squot32(local_tid_18270, 32) * 32) && ltid_in_bounds_18300;
            
            if (thread_active_18302) {
                // read operands
                {
                    eta_p_17073 = ((volatile __local float *) red_arr_mem_18293)[sext_i32_i64(local_tid_18270) - sext_i32_i64(skip_threads_18301)];
                }
            }
            // perform operation
            {
                bool inactive_18303 = slt64(srem64(sext_i32_i64(local_tid_18270), d_10432), sext_i32_i64(local_tid_18270) - sext_i32_i64(local_tid_18270 - skip_threads_18301));
                
                if (thread_active_18302 && inactive_18303) {
                    eta_p_17073 = eta_p_17074;
                }
                if (thread_active_18302) {
                    if (!inactive_18303) {
                        float defunc_0_op_res_17075 = eta_p_17073 + eta_p_17074;
                        
                        eta_p_17073 = defunc_0_op_res_17075;
                    }
                }
            }
            if (sle32(wave_sizze_18272, skip_threads_18301)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            if (thread_active_18302) {
                // write result
                {
                    ((volatile __local float *) red_arr_mem_18293)[sext_i32_i64(local_tid_18270)] = eta_p_17073;
                    eta_p_17074 = eta_p_17073;
                }
            }
            if (sle32(wave_sizze_18272, skip_threads_18301)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            skip_threads_18301 *= 2;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // last thread of block 'i' writes its result to offset 'i'
    {
        if ((local_tid_18270 - squot32(local_tid_18270, 32) * 32) == 31 && ltid_in_bounds_18300) {
            ((volatile __local float *) red_arr_mem_18293)[sext_i32_i64(squot32(local_tid_18270, 32))] = eta_p_17073;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
    {
        int32_t skip_threads_18304;
        
        // read input for in-block scan
        {
            if (squot32(local_tid_18270, 32) == 0 && ltid_in_bounds_18300) {
                eta_p_18298 = ((volatile __local float *) red_arr_mem_18293)[sext_i32_i64(local_tid_18270)];
                if ((local_tid_18270 - squot32(local_tid_18270, 32) * 32) == 0) {
                    eta_p_18297 = eta_p_18298;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_18304 = 1;
            while (slt32(skip_threads_18304, 32)) {
                bool thread_active_18305 = sle32(skip_threads_18304, local_tid_18270 - squot32(local_tid_18270, 32) * 32) && (squot32(local_tid_18270, 32) == 0 && ltid_in_bounds_18300);
                
                if (thread_active_18305) {
                    // read operands
                    {
                        eta_p_18297 = ((volatile __local float *) red_arr_mem_18293)[sext_i32_i64(local_tid_18270) - sext_i32_i64(skip_threads_18304)];
                    }
                }
                // perform operation
                {
                    bool inactive_18306 = slt64(srem64(sext_i32_i64(local_tid_18270 * 32 + 32 - 1), d_10432), sext_i32_i64(local_tid_18270 * 32 + 32 - 1) - sext_i32_i64((local_tid_18270 - skip_threads_18304) * 32 + 32 - 1));
                    
                    if (thread_active_18305 && inactive_18306) {
                        eta_p_18297 = eta_p_18298;
                    }
                    if (thread_active_18305) {
                        if (!inactive_18306) {
                            float defunc_0_op_res_18299 = eta_p_18297 + eta_p_18298;
                            
                            eta_p_18297 = defunc_0_op_res_18299;
                        }
                    }
                }
                if (sle32(wave_sizze_18272, skip_threads_18304)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (thread_active_18305) {
                    // write result
                    {
                        ((volatile __local float *) red_arr_mem_18293)[sext_i32_i64(local_tid_18270)] = eta_p_18297;
                        eta_p_18298 = eta_p_18297;
                    }
                }
                if (sle32(wave_sizze_18272, skip_threads_18304)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_18304 *= 2;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    no_carry_in_18307 = squot32(local_tid_18270, 32) == 0 || !ltid_in_bounds_18300;
    // carry-in for every block except the first
    {
        // read operands
        {
            if (!no_carry_in_18307) {
                eta_p_17074 = eta_p_17073;
                eta_p_17073 = ((__local float *) red_arr_mem_18293)[sext_i32_i64(squot32(local_tid_18270, 32)) - (int64_t) 1];
            }
        }
        // perform operation
        {
            bool inactive_18308 = slt64(srem64(sext_i32_i64(local_tid_18270), d_10432), sext_i32_i64(local_tid_18270) - sext_i32_i64(squot32(local_tid_18270, 32) * 32 - 1));
            
            if (!no_carry_in_18307) {
                if (inactive_18308) {
                    eta_p_17073 = eta_p_17074;
                }
            }
            if (!no_carry_in_18307) {
                if (!inactive_18308) {
                    float defunc_0_op_res_17075 = eta_p_17073 + eta_p_17074;
                    
                    eta_p_17073 = defunc_0_op_res_17075;
                }
            }
        }
        // write final result
        {
            if (!no_carry_in_18307) {
                ((__local float *) red_arr_mem_18293)[sext_i32_i64(local_tid_18270)] = eta_p_17073;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // restore correct values for first block
    {
        if (squot32(local_tid_18270, 32) == 0 && ltid_in_bounds_18300) {
            ((__local float *) red_arr_mem_18293)[sext_i32_i64(local_tid_18270)] = eta_p_17074;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    barrier(CLK_LOCAL_MEM_FENCE);
    // Save result of reduction.
    {
        int32_t num_chunks_18309 = sdiv_up32(sext_i64_i32(d_10432) * sext_i64_i32(d_10432), sext_i64_i32(computed_tblock_sizze_17057));
        
        for (int32_t chunk_i_18310 = 0; chunk_i_18310 < num_chunks_18309; chunk_i_18310++) {
            int32_t i_18311 = chunk_i_18310 * sext_i64_i32(computed_tblock_sizze_17057) + local_tid_18270;
            
            if (slt32(i_18311, sext_i64_i32(d_10432) * sext_i64_i32(d_10432))) {
                ((__local float *) color_18077)[sext_i32_i64(squot32(i_18311, sext_i64_i32(d_10432))) * d_10432 + sext_i32_i64(i_18311 - squot32(i_18311, sext_i64_i32(d_10432)) * sext_i64_i32(d_10432))] = ((__local float *) red_arr_mem_18293)[d_10432 - (int64_t) 1 + sext_i32_i64(squot32(i_18311, sext_i64_i32(d_10432))) * (d_10432 * d_10432) + sext_i32_i64(i_18311 - squot32(i_18311, sext_i64_i32(d_10432)) * sext_i64_i32(d_10432)) * d_10432];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    phys_tid_17085 = sext_i32_i64(local_tid_18270);
    gtid_17083 = sext_i32_i64(sext_i64_i32(ltid_pre_18274));
    gtid_17084 = sext_i32_i64(sext_i64_i32(ltid_pre_18275));
    if (slt64(gtid_17083, d_10432) && slt64(gtid_17084, d_10432)) {
        float defunc_0_f_res_17086;
        f16 f32_res_17087;
        
        defunc_0_f_res_17086 = ((__local float *) color_18077)[gtid_17083 * d_10432 + gtid_17084];
        f32_res_17087 = fpconv_f32_f16(defunc_0_f_res_17086);
        ((__local uint16_t *) color_18076)[gtid_17083 * d_10432 + gtid_17084] = futrts_to_bits16(f32_res_17087);
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    num_chunks_18312 = sdiv_up32(sext_i64_i32(d_10432) * sext_i64_i32(d_10432), sext_i64_i32(computed_tblock_sizze_17057));
    for (int32_t chunk_i_18313 = 0; chunk_i_18313 < num_chunks_18312; chunk_i_18313++) {
        int32_t i_18314 = chunk_i_18313 * sext_i64_i32(computed_tblock_sizze_17057) + local_tid_18270;
        
        if (slt32(i_18314, sext_i64_i32(d_10432) * sext_i64_i32(d_10432))) {
            ((__global uint16_t *) mem_17605)[gtid_17061 * (d_10432 * d_10432 * m_10431) + gtid_17062 * (d_10432 * d_10432) + sext_i32_i64(squot32(i_18314, sext_i64_i32(d_10432))) * d_10432 + sext_i32_i64(i_18314 - squot32(i_18314, sext_i64_i32(d_10432)) * sext_i64_i32(d_10432))] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) color_18076)[sext_i32_i64(squot32(i_18314, sext_i64_i32(d_10432))) + sext_i32_i64(i_18314 - squot32(i_18314, sext_i64_i32(d_10432)) * sext_i64_i32(d_10432)) * d_10432]));
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
  error_4:
    return;
}
FUTHARK_KERNEL_SIZED(thesislike512zisegmap_intrablock_17107_dim1, 1, 1)
void thesislike512zisegmap_intrablock_17107(__global int *global_failure, int64_t m_10431, int64_t d_10432, int64_t arg_10470, int64_t q_11504, unsigned char opaque_res_11508_bits, __global unsigned char *mem_17605, __global unsigned char *mem_17610, __global unsigned char *mem_17613)
{
    bool opaque_res_11508 = opaque_res_11508_bits;
    volatile __local unsigned char *red_arr_mem_18343_backing_2 = &shared_mem[0];
    const int64_t red_arr_mem_18343_backing_2_offset = 0 + (int64_t) 64;
    volatile __local unsigned char *red_arr_mem_18338_backing_1 = &shared_mem[red_arr_mem_18343_backing_2_offset];
    const int64_t red_arr_mem_18338_backing_1_offset = red_arr_mem_18343_backing_2_offset + (int64_t) 64;
    volatile __local unsigned char *color_18078_backing_0 = &shared_mem[red_arr_mem_18338_backing_1_offset];
    const int64_t color_18078_backing_0_offset = red_arr_mem_18338_backing_1_offset + (int64_t) 2048;
    
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_18319;
    int32_t tblock_sizze_18322;
    int32_t wave_sizze_18321;
    int32_t block_id_18320;
    int32_t global_tid_18318;
    int64_t phys_tblock_id_17107;
    int64_t slice_18324;
    int64_t ltid_pre_18323;
    int64_t remnant_18325;
    int64_t slice_18327;
    int64_t ltid_pre_18326;
    int64_t remnant_18328;
    int64_t slice_18329;
    int64_t slice_18330;
    int64_t gtid_17105;
    int64_t remnant_18331;
    int64_t gtid_17106;
    int64_t remnant_18332;
    __local unsigned char *color_18078;
    f16 softmaxChunkML_res_17110;
    f16 softmaxChunkML_res_17111;
    f16 mi_old_17113;
    f16 li_old_17114;
    
    local_tid_18319 = get_local_id(0);
    tblock_sizze_18322 = get_local_size(0);
    wave_sizze_18321 = LOCKSTEP_WIDTH;
    block_id_18320 = get_tblock_id(0);
    global_tid_18318 = block_id_18320 * tblock_sizze_18322 + local_tid_18319;
    phys_tblock_id_17107 = sext_i32_i64(block_id_18320);
    slice_18324 = (int64_t) 32;
    ltid_pre_18323 = sext_i32_i64(local_tid_18319);
    remnant_18325 = sext_i32_i64(local_tid_18319) - ltid_pre_18323;
    slice_18327 = (int64_t) 1024;
    ltid_pre_18326 = sext_i32_i64(local_tid_18319);
    remnant_18328 = sext_i32_i64(local_tid_18319) - ltid_pre_18326;
    slice_18329 = d_10432;
    slice_18330 = m_10431 * slice_18329;
    gtid_17105 = squot64(sext_i32_i64(block_id_18320), slice_18329);
    remnant_18331 = sext_i32_i64(block_id_18320) - gtid_17105 * slice_18329;
    gtid_17106 = remnant_18331;
    remnant_18332 = remnant_18331 - gtid_17106;
    color_18078 = (__local unsigned char *) color_18078_backing_0;
    barrier(CLK_LOCAL_MEM_FENCE);
    mi_old_17113 = (f16) -INFINITY;
    li_old_17114 = (f16) 0.0F;
    for (int64_t i_17112 = 0; i_17112 < q_11504; i_17112++) {
        int64_t copy2shr_arg0_17115;
        int32_t num_chunks_18335;
        f16 defunc_0_reduce_comm_res_17120;
        int64_t phys_tid_17122;
        __local unsigned char *red_arr_mem_18338;
        int64_t gtid_17121;
        f16 defunc_0_f_res_17127;
        f16 r_17129;
        int32_t offset_18341;
        int32_t skip_waves_18342;
        f16 eta_p_17123;
        f16 eta_p_17124;
        f16 defunc_0_reduce_comm_res_17134;
        int64_t phys_tid_17136;
        __local unsigned char *red_arr_mem_18343;
        int64_t gtid_17135;
        f16 defunc_0_f_res_17141;
        f16 r_17143;
        int32_t offset_18346;
        int32_t skip_waves_18347;
        f16 eta_p_17137;
        f16 eta_p_17138;
        f16 max_res_17150;
        f16 real_exp_arg0_17151;
        f16 exp_res_17152;
        f16 exp_arg0_17153;
        f16 exp_res_17154;
        f16 eli_17155;
        f16 zp_rhs_17156;
        f16 li_new_17157;
        f16 mi_old_tmp_18333;
        f16 li_old_tmp_18334;
        
        copy2shr_arg0_17115 = mul64((int64_t) 1024, i_17112);
        num_chunks_18335 = 32;
        for (int32_t chunk_i_18336 = 0; chunk_i_18336 < num_chunks_18335; chunk_i_18336++) {
            int32_t i_18337 = chunk_i_18336 * 32 + local_tid_18319;
            
            if (slt32(i_18337, 1024)) {
                ((__local uint16_t *) color_18078)[sext_i32_i64(i_18337)] = futrts_to_bits16(futrts_from_bits16(((__global uint16_t *) mem_17605)[gtid_17105 * (d_10432 * arg_10470) + gtid_17106 + d_10432 * copy2shr_arg0_17115 + sext_i32_i64(i_18337) * d_10432]));
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_LOCAL_MEM_FENCE);
        if (!opaque_res_11508) {
            barrier(CLK_LOCAL_MEM_FENCE);
            if (local_tid_18319 == 0) {
                ((__local uint16_t *) color_18078)[(int64_t) 0] = futrts_to_bits16((f16) 0.0F);
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }
        phys_tid_17122 = sext_i32_i64(local_tid_18319);
        red_arr_mem_18338 = (__local unsigned char *) red_arr_mem_18338_backing_1;
        gtid_17121 = sext_i32_i64(sext_i64_i32(ltid_pre_18323));
        r_17129 = (f16) -INFINITY;
        for (int64_t i_17128 = 0; i_17128 < (int64_t) 32; i_17128++) {
            int64_t zp_lhs_17130;
            int64_t f_arg0_17131;
            f16 f_arg0_17132;
            f16 max_res_17133;
            f16 r_tmp_18340;
            
            zp_lhs_17130 = mul64((int64_t) 32, i_17128);
            f_arg0_17131 = add64(gtid_17121, zp_lhs_17130);
            f_arg0_17132 = futrts_from_bits16(((__local uint16_t *) color_18078)[f_arg0_17131]);
            max_res_17133 = fmax16(r_17129, f_arg0_17132);
            r_tmp_18340 = max_res_17133;
            r_17129 = r_tmp_18340;
        }
        defunc_0_f_res_17127 = r_17129;
        ((__local uint16_t *) red_arr_mem_18338)[gtid_17121] = futrts_to_bits16(defunc_0_f_res_17127);
        barrier(CLK_LOCAL_MEM_FENCE);
        skip_waves_18342 = 1;
        offset_18341 = 0;
        // participating threads read initial accumulator
        {
            if (slt32(local_tid_18319, 32)) {
                eta_p_17123 = futrts_from_bits16(((__local uint16_t *) red_arr_mem_18338)[sext_i32_i64(local_tid_18319 + offset_18341)]);
            }
        }
        offset_18341 = 1;
        while (slt32(offset_18341, wave_sizze_18321)) {
            if (slt32(local_tid_18319 + offset_18341, 32) && ((local_tid_18319 - squot32(local_tid_18319, wave_sizze_18321) * wave_sizze_18321) & (2 * offset_18341 - 1)) == 0) {
                // read array element
                {
                    eta_p_17124 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18338)[sext_i32_i64(local_tid_18319 + offset_18341)]);
                }
                // apply reduction operation
                {
                    f16 max_res_17125 = fmax16(eta_p_17123, eta_p_17124);
                    
                    eta_p_17123 = max_res_17125;
                }
                // write result of operation
                {
                    ((volatile __local uint16_t *) red_arr_mem_18338)[sext_i32_i64(local_tid_18319)] = futrts_to_bits16(eta_p_17123);
                }
            }
            offset_18341 *= 2;
        }
        while (slt32(skip_waves_18342, squot32(32 + wave_sizze_18321 - 1, wave_sizze_18321))) {
            barrier(CLK_LOCAL_MEM_FENCE);
            offset_18341 = skip_waves_18342 * wave_sizze_18321;
            if (slt32(local_tid_18319 + offset_18341, 32) && ((local_tid_18319 - squot32(local_tid_18319, wave_sizze_18321) * wave_sizze_18321) == 0 && (squot32(local_tid_18319, wave_sizze_18321) & (2 * skip_waves_18342 - 1)) == 0)) {
                // read array element
                {
                    eta_p_17124 = futrts_from_bits16(((__local uint16_t *) red_arr_mem_18338)[sext_i32_i64(local_tid_18319 + offset_18341)]);
                }
                // apply reduction operation
                {
                    f16 max_res_17125 = fmax16(eta_p_17123, eta_p_17124);
                    
                    eta_p_17123 = max_res_17125;
                }
                // write result of operation
                {
                    ((__local uint16_t *) red_arr_mem_18338)[sext_i32_i64(local_tid_18319)] = futrts_to_bits16(eta_p_17123);
                }
            }
            skip_waves_18342 *= 2;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_LOCAL_MEM_FENCE);
        // Save result of reduction.
        {
            defunc_0_reduce_comm_res_17120 = futrts_from_bits16(((__local uint16_t *) red_arr_mem_18338)[(int64_t) 0]);
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        phys_tid_17136 = sext_i32_i64(local_tid_18319);
        red_arr_mem_18343 = (__local unsigned char *) red_arr_mem_18343_backing_2;
        gtid_17135 = sext_i32_i64(sext_i64_i32(ltid_pre_18323));
        r_17143 = (f16) 0.0F;
        for (int64_t i_17142 = 0; i_17142 < (int64_t) 32; i_17142++) {
            int64_t zp_lhs_17144;
            int64_t f_arg0_17145;
            f16 f_arg0_17146;
            f16 real_exp_arg0_17147;
            f16 exp_res_17148;
            f16 defunc_0_bop_res_17149;
            f16 r_tmp_18345;
            
            zp_lhs_17144 = mul64((int64_t) 32, i_17142);
            f_arg0_17145 = add64(gtid_17135, zp_lhs_17144);
            f_arg0_17146 = futrts_from_bits16(((__local uint16_t *) color_18078)[f_arg0_17145]);
            real_exp_arg0_17147 = f_arg0_17146 - defunc_0_reduce_comm_res_17120;
            exp_res_17148 = futrts_exp16(real_exp_arg0_17147);
            defunc_0_bop_res_17149 = r_17143 + exp_res_17148;
            r_tmp_18345 = defunc_0_bop_res_17149;
            r_17143 = r_tmp_18345;
        }
        defunc_0_f_res_17141 = r_17143;
        ((__local uint16_t *) red_arr_mem_18343)[gtid_17135] = futrts_to_bits16(defunc_0_f_res_17141);
        barrier(CLK_LOCAL_MEM_FENCE);
        skip_waves_18347 = 1;
        offset_18346 = 0;
        // participating threads read initial accumulator
        {
            if (slt32(local_tid_18319, 32)) {
                eta_p_17137 = futrts_from_bits16(((__local uint16_t *) red_arr_mem_18343)[sext_i32_i64(local_tid_18319 + offset_18346)]);
            }
        }
        offset_18346 = 1;
        while (slt32(offset_18346, wave_sizze_18321)) {
            if (slt32(local_tid_18319 + offset_18346, 32) && ((local_tid_18319 - squot32(local_tid_18319, wave_sizze_18321) * wave_sizze_18321) & (2 * offset_18346 - 1)) == 0) {
                // read array element
                {
                    eta_p_17138 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18343)[sext_i32_i64(local_tid_18319 + offset_18346)]);
                }
                // apply reduction operation
                {
                    f16 defunc_0_op_res_17139 = eta_p_17137 + eta_p_17138;
                    
                    eta_p_17137 = defunc_0_op_res_17139;
                }
                // write result of operation
                {
                    ((volatile __local uint16_t *) red_arr_mem_18343)[sext_i32_i64(local_tid_18319)] = futrts_to_bits16(eta_p_17137);
                }
            }
            offset_18346 *= 2;
        }
        while (slt32(skip_waves_18347, squot32(32 + wave_sizze_18321 - 1, wave_sizze_18321))) {
            barrier(CLK_LOCAL_MEM_FENCE);
            offset_18346 = skip_waves_18347 * wave_sizze_18321;
            if (slt32(local_tid_18319 + offset_18346, 32) && ((local_tid_18319 - squot32(local_tid_18319, wave_sizze_18321) * wave_sizze_18321) == 0 && (squot32(local_tid_18319, wave_sizze_18321) & (2 * skip_waves_18347 - 1)) == 0)) {
                // read array element
                {
                    eta_p_17138 = futrts_from_bits16(((__local uint16_t *) red_arr_mem_18343)[sext_i32_i64(local_tid_18319 + offset_18346)]);
                }
                // apply reduction operation
                {
                    f16 defunc_0_op_res_17139 = eta_p_17137 + eta_p_17138;
                    
                    eta_p_17137 = defunc_0_op_res_17139;
                }
                // write result of operation
                {
                    ((__local uint16_t *) red_arr_mem_18343)[sext_i32_i64(local_tid_18319)] = futrts_to_bits16(eta_p_17137);
                }
            }
            skip_waves_18347 *= 2;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_LOCAL_MEM_FENCE);
        // Save result of reduction.
        {
            defunc_0_reduce_comm_res_17134 = futrts_from_bits16(((__local uint16_t *) red_arr_mem_18343)[(int64_t) 0]);
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        max_res_17150 = fmax16(mi_old_17113, defunc_0_reduce_comm_res_17120);
        real_exp_arg0_17151 = defunc_0_reduce_comm_res_17120 - max_res_17150;
        exp_res_17152 = futrts_exp16(real_exp_arg0_17151);
        exp_arg0_17153 = mi_old_17113 - max_res_17150;
        exp_res_17154 = futrts_exp16(exp_arg0_17153);
        eli_17155 = li_old_17114 * exp_res_17154;
        zp_rhs_17156 = defunc_0_reduce_comm_res_17134 * exp_res_17152;
        li_new_17157 = eli_17155 + zp_rhs_17156;
        mi_old_tmp_18333 = max_res_17150;
        li_old_tmp_18334 = li_new_17157;
        mi_old_17113 = mi_old_tmp_18333;
        li_old_17114 = li_old_tmp_18334;
    }
    softmaxChunkML_res_17110 = mi_old_17113;
    softmaxChunkML_res_17111 = li_old_17114;
    if (local_tid_18319 == 0) {
        ((__global uint16_t *) mem_17610)[gtid_17105 * d_10432 + gtid_17106] = futrts_to_bits16(softmaxChunkML_res_17110);
    }
    if (local_tid_18319 == 0) {
        ((__global uint16_t *) mem_17613)[gtid_17105 * d_10432 + gtid_17106] = futrts_to_bits16(softmaxChunkML_res_17111);
    }
    
  error_10:
    return;
}
FUTHARK_KERNEL
void thesislike512zisegmap_intrablock_17204(__global int *global_failure, int64_t m_10431, int64_t d_10432, int64_t dzlz7bUZLztZRz20Umz20Udz7dUzg_10433, int64_t one_intra_par_min_16390, int64_t binop_x_17598, __global unsigned char *V_mem_17593, __global unsigned char *mem_17618, __global unsigned char *mem_17625)
{
    volatile __local unsigned char *red_arr_mem_18378_backing_1 = &shared_mem[0];
    const int64_t red_arr_mem_18378_backing_1_offset = 0 + ((int64_t) 2 * (d_10432 * dzlz7bUZLztZRz20Umz20Udz7dUzg_10433) + srem64((int64_t) 8 - srem64((int64_t) 2 * (d_10432 * dzlz7bUZLztZRz20Umz20Udz7dUzg_10433), (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_18079_backing_0 = &shared_mem[red_arr_mem_18378_backing_1_offset];
    const int64_t color_18079_backing_0_offset = red_arr_mem_18378_backing_1_offset + (binop_x_17598 + srem64((int64_t) 8 - srem64(binop_x_17598, (int64_t) 8), (int64_t) 8));
    
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_18364;
    int32_t tblock_sizze_18367;
    int32_t wave_sizze_18366;
    int32_t block_id_18365;
    int32_t global_tid_18363;
    int64_t phys_tblock_id_17204;
    int64_t slice_18370;
    int64_t slice_18371;
    int64_t ltid_pre_18368;
    int64_t remnant_18372;
    int64_t ltid_pre_18369;
    int64_t remnant_18373;
    int64_t slice_18374;
    int64_t slice_18375;
    int64_t gtid_17202;
    int64_t remnant_18376;
    int64_t gtid_17203;
    int64_t remnant_18377;
    __local unsigned char *color_18079;
    int64_t phys_tid_17210;
    __local unsigned char *red_arr_mem_18378;
    int64_t gtid_17208;
    int64_t gtid_17209;
    int64_t dims_flat_18380;
    f16 eta_p_17211;
    f16 eta_p_17212;
    f16 eta_p_18382;
    f16 eta_p_18383;
    bool ltid_in_bounds_18385;
    int32_t skip_threads_18386;
    bool no_carry_in_18392;
    int32_t num_chunks_18397;
    
    local_tid_18364 = get_local_id(0);
    tblock_sizze_18367 = get_local_size(0);
    wave_sizze_18366 = LOCKSTEP_WIDTH;
    block_id_18365 = get_tblock_id(0);
    global_tid_18363 = block_id_18365 * tblock_sizze_18367 + local_tid_18364;
    phys_tblock_id_17204 = sext_i32_i64(block_id_18365);
    slice_18370 = dzlz7bUZLztZRz20Umz20Udz7dUzg_10433;
    slice_18371 = d_10432 * slice_18370;
    ltid_pre_18368 = squot64(sext_i32_i64(local_tid_18364), slice_18370);
    remnant_18372 = sext_i32_i64(local_tid_18364) - ltid_pre_18368 * slice_18370;
    ltid_pre_18369 = remnant_18372;
    remnant_18373 = remnant_18372 - ltid_pre_18369;
    slice_18374 = d_10432;
    slice_18375 = m_10431 * slice_18374;
    gtid_17202 = squot64(sext_i32_i64(block_id_18365), slice_18374);
    remnant_18376 = sext_i32_i64(block_id_18365) - gtid_17202 * slice_18374;
    gtid_17203 = remnant_18376;
    remnant_18377 = remnant_18376 - gtid_17203;
    color_18079 = (__local unsigned char *) color_18079_backing_0;
    phys_tid_17210 = sext_i32_i64(local_tid_18364);
    red_arr_mem_18378 = (__local unsigned char *) red_arr_mem_18378_backing_1;
    gtid_17208 = sext_i32_i64(sext_i64_i32(ltid_pre_18368));
    gtid_17209 = sext_i32_i64(sext_i64_i32(ltid_pre_18369));
    if (slt64(gtid_17208, d_10432) && slt64(gtid_17209, dzlz7bUZLztZRz20Umz20Udz7dUzg_10433)) {
        f16 eta_p_17215;
        f16 eta_p_17216;
        f16 defunc_0_f_res_17217;
        
        eta_p_17215 = futrts_from_bits16(((__global uint16_t *) mem_17618)[gtid_17202 * (dzlz7bUZLztZRz20Umz20Udz7dUzg_10433 * d_10432) + gtid_17203 * dzlz7bUZLztZRz20Umz20Udz7dUzg_10433 + gtid_17209]);
        eta_p_17216 = futrts_from_bits16(((__global uint16_t *) V_mem_17593)[gtid_17209 * d_10432 + gtid_17208]);
        defunc_0_f_res_17217 = eta_p_17215 * eta_p_17216;
        ((__local uint16_t *) red_arr_mem_18378)[gtid_17208 * dzlz7bUZLztZRz20Umz20Udz7dUzg_10433 + gtid_17209] = futrts_to_bits16(defunc_0_f_res_17217);
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    dims_flat_18380 = d_10432 * dzlz7bUZLztZRz20Umz20Udz7dUzg_10433;
    ltid_in_bounds_18385 = slt64(sext_i32_i64(local_tid_18364), d_10432 * dzlz7bUZLztZRz20Umz20Udz7dUzg_10433);
    // read input for in-block scan
    {
        if (ltid_in_bounds_18385) {
            eta_p_17212 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18378)[sext_i32_i64(local_tid_18364)]);
            if ((local_tid_18364 - squot32(local_tid_18364, 32) * 32) == 0) {
                eta_p_17211 = eta_p_17212;
            }
        }
    }
    // in-block scan (hopefully no barriers needed)
    {
        skip_threads_18386 = 1;
        while (slt32(skip_threads_18386, 32)) {
            bool thread_active_18387 = sle32(skip_threads_18386, local_tid_18364 - squot32(local_tid_18364, 32) * 32) && ltid_in_bounds_18385;
            
            if (thread_active_18387) {
                // read operands
                {
                    eta_p_17211 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18378)[sext_i32_i64(local_tid_18364) - sext_i32_i64(skip_threads_18386)]);
                }
            }
            // perform operation
            {
                bool inactive_18388 = slt64(srem64(sext_i32_i64(local_tid_18364), dzlz7bUZLztZRz20Umz20Udz7dUzg_10433), sext_i32_i64(local_tid_18364) - sext_i32_i64(local_tid_18364 - skip_threads_18386));
                
                if (thread_active_18387 && inactive_18388) {
                    eta_p_17211 = eta_p_17212;
                }
                if (thread_active_18387) {
                    if (!inactive_18388) {
                        f16 defunc_0_op_res_17213 = eta_p_17211 + eta_p_17212;
                        
                        eta_p_17211 = defunc_0_op_res_17213;
                    }
                }
            }
            if (sle32(wave_sizze_18366, skip_threads_18386)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            if (thread_active_18387) {
                // write result
                {
                    ((volatile __local uint16_t *) red_arr_mem_18378)[sext_i32_i64(local_tid_18364)] = futrts_to_bits16(eta_p_17211);
                    eta_p_17212 = eta_p_17211;
                }
            }
            if (sle32(wave_sizze_18366, skip_threads_18386)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            skip_threads_18386 *= 2;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // last thread of block 'i' writes its result to offset 'i'
    {
        if ((local_tid_18364 - squot32(local_tid_18364, 32) * 32) == 31 && ltid_in_bounds_18385) {
            ((volatile __local uint16_t *) red_arr_mem_18378)[sext_i32_i64(squot32(local_tid_18364, 32))] = futrts_to_bits16(eta_p_17211);
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
    {
        int32_t skip_threads_18389;
        
        // read input for in-block scan
        {
            if (squot32(local_tid_18364, 32) == 0 && ltid_in_bounds_18385) {
                eta_p_18383 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18378)[sext_i32_i64(local_tid_18364)]);
                if ((local_tid_18364 - squot32(local_tid_18364, 32) * 32) == 0) {
                    eta_p_18382 = eta_p_18383;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_18389 = 1;
            while (slt32(skip_threads_18389, 32)) {
                bool thread_active_18390 = sle32(skip_threads_18389, local_tid_18364 - squot32(local_tid_18364, 32) * 32) && (squot32(local_tid_18364, 32) == 0 && ltid_in_bounds_18385);
                
                if (thread_active_18390) {
                    // read operands
                    {
                        eta_p_18382 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18378)[sext_i32_i64(local_tid_18364) - sext_i32_i64(skip_threads_18389)]);
                    }
                }
                // perform operation
                {
                    bool inactive_18391 = slt64(srem64(sext_i32_i64(local_tid_18364 * 32 + 32 - 1), dzlz7bUZLztZRz20Umz20Udz7dUzg_10433), sext_i32_i64(local_tid_18364 * 32 + 32 - 1) - sext_i32_i64((local_tid_18364 - skip_threads_18389) * 32 + 32 - 1));
                    
                    if (thread_active_18390 && inactive_18391) {
                        eta_p_18382 = eta_p_18383;
                    }
                    if (thread_active_18390) {
                        if (!inactive_18391) {
                            f16 defunc_0_op_res_18384 = eta_p_18382 + eta_p_18383;
                            
                            eta_p_18382 = defunc_0_op_res_18384;
                        }
                    }
                }
                if (sle32(wave_sizze_18366, skip_threads_18389)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (thread_active_18390) {
                    // write result
                    {
                        ((volatile __local uint16_t *) red_arr_mem_18378)[sext_i32_i64(local_tid_18364)] = futrts_to_bits16(eta_p_18382);
                        eta_p_18383 = eta_p_18382;
                    }
                }
                if (sle32(wave_sizze_18366, skip_threads_18389)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_18389 *= 2;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    no_carry_in_18392 = squot32(local_tid_18364, 32) == 0 || !ltid_in_bounds_18385;
    // carry-in for every block except the first
    {
        // read operands
        {
            if (!no_carry_in_18392) {
                eta_p_17212 = eta_p_17211;
                eta_p_17211 = futrts_from_bits16(((__local uint16_t *) red_arr_mem_18378)[sext_i32_i64(squot32(local_tid_18364, 32)) - (int64_t) 1]);
            }
        }
        // perform operation
        {
            bool inactive_18393 = slt64(srem64(sext_i32_i64(local_tid_18364), dzlz7bUZLztZRz20Umz20Udz7dUzg_10433), sext_i32_i64(local_tid_18364) - sext_i32_i64(squot32(local_tid_18364, 32) * 32 - 1));
            
            if (!no_carry_in_18392) {
                if (inactive_18393) {
                    eta_p_17211 = eta_p_17212;
                }
            }
            if (!no_carry_in_18392) {
                if (!inactive_18393) {
                    f16 defunc_0_op_res_17213 = eta_p_17211 + eta_p_17212;
                    
                    eta_p_17211 = defunc_0_op_res_17213;
                }
            }
        }
        // write final result
        {
            if (!no_carry_in_18392) {
                ((__local uint16_t *) red_arr_mem_18378)[sext_i32_i64(local_tid_18364)] = futrts_to_bits16(eta_p_17211);
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // restore correct values for first block
    {
        if (squot32(local_tid_18364, 32) == 0 && ltid_in_bounds_18385) {
            ((__local uint16_t *) red_arr_mem_18378)[sext_i32_i64(local_tid_18364)] = futrts_to_bits16(eta_p_17212);
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    barrier(CLK_LOCAL_MEM_FENCE);
    // Save result of reduction.
    {
        int32_t num_chunks_18394 = sdiv_up32(sext_i64_i32(d_10432), sext_i64_i32(one_intra_par_min_16390));
        
        for (int32_t chunk_i_18395 = 0; chunk_i_18395 < num_chunks_18394; chunk_i_18395++) {
            int32_t i_18396 = chunk_i_18395 * sext_i64_i32(one_intra_par_min_16390) + local_tid_18364;
            
            if (slt32(i_18396, sext_i64_i32(d_10432))) {
                ((__local uint16_t *) color_18079)[sext_i32_i64(i_18396)] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) red_arr_mem_18378)[dzlz7bUZLztZRz20Umz20Udz7dUzg_10433 - (int64_t) 1 + sext_i32_i64(i_18396) * dzlz7bUZLztZRz20Umz20Udz7dUzg_10433]));
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    num_chunks_18397 = sdiv_up32(sext_i64_i32(d_10432), sext_i64_i32(one_intra_par_min_16390));
    for (int32_t chunk_i_18398 = 0; chunk_i_18398 < num_chunks_18397; chunk_i_18398++) {
        int32_t i_18399 = chunk_i_18398 * sext_i64_i32(one_intra_par_min_16390) + local_tid_18364;
        
        if (slt32(i_18399, sext_i64_i32(d_10432))) {
            ((__global uint16_t *) mem_17625)[gtid_17202 * (d_10432 * d_10432) + gtid_17203 * d_10432 + sext_i32_i64(i_18399)] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) color_18079)[sext_i32_i64(i_18399)]));
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
  error_3:
    return;
}
FUTHARK_KERNEL_SIZED(thesislike64zisegmap_14241_dim1, 1, 1)
void thesislike64zisegmap_14241(__global int *global_failure, int64_t m_10377, int64_t d_10378, int64_t dzlz7bUZLztZRz20Umz20Udz7dUzg_10379, int64_t one_intra_par_min_13446, int64_t y_13447, __global unsigned char *mem_17605, __global unsigned char *mem_17610, __global unsigned char *mem_17613, __global unsigned char *mem_17618)
{
    #define segmap_tblock_sizze_14235 (thesislike64zisegmap_14241zisegmap_tblock_sizze_14235)
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_18350;
    int32_t tblock_sizze_18353;
    int32_t wave_sizze_18352;
    int32_t block_id_18351;
    int32_t global_tid_18349;
    int64_t phys_tid_14241;
    int64_t global_tid_18354;
    int64_t slice_18355;
    int64_t slice_18356;
    int64_t slice_18357;
    int64_t gtid_14238;
    int64_t remnant_18358;
    int64_t gtid_14239;
    int64_t remnant_18359;
    int64_t gtid_14240;
    int64_t remnant_18360;
    
    local_tid_18350 = get_local_id(0);
    tblock_sizze_18353 = get_local_size(0);
    wave_sizze_18352 = LOCKSTEP_WIDTH;
    block_id_18351 = get_tblock_id(0);
    global_tid_18349 = block_id_18351 * tblock_sizze_18353 + local_tid_18350;
    phys_tid_14241 = sext_i32_i64(global_tid_18349);
    global_tid_18354 = sext_i32_i64(block_id_18351) * segmap_tblock_sizze_14235 + sext_i32_i64(local_tid_18350);
    slice_18355 = dzlz7bUZLztZRz20Umz20Udz7dUzg_10379;
    slice_18356 = d_10378 * slice_18355;
    slice_18357 = m_10377 * slice_18356;
    gtid_14238 = squot64(global_tid_18354, slice_18356);
    remnant_18358 = global_tid_18354 - gtid_14238 * slice_18356;
    gtid_14239 = squot64(remnant_18358, slice_18355);
    remnant_18359 = remnant_18358 - gtid_14239 * slice_18355;
    gtid_14240 = remnant_18359;
    remnant_18360 = remnant_18359 - gtid_14240;
    if ((slt64(gtid_14238, m_10377) && slt64(gtid_14239, d_10378)) && slt64(gtid_14240, dzlz7bUZLztZRz20Umz20Udz7dUzg_10379)) {
        f16 eta_p_14242;
        f16 eta_p_14243;
        int64_t binop_x_17251;
        int64_t binop_y_17252;
        int64_t binop_x_17253;
        int64_t binop_x_17254;
        int64_t new_index_17257;
        int64_t binop_y_17273;
        int64_t binop_x_17274;
        int64_t new_index_17276;
        int64_t binop_y_17314;
        int64_t binop_x_17315;
        int64_t new_index_17316;
        int64_t binop_y_17396;
        int64_t new_index_17397;
        f16 eta_p_14244;
        f16 real_exp_arg0_14245;
        f16 exp_res_14246;
        f16 lifted_lambda_res_14247;
        
        eta_p_14242 = futrts_from_bits16(((__global uint16_t *) mem_17610)[gtid_14238 * d_10378 + gtid_14239]);
        eta_p_14243 = futrts_from_bits16(((__global uint16_t *) mem_17613)[gtid_14238 * d_10378 + gtid_14239]);
        binop_x_17251 = one_intra_par_min_13446 * gtid_14238;
        binop_y_17252 = d_10378 * gtid_14240;
        binop_x_17253 = binop_x_17251 + binop_y_17252;
        binop_x_17254 = gtid_14239 + binop_x_17253;
        new_index_17257 = squot64(binop_x_17254, one_intra_par_min_13446);
        binop_y_17273 = one_intra_par_min_13446 * new_index_17257;
        binop_x_17274 = binop_x_17254 - binop_y_17273;
        new_index_17276 = squot64(binop_x_17274, y_13447);
        binop_y_17314 = y_13447 * new_index_17276;
        binop_x_17315 = binop_x_17274 - binop_y_17314;
        new_index_17316 = squot64(binop_x_17315, d_10378);
        binop_y_17396 = d_10378 * new_index_17316;
        new_index_17397 = binop_x_17315 - binop_y_17396;
        eta_p_14244 = futrts_from_bits16(((__global uint16_t *) mem_17605)[new_index_17257 * (d_10378 * d_10378 * m_10377) + new_index_17276 * (d_10378 * d_10378) + new_index_17316 * d_10378 + new_index_17397]);
        real_exp_arg0_14245 = eta_p_14244 - eta_p_14242;
        exp_res_14246 = futrts_exp16(real_exp_arg0_14245);
        lifted_lambda_res_14247 = exp_res_14246 / eta_p_14243;
        ((__global uint16_t *) mem_17618)[gtid_14238 * (dzlz7bUZLztZRz20Umz20Udz7dUzg_10379 * d_10378) + gtid_14239 * dzlz7bUZLztZRz20Umz20Udz7dUzg_10379 + gtid_14240] = futrts_to_bits16(lifted_lambda_res_14247);
    }
    
  error_0:
    return;
    #undef segmap_tblock_sizze_14235
}
FUTHARK_KERNEL
void thesislike64zisegmap_intrablock_13683(__global int *global_failure, int64_t m_10377, int64_t d_10378, int64_t dzlz7bUZLztZRz20Umz20Udz7dUzg_10379, int64_t q_11504, unsigned char opaque_res_11508_bits, int64_t computed_tblock_sizze_13303, int64_t y_13447, int64_t binop_x_17598, int64_t bytes_17624, int64_t bytes_17651, int64_t maxSubHelper_18063, int64_t maxSubHelper_18064, int64_t maxSubHelper_18066, int32_t num_chunks_18094, __global unsigned char *Q_mem_17591, __global unsigned char *K_mem_17592, __global unsigned char *V_mem_17593, __global unsigned char *mem_17683)
{
    bool opaque_res_11508 = opaque_res_11508_bits;
    volatile __local unsigned char *red_arr_mem_18244_backing_12 = &shared_mem[0];
    const int64_t red_arr_mem_18244_backing_12_offset = 0 + ((int64_t) 2 * (d_10378 * d_10378 * dzlz7bUZLztZRz20Umz20Udz7dUzg_10379) + srem64((int64_t) 8 - srem64((int64_t) 2 * (d_10378 * d_10378 * dzlz7bUZLztZRz20Umz20Udz7dUzg_10379), (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *red_arr_mem_18224_backing_11 = &shared_mem[red_arr_mem_18244_backing_12_offset];
    const int64_t red_arr_mem_18224_backing_11_offset = red_arr_mem_18244_backing_12_offset + ((int64_t) 2 * (d_10378 * (int64_t) 32) + srem64((int64_t) 8 - srem64((int64_t) 2 * (d_10378 * (int64_t) 32), (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *red_arr_mem_18204_backing_10 = &shared_mem[red_arr_mem_18224_backing_11_offset];
    const int64_t red_arr_mem_18204_backing_10_offset = red_arr_mem_18224_backing_11_offset + ((int64_t) 2 * (d_10378 * (int64_t) 32) + srem64((int64_t) 8 - srem64((int64_t) 2 * (d_10378 * (int64_t) 32), (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *red_arr_mem_18158_backing_9 = &shared_mem[red_arr_mem_18204_backing_10_offset];
    const int64_t red_arr_mem_18158_backing_9_offset = red_arr_mem_18204_backing_10_offset + ((int64_t) 4 * (m_10377 * d_10378 * d_10378 * d_10378) + srem64((int64_t) 8 - srem64((int64_t) 4 * (m_10377 * d_10378 * d_10378 * d_10378), (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_18075_backing_8 = &shared_mem[red_arr_mem_18158_backing_9_offset];
    const int64_t color_18075_backing_8_offset = red_arr_mem_18158_backing_9_offset + (bytes_17624 + srem64((int64_t) 8 - srem64(bytes_17624, (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_18074_backing_7 = &shared_mem[color_18075_backing_8_offset];
    const int64_t color_18074_backing_7_offset = color_18075_backing_8_offset + (bytes_17651 + srem64((int64_t) 8 - srem64(bytes_17651, (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_18073_backing_6 = &shared_mem[color_18074_backing_7_offset];
    const int64_t color_18073_backing_6_offset = color_18074_backing_7_offset + (bytes_17651 + srem64((int64_t) 8 - srem64(bytes_17651, (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_18072_backing_5 = &shared_mem[color_18073_backing_6_offset];
    const int64_t color_18072_backing_5_offset = color_18073_backing_6_offset + (binop_x_17598 + srem64((int64_t) 8 - srem64(binop_x_17598, (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_18071_backing_4 = &shared_mem[color_18072_backing_5_offset];
    const int64_t color_18071_backing_4_offset = color_18072_backing_5_offset + (binop_x_17598 + srem64((int64_t) 8 - srem64(binop_x_17598, (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_18070_backing_3 = &shared_mem[color_18071_backing_4_offset];
    const int64_t color_18070_backing_3_offset = color_18071_backing_4_offset + (binop_x_17598 + srem64((int64_t) 8 - srem64(binop_x_17598, (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_18069_backing_2 = &shared_mem[color_18070_backing_3_offset];
    const int64_t color_18069_backing_2_offset = color_18070_backing_3_offset + (maxSubHelper_18066 + srem64((int64_t) 8 - srem64(maxSubHelper_18066, (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_18068_backing_1 = &shared_mem[color_18069_backing_2_offset];
    const int64_t color_18068_backing_1_offset = color_18069_backing_2_offset + (maxSubHelper_18064 + srem64((int64_t) 8 - srem64(maxSubHelper_18064, (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_18067_backing_0 = &shared_mem[color_18068_backing_1_offset];
    const int64_t color_18067_backing_0_offset = color_18068_backing_1_offset + (maxSubHelper_18063 + srem64((int64_t) 8 - srem64(maxSubHelper_18063, (int64_t) 8), (int64_t) 8));
    
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_18101;
    int32_t tblock_sizze_18104;
    int32_t wave_sizze_18103;
    int32_t block_id_18102;
    int32_t global_tid_18100;
    int64_t phys_tblock_id_13683;
    int64_t slice_18108;
    int64_t slice_18109;
    int64_t slice_18110;
    int64_t ltid_pre_18105;
    int64_t remnant_18111;
    int64_t ltid_pre_18106;
    int64_t remnant_18112;
    int64_t ltid_pre_18107;
    int64_t remnant_18113;
    int64_t slice_18118;
    int64_t slice_18119;
    int64_t slice_18120;
    int64_t slice_18121;
    int64_t ltid_pre_18114;
    int64_t remnant_18122;
    int64_t ltid_pre_18115;
    int64_t remnant_18123;
    int64_t ltid_pre_18116;
    int64_t remnant_18124;
    int64_t ltid_pre_18117;
    int64_t remnant_18125;
    int64_t slice_18127;
    int64_t ltid_pre_18126;
    int64_t remnant_18128;
    int64_t slice_18131;
    int64_t slice_18132;
    int64_t ltid_pre_18129;
    int64_t remnant_18133;
    int64_t ltid_pre_18130;
    int64_t remnant_18134;
    int64_t slice_18137;
    int64_t slice_18138;
    int64_t ltid_pre_18135;
    int64_t remnant_18139;
    int64_t ltid_pre_18136;
    int64_t remnant_18140;
    int64_t slice_18144;
    int64_t slice_18145;
    int64_t slice_18146;
    int64_t ltid_pre_18141;
    int64_t remnant_18147;
    int64_t ltid_pre_18142;
    int64_t remnant_18148;
    int64_t ltid_pre_18143;
    int64_t remnant_18149;
    int64_t slice_18152;
    int64_t slice_18153;
    int64_t ltid_pre_18150;
    int64_t remnant_18154;
    int64_t ltid_pre_18151;
    int64_t remnant_18155;
    int64_t slice_18156;
    int64_t gtid_13682;
    int64_t remnant_18157;
    __local unsigned char *color_18067;
    __local unsigned char *color_18068;
    __local unsigned char *color_18069;
    __local unsigned char *color_18070;
    __local unsigned char *color_18071;
    __local unsigned char *color_18072;
    __local unsigned char *color_18073;
    __local unsigned char *color_18074;
    __local unsigned char *color_18075;
    int64_t phys_tid_13691;
    __local unsigned char *red_arr_mem_18158;
    int64_t gtid_13687;
    int64_t gtid_13688;
    int64_t gtid_13689;
    int64_t gtid_13690;
    int64_t dims_flat_18160;
    float eta_p_13692;
    float eta_p_13693;
    float eta_p_18162;
    float eta_p_18163;
    bool ltid_in_bounds_18165;
    int32_t skip_threads_18166;
    bool no_carry_in_18172;
    int64_t phys_tid_13706;
    int64_t gtid_13703;
    int64_t gtid_13704;
    int64_t gtid_13705;
    int32_t num_chunks_18177;
    __local unsigned char *ext_mem_17673;
    __local unsigned char *ext_mem_unused_17998;
    __local unsigned char *ext_mem_17672;
    __local unsigned char *ext_mem_unused_18007;
    __local unsigned char *mem_param_17646;
    __local unsigned char *mem_param_17649;
    __local unsigned char *mem_param_out_17999;
    __local unsigned char *mem_param_out_18008;
    int64_t phys_tid_13789;
    int64_t gtid_13787;
    int64_t gtid_13788;
    int64_t phys_tid_13801;
    __local unsigned char *red_arr_mem_18244;
    int64_t gtid_13798;
    int64_t gtid_13799;
    int64_t gtid_13800;
    int64_t dims_flat_18246;
    f16 eta_p_13802;
    f16 eta_p_13803;
    f16 eta_p_18248;
    f16 eta_p_18249;
    bool ltid_in_bounds_18251;
    int32_t skip_threads_18252;
    bool no_carry_in_18258;
    int32_t num_chunks_18263;
    
    local_tid_18101 = get_local_id(0);
    tblock_sizze_18104 = get_local_size(0);
    wave_sizze_18103 = LOCKSTEP_WIDTH;
    block_id_18102 = get_tblock_id(0);
    global_tid_18100 = block_id_18102 * tblock_sizze_18104 + local_tid_18101;
    phys_tblock_id_13683 = sext_i32_i64(block_id_18102);
    slice_18108 = d_10378;
    slice_18109 = d_10378 * slice_18108;
    slice_18110 = m_10377 * slice_18109;
    ltid_pre_18105 = squot64(sext_i32_i64(local_tid_18101), slice_18109);
    remnant_18111 = sext_i32_i64(local_tid_18101) - ltid_pre_18105 * slice_18109;
    ltid_pre_18106 = squot64(remnant_18111, slice_18108);
    remnant_18112 = remnant_18111 - ltid_pre_18106 * slice_18108;
    ltid_pre_18107 = remnant_18112;
    remnant_18113 = remnant_18112 - ltid_pre_18107;
    slice_18118 = d_10378;
    slice_18119 = d_10378 * slice_18118;
    slice_18120 = d_10378 * slice_18119;
    slice_18121 = m_10377 * slice_18120;
    ltid_pre_18114 = squot64(sext_i32_i64(local_tid_18101), slice_18120);
    remnant_18122 = sext_i32_i64(local_tid_18101) - ltid_pre_18114 * slice_18120;
    ltid_pre_18115 = squot64(remnant_18122, slice_18119);
    remnant_18123 = remnant_18122 - ltid_pre_18115 * slice_18119;
    ltid_pre_18116 = squot64(remnant_18123, slice_18118);
    remnant_18124 = remnant_18123 - ltid_pre_18116 * slice_18118;
    ltid_pre_18117 = remnant_18124;
    remnant_18125 = remnant_18124 - ltid_pre_18117;
    slice_18127 = d_10378;
    ltid_pre_18126 = sext_i32_i64(local_tid_18101);
    remnant_18128 = sext_i32_i64(local_tid_18101) - ltid_pre_18126;
    slice_18131 = (int64_t) 32;
    slice_18132 = d_10378 * slice_18131;
    ltid_pre_18129 = squot64(sext_i32_i64(local_tid_18101), slice_18131);
    remnant_18133 = sext_i32_i64(local_tid_18101) - ltid_pre_18129 * slice_18131;
    ltid_pre_18130 = remnant_18133;
    remnant_18134 = remnant_18133 - ltid_pre_18130;
    slice_18137 = (int64_t) 1024;
    slice_18138 = d_10378 * slice_18137;
    ltid_pre_18135 = squot64(sext_i32_i64(local_tid_18101), slice_18137);
    remnant_18139 = sext_i32_i64(local_tid_18101) - ltid_pre_18135 * slice_18137;
    ltid_pre_18136 = remnant_18139;
    remnant_18140 = remnant_18139 - ltid_pre_18136;
    slice_18144 = dzlz7bUZLztZRz20Umz20Udz7dUzg_10379;
    slice_18145 = d_10378 * slice_18144;
    slice_18146 = d_10378 * slice_18145;
    ltid_pre_18141 = squot64(sext_i32_i64(local_tid_18101), slice_18145);
    remnant_18147 = sext_i32_i64(local_tid_18101) - ltid_pre_18141 * slice_18145;
    ltid_pre_18142 = squot64(remnant_18147, slice_18144);
    remnant_18148 = remnant_18147 - ltid_pre_18142 * slice_18144;
    ltid_pre_18143 = remnant_18148;
    remnant_18149 = remnant_18148 - ltid_pre_18143;
    slice_18152 = dzlz7bUZLztZRz20Umz20Udz7dUzg_10379;
    slice_18153 = d_10378 * slice_18152;
    ltid_pre_18150 = squot64(sext_i32_i64(local_tid_18101), slice_18152);
    remnant_18154 = sext_i32_i64(local_tid_18101) - ltid_pre_18150 * slice_18152;
    ltid_pre_18151 = remnant_18154;
    remnant_18155 = remnant_18154 - ltid_pre_18151;
    slice_18156 = m_10377;
    gtid_13682 = sext_i32_i64(block_id_18102);
    remnant_18157 = sext_i32_i64(block_id_18102) - gtid_13682;
    color_18067 = (__local unsigned char *) color_18067_backing_0;
    color_18068 = (__local unsigned char *) color_18068_backing_1;
    color_18069 = (__local unsigned char *) color_18069_backing_2;
    color_18070 = (__local unsigned char *) color_18070_backing_3;
    color_18071 = (__local unsigned char *) color_18071_backing_4;
    color_18072 = (__local unsigned char *) color_18072_backing_5;
    color_18073 = (__local unsigned char *) color_18073_backing_6;
    color_18074 = (__local unsigned char *) color_18074_backing_7;
    color_18075 = (__local unsigned char *) color_18075_backing_8;
    phys_tid_13691 = sext_i32_i64(local_tid_18101);
    red_arr_mem_18158 = (__local unsigned char *) red_arr_mem_18158_backing_9;
    gtid_13687 = sext_i32_i64(sext_i64_i32(ltid_pre_18114));
    gtid_13688 = sext_i32_i64(sext_i64_i32(ltid_pre_18115));
    gtid_13689 = sext_i32_i64(sext_i64_i32(ltid_pre_18116));
    gtid_13690 = sext_i32_i64(sext_i64_i32(ltid_pre_18117));
    if (((slt64(gtid_13687, m_10377) && slt64(gtid_13688, d_10378)) && slt64(gtid_13689, d_10378)) && slt64(gtid_13690, d_10378)) {
        f16 eta_p_13698;
        int64_t binop_x_17232;
        int64_t binop_y_17233;
        int64_t binop_x_17234;
        int64_t binop_x_17235;
        int64_t new_index_17236;
        int64_t binop_y_17248;
        int64_t new_index_17249;
        f16 eta_p_13699;
        f16 defunc_0_f_res_13700;
        float f16_res_13701;
        
        eta_p_13698 = futrts_from_bits16(((__global uint16_t *) Q_mem_17591)[gtid_13682 * (d_10378 * d_10378) + gtid_13688 * d_10378 + gtid_13690]);
        binop_x_17232 = y_13447 * gtid_13687;
        binop_y_17233 = d_10378 * gtid_13689;
        binop_x_17234 = binop_x_17232 + binop_y_17233;
        binop_x_17235 = gtid_13690 + binop_x_17234;
        new_index_17236 = squot64(binop_x_17235, d_10378);
        binop_y_17248 = d_10378 * new_index_17236;
        new_index_17249 = binop_x_17235 - binop_y_17248;
        eta_p_13699 = futrts_from_bits16(((__global uint16_t *) K_mem_17592)[new_index_17236 * d_10378 + new_index_17249]);
        defunc_0_f_res_13700 = eta_p_13698 * eta_p_13699;
        f16_res_13701 = fpconv_f16_f32(defunc_0_f_res_13700);
        ((__local float *) red_arr_mem_18158)[gtid_13687 * (d_10378 * d_10378 * d_10378) + gtid_13688 * (d_10378 * d_10378) + gtid_13689 * d_10378 + gtid_13690] = f16_res_13701;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    dims_flat_18160 = m_10377 * d_10378 * d_10378 * d_10378;
    ltid_in_bounds_18165 = slt64(sext_i32_i64(local_tid_18101), m_10377 * d_10378 * d_10378 * d_10378);
    // read input for in-block scan
    {
        if (ltid_in_bounds_18165) {
            eta_p_13693 = ((volatile __local float *) red_arr_mem_18158)[sext_i32_i64(local_tid_18101)];
            if ((local_tid_18101 - squot32(local_tid_18101, 32) * 32) == 0) {
                eta_p_13692 = eta_p_13693;
            }
        }
    }
    // in-block scan (hopefully no barriers needed)
    {
        skip_threads_18166 = 1;
        while (slt32(skip_threads_18166, 32)) {
            bool thread_active_18167 = sle32(skip_threads_18166, local_tid_18101 - squot32(local_tid_18101, 32) * 32) && ltid_in_bounds_18165;
            
            if (thread_active_18167) {
                // read operands
                {
                    eta_p_13692 = ((volatile __local float *) red_arr_mem_18158)[sext_i32_i64(local_tid_18101) - sext_i32_i64(skip_threads_18166)];
                }
            }
            // perform operation
            {
                bool inactive_18168 = slt64(srem64(sext_i32_i64(local_tid_18101), d_10378), sext_i32_i64(local_tid_18101) - sext_i32_i64(local_tid_18101 - skip_threads_18166));
                
                if (thread_active_18167 && inactive_18168) {
                    eta_p_13692 = eta_p_13693;
                }
                if (thread_active_18167) {
                    if (!inactive_18168) {
                        float defunc_0_op_res_13694 = eta_p_13692 + eta_p_13693;
                        
                        eta_p_13692 = defunc_0_op_res_13694;
                    }
                }
            }
            if (sle32(wave_sizze_18103, skip_threads_18166)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            if (thread_active_18167) {
                // write result
                {
                    ((volatile __local float *) red_arr_mem_18158)[sext_i32_i64(local_tid_18101)] = eta_p_13692;
                    eta_p_13693 = eta_p_13692;
                }
            }
            if (sle32(wave_sizze_18103, skip_threads_18166)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            skip_threads_18166 *= 2;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // last thread of block 'i' writes its result to offset 'i'
    {
        if ((local_tid_18101 - squot32(local_tid_18101, 32) * 32) == 31 && ltid_in_bounds_18165) {
            ((volatile __local float *) red_arr_mem_18158)[sext_i32_i64(squot32(local_tid_18101, 32))] = eta_p_13692;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
    {
        int32_t skip_threads_18169;
        
        // read input for in-block scan
        {
            if (squot32(local_tid_18101, 32) == 0 && ltid_in_bounds_18165) {
                eta_p_18163 = ((volatile __local float *) red_arr_mem_18158)[sext_i32_i64(local_tid_18101)];
                if ((local_tid_18101 - squot32(local_tid_18101, 32) * 32) == 0) {
                    eta_p_18162 = eta_p_18163;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_18169 = 1;
            while (slt32(skip_threads_18169, 32)) {
                bool thread_active_18170 = sle32(skip_threads_18169, local_tid_18101 - squot32(local_tid_18101, 32) * 32) && (squot32(local_tid_18101, 32) == 0 && ltid_in_bounds_18165);
                
                if (thread_active_18170) {
                    // read operands
                    {
                        eta_p_18162 = ((volatile __local float *) red_arr_mem_18158)[sext_i32_i64(local_tid_18101) - sext_i32_i64(skip_threads_18169)];
                    }
                }
                // perform operation
                {
                    bool inactive_18171 = slt64(srem64(sext_i32_i64(local_tid_18101 * 32 + 32 - 1), d_10378), sext_i32_i64(local_tid_18101 * 32 + 32 - 1) - sext_i32_i64((local_tid_18101 - skip_threads_18169) * 32 + 32 - 1));
                    
                    if (thread_active_18170 && inactive_18171) {
                        eta_p_18162 = eta_p_18163;
                    }
                    if (thread_active_18170) {
                        if (!inactive_18171) {
                            float defunc_0_op_res_18164 = eta_p_18162 + eta_p_18163;
                            
                            eta_p_18162 = defunc_0_op_res_18164;
                        }
                    }
                }
                if (sle32(wave_sizze_18103, skip_threads_18169)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (thread_active_18170) {
                    // write result
                    {
                        ((volatile __local float *) red_arr_mem_18158)[sext_i32_i64(local_tid_18101)] = eta_p_18162;
                        eta_p_18163 = eta_p_18162;
                    }
                }
                if (sle32(wave_sizze_18103, skip_threads_18169)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_18169 *= 2;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    no_carry_in_18172 = squot32(local_tid_18101, 32) == 0 || !ltid_in_bounds_18165;
    // carry-in for every block except the first
    {
        // read operands
        {
            if (!no_carry_in_18172) {
                eta_p_13693 = eta_p_13692;
                eta_p_13692 = ((__local float *) red_arr_mem_18158)[sext_i32_i64(squot32(local_tid_18101, 32)) - (int64_t) 1];
            }
        }
        // perform operation
        {
            bool inactive_18173 = slt64(srem64(sext_i32_i64(local_tid_18101), d_10378), sext_i32_i64(local_tid_18101) - sext_i32_i64(squot32(local_tid_18101, 32) * 32 - 1));
            
            if (!no_carry_in_18172) {
                if (inactive_18173) {
                    eta_p_13692 = eta_p_13693;
                }
            }
            if (!no_carry_in_18172) {
                if (!inactive_18173) {
                    float defunc_0_op_res_13694 = eta_p_13692 + eta_p_13693;
                    
                    eta_p_13692 = defunc_0_op_res_13694;
                }
            }
        }
        // write final result
        {
            if (!no_carry_in_18172) {
                ((__local float *) red_arr_mem_18158)[sext_i32_i64(local_tid_18101)] = eta_p_13692;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // restore correct values for first block
    {
        if (squot32(local_tid_18101, 32) == 0 && ltid_in_bounds_18165) {
            ((__local float *) red_arr_mem_18158)[sext_i32_i64(local_tid_18101)] = eta_p_13693;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    barrier(CLK_LOCAL_MEM_FENCE);
    // Save result of reduction.
    {
        int32_t num_chunks_18174 = sdiv_up32(sext_i64_i32(m_10377) * sext_i64_i32(d_10378) * sext_i64_i32(d_10378), sext_i64_i32(computed_tblock_sizze_13303));
        
        for (int32_t chunk_i_18175 = 0; chunk_i_18175 < num_chunks_18174; chunk_i_18175++) {
            int32_t i_18176 = chunk_i_18175 * sext_i64_i32(computed_tblock_sizze_13303) + local_tid_18101;
            
            if (slt32(i_18176, sext_i64_i32(m_10377) * sext_i64_i32(d_10378) * sext_i64_i32(d_10378))) {
                ((__local float *) color_18068)[sext_i32_i64(squot32(i_18176, sext_i64_i32(d_10378) * sext_i64_i32(d_10378))) * (d_10378 * d_10378) + sext_i32_i64(squot32(i_18176 - squot32(i_18176, sext_i64_i32(d_10378) * sext_i64_i32(d_10378)) * (sext_i64_i32(d_10378) * sext_i64_i32(d_10378)), sext_i64_i32(d_10378))) * d_10378 + sext_i32_i64(i_18176 - squot32(i_18176, sext_i64_i32(d_10378) * sext_i64_i32(d_10378)) * (sext_i64_i32(d_10378) * sext_i64_i32(d_10378)) - squot32(i_18176 - squot32(i_18176, sext_i64_i32(d_10378) * sext_i64_i32(d_10378)) * (sext_i64_i32(d_10378) * sext_i64_i32(d_10378)), sext_i64_i32(d_10378)) * sext_i64_i32(d_10378))] = ((__local float *) red_arr_mem_18158)[d_10378 - (int64_t) 1 + sext_i32_i64(squot32(i_18176, sext_i64_i32(d_10378) * sext_i64_i32(d_10378))) * (d_10378 * d_10378 * d_10378) + sext_i32_i64(squot32(i_18176 - squot32(i_18176, sext_i64_i32(d_10378) * sext_i64_i32(d_10378)) * (sext_i64_i32(d_10378) * sext_i64_i32(d_10378)), sext_i64_i32(d_10378))) * (d_10378 * d_10378) + sext_i32_i64(i_18176 - squot32(i_18176, sext_i64_i32(d_10378) * sext_i64_i32(d_10378)) * (sext_i64_i32(d_10378) * sext_i64_i32(d_10378)) - squot32(i_18176 - squot32(i_18176, sext_i64_i32(d_10378) * sext_i64_i32(d_10378)) * (sext_i64_i32(d_10378) * sext_i64_i32(d_10378)), sext_i64_i32(d_10378)) * sext_i64_i32(d_10378)) * d_10378];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    phys_tid_13706 = sext_i32_i64(local_tid_18101);
    gtid_13703 = sext_i32_i64(sext_i64_i32(ltid_pre_18105));
    gtid_13704 = sext_i32_i64(sext_i64_i32(ltid_pre_18106));
    gtid_13705 = sext_i32_i64(sext_i64_i32(ltid_pre_18107));
    if ((slt64(gtid_13703, m_10377) && slt64(gtid_13704, d_10378)) && slt64(gtid_13705, d_10378)) {
        float defunc_0_f_res_13707;
        f16 f32_res_13708;
        
        defunc_0_f_res_13707 = ((__local float *) color_18068)[gtid_13703 * (d_10378 * d_10378) + gtid_13704 * d_10378 + gtid_13705];
        f32_res_13708 = fpconv_f32_f16(defunc_0_f_res_13707);
        ((__local uint16_t *) color_18067)[gtid_13703 * (d_10378 * d_10378) + gtid_13704 * d_10378 + gtid_13705] = futrts_to_bits16(f32_res_13708);
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    num_chunks_18177 = sdiv_up32(sext_i64_i32(m_10377) * sext_i64_i32(d_10378) * sext_i64_i32(d_10378), sext_i64_i32(computed_tblock_sizze_13303));
    for (int32_t chunk_i_18178 = 0; chunk_i_18178 < num_chunks_18177; chunk_i_18178++) {
        int32_t i_18179 = chunk_i_18178 * sext_i64_i32(computed_tblock_sizze_13303) + local_tid_18101;
        
        if (slt32(i_18179, sext_i64_i32(m_10377) * sext_i64_i32(d_10378) * sext_i64_i32(d_10378))) {
            ((__local uint16_t *) color_18075)[sext_i32_i64(squot32(i_18179, sext_i64_i32(d_10378) * sext_i64_i32(d_10378))) * (d_10378 * d_10378) + sext_i32_i64(squot32(i_18179 - squot32(i_18179, sext_i64_i32(d_10378) * sext_i64_i32(d_10378)) * (sext_i64_i32(d_10378) * sext_i64_i32(d_10378)), sext_i64_i32(d_10378))) * d_10378 + sext_i32_i64(i_18179 - squot32(i_18179, sext_i64_i32(d_10378) * sext_i64_i32(d_10378)) * (sext_i64_i32(d_10378) * sext_i64_i32(d_10378)) - squot32(i_18179 - squot32(i_18179, sext_i64_i32(d_10378) * sext_i64_i32(d_10378)) * (sext_i64_i32(d_10378) * sext_i64_i32(d_10378)), sext_i64_i32(d_10378)) * sext_i64_i32(d_10378))] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) color_18067)[sext_i32_i64(squot32(i_18179, sext_i64_i32(d_10378) * sext_i64_i32(d_10378))) * (d_10378 * d_10378) + sext_i32_i64(squot32(i_18179 - squot32(i_18179, sext_i64_i32(d_10378) * sext_i64_i32(d_10378)) * (sext_i64_i32(d_10378) * sext_i64_i32(d_10378)), sext_i64_i32(d_10378))) + sext_i32_i64(i_18179 - squot32(i_18179, sext_i64_i32(d_10378) * sext_i64_i32(d_10378)) * (sext_i64_i32(d_10378) * sext_i64_i32(d_10378)) - squot32(i_18179 - squot32(i_18179, sext_i64_i32(d_10378) * sext_i64_i32(d_10378)) * (sext_i64_i32(d_10378) * sext_i64_i32(d_10378)), sext_i64_i32(d_10378)) * sext_i64_i32(d_10378)) * d_10378]));
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    for (int32_t chunk_i_18182 = 0; chunk_i_18182 < num_chunks_18094; chunk_i_18182++) {
        int32_t i_18183;
        int64_t slice_18184;
        int64_t rep_i_18181;
        int64_t remnant_18185;
        
        i_18183 = chunk_i_18182 * sext_i64_i32(computed_tblock_sizze_13303) + local_tid_18101;
        slice_18184 = d_10378;
        rep_i_18181 = sext_i32_i64(i_18183);
        remnant_18185 = sext_i32_i64(i_18183) - rep_i_18181;
        if (sle64((int64_t) 0, rep_i_18181) && slt64(rep_i_18181, d_10378)) {
            ((__local uint16_t *) color_18068)[rep_i_18181] = futrts_to_bits16((f16) -INFINITY);
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    for (int32_t chunk_i_18188 = 0; chunk_i_18188 < num_chunks_18094; chunk_i_18188++) {
        int32_t i_18189;
        int64_t slice_18190;
        int64_t rep_i_18187;
        int64_t remnant_18191;
        
        i_18189 = chunk_i_18188 * sext_i64_i32(computed_tblock_sizze_13303) + local_tid_18101;
        slice_18190 = d_10378;
        rep_i_18187 = sext_i32_i64(i_18189);
        remnant_18191 = sext_i32_i64(i_18189) - rep_i_18187;
        if (sle64((int64_t) 0, rep_i_18187) && slt64(rep_i_18187, d_10378)) {
            ((__local uint16_t *) color_18067)[rep_i_18187] = futrts_to_bits16((f16) 0.0F);
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    barrier(CLK_LOCAL_MEM_FENCE);
    mem_param_17646 = color_18068;
    mem_param_out_17999 = color_18071;
    mem_param_17649 = color_18067;
    mem_param_out_18008 = color_18070;
    for (int64_t i_13720 = 0; i_13720 < q_11504; i_13720++) {
        int64_t copy2shr_arg0_13723;
        int32_t num_chunks_18198;
        __local unsigned char *ext_mem_17659;
        int64_t phys_tid_13736;
        __local unsigned char *red_arr_mem_18204;
        int64_t gtid_13734;
        int64_t gtid_13735;
        int64_t dims_flat_18207;
        f16 eta_p_13737;
        f16 eta_p_13738;
        f16 eta_p_18209;
        f16 eta_p_18210;
        bool ltid_in_bounds_18212;
        int32_t skip_threads_18213;
        bool no_carry_in_18219;
        int64_t phys_tid_13752;
        __local unsigned char *red_arr_mem_18224;
        int64_t gtid_13750;
        int64_t gtid_13751;
        int64_t dims_flat_18227;
        f16 eta_p_13753;
        f16 eta_p_13754;
        f16 eta_p_18229;
        f16 eta_p_18230;
        bool ltid_in_bounds_18232;
        int32_t skip_threads_18233;
        bool no_carry_in_18239;
        int64_t phys_tid_13771;
        int64_t gtid_13770;
        __local unsigned char *mem_param_tmp_18192;
        __local unsigned char *mem_param_out_tmp_18193;
        __local unsigned char *mem_param_tmp_18194;
        __local unsigned char *mem_param_out_tmp_18195;
        
        copy2shr_arg0_13723 = mul64((int64_t) 1024, i_13720);
        num_chunks_18198 = sdiv_up32(sext_i64_i32(d_10378) * 1024, sext_i64_i32(computed_tblock_sizze_13303));
        for (int32_t chunk_i_18199 = 0; chunk_i_18199 < num_chunks_18198; chunk_i_18199++) {
            int32_t i_18200 = chunk_i_18199 * sext_i64_i32(computed_tblock_sizze_13303) + local_tid_18101;
            
            if (slt32(i_18200, sext_i64_i32(d_10378) * 1024)) {
                ((__local uint16_t *) color_18069)[sext_i32_i64(squot32(i_18200, 1024)) * (int64_t) 1024 + sext_i32_i64(i_18200 - squot32(i_18200, 1024) * 1024)] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) color_18075)[d_10378 * copy2shr_arg0_13723 + sext_i32_i64(squot32(i_18200, 1024)) + sext_i32_i64(i_18200 - squot32(i_18200, 1024) * 1024) * d_10378]));
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_LOCAL_MEM_FENCE);
        if (opaque_res_11508) {
            int32_t num_chunks_18201 = sdiv_up32(sext_i64_i32(d_10378) * 1024, sext_i64_i32(computed_tblock_sizze_13303));
            
            for (int32_t chunk_i_18202 = 0; chunk_i_18202 < num_chunks_18201; chunk_i_18202++) {
                int32_t i_18203 = chunk_i_18202 * sext_i64_i32(computed_tblock_sizze_13303) + local_tid_18101;
                
                if (slt32(i_18203, sext_i64_i32(d_10378) * 1024)) {
                    ((__local uint16_t *) color_18073)[sext_i32_i64(squot32(i_18203, 1024)) * (int64_t) 1024 + sext_i32_i64(i_18203 - squot32(i_18203, 1024) * 1024)] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) color_18075)[d_10378 * copy2shr_arg0_13723 + sext_i32_i64(squot32(i_18203, 1024)) + sext_i32_i64(i_18203 - squot32(i_18203, 1024) * 1024) * d_10378]));
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            ext_mem_17659 = color_18073;
        } else {
            int64_t phys_tid_13730;
            int64_t gtid_13729;
            
            phys_tid_13730 = sext_i32_i64(local_tid_18101);
            gtid_13729 = sext_i32_i64(sext_i64_i32(ltid_pre_18126));
            if (slt64(gtid_13729, d_10378)) {
                ((__local uint16_t *) color_18069)[gtid_13729 * (int64_t) 1024] = futrts_to_bits16((f16) 0.0F);
                for (int64_t i_0 = 0; i_0 < (int64_t) 1024; i_0++) {
                    ((__local uint16_t *) color_18074)[gtid_13729 * (int64_t) 1024 + i_0] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) color_18069)[gtid_13729 * (int64_t) 1024 + i_0]));
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            ext_mem_17659 = color_18074;
        }
        phys_tid_13736 = sext_i32_i64(local_tid_18101);
        red_arr_mem_18204 = (__local unsigned char *) red_arr_mem_18204_backing_10;
        gtid_13734 = sext_i32_i64(sext_i64_i32(ltid_pre_18129));
        gtid_13735 = sext_i32_i64(sext_i64_i32(ltid_pre_18130));
        if (slt64(gtid_13734, d_10378) && slt64(gtid_13735, (int64_t) 32)) {
            f16 defunc_0_f_res_13742;
            f16 r_13744 = (f16) -INFINITY;
            
            for (int64_t i_13743 = 0; i_13743 < (int64_t) 32; i_13743++) {
                int64_t zp_lhs_13745;
                int64_t f_arg0_13746;
                f16 f_arg0_13747;
                f16 max_res_13748;
                f16 r_tmp_18206;
                
                zp_lhs_13745 = mul64((int64_t) 32, i_13743);
                f_arg0_13746 = add64(gtid_13735, zp_lhs_13745);
                f_arg0_13747 = futrts_from_bits16(((__local uint16_t *) ext_mem_17659)[gtid_13734 * (int64_t) 1024 + f_arg0_13746]);
                max_res_13748 = fmax16(r_13744, f_arg0_13747);
                r_tmp_18206 = max_res_13748;
                r_13744 = r_tmp_18206;
            }
            defunc_0_f_res_13742 = r_13744;
            ((__local uint16_t *) red_arr_mem_18204)[gtid_13734 * (int64_t) 32 + gtid_13735] = futrts_to_bits16(defunc_0_f_res_13742);
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        dims_flat_18207 = d_10378 * (int64_t) 32;
        ltid_in_bounds_18212 = slt64(sext_i32_i64(local_tid_18101), d_10378 * (int64_t) 32);
        // read input for in-block scan
        {
            if (ltid_in_bounds_18212) {
                eta_p_13738 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18204)[sext_i32_i64(local_tid_18101)]);
                if ((local_tid_18101 - squot32(local_tid_18101, 32) * 32) == 0) {
                    eta_p_13737 = eta_p_13738;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_18213 = 1;
            while (slt32(skip_threads_18213, 32)) {
                bool thread_active_18214 = sle32(skip_threads_18213, local_tid_18101 - squot32(local_tid_18101, 32) * 32) && ltid_in_bounds_18212;
                
                if (thread_active_18214) {
                    // read operands
                    {
                        eta_p_13737 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18204)[sext_i32_i64(local_tid_18101) - sext_i32_i64(skip_threads_18213)]);
                    }
                }
                // perform operation
                {
                    bool inactive_18215 = slt64(srem64(sext_i32_i64(local_tid_18101), (int64_t) 32), sext_i32_i64(local_tid_18101) - sext_i32_i64(local_tid_18101 - skip_threads_18213));
                    
                    if (thread_active_18214 && inactive_18215) {
                        eta_p_13737 = eta_p_13738;
                    }
                    if (thread_active_18214) {
                        if (!inactive_18215) {
                            f16 max_res_13739 = fmax16(eta_p_13737, eta_p_13738);
                            
                            eta_p_13737 = max_res_13739;
                        }
                    }
                }
                if (sle32(wave_sizze_18103, skip_threads_18213)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (thread_active_18214) {
                    // write result
                    {
                        ((volatile __local uint16_t *) red_arr_mem_18204)[sext_i32_i64(local_tid_18101)] = futrts_to_bits16(eta_p_13737);
                        eta_p_13738 = eta_p_13737;
                    }
                }
                if (sle32(wave_sizze_18103, skip_threads_18213)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_18213 *= 2;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // last thread of block 'i' writes its result to offset 'i'
        {
            if ((local_tid_18101 - squot32(local_tid_18101, 32) * 32) == 31 && ltid_in_bounds_18212) {
                ((volatile __local uint16_t *) red_arr_mem_18204)[sext_i32_i64(squot32(local_tid_18101, 32))] = futrts_to_bits16(eta_p_13737);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
        {
            int32_t skip_threads_18216;
            
            // read input for in-block scan
            {
                if (squot32(local_tid_18101, 32) == 0 && ltid_in_bounds_18212) {
                    eta_p_18210 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18204)[sext_i32_i64(local_tid_18101)]);
                    if ((local_tid_18101 - squot32(local_tid_18101, 32) * 32) == 0) {
                        eta_p_18209 = eta_p_18210;
                    }
                }
            }
            // in-block scan (hopefully no barriers needed)
            {
                skip_threads_18216 = 1;
                while (slt32(skip_threads_18216, 32)) {
                    bool thread_active_18217 = sle32(skip_threads_18216, local_tid_18101 - squot32(local_tid_18101, 32) * 32) && (squot32(local_tid_18101, 32) == 0 && ltid_in_bounds_18212);
                    
                    if (thread_active_18217) {
                        // read operands
                        {
                            eta_p_18209 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18204)[sext_i32_i64(local_tid_18101) - sext_i32_i64(skip_threads_18216)]);
                        }
                    }
                    // perform operation
                    {
                        bool inactive_18218 = slt64(srem64(sext_i32_i64(local_tid_18101 * 32 + 32 - 1), (int64_t) 32), sext_i32_i64(local_tid_18101 * 32 + 32 - 1) - sext_i32_i64((local_tid_18101 - skip_threads_18216) * 32 + 32 - 1));
                        
                        if (thread_active_18217 && inactive_18218) {
                            eta_p_18209 = eta_p_18210;
                        }
                        if (thread_active_18217) {
                            if (!inactive_18218) {
                                f16 max_res_18211 = fmax16(eta_p_18209, eta_p_18210);
                                
                                eta_p_18209 = max_res_18211;
                            }
                        }
                    }
                    if (sle32(wave_sizze_18103, skip_threads_18216)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    if (thread_active_18217) {
                        // write result
                        {
                            ((volatile __local uint16_t *) red_arr_mem_18204)[sext_i32_i64(local_tid_18101)] = futrts_to_bits16(eta_p_18209);
                            eta_p_18210 = eta_p_18209;
                        }
                    }
                    if (sle32(wave_sizze_18103, skip_threads_18216)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    skip_threads_18216 *= 2;
                }
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        no_carry_in_18219 = squot32(local_tid_18101, 32) == 0 || !ltid_in_bounds_18212;
        // carry-in for every block except the first
        {
            // read operands
            {
                if (!no_carry_in_18219) {
                    eta_p_13738 = eta_p_13737;
                    eta_p_13737 = futrts_from_bits16(((__local uint16_t *) red_arr_mem_18204)[sext_i32_i64(squot32(local_tid_18101, 32)) - (int64_t) 1]);
                }
            }
            // perform operation
            {
                bool inactive_18220 = slt64(srem64(sext_i32_i64(local_tid_18101), (int64_t) 32), sext_i32_i64(local_tid_18101) - sext_i32_i64(squot32(local_tid_18101, 32) * 32 - 1));
                
                if (!no_carry_in_18219) {
                    if (inactive_18220) {
                        eta_p_13737 = eta_p_13738;
                    }
                }
                if (!no_carry_in_18219) {
                    if (!inactive_18220) {
                        f16 max_res_13739 = fmax16(eta_p_13737, eta_p_13738);
                        
                        eta_p_13737 = max_res_13739;
                    }
                }
            }
            // write final result
            {
                if (!no_carry_in_18219) {
                    ((__local uint16_t *) red_arr_mem_18204)[sext_i32_i64(local_tid_18101)] = futrts_to_bits16(eta_p_13737);
                }
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // restore correct values for first block
        {
            if (squot32(local_tid_18101, 32) == 0 && ltid_in_bounds_18212) {
                ((__local uint16_t *) red_arr_mem_18204)[sext_i32_i64(local_tid_18101)] = futrts_to_bits16(eta_p_13738);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_LOCAL_MEM_FENCE);
        // Save result of reduction.
        {
            int32_t num_chunks_18221 = sdiv_up32(sext_i64_i32(d_10378), sext_i64_i32(computed_tblock_sizze_13303));
            
            for (int32_t chunk_i_18222 = 0; chunk_i_18222 < num_chunks_18221; chunk_i_18222++) {
                int32_t i_18223 = chunk_i_18222 * sext_i64_i32(computed_tblock_sizze_13303) + local_tid_18101;
                
                if (slt32(i_18223, sext_i64_i32(d_10378))) {
                    ((__local uint16_t *) color_18072)[sext_i32_i64(i_18223)] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) red_arr_mem_18204)[(int64_t) 31 + sext_i32_i64(i_18223) * (int64_t) 32]));
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        phys_tid_13752 = sext_i32_i64(local_tid_18101);
        red_arr_mem_18224 = (__local unsigned char *) red_arr_mem_18224_backing_11;
        gtid_13750 = sext_i32_i64(sext_i64_i32(ltid_pre_18129));
        gtid_13751 = sext_i32_i64(sext_i64_i32(ltid_pre_18130));
        if (slt64(gtid_13750, d_10378) && slt64(gtid_13751, (int64_t) 32)) {
            f16 defunc_0_reduce_comm_res_13757;
            f16 defunc_0_f_res_13759;
            f16 r_13761;
            
            defunc_0_reduce_comm_res_13757 = futrts_from_bits16(((__local uint16_t *) color_18072)[gtid_13750]);
            r_13761 = (f16) 0.0F;
            for (int64_t i_13760 = 0; i_13760 < (int64_t) 32; i_13760++) {
                int64_t zp_lhs_13762;
                int64_t f_arg0_13763;
                f16 f_arg0_13764;
                f16 real_exp_arg0_13765;
                f16 exp_res_13766;
                f16 defunc_0_bop_res_13767;
                f16 r_tmp_18226;
                
                zp_lhs_13762 = mul64((int64_t) 32, i_13760);
                f_arg0_13763 = add64(gtid_13751, zp_lhs_13762);
                f_arg0_13764 = futrts_from_bits16(((__local uint16_t *) ext_mem_17659)[gtid_13750 * (int64_t) 1024 + f_arg0_13763]);
                real_exp_arg0_13765 = f_arg0_13764 - defunc_0_reduce_comm_res_13757;
                exp_res_13766 = futrts_exp16(real_exp_arg0_13765);
                defunc_0_bop_res_13767 = r_13761 + exp_res_13766;
                r_tmp_18226 = defunc_0_bop_res_13767;
                r_13761 = r_tmp_18226;
            }
            defunc_0_f_res_13759 = r_13761;
            ((__local uint16_t *) red_arr_mem_18224)[gtid_13750 * (int64_t) 32 + gtid_13751] = futrts_to_bits16(defunc_0_f_res_13759);
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        dims_flat_18227 = d_10378 * (int64_t) 32;
        ltid_in_bounds_18232 = slt64(sext_i32_i64(local_tid_18101), d_10378 * (int64_t) 32);
        // read input for in-block scan
        {
            if (ltid_in_bounds_18232) {
                eta_p_13754 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18224)[sext_i32_i64(local_tid_18101)]);
                if ((local_tid_18101 - squot32(local_tid_18101, 32) * 32) == 0) {
                    eta_p_13753 = eta_p_13754;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_18233 = 1;
            while (slt32(skip_threads_18233, 32)) {
                bool thread_active_18234 = sle32(skip_threads_18233, local_tid_18101 - squot32(local_tid_18101, 32) * 32) && ltid_in_bounds_18232;
                
                if (thread_active_18234) {
                    // read operands
                    {
                        eta_p_13753 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18224)[sext_i32_i64(local_tid_18101) - sext_i32_i64(skip_threads_18233)]);
                    }
                }
                // perform operation
                {
                    bool inactive_18235 = slt64(srem64(sext_i32_i64(local_tid_18101), (int64_t) 32), sext_i32_i64(local_tid_18101) - sext_i32_i64(local_tid_18101 - skip_threads_18233));
                    
                    if (thread_active_18234 && inactive_18235) {
                        eta_p_13753 = eta_p_13754;
                    }
                    if (thread_active_18234) {
                        if (!inactive_18235) {
                            f16 defunc_0_op_res_13755 = eta_p_13753 + eta_p_13754;
                            
                            eta_p_13753 = defunc_0_op_res_13755;
                        }
                    }
                }
                if (sle32(wave_sizze_18103, skip_threads_18233)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (thread_active_18234) {
                    // write result
                    {
                        ((volatile __local uint16_t *) red_arr_mem_18224)[sext_i32_i64(local_tid_18101)] = futrts_to_bits16(eta_p_13753);
                        eta_p_13754 = eta_p_13753;
                    }
                }
                if (sle32(wave_sizze_18103, skip_threads_18233)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_18233 *= 2;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // last thread of block 'i' writes its result to offset 'i'
        {
            if ((local_tid_18101 - squot32(local_tid_18101, 32) * 32) == 31 && ltid_in_bounds_18232) {
                ((volatile __local uint16_t *) red_arr_mem_18224)[sext_i32_i64(squot32(local_tid_18101, 32))] = futrts_to_bits16(eta_p_13753);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
        {
            int32_t skip_threads_18236;
            
            // read input for in-block scan
            {
                if (squot32(local_tid_18101, 32) == 0 && ltid_in_bounds_18232) {
                    eta_p_18230 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18224)[sext_i32_i64(local_tid_18101)]);
                    if ((local_tid_18101 - squot32(local_tid_18101, 32) * 32) == 0) {
                        eta_p_18229 = eta_p_18230;
                    }
                }
            }
            // in-block scan (hopefully no barriers needed)
            {
                skip_threads_18236 = 1;
                while (slt32(skip_threads_18236, 32)) {
                    bool thread_active_18237 = sle32(skip_threads_18236, local_tid_18101 - squot32(local_tid_18101, 32) * 32) && (squot32(local_tid_18101, 32) == 0 && ltid_in_bounds_18232);
                    
                    if (thread_active_18237) {
                        // read operands
                        {
                            eta_p_18229 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18224)[sext_i32_i64(local_tid_18101) - sext_i32_i64(skip_threads_18236)]);
                        }
                    }
                    // perform operation
                    {
                        bool inactive_18238 = slt64(srem64(sext_i32_i64(local_tid_18101 * 32 + 32 - 1), (int64_t) 32), sext_i32_i64(local_tid_18101 * 32 + 32 - 1) - sext_i32_i64((local_tid_18101 - skip_threads_18236) * 32 + 32 - 1));
                        
                        if (thread_active_18237 && inactive_18238) {
                            eta_p_18229 = eta_p_18230;
                        }
                        if (thread_active_18237) {
                            if (!inactive_18238) {
                                f16 defunc_0_op_res_18231 = eta_p_18229 + eta_p_18230;
                                
                                eta_p_18229 = defunc_0_op_res_18231;
                            }
                        }
                    }
                    if (sle32(wave_sizze_18103, skip_threads_18236)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    if (thread_active_18237) {
                        // write result
                        {
                            ((volatile __local uint16_t *) red_arr_mem_18224)[sext_i32_i64(local_tid_18101)] = futrts_to_bits16(eta_p_18229);
                            eta_p_18230 = eta_p_18229;
                        }
                    }
                    if (sle32(wave_sizze_18103, skip_threads_18236)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    skip_threads_18236 *= 2;
                }
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        no_carry_in_18239 = squot32(local_tid_18101, 32) == 0 || !ltid_in_bounds_18232;
        // carry-in for every block except the first
        {
            // read operands
            {
                if (!no_carry_in_18239) {
                    eta_p_13754 = eta_p_13753;
                    eta_p_13753 = futrts_from_bits16(((__local uint16_t *) red_arr_mem_18224)[sext_i32_i64(squot32(local_tid_18101, 32)) - (int64_t) 1]);
                }
            }
            // perform operation
            {
                bool inactive_18240 = slt64(srem64(sext_i32_i64(local_tid_18101), (int64_t) 32), sext_i32_i64(local_tid_18101) - sext_i32_i64(squot32(local_tid_18101, 32) * 32 - 1));
                
                if (!no_carry_in_18239) {
                    if (inactive_18240) {
                        eta_p_13753 = eta_p_13754;
                    }
                }
                if (!no_carry_in_18239) {
                    if (!inactive_18240) {
                        f16 defunc_0_op_res_13755 = eta_p_13753 + eta_p_13754;
                        
                        eta_p_13753 = defunc_0_op_res_13755;
                    }
                }
            }
            // write final result
            {
                if (!no_carry_in_18239) {
                    ((__local uint16_t *) red_arr_mem_18224)[sext_i32_i64(local_tid_18101)] = futrts_to_bits16(eta_p_13753);
                }
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // restore correct values for first block
        {
            if (squot32(local_tid_18101, 32) == 0 && ltid_in_bounds_18232) {
                ((__local uint16_t *) red_arr_mem_18224)[sext_i32_i64(local_tid_18101)] = futrts_to_bits16(eta_p_13754);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_LOCAL_MEM_FENCE);
        // Save result of reduction.
        {
            int32_t num_chunks_18241 = sdiv_up32(sext_i64_i32(d_10378), sext_i64_i32(computed_tblock_sizze_13303));
            
            for (int32_t chunk_i_18242 = 0; chunk_i_18242 < num_chunks_18241; chunk_i_18242++) {
                int32_t i_18243 = chunk_i_18242 * sext_i64_i32(computed_tblock_sizze_13303) + local_tid_18101;
                
                if (slt32(i_18243, sext_i64_i32(d_10378))) {
                    ((__local uint16_t *) color_18069)[sext_i32_i64(i_18243)] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) red_arr_mem_18224)[(int64_t) 31 + sext_i32_i64(i_18243) * (int64_t) 32]));
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        phys_tid_13771 = sext_i32_i64(local_tid_18101);
        gtid_13770 = sext_i32_i64(sext_i64_i32(ltid_pre_18126));
        if (slt64(gtid_13770, d_10378)) {
            f16 mi_old_13772;
            f16 li_old_13773;
            f16 defunc_0_reduce_comm_res_13774;
            f16 defunc_0_reduce_comm_res_13775;
            f16 max_res_13776;
            f16 real_exp_arg0_13777;
            f16 exp_res_13778;
            f16 exp_arg0_13779;
            f16 exp_res_13780;
            f16 eli_13781;
            f16 zp_rhs_13782;
            f16 li_new_13783;
            
            mi_old_13772 = futrts_from_bits16(((__local uint16_t *) mem_param_17646)[gtid_13770]);
            li_old_13773 = futrts_from_bits16(((__local uint16_t *) mem_param_17649)[gtid_13770]);
            defunc_0_reduce_comm_res_13774 = futrts_from_bits16(((__local uint16_t *) color_18072)[gtid_13770]);
            defunc_0_reduce_comm_res_13775 = futrts_from_bits16(((__local uint16_t *) color_18069)[gtid_13770]);
            max_res_13776 = fmax16(mi_old_13772, defunc_0_reduce_comm_res_13774);
            real_exp_arg0_13777 = defunc_0_reduce_comm_res_13774 - max_res_13776;
            exp_res_13778 = futrts_exp16(real_exp_arg0_13777);
            exp_arg0_13779 = mi_old_13772 - max_res_13776;
            exp_res_13780 = futrts_exp16(exp_arg0_13779);
            eli_13781 = li_old_13773 * exp_res_13780;
            zp_rhs_13782 = defunc_0_reduce_comm_res_13775 * exp_res_13778;
            li_new_13783 = eli_13781 + zp_rhs_13782;
            ((__local uint16_t *) mem_param_out_17999)[gtid_13770] = futrts_to_bits16(max_res_13776);
            ((__local uint16_t *) mem_param_out_18008)[gtid_13770] = futrts_to_bits16(li_new_13783);
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        mem_param_tmp_18192 = mem_param_out_17999;
        mem_param_out_tmp_18193 = mem_param_17646;
        mem_param_tmp_18194 = mem_param_out_18008;
        mem_param_out_tmp_18195 = mem_param_17649;
        mem_param_17646 = mem_param_tmp_18192;
        mem_param_out_17999 = mem_param_out_tmp_18193;
        mem_param_17649 = mem_param_tmp_18194;
        mem_param_out_18008 = mem_param_out_tmp_18195;
    }
    ext_mem_17673 = mem_param_17646;
    ext_mem_unused_17998 = mem_param_out_17999;
    ext_mem_17672 = mem_param_17649;
    ext_mem_unused_18007 = mem_param_out_18008;
    phys_tid_13789 = sext_i32_i64(local_tid_18101);
    gtid_13787 = sext_i32_i64(sext_i64_i32(ltid_pre_18150));
    gtid_13788 = sext_i32_i64(sext_i64_i32(ltid_pre_18151));
    if (slt64(gtid_13787, d_10378) && slt64(gtid_13788, dzlz7bUZLztZRz20Umz20Udz7dUzg_10379)) {
        f16 eta_p_13790;
        f16 eta_p_13791;
        f16 eta_p_13792;
        f16 real_exp_arg0_13793;
        f16 exp_res_13794;
        f16 lifted_lambda_res_13795;
        
        eta_p_13790 = futrts_from_bits16(((__local uint16_t *) ext_mem_17673)[gtid_13787]);
        eta_p_13791 = futrts_from_bits16(((__local uint16_t *) ext_mem_17672)[gtid_13787]);
        eta_p_13792 = futrts_from_bits16(((__local uint16_t *) color_18075)[gtid_13787 + gtid_13788 * d_10378]);
        real_exp_arg0_13793 = eta_p_13792 - eta_p_13790;
        exp_res_13794 = futrts_exp16(real_exp_arg0_13793);
        lifted_lambda_res_13795 = exp_res_13794 / eta_p_13791;
        ((__local uint16_t *) color_18069)[gtid_13787 * dzlz7bUZLztZRz20Umz20Udz7dUzg_10379 + gtid_13788] = futrts_to_bits16(lifted_lambda_res_13795);
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    phys_tid_13801 = sext_i32_i64(local_tid_18101);
    red_arr_mem_18244 = (__local unsigned char *) red_arr_mem_18244_backing_12;
    gtid_13798 = sext_i32_i64(sext_i64_i32(ltid_pre_18141));
    gtid_13799 = sext_i32_i64(sext_i64_i32(ltid_pre_18142));
    gtid_13800 = sext_i32_i64(sext_i64_i32(ltid_pre_18143));
    if ((slt64(gtid_13798, d_10378) && slt64(gtid_13799, d_10378)) && slt64(gtid_13800, dzlz7bUZLztZRz20Umz20Udz7dUzg_10379)) {
        f16 eta_p_13807;
        f16 eta_p_13808;
        f16 defunc_0_f_res_13809;
        
        eta_p_13807 = futrts_from_bits16(((__local uint16_t *) color_18069)[gtid_13798 * dzlz7bUZLztZRz20Umz20Udz7dUzg_10379 + gtid_13800]);
        eta_p_13808 = futrts_from_bits16(((__global uint16_t *) V_mem_17593)[gtid_13800 * d_10378 + gtid_13799]);
        defunc_0_f_res_13809 = eta_p_13807 * eta_p_13808;
        ((__local uint16_t *) red_arr_mem_18244)[gtid_13798 * (dzlz7bUZLztZRz20Umz20Udz7dUzg_10379 * d_10378) + gtid_13799 * dzlz7bUZLztZRz20Umz20Udz7dUzg_10379 + gtid_13800] = futrts_to_bits16(defunc_0_f_res_13809);
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    dims_flat_18246 = d_10378 * d_10378 * dzlz7bUZLztZRz20Umz20Udz7dUzg_10379;
    ltid_in_bounds_18251 = slt64(sext_i32_i64(local_tid_18101), d_10378 * d_10378 * dzlz7bUZLztZRz20Umz20Udz7dUzg_10379);
    // read input for in-block scan
    {
        if (ltid_in_bounds_18251) {
            eta_p_13803 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18244)[sext_i32_i64(local_tid_18101)]);
            if ((local_tid_18101 - squot32(local_tid_18101, 32) * 32) == 0) {
                eta_p_13802 = eta_p_13803;
            }
        }
    }
    // in-block scan (hopefully no barriers needed)
    {
        skip_threads_18252 = 1;
        while (slt32(skip_threads_18252, 32)) {
            bool thread_active_18253 = sle32(skip_threads_18252, local_tid_18101 - squot32(local_tid_18101, 32) * 32) && ltid_in_bounds_18251;
            
            if (thread_active_18253) {
                // read operands
                {
                    eta_p_13802 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18244)[sext_i32_i64(local_tid_18101) - sext_i32_i64(skip_threads_18252)]);
                }
            }
            // perform operation
            {
                bool inactive_18254 = slt64(srem64(sext_i32_i64(local_tid_18101), dzlz7bUZLztZRz20Umz20Udz7dUzg_10379), sext_i32_i64(local_tid_18101) - sext_i32_i64(local_tid_18101 - skip_threads_18252));
                
                if (thread_active_18253 && inactive_18254) {
                    eta_p_13802 = eta_p_13803;
                }
                if (thread_active_18253) {
                    if (!inactive_18254) {
                        f16 defunc_0_op_res_13804 = eta_p_13802 + eta_p_13803;
                        
                        eta_p_13802 = defunc_0_op_res_13804;
                    }
                }
            }
            if (sle32(wave_sizze_18103, skip_threads_18252)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            if (thread_active_18253) {
                // write result
                {
                    ((volatile __local uint16_t *) red_arr_mem_18244)[sext_i32_i64(local_tid_18101)] = futrts_to_bits16(eta_p_13802);
                    eta_p_13803 = eta_p_13802;
                }
            }
            if (sle32(wave_sizze_18103, skip_threads_18252)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            skip_threads_18252 *= 2;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // last thread of block 'i' writes its result to offset 'i'
    {
        if ((local_tid_18101 - squot32(local_tid_18101, 32) * 32) == 31 && ltid_in_bounds_18251) {
            ((volatile __local uint16_t *) red_arr_mem_18244)[sext_i32_i64(squot32(local_tid_18101, 32))] = futrts_to_bits16(eta_p_13802);
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
    {
        int32_t skip_threads_18255;
        
        // read input for in-block scan
        {
            if (squot32(local_tid_18101, 32) == 0 && ltid_in_bounds_18251) {
                eta_p_18249 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18244)[sext_i32_i64(local_tid_18101)]);
                if ((local_tid_18101 - squot32(local_tid_18101, 32) * 32) == 0) {
                    eta_p_18248 = eta_p_18249;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_18255 = 1;
            while (slt32(skip_threads_18255, 32)) {
                bool thread_active_18256 = sle32(skip_threads_18255, local_tid_18101 - squot32(local_tid_18101, 32) * 32) && (squot32(local_tid_18101, 32) == 0 && ltid_in_bounds_18251);
                
                if (thread_active_18256) {
                    // read operands
                    {
                        eta_p_18248 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18244)[sext_i32_i64(local_tid_18101) - sext_i32_i64(skip_threads_18255)]);
                    }
                }
                // perform operation
                {
                    bool inactive_18257 = slt64(srem64(sext_i32_i64(local_tid_18101 * 32 + 32 - 1), dzlz7bUZLztZRz20Umz20Udz7dUzg_10379), sext_i32_i64(local_tid_18101 * 32 + 32 - 1) - sext_i32_i64((local_tid_18101 - skip_threads_18255) * 32 + 32 - 1));
                    
                    if (thread_active_18256 && inactive_18257) {
                        eta_p_18248 = eta_p_18249;
                    }
                    if (thread_active_18256) {
                        if (!inactive_18257) {
                            f16 defunc_0_op_res_18250 = eta_p_18248 + eta_p_18249;
                            
                            eta_p_18248 = defunc_0_op_res_18250;
                        }
                    }
                }
                if (sle32(wave_sizze_18103, skip_threads_18255)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (thread_active_18256) {
                    // write result
                    {
                        ((volatile __local uint16_t *) red_arr_mem_18244)[sext_i32_i64(local_tid_18101)] = futrts_to_bits16(eta_p_18248);
                        eta_p_18249 = eta_p_18248;
                    }
                }
                if (sle32(wave_sizze_18103, skip_threads_18255)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_18255 *= 2;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    no_carry_in_18258 = squot32(local_tid_18101, 32) == 0 || !ltid_in_bounds_18251;
    // carry-in for every block except the first
    {
        // read operands
        {
            if (!no_carry_in_18258) {
                eta_p_13803 = eta_p_13802;
                eta_p_13802 = futrts_from_bits16(((__local uint16_t *) red_arr_mem_18244)[sext_i32_i64(squot32(local_tid_18101, 32)) - (int64_t) 1]);
            }
        }
        // perform operation
        {
            bool inactive_18259 = slt64(srem64(sext_i32_i64(local_tid_18101), dzlz7bUZLztZRz20Umz20Udz7dUzg_10379), sext_i32_i64(local_tid_18101) - sext_i32_i64(squot32(local_tid_18101, 32) * 32 - 1));
            
            if (!no_carry_in_18258) {
                if (inactive_18259) {
                    eta_p_13802 = eta_p_13803;
                }
            }
            if (!no_carry_in_18258) {
                if (!inactive_18259) {
                    f16 defunc_0_op_res_13804 = eta_p_13802 + eta_p_13803;
                    
                    eta_p_13802 = defunc_0_op_res_13804;
                }
            }
        }
        // write final result
        {
            if (!no_carry_in_18258) {
                ((__local uint16_t *) red_arr_mem_18244)[sext_i32_i64(local_tid_18101)] = futrts_to_bits16(eta_p_13802);
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // restore correct values for first block
    {
        if (squot32(local_tid_18101, 32) == 0 && ltid_in_bounds_18251) {
            ((__local uint16_t *) red_arr_mem_18244)[sext_i32_i64(local_tid_18101)] = futrts_to_bits16(eta_p_13803);
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    barrier(CLK_LOCAL_MEM_FENCE);
    // Save result of reduction.
    {
        int32_t num_chunks_18260 = sdiv_up32(sext_i64_i32(d_10378) * sext_i64_i32(d_10378), sext_i64_i32(computed_tblock_sizze_13303));
        
        for (int32_t chunk_i_18261 = 0; chunk_i_18261 < num_chunks_18260; chunk_i_18261++) {
            int32_t i_18262 = chunk_i_18261 * sext_i64_i32(computed_tblock_sizze_13303) + local_tid_18101;
            
            if (slt32(i_18262, sext_i64_i32(d_10378) * sext_i64_i32(d_10378))) {
                ((__local uint16_t *) color_18067)[sext_i32_i64(squot32(i_18262, sext_i64_i32(d_10378))) * d_10378 + sext_i32_i64(i_18262 - squot32(i_18262, sext_i64_i32(d_10378)) * sext_i64_i32(d_10378))] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) red_arr_mem_18244)[dzlz7bUZLztZRz20Umz20Udz7dUzg_10379 - (int64_t) 1 + sext_i32_i64(squot32(i_18262, sext_i64_i32(d_10378))) * (dzlz7bUZLztZRz20Umz20Udz7dUzg_10379 * d_10378) + sext_i32_i64(i_18262 - squot32(i_18262, sext_i64_i32(d_10378)) * sext_i64_i32(d_10378)) * dzlz7bUZLztZRz20Umz20Udz7dUzg_10379]));
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    num_chunks_18263 = sdiv_up32(sext_i64_i32(d_10378) * sext_i64_i32(d_10378), sext_i64_i32(computed_tblock_sizze_13303));
    for (int32_t chunk_i_18264 = 0; chunk_i_18264 < num_chunks_18263; chunk_i_18264++) {
        int32_t i_18265 = chunk_i_18264 * sext_i64_i32(computed_tblock_sizze_13303) + local_tid_18101;
        
        if (slt32(i_18265, sext_i64_i32(d_10378) * sext_i64_i32(d_10378))) {
            ((__global uint16_t *) mem_17683)[gtid_13682 * (d_10378 * d_10378) + sext_i32_i64(squot32(i_18265, sext_i64_i32(d_10378))) * d_10378 + sext_i32_i64(i_18265 - squot32(i_18265, sext_i64_i32(d_10378)) * sext_i64_i32(d_10378))] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) color_18067)[sext_i32_i64(squot32(i_18265, sext_i64_i32(d_10378))) * d_10378 + sext_i32_i64(i_18265 - squot32(i_18265, sext_i64_i32(d_10378)) * sext_i64_i32(d_10378))]));
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
  error_18:
    return;
}
FUTHARK_KERNEL
void thesislike64zisegmap_intrablock_14123(__global int *global_failure, int64_t m_10377, int64_t d_10378, int64_t y_13447, int64_t computed_tblock_sizze_14117, int64_t bytes_17596, int64_t bytes_17599, __global unsigned char *Q_mem_17591, __global unsigned char *K_mem_17592, __global unsigned char *mem_17605)
{
    volatile __local unsigned char *red_arr_mem_18293_backing_2 = &shared_mem[0];
    const int64_t red_arr_mem_18293_backing_2_offset = 0 + ((int64_t) 4 * (d_10378 * d_10378 * d_10378) + srem64((int64_t) 8 - srem64((int64_t) 4 * (d_10378 * d_10378 * d_10378), (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_18077_backing_1 = &shared_mem[red_arr_mem_18293_backing_2_offset];
    const int64_t color_18077_backing_1_offset = red_arr_mem_18293_backing_2_offset + (bytes_17596 + srem64((int64_t) 8 - srem64(bytes_17596, (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_18076_backing_0 = &shared_mem[color_18077_backing_1_offset];
    const int64_t color_18076_backing_0_offset = color_18077_backing_1_offset + (bytes_17599 + srem64((int64_t) 8 - srem64(bytes_17599, (int64_t) 8), (int64_t) 8));
    
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_18270;
    int32_t tblock_sizze_18273;
    int32_t wave_sizze_18272;
    int32_t block_id_18271;
    int32_t global_tid_18269;
    int64_t phys_tblock_id_14123;
    int64_t slice_18276;
    int64_t slice_18277;
    int64_t ltid_pre_18274;
    int64_t remnant_18278;
    int64_t ltid_pre_18275;
    int64_t remnant_18279;
    int64_t slice_18283;
    int64_t slice_18284;
    int64_t slice_18285;
    int64_t ltid_pre_18280;
    int64_t remnant_18286;
    int64_t ltid_pre_18281;
    int64_t remnant_18287;
    int64_t ltid_pre_18282;
    int64_t remnant_18288;
    int64_t slice_18289;
    int64_t slice_18290;
    int64_t gtid_14121;
    int64_t remnant_18291;
    int64_t gtid_14122;
    int64_t remnant_18292;
    __local unsigned char *color_18076;
    __local unsigned char *color_18077;
    int64_t binop_x_17399;
    int64_t phys_tid_14132;
    __local unsigned char *red_arr_mem_18293;
    int64_t gtid_14129;
    int64_t gtid_14130;
    int64_t gtid_14131;
    int64_t dims_flat_18295;
    float eta_p_14133;
    float eta_p_14134;
    float eta_p_18297;
    float eta_p_18298;
    bool ltid_in_bounds_18300;
    int32_t skip_threads_18301;
    bool no_carry_in_18307;
    int64_t phys_tid_14145;
    int64_t gtid_14143;
    int64_t gtid_14144;
    int32_t num_chunks_18312;
    
    local_tid_18270 = get_local_id(0);
    tblock_sizze_18273 = get_local_size(0);
    wave_sizze_18272 = LOCKSTEP_WIDTH;
    block_id_18271 = get_tblock_id(0);
    global_tid_18269 = block_id_18271 * tblock_sizze_18273 + local_tid_18270;
    phys_tblock_id_14123 = sext_i32_i64(block_id_18271);
    slice_18276 = d_10378;
    slice_18277 = d_10378 * slice_18276;
    ltid_pre_18274 = squot64(sext_i32_i64(local_tid_18270), slice_18276);
    remnant_18278 = sext_i32_i64(local_tid_18270) - ltid_pre_18274 * slice_18276;
    ltid_pre_18275 = remnant_18278;
    remnant_18279 = remnant_18278 - ltid_pre_18275;
    slice_18283 = d_10378;
    slice_18284 = d_10378 * slice_18283;
    slice_18285 = d_10378 * slice_18284;
    ltid_pre_18280 = squot64(sext_i32_i64(local_tid_18270), slice_18284);
    remnant_18286 = sext_i32_i64(local_tid_18270) - ltid_pre_18280 * slice_18284;
    ltid_pre_18281 = squot64(remnant_18286, slice_18283);
    remnant_18287 = remnant_18286 - ltid_pre_18281 * slice_18283;
    ltid_pre_18282 = remnant_18287;
    remnant_18288 = remnant_18287 - ltid_pre_18282;
    slice_18289 = m_10377;
    slice_18290 = m_10377 * slice_18289;
    gtid_14121 = squot64(sext_i32_i64(block_id_18271), slice_18289);
    remnant_18291 = sext_i32_i64(block_id_18271) - gtid_14121 * slice_18289;
    gtid_14122 = remnant_18291;
    remnant_18292 = remnant_18291 - gtid_14122;
    color_18076 = (__local unsigned char *) color_18076_backing_0;
    color_18077 = (__local unsigned char *) color_18077_backing_1;
    binop_x_17399 = y_13447 * gtid_14122;
    phys_tid_14132 = sext_i32_i64(local_tid_18270);
    red_arr_mem_18293 = (__local unsigned char *) red_arr_mem_18293_backing_2;
    gtid_14129 = sext_i32_i64(sext_i64_i32(ltid_pre_18280));
    gtid_14130 = sext_i32_i64(sext_i64_i32(ltid_pre_18281));
    gtid_14131 = sext_i32_i64(sext_i64_i32(ltid_pre_18282));
    if ((slt64(gtid_14129, d_10378) && slt64(gtid_14130, d_10378)) && slt64(gtid_14131, d_10378)) {
        f16 eta_p_14138;
        int64_t binop_y_17400;
        int64_t binop_x_17401;
        int64_t binop_x_17402;
        int64_t new_index_17403;
        int64_t binop_y_17415;
        int64_t new_index_17416;
        f16 eta_p_14139;
        f16 defunc_0_f_res_14140;
        float f16_res_14141;
        
        eta_p_14138 = futrts_from_bits16(((__global uint16_t *) Q_mem_17591)[gtid_14121 * (d_10378 * d_10378) + gtid_14129 * d_10378 + gtid_14131]);
        binop_y_17400 = d_10378 * gtid_14130;
        binop_x_17401 = binop_x_17399 + binop_y_17400;
        binop_x_17402 = gtid_14131 + binop_x_17401;
        new_index_17403 = squot64(binop_x_17402, d_10378);
        binop_y_17415 = d_10378 * new_index_17403;
        new_index_17416 = binop_x_17402 - binop_y_17415;
        eta_p_14139 = futrts_from_bits16(((__global uint16_t *) K_mem_17592)[new_index_17403 * d_10378 + new_index_17416]);
        defunc_0_f_res_14140 = eta_p_14138 * eta_p_14139;
        f16_res_14141 = fpconv_f16_f32(defunc_0_f_res_14140);
        ((__local float *) red_arr_mem_18293)[gtid_14129 * (d_10378 * d_10378) + gtid_14130 * d_10378 + gtid_14131] = f16_res_14141;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    dims_flat_18295 = d_10378 * d_10378 * d_10378;
    ltid_in_bounds_18300 = slt64(sext_i32_i64(local_tid_18270), d_10378 * d_10378 * d_10378);
    // read input for in-block scan
    {
        if (ltid_in_bounds_18300) {
            eta_p_14134 = ((volatile __local float *) red_arr_mem_18293)[sext_i32_i64(local_tid_18270)];
            if ((local_tid_18270 - squot32(local_tid_18270, 32) * 32) == 0) {
                eta_p_14133 = eta_p_14134;
            }
        }
    }
    // in-block scan (hopefully no barriers needed)
    {
        skip_threads_18301 = 1;
        while (slt32(skip_threads_18301, 32)) {
            bool thread_active_18302 = sle32(skip_threads_18301, local_tid_18270 - squot32(local_tid_18270, 32) * 32) && ltid_in_bounds_18300;
            
            if (thread_active_18302) {
                // read operands
                {
                    eta_p_14133 = ((volatile __local float *) red_arr_mem_18293)[sext_i32_i64(local_tid_18270) - sext_i32_i64(skip_threads_18301)];
                }
            }
            // perform operation
            {
                bool inactive_18303 = slt64(srem64(sext_i32_i64(local_tid_18270), d_10378), sext_i32_i64(local_tid_18270) - sext_i32_i64(local_tid_18270 - skip_threads_18301));
                
                if (thread_active_18302 && inactive_18303) {
                    eta_p_14133 = eta_p_14134;
                }
                if (thread_active_18302) {
                    if (!inactive_18303) {
                        float defunc_0_op_res_14135 = eta_p_14133 + eta_p_14134;
                        
                        eta_p_14133 = defunc_0_op_res_14135;
                    }
                }
            }
            if (sle32(wave_sizze_18272, skip_threads_18301)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            if (thread_active_18302) {
                // write result
                {
                    ((volatile __local float *) red_arr_mem_18293)[sext_i32_i64(local_tid_18270)] = eta_p_14133;
                    eta_p_14134 = eta_p_14133;
                }
            }
            if (sle32(wave_sizze_18272, skip_threads_18301)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            skip_threads_18301 *= 2;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // last thread of block 'i' writes its result to offset 'i'
    {
        if ((local_tid_18270 - squot32(local_tid_18270, 32) * 32) == 31 && ltid_in_bounds_18300) {
            ((volatile __local float *) red_arr_mem_18293)[sext_i32_i64(squot32(local_tid_18270, 32))] = eta_p_14133;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
    {
        int32_t skip_threads_18304;
        
        // read input for in-block scan
        {
            if (squot32(local_tid_18270, 32) == 0 && ltid_in_bounds_18300) {
                eta_p_18298 = ((volatile __local float *) red_arr_mem_18293)[sext_i32_i64(local_tid_18270)];
                if ((local_tid_18270 - squot32(local_tid_18270, 32) * 32) == 0) {
                    eta_p_18297 = eta_p_18298;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_18304 = 1;
            while (slt32(skip_threads_18304, 32)) {
                bool thread_active_18305 = sle32(skip_threads_18304, local_tid_18270 - squot32(local_tid_18270, 32) * 32) && (squot32(local_tid_18270, 32) == 0 && ltid_in_bounds_18300);
                
                if (thread_active_18305) {
                    // read operands
                    {
                        eta_p_18297 = ((volatile __local float *) red_arr_mem_18293)[sext_i32_i64(local_tid_18270) - sext_i32_i64(skip_threads_18304)];
                    }
                }
                // perform operation
                {
                    bool inactive_18306 = slt64(srem64(sext_i32_i64(local_tid_18270 * 32 + 32 - 1), d_10378), sext_i32_i64(local_tid_18270 * 32 + 32 - 1) - sext_i32_i64((local_tid_18270 - skip_threads_18304) * 32 + 32 - 1));
                    
                    if (thread_active_18305 && inactive_18306) {
                        eta_p_18297 = eta_p_18298;
                    }
                    if (thread_active_18305) {
                        if (!inactive_18306) {
                            float defunc_0_op_res_18299 = eta_p_18297 + eta_p_18298;
                            
                            eta_p_18297 = defunc_0_op_res_18299;
                        }
                    }
                }
                if (sle32(wave_sizze_18272, skip_threads_18304)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (thread_active_18305) {
                    // write result
                    {
                        ((volatile __local float *) red_arr_mem_18293)[sext_i32_i64(local_tid_18270)] = eta_p_18297;
                        eta_p_18298 = eta_p_18297;
                    }
                }
                if (sle32(wave_sizze_18272, skip_threads_18304)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_18304 *= 2;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    no_carry_in_18307 = squot32(local_tid_18270, 32) == 0 || !ltid_in_bounds_18300;
    // carry-in for every block except the first
    {
        // read operands
        {
            if (!no_carry_in_18307) {
                eta_p_14134 = eta_p_14133;
                eta_p_14133 = ((__local float *) red_arr_mem_18293)[sext_i32_i64(squot32(local_tid_18270, 32)) - (int64_t) 1];
            }
        }
        // perform operation
        {
            bool inactive_18308 = slt64(srem64(sext_i32_i64(local_tid_18270), d_10378), sext_i32_i64(local_tid_18270) - sext_i32_i64(squot32(local_tid_18270, 32) * 32 - 1));
            
            if (!no_carry_in_18307) {
                if (inactive_18308) {
                    eta_p_14133 = eta_p_14134;
                }
            }
            if (!no_carry_in_18307) {
                if (!inactive_18308) {
                    float defunc_0_op_res_14135 = eta_p_14133 + eta_p_14134;
                    
                    eta_p_14133 = defunc_0_op_res_14135;
                }
            }
        }
        // write final result
        {
            if (!no_carry_in_18307) {
                ((__local float *) red_arr_mem_18293)[sext_i32_i64(local_tid_18270)] = eta_p_14133;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // restore correct values for first block
    {
        if (squot32(local_tid_18270, 32) == 0 && ltid_in_bounds_18300) {
            ((__local float *) red_arr_mem_18293)[sext_i32_i64(local_tid_18270)] = eta_p_14134;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    barrier(CLK_LOCAL_MEM_FENCE);
    // Save result of reduction.
    {
        int32_t num_chunks_18309 = sdiv_up32(sext_i64_i32(d_10378) * sext_i64_i32(d_10378), sext_i64_i32(computed_tblock_sizze_14117));
        
        for (int32_t chunk_i_18310 = 0; chunk_i_18310 < num_chunks_18309; chunk_i_18310++) {
            int32_t i_18311 = chunk_i_18310 * sext_i64_i32(computed_tblock_sizze_14117) + local_tid_18270;
            
            if (slt32(i_18311, sext_i64_i32(d_10378) * sext_i64_i32(d_10378))) {
                ((__local float *) color_18077)[sext_i32_i64(squot32(i_18311, sext_i64_i32(d_10378))) * d_10378 + sext_i32_i64(i_18311 - squot32(i_18311, sext_i64_i32(d_10378)) * sext_i64_i32(d_10378))] = ((__local float *) red_arr_mem_18293)[d_10378 - (int64_t) 1 + sext_i32_i64(squot32(i_18311, sext_i64_i32(d_10378))) * (d_10378 * d_10378) + sext_i32_i64(i_18311 - squot32(i_18311, sext_i64_i32(d_10378)) * sext_i64_i32(d_10378)) * d_10378];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    phys_tid_14145 = sext_i32_i64(local_tid_18270);
    gtid_14143 = sext_i32_i64(sext_i64_i32(ltid_pre_18274));
    gtid_14144 = sext_i32_i64(sext_i64_i32(ltid_pre_18275));
    if (slt64(gtid_14143, d_10378) && slt64(gtid_14144, d_10378)) {
        float defunc_0_f_res_14146;
        f16 f32_res_14147;
        
        defunc_0_f_res_14146 = ((__local float *) color_18077)[gtid_14143 * d_10378 + gtid_14144];
        f32_res_14147 = fpconv_f32_f16(defunc_0_f_res_14146);
        ((__local uint16_t *) color_18076)[gtid_14143 * d_10378 + gtid_14144] = futrts_to_bits16(f32_res_14147);
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    num_chunks_18312 = sdiv_up32(sext_i64_i32(d_10378) * sext_i64_i32(d_10378), sext_i64_i32(computed_tblock_sizze_14117));
    for (int32_t chunk_i_18313 = 0; chunk_i_18313 < num_chunks_18312; chunk_i_18313++) {
        int32_t i_18314 = chunk_i_18313 * sext_i64_i32(computed_tblock_sizze_14117) + local_tid_18270;
        
        if (slt32(i_18314, sext_i64_i32(d_10378) * sext_i64_i32(d_10378))) {
            ((__global uint16_t *) mem_17605)[gtid_14121 * (d_10378 * d_10378 * m_10377) + gtid_14122 * (d_10378 * d_10378) + sext_i32_i64(squot32(i_18314, sext_i64_i32(d_10378))) * d_10378 + sext_i32_i64(i_18314 - squot32(i_18314, sext_i64_i32(d_10378)) * sext_i64_i32(d_10378))] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) color_18076)[sext_i32_i64(squot32(i_18314, sext_i64_i32(d_10378))) + sext_i32_i64(i_18314 - squot32(i_18314, sext_i64_i32(d_10378)) * sext_i64_i32(d_10378)) * d_10378]));
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
  error_4:
    return;
}
FUTHARK_KERNEL_SIZED(thesislike64zisegmap_intrablock_14167_dim1, 1, 1)
void thesislike64zisegmap_intrablock_14167(__global int *global_failure, int64_t m_10377, int64_t d_10378, int64_t arg_10470, int64_t q_11504, unsigned char opaque_res_11508_bits, __global unsigned char *mem_17605, __global unsigned char *mem_17610, __global unsigned char *mem_17613)
{
    bool opaque_res_11508 = opaque_res_11508_bits;
    volatile __local unsigned char *red_arr_mem_18343_backing_2 = &shared_mem[0];
    const int64_t red_arr_mem_18343_backing_2_offset = 0 + (int64_t) 64;
    volatile __local unsigned char *red_arr_mem_18338_backing_1 = &shared_mem[red_arr_mem_18343_backing_2_offset];
    const int64_t red_arr_mem_18338_backing_1_offset = red_arr_mem_18343_backing_2_offset + (int64_t) 64;
    volatile __local unsigned char *color_18078_backing_0 = &shared_mem[red_arr_mem_18338_backing_1_offset];
    const int64_t color_18078_backing_0_offset = red_arr_mem_18338_backing_1_offset + (int64_t) 2048;
    
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_18319;
    int32_t tblock_sizze_18322;
    int32_t wave_sizze_18321;
    int32_t block_id_18320;
    int32_t global_tid_18318;
    int64_t phys_tblock_id_14167;
    int64_t slice_18324;
    int64_t ltid_pre_18323;
    int64_t remnant_18325;
    int64_t slice_18327;
    int64_t ltid_pre_18326;
    int64_t remnant_18328;
    int64_t slice_18329;
    int64_t slice_18330;
    int64_t gtid_14165;
    int64_t remnant_18331;
    int64_t gtid_14166;
    int64_t remnant_18332;
    __local unsigned char *color_18078;
    f16 softmaxChunkML_res_14170;
    f16 softmaxChunkML_res_14171;
    f16 mi_old_14173;
    f16 li_old_14174;
    
    local_tid_18319 = get_local_id(0);
    tblock_sizze_18322 = get_local_size(0);
    wave_sizze_18321 = LOCKSTEP_WIDTH;
    block_id_18320 = get_tblock_id(0);
    global_tid_18318 = block_id_18320 * tblock_sizze_18322 + local_tid_18319;
    phys_tblock_id_14167 = sext_i32_i64(block_id_18320);
    slice_18324 = (int64_t) 32;
    ltid_pre_18323 = sext_i32_i64(local_tid_18319);
    remnant_18325 = sext_i32_i64(local_tid_18319) - ltid_pre_18323;
    slice_18327 = (int64_t) 1024;
    ltid_pre_18326 = sext_i32_i64(local_tid_18319);
    remnant_18328 = sext_i32_i64(local_tid_18319) - ltid_pre_18326;
    slice_18329 = d_10378;
    slice_18330 = m_10377 * slice_18329;
    gtid_14165 = squot64(sext_i32_i64(block_id_18320), slice_18329);
    remnant_18331 = sext_i32_i64(block_id_18320) - gtid_14165 * slice_18329;
    gtid_14166 = remnant_18331;
    remnant_18332 = remnant_18331 - gtid_14166;
    color_18078 = (__local unsigned char *) color_18078_backing_0;
    barrier(CLK_LOCAL_MEM_FENCE);
    mi_old_14173 = (f16) -INFINITY;
    li_old_14174 = (f16) 0.0F;
    for (int64_t i_14172 = 0; i_14172 < q_11504; i_14172++) {
        int64_t copy2shr_arg0_14175;
        int32_t num_chunks_18335;
        f16 defunc_0_reduce_comm_res_14180;
        int64_t phys_tid_14182;
        __local unsigned char *red_arr_mem_18338;
        int64_t gtid_14181;
        f16 defunc_0_f_res_14187;
        f16 r_14189;
        int32_t offset_18341;
        int32_t skip_waves_18342;
        f16 eta_p_14183;
        f16 eta_p_14184;
        f16 defunc_0_reduce_comm_res_14194;
        int64_t phys_tid_14196;
        __local unsigned char *red_arr_mem_18343;
        int64_t gtid_14195;
        f16 defunc_0_f_res_14201;
        f16 r_14203;
        int32_t offset_18346;
        int32_t skip_waves_18347;
        f16 eta_p_14197;
        f16 eta_p_14198;
        f16 max_res_14210;
        f16 real_exp_arg0_14211;
        f16 exp_res_14212;
        f16 exp_arg0_14213;
        f16 exp_res_14214;
        f16 eli_14215;
        f16 zp_rhs_14216;
        f16 li_new_14217;
        f16 mi_old_tmp_18333;
        f16 li_old_tmp_18334;
        
        copy2shr_arg0_14175 = mul64((int64_t) 1024, i_14172);
        num_chunks_18335 = 32;
        for (int32_t chunk_i_18336 = 0; chunk_i_18336 < num_chunks_18335; chunk_i_18336++) {
            int32_t i_18337 = chunk_i_18336 * 32 + local_tid_18319;
            
            if (slt32(i_18337, 1024)) {
                ((__local uint16_t *) color_18078)[sext_i32_i64(i_18337)] = futrts_to_bits16(futrts_from_bits16(((__global uint16_t *) mem_17605)[gtid_14165 * (d_10378 * arg_10470) + gtid_14166 + d_10378 * copy2shr_arg0_14175 + sext_i32_i64(i_18337) * d_10378]));
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_LOCAL_MEM_FENCE);
        if (!opaque_res_11508) {
            barrier(CLK_LOCAL_MEM_FENCE);
            if (local_tid_18319 == 0) {
                ((__local uint16_t *) color_18078)[(int64_t) 0] = futrts_to_bits16((f16) 0.0F);
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }
        phys_tid_14182 = sext_i32_i64(local_tid_18319);
        red_arr_mem_18338 = (__local unsigned char *) red_arr_mem_18338_backing_1;
        gtid_14181 = sext_i32_i64(sext_i64_i32(ltid_pre_18323));
        r_14189 = (f16) -INFINITY;
        for (int64_t i_14188 = 0; i_14188 < (int64_t) 32; i_14188++) {
            int64_t zp_lhs_14190;
            int64_t f_arg0_14191;
            f16 f_arg0_14192;
            f16 max_res_14193;
            f16 r_tmp_18340;
            
            zp_lhs_14190 = mul64((int64_t) 32, i_14188);
            f_arg0_14191 = add64(gtid_14181, zp_lhs_14190);
            f_arg0_14192 = futrts_from_bits16(((__local uint16_t *) color_18078)[f_arg0_14191]);
            max_res_14193 = fmax16(r_14189, f_arg0_14192);
            r_tmp_18340 = max_res_14193;
            r_14189 = r_tmp_18340;
        }
        defunc_0_f_res_14187 = r_14189;
        ((__local uint16_t *) red_arr_mem_18338)[gtid_14181] = futrts_to_bits16(defunc_0_f_res_14187);
        barrier(CLK_LOCAL_MEM_FENCE);
        skip_waves_18342 = 1;
        offset_18341 = 0;
        // participating threads read initial accumulator
        {
            if (slt32(local_tid_18319, 32)) {
                eta_p_14183 = futrts_from_bits16(((__local uint16_t *) red_arr_mem_18338)[sext_i32_i64(local_tid_18319 + offset_18341)]);
            }
        }
        offset_18341 = 1;
        while (slt32(offset_18341, wave_sizze_18321)) {
            if (slt32(local_tid_18319 + offset_18341, 32) && ((local_tid_18319 - squot32(local_tid_18319, wave_sizze_18321) * wave_sizze_18321) & (2 * offset_18341 - 1)) == 0) {
                // read array element
                {
                    eta_p_14184 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18338)[sext_i32_i64(local_tid_18319 + offset_18341)]);
                }
                // apply reduction operation
                {
                    f16 max_res_14185 = fmax16(eta_p_14183, eta_p_14184);
                    
                    eta_p_14183 = max_res_14185;
                }
                // write result of operation
                {
                    ((volatile __local uint16_t *) red_arr_mem_18338)[sext_i32_i64(local_tid_18319)] = futrts_to_bits16(eta_p_14183);
                }
            }
            offset_18341 *= 2;
        }
        while (slt32(skip_waves_18342, squot32(32 + wave_sizze_18321 - 1, wave_sizze_18321))) {
            barrier(CLK_LOCAL_MEM_FENCE);
            offset_18341 = skip_waves_18342 * wave_sizze_18321;
            if (slt32(local_tid_18319 + offset_18341, 32) && ((local_tid_18319 - squot32(local_tid_18319, wave_sizze_18321) * wave_sizze_18321) == 0 && (squot32(local_tid_18319, wave_sizze_18321) & (2 * skip_waves_18342 - 1)) == 0)) {
                // read array element
                {
                    eta_p_14184 = futrts_from_bits16(((__local uint16_t *) red_arr_mem_18338)[sext_i32_i64(local_tid_18319 + offset_18341)]);
                }
                // apply reduction operation
                {
                    f16 max_res_14185 = fmax16(eta_p_14183, eta_p_14184);
                    
                    eta_p_14183 = max_res_14185;
                }
                // write result of operation
                {
                    ((__local uint16_t *) red_arr_mem_18338)[sext_i32_i64(local_tid_18319)] = futrts_to_bits16(eta_p_14183);
                }
            }
            skip_waves_18342 *= 2;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_LOCAL_MEM_FENCE);
        // Save result of reduction.
        {
            defunc_0_reduce_comm_res_14180 = futrts_from_bits16(((__local uint16_t *) red_arr_mem_18338)[(int64_t) 0]);
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        phys_tid_14196 = sext_i32_i64(local_tid_18319);
        red_arr_mem_18343 = (__local unsigned char *) red_arr_mem_18343_backing_2;
        gtid_14195 = sext_i32_i64(sext_i64_i32(ltid_pre_18323));
        r_14203 = (f16) 0.0F;
        for (int64_t i_14202 = 0; i_14202 < (int64_t) 32; i_14202++) {
            int64_t zp_lhs_14204;
            int64_t f_arg0_14205;
            f16 f_arg0_14206;
            f16 real_exp_arg0_14207;
            f16 exp_res_14208;
            f16 defunc_0_bop_res_14209;
            f16 r_tmp_18345;
            
            zp_lhs_14204 = mul64((int64_t) 32, i_14202);
            f_arg0_14205 = add64(gtid_14195, zp_lhs_14204);
            f_arg0_14206 = futrts_from_bits16(((__local uint16_t *) color_18078)[f_arg0_14205]);
            real_exp_arg0_14207 = f_arg0_14206 - defunc_0_reduce_comm_res_14180;
            exp_res_14208 = futrts_exp16(real_exp_arg0_14207);
            defunc_0_bop_res_14209 = r_14203 + exp_res_14208;
            r_tmp_18345 = defunc_0_bop_res_14209;
            r_14203 = r_tmp_18345;
        }
        defunc_0_f_res_14201 = r_14203;
        ((__local uint16_t *) red_arr_mem_18343)[gtid_14195] = futrts_to_bits16(defunc_0_f_res_14201);
        barrier(CLK_LOCAL_MEM_FENCE);
        skip_waves_18347 = 1;
        offset_18346 = 0;
        // participating threads read initial accumulator
        {
            if (slt32(local_tid_18319, 32)) {
                eta_p_14197 = futrts_from_bits16(((__local uint16_t *) red_arr_mem_18343)[sext_i32_i64(local_tid_18319 + offset_18346)]);
            }
        }
        offset_18346 = 1;
        while (slt32(offset_18346, wave_sizze_18321)) {
            if (slt32(local_tid_18319 + offset_18346, 32) && ((local_tid_18319 - squot32(local_tid_18319, wave_sizze_18321) * wave_sizze_18321) & (2 * offset_18346 - 1)) == 0) {
                // read array element
                {
                    eta_p_14198 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18343)[sext_i32_i64(local_tid_18319 + offset_18346)]);
                }
                // apply reduction operation
                {
                    f16 defunc_0_op_res_14199 = eta_p_14197 + eta_p_14198;
                    
                    eta_p_14197 = defunc_0_op_res_14199;
                }
                // write result of operation
                {
                    ((volatile __local uint16_t *) red_arr_mem_18343)[sext_i32_i64(local_tid_18319)] = futrts_to_bits16(eta_p_14197);
                }
            }
            offset_18346 *= 2;
        }
        while (slt32(skip_waves_18347, squot32(32 + wave_sizze_18321 - 1, wave_sizze_18321))) {
            barrier(CLK_LOCAL_MEM_FENCE);
            offset_18346 = skip_waves_18347 * wave_sizze_18321;
            if (slt32(local_tid_18319 + offset_18346, 32) && ((local_tid_18319 - squot32(local_tid_18319, wave_sizze_18321) * wave_sizze_18321) == 0 && (squot32(local_tid_18319, wave_sizze_18321) & (2 * skip_waves_18347 - 1)) == 0)) {
                // read array element
                {
                    eta_p_14198 = futrts_from_bits16(((__local uint16_t *) red_arr_mem_18343)[sext_i32_i64(local_tid_18319 + offset_18346)]);
                }
                // apply reduction operation
                {
                    f16 defunc_0_op_res_14199 = eta_p_14197 + eta_p_14198;
                    
                    eta_p_14197 = defunc_0_op_res_14199;
                }
                // write result of operation
                {
                    ((__local uint16_t *) red_arr_mem_18343)[sext_i32_i64(local_tid_18319)] = futrts_to_bits16(eta_p_14197);
                }
            }
            skip_waves_18347 *= 2;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_LOCAL_MEM_FENCE);
        // Save result of reduction.
        {
            defunc_0_reduce_comm_res_14194 = futrts_from_bits16(((__local uint16_t *) red_arr_mem_18343)[(int64_t) 0]);
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        max_res_14210 = fmax16(mi_old_14173, defunc_0_reduce_comm_res_14180);
        real_exp_arg0_14211 = defunc_0_reduce_comm_res_14180 - max_res_14210;
        exp_res_14212 = futrts_exp16(real_exp_arg0_14211);
        exp_arg0_14213 = mi_old_14173 - max_res_14210;
        exp_res_14214 = futrts_exp16(exp_arg0_14213);
        eli_14215 = li_old_14174 * exp_res_14214;
        zp_rhs_14216 = defunc_0_reduce_comm_res_14194 * exp_res_14212;
        li_new_14217 = eli_14215 + zp_rhs_14216;
        mi_old_tmp_18333 = max_res_14210;
        li_old_tmp_18334 = li_new_14217;
        mi_old_14173 = mi_old_tmp_18333;
        li_old_14174 = li_old_tmp_18334;
    }
    softmaxChunkML_res_14170 = mi_old_14173;
    softmaxChunkML_res_14171 = li_old_14174;
    if (local_tid_18319 == 0) {
        ((__global uint16_t *) mem_17610)[gtid_14165 * d_10378 + gtid_14166] = futrts_to_bits16(softmaxChunkML_res_14170);
    }
    if (local_tid_18319 == 0) {
        ((__global uint16_t *) mem_17613)[gtid_14165 * d_10378 + gtid_14166] = futrts_to_bits16(softmaxChunkML_res_14171);
    }
    
  error_10:
    return;
}
FUTHARK_KERNEL
void thesislike64zisegmap_intrablock_14264(__global int *global_failure, int64_t m_10377, int64_t d_10378, int64_t dzlz7bUZLztZRz20Umz20Udz7dUzg_10379, int64_t one_intra_par_min_13450, int64_t binop_x_17598, __global unsigned char *V_mem_17593, __global unsigned char *mem_17618, __global unsigned char *mem_17625)
{
    volatile __local unsigned char *red_arr_mem_18378_backing_1 = &shared_mem[0];
    const int64_t red_arr_mem_18378_backing_1_offset = 0 + ((int64_t) 2 * (d_10378 * dzlz7bUZLztZRz20Umz20Udz7dUzg_10379) + srem64((int64_t) 8 - srem64((int64_t) 2 * (d_10378 * dzlz7bUZLztZRz20Umz20Udz7dUzg_10379), (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_18079_backing_0 = &shared_mem[red_arr_mem_18378_backing_1_offset];
    const int64_t color_18079_backing_0_offset = red_arr_mem_18378_backing_1_offset + (binop_x_17598 + srem64((int64_t) 8 - srem64(binop_x_17598, (int64_t) 8), (int64_t) 8));
    
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_18364;
    int32_t tblock_sizze_18367;
    int32_t wave_sizze_18366;
    int32_t block_id_18365;
    int32_t global_tid_18363;
    int64_t phys_tblock_id_14264;
    int64_t slice_18370;
    int64_t slice_18371;
    int64_t ltid_pre_18368;
    int64_t remnant_18372;
    int64_t ltid_pre_18369;
    int64_t remnant_18373;
    int64_t slice_18374;
    int64_t slice_18375;
    int64_t gtid_14262;
    int64_t remnant_18376;
    int64_t gtid_14263;
    int64_t remnant_18377;
    __local unsigned char *color_18079;
    int64_t phys_tid_14270;
    __local unsigned char *red_arr_mem_18378;
    int64_t gtid_14268;
    int64_t gtid_14269;
    int64_t dims_flat_18380;
    f16 eta_p_14271;
    f16 eta_p_14272;
    f16 eta_p_18382;
    f16 eta_p_18383;
    bool ltid_in_bounds_18385;
    int32_t skip_threads_18386;
    bool no_carry_in_18392;
    int32_t num_chunks_18397;
    
    local_tid_18364 = get_local_id(0);
    tblock_sizze_18367 = get_local_size(0);
    wave_sizze_18366 = LOCKSTEP_WIDTH;
    block_id_18365 = get_tblock_id(0);
    global_tid_18363 = block_id_18365 * tblock_sizze_18367 + local_tid_18364;
    phys_tblock_id_14264 = sext_i32_i64(block_id_18365);
    slice_18370 = dzlz7bUZLztZRz20Umz20Udz7dUzg_10379;
    slice_18371 = d_10378 * slice_18370;
    ltid_pre_18368 = squot64(sext_i32_i64(local_tid_18364), slice_18370);
    remnant_18372 = sext_i32_i64(local_tid_18364) - ltid_pre_18368 * slice_18370;
    ltid_pre_18369 = remnant_18372;
    remnant_18373 = remnant_18372 - ltid_pre_18369;
    slice_18374 = d_10378;
    slice_18375 = m_10377 * slice_18374;
    gtid_14262 = squot64(sext_i32_i64(block_id_18365), slice_18374);
    remnant_18376 = sext_i32_i64(block_id_18365) - gtid_14262 * slice_18374;
    gtid_14263 = remnant_18376;
    remnant_18377 = remnant_18376 - gtid_14263;
    color_18079 = (__local unsigned char *) color_18079_backing_0;
    phys_tid_14270 = sext_i32_i64(local_tid_18364);
    red_arr_mem_18378 = (__local unsigned char *) red_arr_mem_18378_backing_1;
    gtid_14268 = sext_i32_i64(sext_i64_i32(ltid_pre_18368));
    gtid_14269 = sext_i32_i64(sext_i64_i32(ltid_pre_18369));
    if (slt64(gtid_14268, d_10378) && slt64(gtid_14269, dzlz7bUZLztZRz20Umz20Udz7dUzg_10379)) {
        f16 eta_p_14275;
        f16 eta_p_14276;
        f16 defunc_0_f_res_14277;
        
        eta_p_14275 = futrts_from_bits16(((__global uint16_t *) mem_17618)[gtid_14262 * (dzlz7bUZLztZRz20Umz20Udz7dUzg_10379 * d_10378) + gtid_14263 * dzlz7bUZLztZRz20Umz20Udz7dUzg_10379 + gtid_14269]);
        eta_p_14276 = futrts_from_bits16(((__global uint16_t *) V_mem_17593)[gtid_14269 * d_10378 + gtid_14268]);
        defunc_0_f_res_14277 = eta_p_14275 * eta_p_14276;
        ((__local uint16_t *) red_arr_mem_18378)[gtid_14268 * dzlz7bUZLztZRz20Umz20Udz7dUzg_10379 + gtid_14269] = futrts_to_bits16(defunc_0_f_res_14277);
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    dims_flat_18380 = d_10378 * dzlz7bUZLztZRz20Umz20Udz7dUzg_10379;
    ltid_in_bounds_18385 = slt64(sext_i32_i64(local_tid_18364), d_10378 * dzlz7bUZLztZRz20Umz20Udz7dUzg_10379);
    // read input for in-block scan
    {
        if (ltid_in_bounds_18385) {
            eta_p_14272 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18378)[sext_i32_i64(local_tid_18364)]);
            if ((local_tid_18364 - squot32(local_tid_18364, 32) * 32) == 0) {
                eta_p_14271 = eta_p_14272;
            }
        }
    }
    // in-block scan (hopefully no barriers needed)
    {
        skip_threads_18386 = 1;
        while (slt32(skip_threads_18386, 32)) {
            bool thread_active_18387 = sle32(skip_threads_18386, local_tid_18364 - squot32(local_tid_18364, 32) * 32) && ltid_in_bounds_18385;
            
            if (thread_active_18387) {
                // read operands
                {
                    eta_p_14271 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18378)[sext_i32_i64(local_tid_18364) - sext_i32_i64(skip_threads_18386)]);
                }
            }
            // perform operation
            {
                bool inactive_18388 = slt64(srem64(sext_i32_i64(local_tid_18364), dzlz7bUZLztZRz20Umz20Udz7dUzg_10379), sext_i32_i64(local_tid_18364) - sext_i32_i64(local_tid_18364 - skip_threads_18386));
                
                if (thread_active_18387 && inactive_18388) {
                    eta_p_14271 = eta_p_14272;
                }
                if (thread_active_18387) {
                    if (!inactive_18388) {
                        f16 defunc_0_op_res_14273 = eta_p_14271 + eta_p_14272;
                        
                        eta_p_14271 = defunc_0_op_res_14273;
                    }
                }
            }
            if (sle32(wave_sizze_18366, skip_threads_18386)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            if (thread_active_18387) {
                // write result
                {
                    ((volatile __local uint16_t *) red_arr_mem_18378)[sext_i32_i64(local_tid_18364)] = futrts_to_bits16(eta_p_14271);
                    eta_p_14272 = eta_p_14271;
                }
            }
            if (sle32(wave_sizze_18366, skip_threads_18386)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            skip_threads_18386 *= 2;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // last thread of block 'i' writes its result to offset 'i'
    {
        if ((local_tid_18364 - squot32(local_tid_18364, 32) * 32) == 31 && ltid_in_bounds_18385) {
            ((volatile __local uint16_t *) red_arr_mem_18378)[sext_i32_i64(squot32(local_tid_18364, 32))] = futrts_to_bits16(eta_p_14271);
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
    {
        int32_t skip_threads_18389;
        
        // read input for in-block scan
        {
            if (squot32(local_tid_18364, 32) == 0 && ltid_in_bounds_18385) {
                eta_p_18383 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18378)[sext_i32_i64(local_tid_18364)]);
                if ((local_tid_18364 - squot32(local_tid_18364, 32) * 32) == 0) {
                    eta_p_18382 = eta_p_18383;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_18389 = 1;
            while (slt32(skip_threads_18389, 32)) {
                bool thread_active_18390 = sle32(skip_threads_18389, local_tid_18364 - squot32(local_tid_18364, 32) * 32) && (squot32(local_tid_18364, 32) == 0 && ltid_in_bounds_18385);
                
                if (thread_active_18390) {
                    // read operands
                    {
                        eta_p_18382 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18378)[sext_i32_i64(local_tid_18364) - sext_i32_i64(skip_threads_18389)]);
                    }
                }
                // perform operation
                {
                    bool inactive_18391 = slt64(srem64(sext_i32_i64(local_tid_18364 * 32 + 32 - 1), dzlz7bUZLztZRz20Umz20Udz7dUzg_10379), sext_i32_i64(local_tid_18364 * 32 + 32 - 1) - sext_i32_i64((local_tid_18364 - skip_threads_18389) * 32 + 32 - 1));
                    
                    if (thread_active_18390 && inactive_18391) {
                        eta_p_18382 = eta_p_18383;
                    }
                    if (thread_active_18390) {
                        if (!inactive_18391) {
                            f16 defunc_0_op_res_18384 = eta_p_18382 + eta_p_18383;
                            
                            eta_p_18382 = defunc_0_op_res_18384;
                        }
                    }
                }
                if (sle32(wave_sizze_18366, skip_threads_18389)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (thread_active_18390) {
                    // write result
                    {
                        ((volatile __local uint16_t *) red_arr_mem_18378)[sext_i32_i64(local_tid_18364)] = futrts_to_bits16(eta_p_18382);
                        eta_p_18383 = eta_p_18382;
                    }
                }
                if (sle32(wave_sizze_18366, skip_threads_18389)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_18389 *= 2;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    no_carry_in_18392 = squot32(local_tid_18364, 32) == 0 || !ltid_in_bounds_18385;
    // carry-in for every block except the first
    {
        // read operands
        {
            if (!no_carry_in_18392) {
                eta_p_14272 = eta_p_14271;
                eta_p_14271 = futrts_from_bits16(((__local uint16_t *) red_arr_mem_18378)[sext_i32_i64(squot32(local_tid_18364, 32)) - (int64_t) 1]);
            }
        }
        // perform operation
        {
            bool inactive_18393 = slt64(srem64(sext_i32_i64(local_tid_18364), dzlz7bUZLztZRz20Umz20Udz7dUzg_10379), sext_i32_i64(local_tid_18364) - sext_i32_i64(squot32(local_tid_18364, 32) * 32 - 1));
            
            if (!no_carry_in_18392) {
                if (inactive_18393) {
                    eta_p_14271 = eta_p_14272;
                }
            }
            if (!no_carry_in_18392) {
                if (!inactive_18393) {
                    f16 defunc_0_op_res_14273 = eta_p_14271 + eta_p_14272;
                    
                    eta_p_14271 = defunc_0_op_res_14273;
                }
            }
        }
        // write final result
        {
            if (!no_carry_in_18392) {
                ((__local uint16_t *) red_arr_mem_18378)[sext_i32_i64(local_tid_18364)] = futrts_to_bits16(eta_p_14271);
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // restore correct values for first block
    {
        if (squot32(local_tid_18364, 32) == 0 && ltid_in_bounds_18385) {
            ((__local uint16_t *) red_arr_mem_18378)[sext_i32_i64(local_tid_18364)] = futrts_to_bits16(eta_p_14272);
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    barrier(CLK_LOCAL_MEM_FENCE);
    // Save result of reduction.
    {
        int32_t num_chunks_18394 = sdiv_up32(sext_i64_i32(d_10378), sext_i64_i32(one_intra_par_min_13450));
        
        for (int32_t chunk_i_18395 = 0; chunk_i_18395 < num_chunks_18394; chunk_i_18395++) {
            int32_t i_18396 = chunk_i_18395 * sext_i64_i32(one_intra_par_min_13450) + local_tid_18364;
            
            if (slt32(i_18396, sext_i64_i32(d_10378))) {
                ((__local uint16_t *) color_18079)[sext_i32_i64(i_18396)] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) red_arr_mem_18378)[dzlz7bUZLztZRz20Umz20Udz7dUzg_10379 - (int64_t) 1 + sext_i32_i64(i_18396) * dzlz7bUZLztZRz20Umz20Udz7dUzg_10379]));
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    num_chunks_18397 = sdiv_up32(sext_i64_i32(d_10378), sext_i64_i32(one_intra_par_min_13450));
    for (int32_t chunk_i_18398 = 0; chunk_i_18398 < num_chunks_18397; chunk_i_18398++) {
        int32_t i_18399 = chunk_i_18398 * sext_i64_i32(one_intra_par_min_13450) + local_tid_18364;
        
        if (slt32(i_18399, sext_i64_i32(d_10378))) {
            ((__global uint16_t *) mem_17625)[gtid_14262 * (d_10378 * d_10378) + gtid_14263 * d_10378 + sext_i32_i64(i_18399)] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) color_18079)[sext_i32_i64(i_18399)]));
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
  error_3:
    return;
}
