#define FUTHARK_CUDA
#define FUTHARK_CUDATC
// start of prelude.cu
#define SCALAR_FUN_ATTR __device__ static inline
#define FUTHARK_FUN_ATTR __device__ static
#define FUTHARK_F64_ENABLED

#ifdef FUTHARK_CUDATC
#include <cute/tensor.hpp>
#else
typedef char int8_t;
typedef short int16_t;
typedef int int32_t;
typedef long long int64_t;
typedef unsigned char uint8_t;
typedef unsigned short uint16_t;
typedef unsigned int uint32_t;
typedef unsigned long long uint64_t;
#endif

#define __global
#define __local
#define __private
#define __constant
#define __write_only
#define __read_only

static inline __device__ int get_tblock_id(int d) {
  switch (d) {
  case 0: return blockIdx.x;
  case 1: return blockIdx.y;
  case 2: return blockIdx.z;
  default: return 0;
  }
}

static inline __device__ int get_num_tblocks(int d) {
  switch(d) {
  case 0: return gridDim.x;
  case 1: return gridDim.y;
  case 2: return gridDim.z;
  default: return 0;
  }
}

static inline __device__ int get_global_id(int d) {
  switch (d) {
    case 0: return threadIdx.x + blockIdx.x * blockDim.x;
    case 1: return threadIdx.y + blockIdx.y * blockDim.y;
    case 2: return threadIdx.z + blockIdx.z * blockDim.z;
    default: return 0;
  }
}

static inline __device__ int get_local_id(int d) {
  switch (d) {
    case 0: return threadIdx.x;
    case 1: return threadIdx.y;
    case 2: return threadIdx.z;
    default: return 0;
  }
}

static inline __device__ int get_local_size(int d) {
  switch (d) {
    case 0: return blockDim.x;
    case 1: return blockDim.y;
    case 2: return blockDim.z;
    default: return 0;
  }
}

static inline __device__ int get_global_size(int d) {
  switch (d) {
    case 0: return gridDim.x * blockDim.x;
    case 1: return gridDim.y * blockDim.y;
    case 2: return gridDim.z * blockDim.z;
    default: return 0;
  }
}


#define CLK_LOCAL_MEM_FENCE 1
#define CLK_GLOBAL_MEM_FENCE 2
static inline __device__ void barrier(int x) {
  __syncthreads();
}
static inline __device__ void mem_fence_local() {
  __threadfence_block();
}
static inline __device__ void mem_fence_global() {
  __threadfence();
}

static inline __device__ void barrier_local() {
  __syncthreads();
}

#define NAN (0.0/0.0)
#define INFINITY (1.0/0.0)
extern volatile __shared__ unsigned char shared_mem[];

#define SHARED_MEM_PARAM
#define FUTHARK_KERNEL extern "C" __global__ __launch_bounds__(MAX_THREADS_PER_BLOCK)
#define FUTHARK_KERNEL_SIZED(a,b,c) extern "C" __global__ __launch_bounds__(a*b*c)


// End of prelude.cu
// Start of half.h.

// Conversion functions are from http://half.sourceforge.net/, but
// translated to C.
//
// Copyright (c) 2012-2021 Christian Rau
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

#ifndef __OPENCL_VERSION__
#define __constant
#endif

__constant static const uint16_t base_table[512] = {
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0001, 0x0002, 0x0004, 0x0008, 0x0010, 0x0020, 0x0040, 0x0080, 0x0100,
  0x0200, 0x0400, 0x0800, 0x0C00, 0x1000, 0x1400, 0x1800, 0x1C00, 0x2000, 0x2400, 0x2800, 0x2C00, 0x3000, 0x3400, 0x3800, 0x3C00,
  0x4000, 0x4400, 0x4800, 0x4C00, 0x5000, 0x5400, 0x5800, 0x5C00, 0x6000, 0x6400, 0x6800, 0x6C00, 0x7000, 0x7400, 0x7800, 0x7C00,
  0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00,
  0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00,
  0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00,
  0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00,
  0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00,
  0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00,
  0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00,
  0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000,
  0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000,
  0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000,
  0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000,
  0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000,
  0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000,
  0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8001, 0x8002, 0x8004, 0x8008, 0x8010, 0x8020, 0x8040, 0x8080, 0x8100,
  0x8200, 0x8400, 0x8800, 0x8C00, 0x9000, 0x9400, 0x9800, 0x9C00, 0xA000, 0xA400, 0xA800, 0xAC00, 0xB000, 0xB400, 0xB800, 0xBC00,
  0xC000, 0xC400, 0xC800, 0xCC00, 0xD000, 0xD400, 0xD800, 0xDC00, 0xE000, 0xE400, 0xE800, 0xEC00, 0xF000, 0xF400, 0xF800, 0xFC00,
  0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00,
  0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00,
  0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00,
  0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00,
  0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00,
  0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00,
  0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00 };

__constant static const unsigned char shift_table[512] = {
  24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
  24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
  24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
  24, 24, 24, 24, 24, 24, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
  13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
  24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
  24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
  24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 13,
  24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
  24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
  24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
  24, 24, 24, 24, 24, 24, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
  13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
  24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
  24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
  24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 13 };

__constant static const uint32_t mantissa_table[2048] = {
  0x00000000, 0x33800000, 0x34000000, 0x34400000, 0x34800000, 0x34A00000, 0x34C00000, 0x34E00000, 0x35000000, 0x35100000, 0x35200000, 0x35300000, 0x35400000, 0x35500000, 0x35600000, 0x35700000,
  0x35800000, 0x35880000, 0x35900000, 0x35980000, 0x35A00000, 0x35A80000, 0x35B00000, 0x35B80000, 0x35C00000, 0x35C80000, 0x35D00000, 0x35D80000, 0x35E00000, 0x35E80000, 0x35F00000, 0x35F80000,
  0x36000000, 0x36040000, 0x36080000, 0x360C0000, 0x36100000, 0x36140000, 0x36180000, 0x361C0000, 0x36200000, 0x36240000, 0x36280000, 0x362C0000, 0x36300000, 0x36340000, 0x36380000, 0x363C0000,
  0x36400000, 0x36440000, 0x36480000, 0x364C0000, 0x36500000, 0x36540000, 0x36580000, 0x365C0000, 0x36600000, 0x36640000, 0x36680000, 0x366C0000, 0x36700000, 0x36740000, 0x36780000, 0x367C0000,
  0x36800000, 0x36820000, 0x36840000, 0x36860000, 0x36880000, 0x368A0000, 0x368C0000, 0x368E0000, 0x36900000, 0x36920000, 0x36940000, 0x36960000, 0x36980000, 0x369A0000, 0x369C0000, 0x369E0000,
  0x36A00000, 0x36A20000, 0x36A40000, 0x36A60000, 0x36A80000, 0x36AA0000, 0x36AC0000, 0x36AE0000, 0x36B00000, 0x36B20000, 0x36B40000, 0x36B60000, 0x36B80000, 0x36BA0000, 0x36BC0000, 0x36BE0000,
  0x36C00000, 0x36C20000, 0x36C40000, 0x36C60000, 0x36C80000, 0x36CA0000, 0x36CC0000, 0x36CE0000, 0x36D00000, 0x36D20000, 0x36D40000, 0x36D60000, 0x36D80000, 0x36DA0000, 0x36DC0000, 0x36DE0000,
  0x36E00000, 0x36E20000, 0x36E40000, 0x36E60000, 0x36E80000, 0x36EA0000, 0x36EC0000, 0x36EE0000, 0x36F00000, 0x36F20000, 0x36F40000, 0x36F60000, 0x36F80000, 0x36FA0000, 0x36FC0000, 0x36FE0000,
  0x37000000, 0x37010000, 0x37020000, 0x37030000, 0x37040000, 0x37050000, 0x37060000, 0x37070000, 0x37080000, 0x37090000, 0x370A0000, 0x370B0000, 0x370C0000, 0x370D0000, 0x370E0000, 0x370F0000,
  0x37100000, 0x37110000, 0x37120000, 0x37130000, 0x37140000, 0x37150000, 0x37160000, 0x37170000, 0x37180000, 0x37190000, 0x371A0000, 0x371B0000, 0x371C0000, 0x371D0000, 0x371E0000, 0x371F0000,
  0x37200000, 0x37210000, 0x37220000, 0x37230000, 0x37240000, 0x37250000, 0x37260000, 0x37270000, 0x37280000, 0x37290000, 0x372A0000, 0x372B0000, 0x372C0000, 0x372D0000, 0x372E0000, 0x372F0000,
  0x37300000, 0x37310000, 0x37320000, 0x37330000, 0x37340000, 0x37350000, 0x37360000, 0x37370000, 0x37380000, 0x37390000, 0x373A0000, 0x373B0000, 0x373C0000, 0x373D0000, 0x373E0000, 0x373F0000,
  0x37400000, 0x37410000, 0x37420000, 0x37430000, 0x37440000, 0x37450000, 0x37460000, 0x37470000, 0x37480000, 0x37490000, 0x374A0000, 0x374B0000, 0x374C0000, 0x374D0000, 0x374E0000, 0x374F0000,
  0x37500000, 0x37510000, 0x37520000, 0x37530000, 0x37540000, 0x37550000, 0x37560000, 0x37570000, 0x37580000, 0x37590000, 0x375A0000, 0x375B0000, 0x375C0000, 0x375D0000, 0x375E0000, 0x375F0000,
  0x37600000, 0x37610000, 0x37620000, 0x37630000, 0x37640000, 0x37650000, 0x37660000, 0x37670000, 0x37680000, 0x37690000, 0x376A0000, 0x376B0000, 0x376C0000, 0x376D0000, 0x376E0000, 0x376F0000,
  0x37700000, 0x37710000, 0x37720000, 0x37730000, 0x37740000, 0x37750000, 0x37760000, 0x37770000, 0x37780000, 0x37790000, 0x377A0000, 0x377B0000, 0x377C0000, 0x377D0000, 0x377E0000, 0x377F0000,
  0x37800000, 0x37808000, 0x37810000, 0x37818000, 0x37820000, 0x37828000, 0x37830000, 0x37838000, 0x37840000, 0x37848000, 0x37850000, 0x37858000, 0x37860000, 0x37868000, 0x37870000, 0x37878000,
  0x37880000, 0x37888000, 0x37890000, 0x37898000, 0x378A0000, 0x378A8000, 0x378B0000, 0x378B8000, 0x378C0000, 0x378C8000, 0x378D0000, 0x378D8000, 0x378E0000, 0x378E8000, 0x378F0000, 0x378F8000,
  0x37900000, 0x37908000, 0x37910000, 0x37918000, 0x37920000, 0x37928000, 0x37930000, 0x37938000, 0x37940000, 0x37948000, 0x37950000, 0x37958000, 0x37960000, 0x37968000, 0x37970000, 0x37978000,
  0x37980000, 0x37988000, 0x37990000, 0x37998000, 0x379A0000, 0x379A8000, 0x379B0000, 0x379B8000, 0x379C0000, 0x379C8000, 0x379D0000, 0x379D8000, 0x379E0000, 0x379E8000, 0x379F0000, 0x379F8000,
  0x37A00000, 0x37A08000, 0x37A10000, 0x37A18000, 0x37A20000, 0x37A28000, 0x37A30000, 0x37A38000, 0x37A40000, 0x37A48000, 0x37A50000, 0x37A58000, 0x37A60000, 0x37A68000, 0x37A70000, 0x37A78000,
  0x37A80000, 0x37A88000, 0x37A90000, 0x37A98000, 0x37AA0000, 0x37AA8000, 0x37AB0000, 0x37AB8000, 0x37AC0000, 0x37AC8000, 0x37AD0000, 0x37AD8000, 0x37AE0000, 0x37AE8000, 0x37AF0000, 0x37AF8000,
  0x37B00000, 0x37B08000, 0x37B10000, 0x37B18000, 0x37B20000, 0x37B28000, 0x37B30000, 0x37B38000, 0x37B40000, 0x37B48000, 0x37B50000, 0x37B58000, 0x37B60000, 0x37B68000, 0x37B70000, 0x37B78000,
  0x37B80000, 0x37B88000, 0x37B90000, 0x37B98000, 0x37BA0000, 0x37BA8000, 0x37BB0000, 0x37BB8000, 0x37BC0000, 0x37BC8000, 0x37BD0000, 0x37BD8000, 0x37BE0000, 0x37BE8000, 0x37BF0000, 0x37BF8000,
  0x37C00000, 0x37C08000, 0x37C10000, 0x37C18000, 0x37C20000, 0x37C28000, 0x37C30000, 0x37C38000, 0x37C40000, 0x37C48000, 0x37C50000, 0x37C58000, 0x37C60000, 0x37C68000, 0x37C70000, 0x37C78000,
  0x37C80000, 0x37C88000, 0x37C90000, 0x37C98000, 0x37CA0000, 0x37CA8000, 0x37CB0000, 0x37CB8000, 0x37CC0000, 0x37CC8000, 0x37CD0000, 0x37CD8000, 0x37CE0000, 0x37CE8000, 0x37CF0000, 0x37CF8000,
  0x37D00000, 0x37D08000, 0x37D10000, 0x37D18000, 0x37D20000, 0x37D28000, 0x37D30000, 0x37D38000, 0x37D40000, 0x37D48000, 0x37D50000, 0x37D58000, 0x37D60000, 0x37D68000, 0x37D70000, 0x37D78000,
  0x37D80000, 0x37D88000, 0x37D90000, 0x37D98000, 0x37DA0000, 0x37DA8000, 0x37DB0000, 0x37DB8000, 0x37DC0000, 0x37DC8000, 0x37DD0000, 0x37DD8000, 0x37DE0000, 0x37DE8000, 0x37DF0000, 0x37DF8000,
  0x37E00000, 0x37E08000, 0x37E10000, 0x37E18000, 0x37E20000, 0x37E28000, 0x37E30000, 0x37E38000, 0x37E40000, 0x37E48000, 0x37E50000, 0x37E58000, 0x37E60000, 0x37E68000, 0x37E70000, 0x37E78000,
  0x37E80000, 0x37E88000, 0x37E90000, 0x37E98000, 0x37EA0000, 0x37EA8000, 0x37EB0000, 0x37EB8000, 0x37EC0000, 0x37EC8000, 0x37ED0000, 0x37ED8000, 0x37EE0000, 0x37EE8000, 0x37EF0000, 0x37EF8000,
  0x37F00000, 0x37F08000, 0x37F10000, 0x37F18000, 0x37F20000, 0x37F28000, 0x37F30000, 0x37F38000, 0x37F40000, 0x37F48000, 0x37F50000, 0x37F58000, 0x37F60000, 0x37F68000, 0x37F70000, 0x37F78000,
  0x37F80000, 0x37F88000, 0x37F90000, 0x37F98000, 0x37FA0000, 0x37FA8000, 0x37FB0000, 0x37FB8000, 0x37FC0000, 0x37FC8000, 0x37FD0000, 0x37FD8000, 0x37FE0000, 0x37FE8000, 0x37FF0000, 0x37FF8000,
  0x38000000, 0x38004000, 0x38008000, 0x3800C000, 0x38010000, 0x38014000, 0x38018000, 0x3801C000, 0x38020000, 0x38024000, 0x38028000, 0x3802C000, 0x38030000, 0x38034000, 0x38038000, 0x3803C000,
  0x38040000, 0x38044000, 0x38048000, 0x3804C000, 0x38050000, 0x38054000, 0x38058000, 0x3805C000, 0x38060000, 0x38064000, 0x38068000, 0x3806C000, 0x38070000, 0x38074000, 0x38078000, 0x3807C000,
  0x38080000, 0x38084000, 0x38088000, 0x3808C000, 0x38090000, 0x38094000, 0x38098000, 0x3809C000, 0x380A0000, 0x380A4000, 0x380A8000, 0x380AC000, 0x380B0000, 0x380B4000, 0x380B8000, 0x380BC000,
  0x380C0000, 0x380C4000, 0x380C8000, 0x380CC000, 0x380D0000, 0x380D4000, 0x380D8000, 0x380DC000, 0x380E0000, 0x380E4000, 0x380E8000, 0x380EC000, 0x380F0000, 0x380F4000, 0x380F8000, 0x380FC000,
  0x38100000, 0x38104000, 0x38108000, 0x3810C000, 0x38110000, 0x38114000, 0x38118000, 0x3811C000, 0x38120000, 0x38124000, 0x38128000, 0x3812C000, 0x38130000, 0x38134000, 0x38138000, 0x3813C000,
  0x38140000, 0x38144000, 0x38148000, 0x3814C000, 0x38150000, 0x38154000, 0x38158000, 0x3815C000, 0x38160000, 0x38164000, 0x38168000, 0x3816C000, 0x38170000, 0x38174000, 0x38178000, 0x3817C000,
  0x38180000, 0x38184000, 0x38188000, 0x3818C000, 0x38190000, 0x38194000, 0x38198000, 0x3819C000, 0x381A0000, 0x381A4000, 0x381A8000, 0x381AC000, 0x381B0000, 0x381B4000, 0x381B8000, 0x381BC000,
  0x381C0000, 0x381C4000, 0x381C8000, 0x381CC000, 0x381D0000, 0x381D4000, 0x381D8000, 0x381DC000, 0x381E0000, 0x381E4000, 0x381E8000, 0x381EC000, 0x381F0000, 0x381F4000, 0x381F8000, 0x381FC000,
  0x38200000, 0x38204000, 0x38208000, 0x3820C000, 0x38210000, 0x38214000, 0x38218000, 0x3821C000, 0x38220000, 0x38224000, 0x38228000, 0x3822C000, 0x38230000, 0x38234000, 0x38238000, 0x3823C000,
  0x38240000, 0x38244000, 0x38248000, 0x3824C000, 0x38250000, 0x38254000, 0x38258000, 0x3825C000, 0x38260000, 0x38264000, 0x38268000, 0x3826C000, 0x38270000, 0x38274000, 0x38278000, 0x3827C000,
  0x38280000, 0x38284000, 0x38288000, 0x3828C000, 0x38290000, 0x38294000, 0x38298000, 0x3829C000, 0x382A0000, 0x382A4000, 0x382A8000, 0x382AC000, 0x382B0000, 0x382B4000, 0x382B8000, 0x382BC000,
  0x382C0000, 0x382C4000, 0x382C8000, 0x382CC000, 0x382D0000, 0x382D4000, 0x382D8000, 0x382DC000, 0x382E0000, 0x382E4000, 0x382E8000, 0x382EC000, 0x382F0000, 0x382F4000, 0x382F8000, 0x382FC000,
  0x38300000, 0x38304000, 0x38308000, 0x3830C000, 0x38310000, 0x38314000, 0x38318000, 0x3831C000, 0x38320000, 0x38324000, 0x38328000, 0x3832C000, 0x38330000, 0x38334000, 0x38338000, 0x3833C000,
  0x38340000, 0x38344000, 0x38348000, 0x3834C000, 0x38350000, 0x38354000, 0x38358000, 0x3835C000, 0x38360000, 0x38364000, 0x38368000, 0x3836C000, 0x38370000, 0x38374000, 0x38378000, 0x3837C000,
  0x38380000, 0x38384000, 0x38388000, 0x3838C000, 0x38390000, 0x38394000, 0x38398000, 0x3839C000, 0x383A0000, 0x383A4000, 0x383A8000, 0x383AC000, 0x383B0000, 0x383B4000, 0x383B8000, 0x383BC000,
  0x383C0000, 0x383C4000, 0x383C8000, 0x383CC000, 0x383D0000, 0x383D4000, 0x383D8000, 0x383DC000, 0x383E0000, 0x383E4000, 0x383E8000, 0x383EC000, 0x383F0000, 0x383F4000, 0x383F8000, 0x383FC000,
  0x38400000, 0x38404000, 0x38408000, 0x3840C000, 0x38410000, 0x38414000, 0x38418000, 0x3841C000, 0x38420000, 0x38424000, 0x38428000, 0x3842C000, 0x38430000, 0x38434000, 0x38438000, 0x3843C000,
  0x38440000, 0x38444000, 0x38448000, 0x3844C000, 0x38450000, 0x38454000, 0x38458000, 0x3845C000, 0x38460000, 0x38464000, 0x38468000, 0x3846C000, 0x38470000, 0x38474000, 0x38478000, 0x3847C000,
  0x38480000, 0x38484000, 0x38488000, 0x3848C000, 0x38490000, 0x38494000, 0x38498000, 0x3849C000, 0x384A0000, 0x384A4000, 0x384A8000, 0x384AC000, 0x384B0000, 0x384B4000, 0x384B8000, 0x384BC000,
  0x384C0000, 0x384C4000, 0x384C8000, 0x384CC000, 0x384D0000, 0x384D4000, 0x384D8000, 0x384DC000, 0x384E0000, 0x384E4000, 0x384E8000, 0x384EC000, 0x384F0000, 0x384F4000, 0x384F8000, 0x384FC000,
  0x38500000, 0x38504000, 0x38508000, 0x3850C000, 0x38510000, 0x38514000, 0x38518000, 0x3851C000, 0x38520000, 0x38524000, 0x38528000, 0x3852C000, 0x38530000, 0x38534000, 0x38538000, 0x3853C000,
  0x38540000, 0x38544000, 0x38548000, 0x3854C000, 0x38550000, 0x38554000, 0x38558000, 0x3855C000, 0x38560000, 0x38564000, 0x38568000, 0x3856C000, 0x38570000, 0x38574000, 0x38578000, 0x3857C000,
  0x38580000, 0x38584000, 0x38588000, 0x3858C000, 0x38590000, 0x38594000, 0x38598000, 0x3859C000, 0x385A0000, 0x385A4000, 0x385A8000, 0x385AC000, 0x385B0000, 0x385B4000, 0x385B8000, 0x385BC000,
  0x385C0000, 0x385C4000, 0x385C8000, 0x385CC000, 0x385D0000, 0x385D4000, 0x385D8000, 0x385DC000, 0x385E0000, 0x385E4000, 0x385E8000, 0x385EC000, 0x385F0000, 0x385F4000, 0x385F8000, 0x385FC000,
  0x38600000, 0x38604000, 0x38608000, 0x3860C000, 0x38610000, 0x38614000, 0x38618000, 0x3861C000, 0x38620000, 0x38624000, 0x38628000, 0x3862C000, 0x38630000, 0x38634000, 0x38638000, 0x3863C000,
  0x38640000, 0x38644000, 0x38648000, 0x3864C000, 0x38650000, 0x38654000, 0x38658000, 0x3865C000, 0x38660000, 0x38664000, 0x38668000, 0x3866C000, 0x38670000, 0x38674000, 0x38678000, 0x3867C000,
  0x38680000, 0x38684000, 0x38688000, 0x3868C000, 0x38690000, 0x38694000, 0x38698000, 0x3869C000, 0x386A0000, 0x386A4000, 0x386A8000, 0x386AC000, 0x386B0000, 0x386B4000, 0x386B8000, 0x386BC000,
  0x386C0000, 0x386C4000, 0x386C8000, 0x386CC000, 0x386D0000, 0x386D4000, 0x386D8000, 0x386DC000, 0x386E0000, 0x386E4000, 0x386E8000, 0x386EC000, 0x386F0000, 0x386F4000, 0x386F8000, 0x386FC000,
  0x38700000, 0x38704000, 0x38708000, 0x3870C000, 0x38710000, 0x38714000, 0x38718000, 0x3871C000, 0x38720000, 0x38724000, 0x38728000, 0x3872C000, 0x38730000, 0x38734000, 0x38738000, 0x3873C000,
  0x38740000, 0x38744000, 0x38748000, 0x3874C000, 0x38750000, 0x38754000, 0x38758000, 0x3875C000, 0x38760000, 0x38764000, 0x38768000, 0x3876C000, 0x38770000, 0x38774000, 0x38778000, 0x3877C000,
  0x38780000, 0x38784000, 0x38788000, 0x3878C000, 0x38790000, 0x38794000, 0x38798000, 0x3879C000, 0x387A0000, 0x387A4000, 0x387A8000, 0x387AC000, 0x387B0000, 0x387B4000, 0x387B8000, 0x387BC000,
  0x387C0000, 0x387C4000, 0x387C8000, 0x387CC000, 0x387D0000, 0x387D4000, 0x387D8000, 0x387DC000, 0x387E0000, 0x387E4000, 0x387E8000, 0x387EC000, 0x387F0000, 0x387F4000, 0x387F8000, 0x387FC000,
  0x38000000, 0x38002000, 0x38004000, 0x38006000, 0x38008000, 0x3800A000, 0x3800C000, 0x3800E000, 0x38010000, 0x38012000, 0x38014000, 0x38016000, 0x38018000, 0x3801A000, 0x3801C000, 0x3801E000,
  0x38020000, 0x38022000, 0x38024000, 0x38026000, 0x38028000, 0x3802A000, 0x3802C000, 0x3802E000, 0x38030000, 0x38032000, 0x38034000, 0x38036000, 0x38038000, 0x3803A000, 0x3803C000, 0x3803E000,
  0x38040000, 0x38042000, 0x38044000, 0x38046000, 0x38048000, 0x3804A000, 0x3804C000, 0x3804E000, 0x38050000, 0x38052000, 0x38054000, 0x38056000, 0x38058000, 0x3805A000, 0x3805C000, 0x3805E000,
  0x38060000, 0x38062000, 0x38064000, 0x38066000, 0x38068000, 0x3806A000, 0x3806C000, 0x3806E000, 0x38070000, 0x38072000, 0x38074000, 0x38076000, 0x38078000, 0x3807A000, 0x3807C000, 0x3807E000,
  0x38080000, 0x38082000, 0x38084000, 0x38086000, 0x38088000, 0x3808A000, 0x3808C000, 0x3808E000, 0x38090000, 0x38092000, 0x38094000, 0x38096000, 0x38098000, 0x3809A000, 0x3809C000, 0x3809E000,
  0x380A0000, 0x380A2000, 0x380A4000, 0x380A6000, 0x380A8000, 0x380AA000, 0x380AC000, 0x380AE000, 0x380B0000, 0x380B2000, 0x380B4000, 0x380B6000, 0x380B8000, 0x380BA000, 0x380BC000, 0x380BE000,
  0x380C0000, 0x380C2000, 0x380C4000, 0x380C6000, 0x380C8000, 0x380CA000, 0x380CC000, 0x380CE000, 0x380D0000, 0x380D2000, 0x380D4000, 0x380D6000, 0x380D8000, 0x380DA000, 0x380DC000, 0x380DE000,
  0x380E0000, 0x380E2000, 0x380E4000, 0x380E6000, 0x380E8000, 0x380EA000, 0x380EC000, 0x380EE000, 0x380F0000, 0x380F2000, 0x380F4000, 0x380F6000, 0x380F8000, 0x380FA000, 0x380FC000, 0x380FE000,
  0x38100000, 0x38102000, 0x38104000, 0x38106000, 0x38108000, 0x3810A000, 0x3810C000, 0x3810E000, 0x38110000, 0x38112000, 0x38114000, 0x38116000, 0x38118000, 0x3811A000, 0x3811C000, 0x3811E000,
  0x38120000, 0x38122000, 0x38124000, 0x38126000, 0x38128000, 0x3812A000, 0x3812C000, 0x3812E000, 0x38130000, 0x38132000, 0x38134000, 0x38136000, 0x38138000, 0x3813A000, 0x3813C000, 0x3813E000,
  0x38140000, 0x38142000, 0x38144000, 0x38146000, 0x38148000, 0x3814A000, 0x3814C000, 0x3814E000, 0x38150000, 0x38152000, 0x38154000, 0x38156000, 0x38158000, 0x3815A000, 0x3815C000, 0x3815E000,
  0x38160000, 0x38162000, 0x38164000, 0x38166000, 0x38168000, 0x3816A000, 0x3816C000, 0x3816E000, 0x38170000, 0x38172000, 0x38174000, 0x38176000, 0x38178000, 0x3817A000, 0x3817C000, 0x3817E000,
  0x38180000, 0x38182000, 0x38184000, 0x38186000, 0x38188000, 0x3818A000, 0x3818C000, 0x3818E000, 0x38190000, 0x38192000, 0x38194000, 0x38196000, 0x38198000, 0x3819A000, 0x3819C000, 0x3819E000,
  0x381A0000, 0x381A2000, 0x381A4000, 0x381A6000, 0x381A8000, 0x381AA000, 0x381AC000, 0x381AE000, 0x381B0000, 0x381B2000, 0x381B4000, 0x381B6000, 0x381B8000, 0x381BA000, 0x381BC000, 0x381BE000,
  0x381C0000, 0x381C2000, 0x381C4000, 0x381C6000, 0x381C8000, 0x381CA000, 0x381CC000, 0x381CE000, 0x381D0000, 0x381D2000, 0x381D4000, 0x381D6000, 0x381D8000, 0x381DA000, 0x381DC000, 0x381DE000,
  0x381E0000, 0x381E2000, 0x381E4000, 0x381E6000, 0x381E8000, 0x381EA000, 0x381EC000, 0x381EE000, 0x381F0000, 0x381F2000, 0x381F4000, 0x381F6000, 0x381F8000, 0x381FA000, 0x381FC000, 0x381FE000,
  0x38200000, 0x38202000, 0x38204000, 0x38206000, 0x38208000, 0x3820A000, 0x3820C000, 0x3820E000, 0x38210000, 0x38212000, 0x38214000, 0x38216000, 0x38218000, 0x3821A000, 0x3821C000, 0x3821E000,
  0x38220000, 0x38222000, 0x38224000, 0x38226000, 0x38228000, 0x3822A000, 0x3822C000, 0x3822E000, 0x38230000, 0x38232000, 0x38234000, 0x38236000, 0x38238000, 0x3823A000, 0x3823C000, 0x3823E000,
  0x38240000, 0x38242000, 0x38244000, 0x38246000, 0x38248000, 0x3824A000, 0x3824C000, 0x3824E000, 0x38250000, 0x38252000, 0x38254000, 0x38256000, 0x38258000, 0x3825A000, 0x3825C000, 0x3825E000,
  0x38260000, 0x38262000, 0x38264000, 0x38266000, 0x38268000, 0x3826A000, 0x3826C000, 0x3826E000, 0x38270000, 0x38272000, 0x38274000, 0x38276000, 0x38278000, 0x3827A000, 0x3827C000, 0x3827E000,
  0x38280000, 0x38282000, 0x38284000, 0x38286000, 0x38288000, 0x3828A000, 0x3828C000, 0x3828E000, 0x38290000, 0x38292000, 0x38294000, 0x38296000, 0x38298000, 0x3829A000, 0x3829C000, 0x3829E000,
  0x382A0000, 0x382A2000, 0x382A4000, 0x382A6000, 0x382A8000, 0x382AA000, 0x382AC000, 0x382AE000, 0x382B0000, 0x382B2000, 0x382B4000, 0x382B6000, 0x382B8000, 0x382BA000, 0x382BC000, 0x382BE000,
  0x382C0000, 0x382C2000, 0x382C4000, 0x382C6000, 0x382C8000, 0x382CA000, 0x382CC000, 0x382CE000, 0x382D0000, 0x382D2000, 0x382D4000, 0x382D6000, 0x382D8000, 0x382DA000, 0x382DC000, 0x382DE000,
  0x382E0000, 0x382E2000, 0x382E4000, 0x382E6000, 0x382E8000, 0x382EA000, 0x382EC000, 0x382EE000, 0x382F0000, 0x382F2000, 0x382F4000, 0x382F6000, 0x382F8000, 0x382FA000, 0x382FC000, 0x382FE000,
  0x38300000, 0x38302000, 0x38304000, 0x38306000, 0x38308000, 0x3830A000, 0x3830C000, 0x3830E000, 0x38310000, 0x38312000, 0x38314000, 0x38316000, 0x38318000, 0x3831A000, 0x3831C000, 0x3831E000,
  0x38320000, 0x38322000, 0x38324000, 0x38326000, 0x38328000, 0x3832A000, 0x3832C000, 0x3832E000, 0x38330000, 0x38332000, 0x38334000, 0x38336000, 0x38338000, 0x3833A000, 0x3833C000, 0x3833E000,
  0x38340000, 0x38342000, 0x38344000, 0x38346000, 0x38348000, 0x3834A000, 0x3834C000, 0x3834E000, 0x38350000, 0x38352000, 0x38354000, 0x38356000, 0x38358000, 0x3835A000, 0x3835C000, 0x3835E000,
  0x38360000, 0x38362000, 0x38364000, 0x38366000, 0x38368000, 0x3836A000, 0x3836C000, 0x3836E000, 0x38370000, 0x38372000, 0x38374000, 0x38376000, 0x38378000, 0x3837A000, 0x3837C000, 0x3837E000,
  0x38380000, 0x38382000, 0x38384000, 0x38386000, 0x38388000, 0x3838A000, 0x3838C000, 0x3838E000, 0x38390000, 0x38392000, 0x38394000, 0x38396000, 0x38398000, 0x3839A000, 0x3839C000, 0x3839E000,
  0x383A0000, 0x383A2000, 0x383A4000, 0x383A6000, 0x383A8000, 0x383AA000, 0x383AC000, 0x383AE000, 0x383B0000, 0x383B2000, 0x383B4000, 0x383B6000, 0x383B8000, 0x383BA000, 0x383BC000, 0x383BE000,
  0x383C0000, 0x383C2000, 0x383C4000, 0x383C6000, 0x383C8000, 0x383CA000, 0x383CC000, 0x383CE000, 0x383D0000, 0x383D2000, 0x383D4000, 0x383D6000, 0x383D8000, 0x383DA000, 0x383DC000, 0x383DE000,
  0x383E0000, 0x383E2000, 0x383E4000, 0x383E6000, 0x383E8000, 0x383EA000, 0x383EC000, 0x383EE000, 0x383F0000, 0x383F2000, 0x383F4000, 0x383F6000, 0x383F8000, 0x383FA000, 0x383FC000, 0x383FE000,
  0x38400000, 0x38402000, 0x38404000, 0x38406000, 0x38408000, 0x3840A000, 0x3840C000, 0x3840E000, 0x38410000, 0x38412000, 0x38414000, 0x38416000, 0x38418000, 0x3841A000, 0x3841C000, 0x3841E000,
  0x38420000, 0x38422000, 0x38424000, 0x38426000, 0x38428000, 0x3842A000, 0x3842C000, 0x3842E000, 0x38430000, 0x38432000, 0x38434000, 0x38436000, 0x38438000, 0x3843A000, 0x3843C000, 0x3843E000,
  0x38440000, 0x38442000, 0x38444000, 0x38446000, 0x38448000, 0x3844A000, 0x3844C000, 0x3844E000, 0x38450000, 0x38452000, 0x38454000, 0x38456000, 0x38458000, 0x3845A000, 0x3845C000, 0x3845E000,
  0x38460000, 0x38462000, 0x38464000, 0x38466000, 0x38468000, 0x3846A000, 0x3846C000, 0x3846E000, 0x38470000, 0x38472000, 0x38474000, 0x38476000, 0x38478000, 0x3847A000, 0x3847C000, 0x3847E000,
  0x38480000, 0x38482000, 0x38484000, 0x38486000, 0x38488000, 0x3848A000, 0x3848C000, 0x3848E000, 0x38490000, 0x38492000, 0x38494000, 0x38496000, 0x38498000, 0x3849A000, 0x3849C000, 0x3849E000,
  0x384A0000, 0x384A2000, 0x384A4000, 0x384A6000, 0x384A8000, 0x384AA000, 0x384AC000, 0x384AE000, 0x384B0000, 0x384B2000, 0x384B4000, 0x384B6000, 0x384B8000, 0x384BA000, 0x384BC000, 0x384BE000,
  0x384C0000, 0x384C2000, 0x384C4000, 0x384C6000, 0x384C8000, 0x384CA000, 0x384CC000, 0x384CE000, 0x384D0000, 0x384D2000, 0x384D4000, 0x384D6000, 0x384D8000, 0x384DA000, 0x384DC000, 0x384DE000,
  0x384E0000, 0x384E2000, 0x384E4000, 0x384E6000, 0x384E8000, 0x384EA000, 0x384EC000, 0x384EE000, 0x384F0000, 0x384F2000, 0x384F4000, 0x384F6000, 0x384F8000, 0x384FA000, 0x384FC000, 0x384FE000,
  0x38500000, 0x38502000, 0x38504000, 0x38506000, 0x38508000, 0x3850A000, 0x3850C000, 0x3850E000, 0x38510000, 0x38512000, 0x38514000, 0x38516000, 0x38518000, 0x3851A000, 0x3851C000, 0x3851E000,
  0x38520000, 0x38522000, 0x38524000, 0x38526000, 0x38528000, 0x3852A000, 0x3852C000, 0x3852E000, 0x38530000, 0x38532000, 0x38534000, 0x38536000, 0x38538000, 0x3853A000, 0x3853C000, 0x3853E000,
  0x38540000, 0x38542000, 0x38544000, 0x38546000, 0x38548000, 0x3854A000, 0x3854C000, 0x3854E000, 0x38550000, 0x38552000, 0x38554000, 0x38556000, 0x38558000, 0x3855A000, 0x3855C000, 0x3855E000,
  0x38560000, 0x38562000, 0x38564000, 0x38566000, 0x38568000, 0x3856A000, 0x3856C000, 0x3856E000, 0x38570000, 0x38572000, 0x38574000, 0x38576000, 0x38578000, 0x3857A000, 0x3857C000, 0x3857E000,
  0x38580000, 0x38582000, 0x38584000, 0x38586000, 0x38588000, 0x3858A000, 0x3858C000, 0x3858E000, 0x38590000, 0x38592000, 0x38594000, 0x38596000, 0x38598000, 0x3859A000, 0x3859C000, 0x3859E000,
  0x385A0000, 0x385A2000, 0x385A4000, 0x385A6000, 0x385A8000, 0x385AA000, 0x385AC000, 0x385AE000, 0x385B0000, 0x385B2000, 0x385B4000, 0x385B6000, 0x385B8000, 0x385BA000, 0x385BC000, 0x385BE000,
  0x385C0000, 0x385C2000, 0x385C4000, 0x385C6000, 0x385C8000, 0x385CA000, 0x385CC000, 0x385CE000, 0x385D0000, 0x385D2000, 0x385D4000, 0x385D6000, 0x385D8000, 0x385DA000, 0x385DC000, 0x385DE000,
  0x385E0000, 0x385E2000, 0x385E4000, 0x385E6000, 0x385E8000, 0x385EA000, 0x385EC000, 0x385EE000, 0x385F0000, 0x385F2000, 0x385F4000, 0x385F6000, 0x385F8000, 0x385FA000, 0x385FC000, 0x385FE000,
  0x38600000, 0x38602000, 0x38604000, 0x38606000, 0x38608000, 0x3860A000, 0x3860C000, 0x3860E000, 0x38610000, 0x38612000, 0x38614000, 0x38616000, 0x38618000, 0x3861A000, 0x3861C000, 0x3861E000,
  0x38620000, 0x38622000, 0x38624000, 0x38626000, 0x38628000, 0x3862A000, 0x3862C000, 0x3862E000, 0x38630000, 0x38632000, 0x38634000, 0x38636000, 0x38638000, 0x3863A000, 0x3863C000, 0x3863E000,
  0x38640000, 0x38642000, 0x38644000, 0x38646000, 0x38648000, 0x3864A000, 0x3864C000, 0x3864E000, 0x38650000, 0x38652000, 0x38654000, 0x38656000, 0x38658000, 0x3865A000, 0x3865C000, 0x3865E000,
  0x38660000, 0x38662000, 0x38664000, 0x38666000, 0x38668000, 0x3866A000, 0x3866C000, 0x3866E000, 0x38670000, 0x38672000, 0x38674000, 0x38676000, 0x38678000, 0x3867A000, 0x3867C000, 0x3867E000,
  0x38680000, 0x38682000, 0x38684000, 0x38686000, 0x38688000, 0x3868A000, 0x3868C000, 0x3868E000, 0x38690000, 0x38692000, 0x38694000, 0x38696000, 0x38698000, 0x3869A000, 0x3869C000, 0x3869E000,
  0x386A0000, 0x386A2000, 0x386A4000, 0x386A6000, 0x386A8000, 0x386AA000, 0x386AC000, 0x386AE000, 0x386B0000, 0x386B2000, 0x386B4000, 0x386B6000, 0x386B8000, 0x386BA000, 0x386BC000, 0x386BE000,
  0x386C0000, 0x386C2000, 0x386C4000, 0x386C6000, 0x386C8000, 0x386CA000, 0x386CC000, 0x386CE000, 0x386D0000, 0x386D2000, 0x386D4000, 0x386D6000, 0x386D8000, 0x386DA000, 0x386DC000, 0x386DE000,
  0x386E0000, 0x386E2000, 0x386E4000, 0x386E6000, 0x386E8000, 0x386EA000, 0x386EC000, 0x386EE000, 0x386F0000, 0x386F2000, 0x386F4000, 0x386F6000, 0x386F8000, 0x386FA000, 0x386FC000, 0x386FE000,
  0x38700000, 0x38702000, 0x38704000, 0x38706000, 0x38708000, 0x3870A000, 0x3870C000, 0x3870E000, 0x38710000, 0x38712000, 0x38714000, 0x38716000, 0x38718000, 0x3871A000, 0x3871C000, 0x3871E000,
  0x38720000, 0x38722000, 0x38724000, 0x38726000, 0x38728000, 0x3872A000, 0x3872C000, 0x3872E000, 0x38730000, 0x38732000, 0x38734000, 0x38736000, 0x38738000, 0x3873A000, 0x3873C000, 0x3873E000,
  0x38740000, 0x38742000, 0x38744000, 0x38746000, 0x38748000, 0x3874A000, 0x3874C000, 0x3874E000, 0x38750000, 0x38752000, 0x38754000, 0x38756000, 0x38758000, 0x3875A000, 0x3875C000, 0x3875E000,
  0x38760000, 0x38762000, 0x38764000, 0x38766000, 0x38768000, 0x3876A000, 0x3876C000, 0x3876E000, 0x38770000, 0x38772000, 0x38774000, 0x38776000, 0x38778000, 0x3877A000, 0x3877C000, 0x3877E000,
  0x38780000, 0x38782000, 0x38784000, 0x38786000, 0x38788000, 0x3878A000, 0x3878C000, 0x3878E000, 0x38790000, 0x38792000, 0x38794000, 0x38796000, 0x38798000, 0x3879A000, 0x3879C000, 0x3879E000,
  0x387A0000, 0x387A2000, 0x387A4000, 0x387A6000, 0x387A8000, 0x387AA000, 0x387AC000, 0x387AE000, 0x387B0000, 0x387B2000, 0x387B4000, 0x387B6000, 0x387B8000, 0x387BA000, 0x387BC000, 0x387BE000,
  0x387C0000, 0x387C2000, 0x387C4000, 0x387C6000, 0x387C8000, 0x387CA000, 0x387CC000, 0x387CE000, 0x387D0000, 0x387D2000, 0x387D4000, 0x387D6000, 0x387D8000, 0x387DA000, 0x387DC000, 0x387DE000,
  0x387E0000, 0x387E2000, 0x387E4000, 0x387E6000, 0x387E8000, 0x387EA000, 0x387EC000, 0x387EE000, 0x387F0000, 0x387F2000, 0x387F4000, 0x387F6000, 0x387F8000, 0x387FA000, 0x387FC000, 0x387FE000 };
__constant static const uint32_t exponent_table[64] = {
  0x00000000, 0x00800000, 0x01000000, 0x01800000, 0x02000000, 0x02800000, 0x03000000, 0x03800000, 0x04000000, 0x04800000, 0x05000000, 0x05800000, 0x06000000, 0x06800000, 0x07000000, 0x07800000,
  0x08000000, 0x08800000, 0x09000000, 0x09800000, 0x0A000000, 0x0A800000, 0x0B000000, 0x0B800000, 0x0C000000, 0x0C800000, 0x0D000000, 0x0D800000, 0x0E000000, 0x0E800000, 0x0F000000, 0x47800000,
  0x80000000, 0x80800000, 0x81000000, 0x81800000, 0x82000000, 0x82800000, 0x83000000, 0x83800000, 0x84000000, 0x84800000, 0x85000000, 0x85800000, 0x86000000, 0x86800000, 0x87000000, 0x87800000,
  0x88000000, 0x88800000, 0x89000000, 0x89800000, 0x8A000000, 0x8A800000, 0x8B000000, 0x8B800000, 0x8C000000, 0x8C800000, 0x8D000000, 0x8D800000, 0x8E000000, 0x8E800000, 0x8F000000, 0xC7800000 };
__constant static const unsigned short offset_table[64] = {
  0, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
  0, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024 };

SCALAR_FUN_ATTR uint16_t float2halfbits(float value) {
  union { float x; uint32_t y; } u;
  u.x = value;
  uint32_t bits = u.y;

  uint16_t hbits = base_table[bits>>23] + (uint16_t)((bits&0x7FFFFF)>>shift_table[bits>>23]);;

  return hbits;
}

SCALAR_FUN_ATTR float halfbits2float(uint16_t value) {
  uint32_t bits = mantissa_table[offset_table[value>>10]+(value&0x3FF)] + exponent_table[value>>10];

  union { uint32_t x; float y; } u;
  u.x = bits;
  return u.y;
}

SCALAR_FUN_ATTR uint16_t halfbitsnextafter(uint16_t from, uint16_t to) {
  int fabs = from & 0x7FFF, tabs = to & 0x7FFF;
  if(fabs > 0x7C00 || tabs > 0x7C00) {
    return ((from&0x7FFF)>0x7C00) ? (from|0x200) : (to|0x200);
  }
  if(from == to || !(fabs|tabs)) {
    return to;
  }
  if(!fabs) {
    return (to&0x8000)+1;
  }
  unsigned int out =
    from +
    (((from>>15)^(unsigned int)((from^(0x8000|(0x8000-(from>>15))))<(to^(0x8000|(0x8000-(to>>15))))))<<1)
    - 1;
  return out;
}

// End of half.h.
// Start of scalar.h.

// Implementation of the primitive scalar operations.  Very
// repetitive.  This code is inserted directly into both CUDA and
// OpenCL programs, as well as the CPU code, so it has some #ifdefs to
// work everywhere.  Some operations are defined as macros because
// this allows us to use them as constant expressions in things like
// array sizes and static initialisers.

// Some of the #ifdefs are because OpenCL uses type-generic functions
// for some operations (e.g. sqrt), while C and CUDA sensibly use
// distinct functions for different precisions (e.g. sqrtf() and
// sqrt()).  This is quite annoying.  Due to C's unfortunate casting
// rules, it is also really easy to accidentally implement
// floating-point functions in the wrong precision, so be careful.

// Double-precision definitions are only included if the preprocessor
// macro FUTHARK_F64_ENABLED is set.

SCALAR_FUN_ATTR int32_t futrts_to_bits32(float x);
SCALAR_FUN_ATTR float futrts_from_bits32(int32_t x);

SCALAR_FUN_ATTR uint8_t add8(uint8_t x, uint8_t y) {
  return x + y;
}

SCALAR_FUN_ATTR uint16_t add16(uint16_t x, uint16_t y) {
  return x + y;
}

SCALAR_FUN_ATTR uint32_t add32(uint32_t x, uint32_t y) {
  return x + y;
}

SCALAR_FUN_ATTR uint64_t add64(uint64_t x, uint64_t y) {
  return x + y;
}

SCALAR_FUN_ATTR uint8_t sub8(uint8_t x, uint8_t y) {
  return x - y;
}

SCALAR_FUN_ATTR uint16_t sub16(uint16_t x, uint16_t y) {
  return x - y;
}

SCALAR_FUN_ATTR uint32_t sub32(uint32_t x, uint32_t y) {
  return x - y;
}

SCALAR_FUN_ATTR uint64_t sub64(uint64_t x, uint64_t y) {
  return x - y;
}

SCALAR_FUN_ATTR uint8_t mul8(uint8_t x, uint8_t y) {
  return x * y;
}

SCALAR_FUN_ATTR uint16_t mul16(uint16_t x, uint16_t y) {
  return x * y;
}

SCALAR_FUN_ATTR uint32_t mul32(uint32_t x, uint32_t y) {
  return x * y;
}

SCALAR_FUN_ATTR uint64_t mul64(uint64_t x, uint64_t y) {
  return x * y;
}

#if ISPC

SCALAR_FUN_ATTR uint8_t udiv8(uint8_t x, uint8_t y) {
  // This strange pattern is used to prevent the ISPC compiler from
  // causing SIGFPEs and bogus results on divisions where inactive lanes
  // have 0-valued divisors. It ensures that any inactive lane instead
  // has a divisor of 1. https://github.com/ispc/ispc/issues/2292
  uint8_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return x / ys;
}

SCALAR_FUN_ATTR uint16_t udiv16(uint16_t x, uint16_t y) {
  uint16_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return x / ys;
}

SCALAR_FUN_ATTR uint32_t udiv32(uint32_t x, uint32_t y) {
  uint32_t ys = 1;
  foreach_active(i){
    ys = y;
  }


  return x / ys;
}

SCALAR_FUN_ATTR uint64_t udiv64(uint64_t x, uint64_t y) {
  uint64_t ys = 1;
  foreach_active(i){
    ys = y;
  }


  return x / ys;
}

SCALAR_FUN_ATTR uint8_t udiv_up8(uint8_t x, uint8_t y) {
  uint8_t ys = 1;
  foreach_active(i){
    ys = y;
  }


  return (x + y - 1) / ys;
}

SCALAR_FUN_ATTR uint16_t udiv_up16(uint16_t x, uint16_t y) {
  uint16_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return (x + y - 1) / ys;
}

SCALAR_FUN_ATTR uint32_t udiv_up32(uint32_t x, uint32_t y) {
  uint32_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return (x + y - 1) / ys;
}

SCALAR_FUN_ATTR uint64_t udiv_up64(uint64_t x, uint64_t y) {
  uint64_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return (x + y - 1) / ys;
}

SCALAR_FUN_ATTR uint8_t umod8(uint8_t x, uint8_t y) {
  uint8_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return x % ys;
}

SCALAR_FUN_ATTR uint16_t umod16(uint16_t x, uint16_t y) {
  uint16_t ys = 1;
  foreach_active(i){
    ys = y;
  }


  return x % ys;
}

SCALAR_FUN_ATTR uint32_t umod32(uint32_t x, uint32_t y) {
  uint32_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return x % ys;
}

SCALAR_FUN_ATTR uint64_t umod64(uint64_t x, uint64_t y) {
  uint64_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return x % ys;
}

SCALAR_FUN_ATTR uint8_t udiv_safe8(uint8_t x, uint8_t y) {
  uint8_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return y == 0 ? 0 : x / ys;
}

SCALAR_FUN_ATTR uint16_t udiv_safe16(uint16_t x, uint16_t y) {
  uint16_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return y == 0 ? 0 : x / ys;
}

SCALAR_FUN_ATTR uint32_t udiv_safe32(uint32_t x, uint32_t y) {
  uint32_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return y == 0 ? 0 : x / ys;
}

SCALAR_FUN_ATTR uint64_t udiv_safe64(uint64_t x, uint64_t y) {
  uint64_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return y == 0 ? 0 : x / ys;
}

SCALAR_FUN_ATTR uint8_t udiv_up_safe8(uint8_t x, uint8_t y) {
  uint8_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return y == 0 ? 0 : (x + y - 1) / ys;
}

SCALAR_FUN_ATTR uint16_t udiv_up_safe16(uint16_t x, uint16_t y) {
  uint16_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return y == 0 ? 0 : (x + y - 1) / ys;
}

SCALAR_FUN_ATTR uint32_t udiv_up_safe32(uint32_t x, uint32_t y) {
  uint32_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return y == 0 ? 0 : (x + y - 1) / ys;
}

SCALAR_FUN_ATTR uint64_t udiv_up_safe64(uint64_t x, uint64_t y) {
  uint64_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return y == 0 ? 0 : (x + y - 1) / ys;
}

SCALAR_FUN_ATTR uint8_t umod_safe8(uint8_t x, uint8_t y) {
  uint8_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return y == 0 ? 0 : x % ys;
}

SCALAR_FUN_ATTR uint16_t umod_safe16(uint16_t x, uint16_t y) {
  uint16_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return y == 0 ? 0 : x % ys;
}

SCALAR_FUN_ATTR uint32_t umod_safe32(uint32_t x, uint32_t y) {
  uint32_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return y == 0 ? 0 : x % ys;
}

SCALAR_FUN_ATTR uint64_t umod_safe64(uint64_t x, uint64_t y) {
  uint64_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return y == 0 ? 0 : x % ys;
}

SCALAR_FUN_ATTR int8_t sdiv8(int8_t x, int8_t y) {
  int8_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  int8_t q = x / ys;
  int8_t r = x % ys;

  return q - ((r != 0 && r < 0 != y < 0) ? 1 : 0);
}

SCALAR_FUN_ATTR int16_t sdiv16(int16_t x, int16_t y) {
  int16_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  int16_t q = x / ys;
  int16_t r = x % ys;

  return q - ((r != 0 && r < 0 != y < 0) ? 1 : 0);
}

SCALAR_FUN_ATTR int32_t sdiv32(int32_t x, int32_t y) {
  int32_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  int32_t q = x / ys;
  int32_t r = x % ys;

  return q - ((r != 0 && r < 0 != y < 0) ? 1 : 0);
}

SCALAR_FUN_ATTR int64_t sdiv64(int64_t x, int64_t y) {
  int64_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  int64_t q = x / ys;
  int64_t r = x % ys;

  return q - ((r != 0 && r < 0 != y < 0) ? 1 : 0);
}

SCALAR_FUN_ATTR int8_t sdiv_up8(int8_t x, int8_t y) {
  return sdiv8(x + y - 1, y);
}

SCALAR_FUN_ATTR int16_t sdiv_up16(int16_t x, int16_t y) {
  return sdiv16(x + y - 1, y);
}

SCALAR_FUN_ATTR int32_t sdiv_up32(int32_t x, int32_t y) {
  return sdiv32(x + y - 1, y);
}

SCALAR_FUN_ATTR int64_t sdiv_up64(int64_t x, int64_t y) {
  return sdiv64(x + y - 1, y);
}

SCALAR_FUN_ATTR int8_t smod8(int8_t x, int8_t y) {
  int8_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  int8_t r = x % ys;

  return r + (r == 0 || (x > 0 && y > 0) || (x < 0 && y < 0) ? 0 : y);
}

SCALAR_FUN_ATTR int16_t smod16(int16_t x, int16_t y) {
  int16_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  int16_t r = x % ys;

  return r + (r == 0 || (x > 0 && y > 0) || (x < 0 && y < 0) ? 0 : y);
}

SCALAR_FUN_ATTR int32_t smod32(int32_t x, int32_t y) {
  int32_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  int32_t r = x % ys;

  return r + (r == 0 || (x > 0 && y > 0) || (x < 0 && y < 0) ? 0 : y);
}

SCALAR_FUN_ATTR int64_t smod64(int64_t x, int64_t y) {
  int64_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  int64_t r = x % ys;

  return r + (r == 0 || (x > 0 && y > 0) || (x < 0 && y < 0) ? 0 : y);
}

SCALAR_FUN_ATTR int8_t sdiv_safe8(int8_t x, int8_t y) {
  return y == 0 ? 0 : sdiv8(x, y);
}

SCALAR_FUN_ATTR int16_t sdiv_safe16(int16_t x, int16_t y) {
  return y == 0 ? 0 : sdiv16(x, y);
}

SCALAR_FUN_ATTR int32_t sdiv_safe32(int32_t x, int32_t y) {
  return y == 0 ? 0 : sdiv32(x, y);
}

SCALAR_FUN_ATTR int64_t sdiv_safe64(int64_t x, int64_t y) {
  return y == 0 ? 0 : sdiv64(x, y);
}

SCALAR_FUN_ATTR int8_t sdiv_up_safe8(int8_t x, int8_t y) {
  return sdiv_safe8(x + y - 1, y);
}

SCALAR_FUN_ATTR int16_t sdiv_up_safe16(int16_t x, int16_t y) {
  return sdiv_safe16(x + y - 1, y);
}

SCALAR_FUN_ATTR int32_t sdiv_up_safe32(int32_t x, int32_t y) {
  return sdiv_safe32(x + y - 1, y);
}

SCALAR_FUN_ATTR int64_t sdiv_up_safe64(int64_t x, int64_t y) {
  return sdiv_safe64(x + y - 1, y);
}

SCALAR_FUN_ATTR int8_t smod_safe8(int8_t x, int8_t y) {
  return y == 0 ? 0 : smod8(x, y);
}

SCALAR_FUN_ATTR int16_t smod_safe16(int16_t x, int16_t y) {
  return y == 0 ? 0 : smod16(x, y);
}

SCALAR_FUN_ATTR int32_t smod_safe32(int32_t x, int32_t y) {
  return y == 0 ? 0 : smod32(x, y);
}

SCALAR_FUN_ATTR int64_t smod_safe64(int64_t x, int64_t y) {
  return y == 0 ? 0 : smod64(x, y);
}

SCALAR_FUN_ATTR int8_t squot8(int8_t x, int8_t y) {
  int8_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return x / ys;
}

SCALAR_FUN_ATTR int16_t squot16(int16_t x, int16_t y) {
  int16_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return x / ys;
}

SCALAR_FUN_ATTR int32_t squot32(int32_t x, int32_t y) {
  int32_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return x / ys;
}

SCALAR_FUN_ATTR int64_t squot64(int64_t x, int64_t y) {
  int64_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return x / ys;
}

SCALAR_FUN_ATTR int8_t srem8(int8_t x, int8_t y) {
  int8_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return x % ys;
}

SCALAR_FUN_ATTR int16_t srem16(int16_t x, int16_t y) {
  int16_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return x % ys;
}

SCALAR_FUN_ATTR int32_t srem32(int32_t x, int32_t y) {
  int32_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return x % ys;
}

SCALAR_FUN_ATTR int64_t srem64(int64_t x, int64_t y) {
  int8_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return x % ys;
}

SCALAR_FUN_ATTR int8_t squot_safe8(int8_t x, int8_t y) {
  int8_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return y == 0 ? 0 : x / ys;
}

SCALAR_FUN_ATTR int16_t squot_safe16(int16_t x, int16_t y) {
  int16_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return y == 0 ? 0 : x / ys;
}

SCALAR_FUN_ATTR int32_t squot_safe32(int32_t x, int32_t y) {
  int32_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return y == 0 ? 0 : x / ys;
}

SCALAR_FUN_ATTR int64_t squot_safe64(int64_t x, int64_t y) {
  int64_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return y == 0 ? 0 : x / ys;
}

SCALAR_FUN_ATTR int8_t srem_safe8(int8_t x, int8_t y) {
  int8_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return y == 0 ? 0 : x % ys;
}

SCALAR_FUN_ATTR int16_t srem_safe16(int16_t x, int16_t y) {
  int16_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return y == 0 ? 0 : x % ys;
}

SCALAR_FUN_ATTR int32_t srem_safe32(int32_t x, int32_t y) {
  int32_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return y == 0 ? 0 : x % ys;
}

SCALAR_FUN_ATTR int64_t srem_safe64(int64_t x, int64_t y) {
  int64_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return y == 0 ? 0 : x % ys;
}

#else

SCALAR_FUN_ATTR uint8_t udiv8(uint8_t x, uint8_t y) {
  return x / y;
}

SCALAR_FUN_ATTR uint16_t udiv16(uint16_t x, uint16_t y) {
  return x / y;
}

SCALAR_FUN_ATTR uint32_t udiv32(uint32_t x, uint32_t y) {
  return x / y;
}

SCALAR_FUN_ATTR uint64_t udiv64(uint64_t x, uint64_t y) {
  return x / y;
}

SCALAR_FUN_ATTR uint8_t udiv_up8(uint8_t x, uint8_t y) {
  return (x + y - 1) / y;
}

SCALAR_FUN_ATTR uint16_t udiv_up16(uint16_t x, uint16_t y) {
  return (x + y - 1) / y;
}

SCALAR_FUN_ATTR uint32_t udiv_up32(uint32_t x, uint32_t y) {
  return (x + y - 1) / y;
}

SCALAR_FUN_ATTR uint64_t udiv_up64(uint64_t x, uint64_t y) {
  return (x + y - 1) / y;
}

SCALAR_FUN_ATTR uint8_t umod8(uint8_t x, uint8_t y) {
  return x % y;
}

SCALAR_FUN_ATTR uint16_t umod16(uint16_t x, uint16_t y) {
  return x % y;
}

SCALAR_FUN_ATTR uint32_t umod32(uint32_t x, uint32_t y) {
  return x % y;
}

SCALAR_FUN_ATTR uint64_t umod64(uint64_t x, uint64_t y) {
  return x % y;
}

SCALAR_FUN_ATTR uint8_t udiv_safe8(uint8_t x, uint8_t y) {
  return y == 0 ? 0 : x / y;
}

SCALAR_FUN_ATTR uint16_t udiv_safe16(uint16_t x, uint16_t y) {
  return y == 0 ? 0 : x / y;
}

SCALAR_FUN_ATTR uint32_t udiv_safe32(uint32_t x, uint32_t y) {
  return y == 0 ? 0 : x / y;
}

SCALAR_FUN_ATTR uint64_t udiv_safe64(uint64_t x, uint64_t y) {
  return y == 0 ? 0 : x / y;
}

SCALAR_FUN_ATTR uint8_t udiv_up_safe8(uint8_t x, uint8_t y) {
  return y == 0 ? 0 : (x + y - 1) / y;
}

SCALAR_FUN_ATTR uint16_t udiv_up_safe16(uint16_t x, uint16_t y) {
  return y == 0 ? 0 : (x + y - 1) / y;
}

SCALAR_FUN_ATTR uint32_t udiv_up_safe32(uint32_t x, uint32_t y) {
  return y == 0 ? 0 : (x + y - 1) / y;
}

SCALAR_FUN_ATTR uint64_t udiv_up_safe64(uint64_t x, uint64_t y) {
  return y == 0 ? 0 : (x + y - 1) / y;
}

SCALAR_FUN_ATTR uint8_t umod_safe8(uint8_t x, uint8_t y) {
  return y == 0 ? 0 : x % y;
}

SCALAR_FUN_ATTR uint16_t umod_safe16(uint16_t x, uint16_t y) {
  return y == 0 ? 0 : x % y;
}

SCALAR_FUN_ATTR uint32_t umod_safe32(uint32_t x, uint32_t y) {
  return y == 0 ? 0 : x % y;
}

SCALAR_FUN_ATTR uint64_t umod_safe64(uint64_t x, uint64_t y) {
  return y == 0 ? 0 : x % y;
}

SCALAR_FUN_ATTR int8_t sdiv8(int8_t x, int8_t y) {
  int8_t q = x / y;
  int8_t r = x % y;

  return q - ((r != 0 && r < 0 != y < 0) ? 1 : 0);
}

SCALAR_FUN_ATTR int16_t sdiv16(int16_t x, int16_t y) {
  int16_t q = x / y;
  int16_t r = x % y;

  return q - ((r != 0 && r < 0 != y < 0) ? 1 : 0);
}

SCALAR_FUN_ATTR int32_t sdiv32(int32_t x, int32_t y) {
  int32_t q = x / y;
  int32_t r = x % y;

  return q - ((r != 0 && r < 0 != y < 0) ? 1 : 0);
}

SCALAR_FUN_ATTR int64_t sdiv64(int64_t x, int64_t y) {
  int64_t q = x / y;
  int64_t r = x % y;

  return q - ((r != 0 && r < 0 != y < 0) ? 1 : 0);
}

SCALAR_FUN_ATTR int8_t sdiv_up8(int8_t x, int8_t y) {
  return sdiv8(x + y - 1, y);
}

SCALAR_FUN_ATTR int16_t sdiv_up16(int16_t x, int16_t y) {
  return sdiv16(x + y - 1, y);
}

SCALAR_FUN_ATTR int32_t sdiv_up32(int32_t x, int32_t y) {
  return sdiv32(x + y - 1, y);
}

SCALAR_FUN_ATTR int64_t sdiv_up64(int64_t x, int64_t y) {
  return sdiv64(x + y - 1, y);
}

SCALAR_FUN_ATTR int8_t smod8(int8_t x, int8_t y) {
  int8_t r = x % y;

  return r + (r == 0 || (x > 0 && y > 0) || (x < 0 && y < 0) ? 0 : y);
}

SCALAR_FUN_ATTR int16_t smod16(int16_t x, int16_t y) {
  int16_t r = x % y;

  return r + (r == 0 || (x > 0 && y > 0) || (x < 0 && y < 0) ? 0 : y);
}

SCALAR_FUN_ATTR int32_t smod32(int32_t x, int32_t y) {
  int32_t r = x % y;

  return r + (r == 0 || (x > 0 && y > 0) || (x < 0 && y < 0) ? 0 : y);
}

SCALAR_FUN_ATTR int64_t smod64(int64_t x, int64_t y) {
  int64_t r = x % y;

  return r + (r == 0 || (x > 0 && y > 0) || (x < 0 && y < 0) ? 0 : y);
}

SCALAR_FUN_ATTR int8_t sdiv_safe8(int8_t x, int8_t y) {
  return y == 0 ? 0 : sdiv8(x, y);
}

SCALAR_FUN_ATTR int16_t sdiv_safe16(int16_t x, int16_t y) {
  return y == 0 ? 0 : sdiv16(x, y);
}

SCALAR_FUN_ATTR int32_t sdiv_safe32(int32_t x, int32_t y) {
  return y == 0 ? 0 : sdiv32(x, y);
}

SCALAR_FUN_ATTR int64_t sdiv_safe64(int64_t x, int64_t y) {
  return y == 0 ? 0 : sdiv64(x, y);
}

SCALAR_FUN_ATTR int8_t sdiv_up_safe8(int8_t x, int8_t y) {
  return sdiv_safe8(x + y - 1, y);
}

SCALAR_FUN_ATTR int16_t sdiv_up_safe16(int16_t x, int16_t y) {
  return sdiv_safe16(x + y - 1, y);
}

SCALAR_FUN_ATTR int32_t sdiv_up_safe32(int32_t x, int32_t y) {
  return sdiv_safe32(x + y - 1, y);
}

SCALAR_FUN_ATTR int64_t sdiv_up_safe64(int64_t x, int64_t y) {
  return sdiv_safe64(x + y - 1, y);
}

SCALAR_FUN_ATTR int8_t smod_safe8(int8_t x, int8_t y) {
  return y == 0 ? 0 : smod8(x, y);
}

SCALAR_FUN_ATTR int16_t smod_safe16(int16_t x, int16_t y) {
  return y == 0 ? 0 : smod16(x, y);
}

SCALAR_FUN_ATTR int32_t smod_safe32(int32_t x, int32_t y) {
  return y == 0 ? 0 : smod32(x, y);
}

SCALAR_FUN_ATTR int64_t smod_safe64(int64_t x, int64_t y) {
  return y == 0 ? 0 : smod64(x, y);
}

SCALAR_FUN_ATTR int8_t squot8(int8_t x, int8_t y) {
  return x / y;
}

SCALAR_FUN_ATTR int16_t squot16(int16_t x, int16_t y) {
  return x / y;
}

SCALAR_FUN_ATTR int32_t squot32(int32_t x, int32_t y) {
  return x / y;
}

SCALAR_FUN_ATTR int64_t squot64(int64_t x, int64_t y) {
  return x / y;
}

SCALAR_FUN_ATTR int8_t srem8(int8_t x, int8_t y) {
  return x % y;
}

SCALAR_FUN_ATTR int16_t srem16(int16_t x, int16_t y) {
  return x % y;
}

SCALAR_FUN_ATTR int32_t srem32(int32_t x, int32_t y) {
  return x % y;
}

SCALAR_FUN_ATTR int64_t srem64(int64_t x, int64_t y) {
  return x % y;
}

SCALAR_FUN_ATTR int8_t squot_safe8(int8_t x, int8_t y) {
  return y == 0 ? 0 : x / y;
}

SCALAR_FUN_ATTR int16_t squot_safe16(int16_t x, int16_t y) {
  return y == 0 ? 0 : x / y;
}

SCALAR_FUN_ATTR int32_t squot_safe32(int32_t x, int32_t y) {
  return y == 0 ? 0 : x / y;
}

SCALAR_FUN_ATTR int64_t squot_safe64(int64_t x, int64_t y) {
  return y == 0 ? 0 : x / y;
}

SCALAR_FUN_ATTR int8_t srem_safe8(int8_t x, int8_t y) {
  return y == 0 ? 0 : x % y;
}

SCALAR_FUN_ATTR int16_t srem_safe16(int16_t x, int16_t y) {
  return y == 0 ? 0 : x % y;
}

SCALAR_FUN_ATTR int32_t srem_safe32(int32_t x, int32_t y) {
  return y == 0 ? 0 : x % y;
}

SCALAR_FUN_ATTR int64_t srem_safe64(int64_t x, int64_t y) {
  return y == 0 ? 0 : x % y;
}

#endif

SCALAR_FUN_ATTR int8_t smin8(int8_t x, int8_t y) {
  return x < y ? x : y;
}

SCALAR_FUN_ATTR int16_t smin16(int16_t x, int16_t y) {
  return x < y ? x : y;
}

SCALAR_FUN_ATTR int32_t smin32(int32_t x, int32_t y) {
  return x < y ? x : y;
}

SCALAR_FUN_ATTR int64_t smin64(int64_t x, int64_t y) {
  return x < y ? x : y;
}

SCALAR_FUN_ATTR uint8_t umin8(uint8_t x, uint8_t y) {
  return x < y ? x : y;
}

SCALAR_FUN_ATTR uint16_t umin16(uint16_t x, uint16_t y) {
  return x < y ? x : y;
}

SCALAR_FUN_ATTR uint32_t umin32(uint32_t x, uint32_t y) {
  return x < y ? x : y;
}

SCALAR_FUN_ATTR uint64_t umin64(uint64_t x, uint64_t y) {
  return x < y ? x : y;
}

SCALAR_FUN_ATTR int8_t smax8(int8_t x, int8_t y) {
  return x < y ? y : x;
}

SCALAR_FUN_ATTR int16_t smax16(int16_t x, int16_t y) {
  return x < y ? y : x;
}

SCALAR_FUN_ATTR int32_t smax32(int32_t x, int32_t y) {
  return x < y ? y : x;
}

SCALAR_FUN_ATTR int64_t smax64(int64_t x, int64_t y) {
  return x < y ? y : x;
}

SCALAR_FUN_ATTR uint8_t umax8(uint8_t x, uint8_t y) {
  return x < y ? y : x;
}

SCALAR_FUN_ATTR uint16_t umax16(uint16_t x, uint16_t y) {
  return x < y ? y : x;
}

SCALAR_FUN_ATTR uint32_t umax32(uint32_t x, uint32_t y) {
  return x < y ? y : x;
}

SCALAR_FUN_ATTR uint64_t umax64(uint64_t x, uint64_t y) {
  return x < y ? y : x;
}

SCALAR_FUN_ATTR uint8_t shl8(uint8_t x, uint8_t y) {
  return (uint8_t)(x << y);
}

SCALAR_FUN_ATTR uint16_t shl16(uint16_t x, uint16_t y) {
  return (uint16_t)(x << y);
}

SCALAR_FUN_ATTR uint32_t shl32(uint32_t x, uint32_t y) {
  return x << y;
}

SCALAR_FUN_ATTR uint64_t shl64(uint64_t x, uint64_t y) {
  return x << y;
}

SCALAR_FUN_ATTR uint8_t lshr8(uint8_t x, uint8_t y) {
  return x >> y;
}

SCALAR_FUN_ATTR uint16_t lshr16(uint16_t x, uint16_t y) {
  return x >> y;
}

SCALAR_FUN_ATTR uint32_t lshr32(uint32_t x, uint32_t y) {
  return x >> y;
}

SCALAR_FUN_ATTR uint64_t lshr64(uint64_t x, uint64_t y) {
  return x >> y;
}

SCALAR_FUN_ATTR int8_t ashr8(int8_t x, int8_t y) {
  return x >> y;
}

SCALAR_FUN_ATTR int16_t ashr16(int16_t x, int16_t y) {
  return x >> y;
}

SCALAR_FUN_ATTR int32_t ashr32(int32_t x, int32_t y) {
  return x >> y;
}

SCALAR_FUN_ATTR int64_t ashr64(int64_t x, int64_t y) {
  return x >> y;
}

SCALAR_FUN_ATTR uint8_t and8(uint8_t x, uint8_t y) {
  return x & y;
}

SCALAR_FUN_ATTR uint16_t and16(uint16_t x, uint16_t y) {
  return x & y;
}

SCALAR_FUN_ATTR uint32_t and32(uint32_t x, uint32_t y) {
  return x & y;
}

SCALAR_FUN_ATTR uint64_t and64(uint64_t x, uint64_t y) {
  return x & y;
}

SCALAR_FUN_ATTR uint8_t or8(uint8_t x, uint8_t y) {
  return x | y;
}

SCALAR_FUN_ATTR uint16_t or16(uint16_t x, uint16_t y) {
  return x | y;
}

SCALAR_FUN_ATTR uint32_t or32(uint32_t x, uint32_t y) {
  return x | y;
}

SCALAR_FUN_ATTR uint64_t or64(uint64_t x, uint64_t y) {
  return x | y;
}

SCALAR_FUN_ATTR uint8_t xor8(uint8_t x, uint8_t y) {
  return x ^ y;
}

SCALAR_FUN_ATTR uint16_t xor16(uint16_t x, uint16_t y) {
  return x ^ y;
}

SCALAR_FUN_ATTR uint32_t xor32(uint32_t x, uint32_t y) {
  return x ^ y;
}

SCALAR_FUN_ATTR uint64_t xor64(uint64_t x, uint64_t y) {
  return x ^ y;
}

SCALAR_FUN_ATTR bool ult8(uint8_t x, uint8_t y) {
  return x < y;
}

SCALAR_FUN_ATTR bool ult16(uint16_t x, uint16_t y) {
  return x < y;
}

SCALAR_FUN_ATTR bool ult32(uint32_t x, uint32_t y) {
  return x < y;
}

SCALAR_FUN_ATTR bool ult64(uint64_t x, uint64_t y) {
  return x < y;
}

SCALAR_FUN_ATTR bool ule8(uint8_t x, uint8_t y) {
  return x <= y;
}

SCALAR_FUN_ATTR bool ule16(uint16_t x, uint16_t y) {
  return x <= y;
}

SCALAR_FUN_ATTR bool ule32(uint32_t x, uint32_t y) {
  return x <= y;
}

SCALAR_FUN_ATTR bool ule64(uint64_t x, uint64_t y) {
  return x <= y;
}

SCALAR_FUN_ATTR bool slt8(int8_t x, int8_t y) {
  return x < y;
}

SCALAR_FUN_ATTR bool slt16(int16_t x, int16_t y) {
  return x < y;
}

SCALAR_FUN_ATTR bool slt32(int32_t x, int32_t y) {
  return x < y;
}

SCALAR_FUN_ATTR bool slt64(int64_t x, int64_t y) {
  return x < y;
}

SCALAR_FUN_ATTR bool sle8(int8_t x, int8_t y) {
  return x <= y;
}

SCALAR_FUN_ATTR bool sle16(int16_t x, int16_t y) {
  return x <= y;
}

SCALAR_FUN_ATTR bool sle32(int32_t x, int32_t y) {
  return x <= y;
}

SCALAR_FUN_ATTR bool sle64(int64_t x, int64_t y) {
  return x <= y;
}

SCALAR_FUN_ATTR uint8_t pow8(uint8_t x, uint8_t y) {
  uint8_t res = 1, rem = y;

  while (rem != 0) {
    if (rem & 1)
      res *= x;
    rem >>= 1;
    x *= x;
  }
  return res;
}

SCALAR_FUN_ATTR uint16_t pow16(uint16_t x, uint16_t y) {
  uint16_t res = 1, rem = y;

  while (rem != 0) {
    if (rem & 1)
      res *= x;
    rem >>= 1;
    x *= x;
  }
  return res;
}

SCALAR_FUN_ATTR uint32_t pow32(uint32_t x, uint32_t y) {
  uint32_t res = 1, rem = y;

  while (rem != 0) {
    if (rem & 1)
      res *= x;
    rem >>= 1;
    x *= x;
  }
  return res;
}

SCALAR_FUN_ATTR uint64_t pow64(uint64_t x, uint64_t y) {
  uint64_t res = 1, rem = y;

  while (rem != 0) {
    if (rem & 1)
      res *= x;
    rem >>= 1;
    x *= x;
  }
  return res;
}

SCALAR_FUN_ATTR bool itob_i8_bool(int8_t x) {
  return x != 0;
}

SCALAR_FUN_ATTR bool itob_i16_bool(int16_t x) {
  return x != 0;
}

SCALAR_FUN_ATTR bool itob_i32_bool(int32_t x) {
  return x != 0;
}

SCALAR_FUN_ATTR bool itob_i64_bool(int64_t x) {
  return x != 0;
}

SCALAR_FUN_ATTR int8_t btoi_bool_i8(bool x) {
  return x;
}

SCALAR_FUN_ATTR int16_t btoi_bool_i16(bool x) {
  return x;
}

SCALAR_FUN_ATTR int32_t btoi_bool_i32(bool x) {
  return x;
}

SCALAR_FUN_ATTR int64_t btoi_bool_i64(bool x) {
  return x;
}

#define sext_i8_i8(x) ((int8_t) (int8_t) (x))
#define sext_i8_i16(x) ((int16_t) (int8_t) (x))
#define sext_i8_i32(x) ((int32_t) (int8_t) (x))
#define sext_i8_i64(x) ((int64_t) (int8_t) (x))
#define sext_i16_i8(x) ((int8_t) (int16_t) (x))
#define sext_i16_i16(x) ((int16_t) (int16_t) (x))
#define sext_i16_i32(x) ((int32_t) (int16_t) (x))
#define sext_i16_i64(x) ((int64_t) (int16_t) (x))
#define sext_i32_i8(x) ((int8_t) (int32_t) (x))
#define sext_i32_i16(x) ((int16_t) (int32_t) (x))
#define sext_i32_i32(x) ((int32_t) (int32_t) (x))
#define sext_i32_i64(x) ((int64_t) (int32_t) (x))
#define sext_i64_i8(x) ((int8_t) (int64_t) (x))
#define sext_i64_i16(x) ((int16_t) (int64_t) (x))
#define sext_i64_i32(x) ((int32_t) (int64_t) (x))
#define sext_i64_i64(x) ((int64_t) (int64_t) (x))
#define zext_i8_i8(x) ((int8_t) (uint8_t) (x))
#define zext_i8_i16(x) ((int16_t) (uint8_t) (x))
#define zext_i8_i32(x) ((int32_t) (uint8_t) (x))
#define zext_i8_i64(x) ((int64_t) (uint8_t) (x))
#define zext_i16_i8(x) ((int8_t) (uint16_t) (x))
#define zext_i16_i16(x) ((int16_t) (uint16_t) (x))
#define zext_i16_i32(x) ((int32_t) (uint16_t) (x))
#define zext_i16_i64(x) ((int64_t) (uint16_t) (x))
#define zext_i32_i8(x) ((int8_t) (uint32_t) (x))
#define zext_i32_i16(x) ((int16_t) (uint32_t) (x))
#define zext_i32_i32(x) ((int32_t) (uint32_t) (x))
#define zext_i32_i64(x) ((int64_t) (uint32_t) (x))
#define zext_i64_i8(x) ((int8_t) (uint64_t) (x))
#define zext_i64_i16(x) ((int16_t) (uint64_t) (x))
#define zext_i64_i32(x) ((int32_t) (uint64_t) (x))
#define zext_i64_i64(x) ((int64_t) (uint64_t) (x))

SCALAR_FUN_ATTR int8_t abs8(int8_t x) {
  return (int8_t)abs(x);
}

SCALAR_FUN_ATTR int16_t abs16(int16_t x) {
  return (int16_t)abs(x);
}

SCALAR_FUN_ATTR int32_t abs32(int32_t x) {
  return abs(x);
}

SCALAR_FUN_ATTR int64_t abs64(int64_t x) {
#if defined(__OPENCL_VERSION__) || defined(ISPC)
  return abs(x);
#else
  return llabs(x);
#endif
}

#if defined(__OPENCL_VERSION__)
SCALAR_FUN_ATTR int32_t futrts_popc8(int8_t x) {
  return popcount(x);
}

SCALAR_FUN_ATTR int32_t futrts_popc16(int16_t x) {
  return popcount(x);
}

SCALAR_FUN_ATTR int32_t futrts_popc32(int32_t x) {
  return popcount(x);
}

SCALAR_FUN_ATTR int32_t futrts_popc64(int64_t x) {
  return popcount(x);
}
#elif defined(__CUDA_ARCH__)

SCALAR_FUN_ATTR int32_t futrts_popc8(int8_t x) {
  return __popc(zext_i8_i32(x));
}

SCALAR_FUN_ATTR int32_t futrts_popc16(int16_t x) {
  return __popc(zext_i16_i32(x));
}

SCALAR_FUN_ATTR int32_t futrts_popc32(int32_t x) {
  return __popc(x);
}

SCALAR_FUN_ATTR int32_t futrts_popc64(int64_t x) {
  return __popcll(x);
}

#else // Not OpenCL or CUDA, but plain C.

SCALAR_FUN_ATTR int32_t futrts_popc8(uint8_t x) {
  int c = 0;
  for (; x; ++c) { x &= x - 1; }
  return c;
}

SCALAR_FUN_ATTR int32_t futrts_popc16(uint16_t x) {
  int c = 0;
  for (; x; ++c) { x &= x - 1; }
  return c;
}

SCALAR_FUN_ATTR int32_t futrts_popc32(uint32_t x) {
  int c = 0;
  for (; x; ++c) { x &= x - 1; }
  return c;
}

SCALAR_FUN_ATTR int32_t futrts_popc64(uint64_t x) {
  int c = 0;
  for (; x; ++c) { x &= x - 1; }
  return c;
}
#endif

#if defined(__OPENCL_VERSION__)
SCALAR_FUN_ATTR uint8_t  futrts_umul_hi8 ( uint8_t a,  uint8_t b) { return mul_hi(a, b); }
SCALAR_FUN_ATTR uint16_t futrts_umul_hi16(uint16_t a, uint16_t b) { return mul_hi(a, b); }
SCALAR_FUN_ATTR uint32_t futrts_umul_hi32(uint32_t a, uint32_t b) { return mul_hi(a, b); }
SCALAR_FUN_ATTR uint64_t futrts_umul_hi64(uint64_t a, uint64_t b) { return mul_hi(a, b); }
SCALAR_FUN_ATTR uint8_t  futrts_smul_hi8 ( int8_t a,  int8_t b) { return mul_hi(a, b); }
SCALAR_FUN_ATTR uint16_t futrts_smul_hi16(int16_t a, int16_t b) { return mul_hi(a, b); }
SCALAR_FUN_ATTR uint32_t futrts_smul_hi32(int32_t a, int32_t b) { return mul_hi(a, b); }
SCALAR_FUN_ATTR uint64_t futrts_smul_hi64(int64_t a, int64_t b) { return mul_hi(a, b); }
#elif defined(__CUDA_ARCH__)
SCALAR_FUN_ATTR  uint8_t futrts_umul_hi8(uint8_t a, uint8_t b) { return ((uint16_t)a) * ((uint16_t)b) >> 8; }
SCALAR_FUN_ATTR uint16_t futrts_umul_hi16(uint16_t a, uint16_t b) { return ((uint32_t)a) * ((uint32_t)b) >> 16; }
SCALAR_FUN_ATTR uint32_t futrts_umul_hi32(uint32_t a, uint32_t b) { return __umulhi(a, b); }
SCALAR_FUN_ATTR uint64_t futrts_umul_hi64(uint64_t a, uint64_t b) { return __umul64hi(a, b); }
SCALAR_FUN_ATTR  uint8_t futrts_smul_hi8 ( int8_t a, int8_t b) { return ((int16_t)a) * ((int16_t)b) >> 8; }
SCALAR_FUN_ATTR uint16_t futrts_smul_hi16(int16_t a, int16_t b) { return ((int32_t)a) * ((int32_t)b) >> 16; }
SCALAR_FUN_ATTR uint32_t futrts_smul_hi32(int32_t a, int32_t b) { return __mulhi(a, b); }
SCALAR_FUN_ATTR uint64_t futrts_smul_hi64(int64_t a, int64_t b) { return __mul64hi(a, b); }
#elif ISPC
SCALAR_FUN_ATTR uint8_t futrts_umul_hi8(uint8_t a, uint8_t b) { return ((uint16_t)a) * ((uint16_t)b) >> 8; }
SCALAR_FUN_ATTR uint16_t futrts_umul_hi16(uint16_t a, uint16_t b) { return ((uint32_t)a) * ((uint32_t)b) >> 16; }
SCALAR_FUN_ATTR uint32_t futrts_umul_hi32(uint32_t a, uint32_t b) { return ((uint64_t)a) * ((uint64_t)b) >> 32; }
SCALAR_FUN_ATTR uint64_t futrts_umul_hi64(uint64_t a, uint64_t b) {
  uint64_t ah = a >> 32;
  uint64_t al = a & 0xffffffff;
  uint64_t bh = b >> 32;
  uint64_t bl = b & 0xffffffff;

  uint64_t p1 = al * bl;
  uint64_t p2 = al * bh;
  uint64_t p3 = ah * bl;
  uint64_t p4 = ah * bh;

  uint64_t p1h = p1 >> 32;
  uint64_t p2h = p2 >> 32;
  uint64_t p3h = p3 >> 32;
  uint64_t p2l = p2 & 0xffffffff;
  uint64_t p3l = p3 & 0xffffffff;

  uint64_t l = p1h + p2l + p3l;
  uint64_t m = (p2 >> 32) + (p3 >> 32);
  uint64_t h = (l >> 32) + m + p4;

  return h;
}
SCALAR_FUN_ATTR  int8_t futrts_smul_hi8 ( int8_t a,  int8_t b) { return ((uint16_t)a) * ((uint16_t)b) >> 8; }
SCALAR_FUN_ATTR int16_t futrts_smul_hi16(int16_t a, int16_t b) { return ((uint32_t)a) * ((uint32_t)b) >> 16; }
SCALAR_FUN_ATTR int32_t futrts_smul_hi32(int32_t a, int32_t b) { return ((uint64_t)a) * ((uint64_t)b) >> 32; }
SCALAR_FUN_ATTR int64_t futrts_smul_hi64(int64_t a, int64_t b) {
  uint64_t ah = a >> 32;
  uint64_t al = a & 0xffffffff;
  uint64_t bh = b >> 32;
  uint64_t bl = b & 0xffffffff;

  uint64_t p1 =  al * bl;
  int64_t  p2 = al * bh;
  int64_t  p3 = ah * bl;
  uint64_t p4 =  ah * bh;

  uint64_t p1h = p1 >> 32;
  uint64_t p2h = p2 >> 32;
  uint64_t p3h = p3 >> 32;
  uint64_t p2l = p2 & 0xffffffff;
  uint64_t p3l = p3 & 0xffffffff;

  uint64_t l = p1h + p2l + p3l;
  uint64_t m = (p2 >> 32) + (p3 >> 32);
  uint64_t h = (l >> 32) + m + p4;

  return h;
}

#else // Not OpenCL, ISPC, or CUDA, but plain C.
SCALAR_FUN_ATTR uint8_t futrts_umul_hi8(uint8_t a, uint8_t b) { return ((uint16_t)a) * ((uint16_t)b) >> 8; }
SCALAR_FUN_ATTR uint16_t futrts_umul_hi16(uint16_t a, uint16_t b) { return ((uint32_t)a) * ((uint32_t)b) >> 16; }
SCALAR_FUN_ATTR uint32_t futrts_umul_hi32(uint32_t a, uint32_t b) { return ((uint64_t)a) * ((uint64_t)b) >> 32; }
SCALAR_FUN_ATTR uint64_t futrts_umul_hi64(uint64_t a, uint64_t b) { return ((__uint128_t)a) * ((__uint128_t)b) >> 64; }
SCALAR_FUN_ATTR int8_t futrts_smul_hi8(int8_t a, int8_t b) { return ((int16_t)a) * ((int16_t)b) >> 8; }
SCALAR_FUN_ATTR int16_t futrts_smul_hi16(int16_t a, int16_t b) { return ((int32_t)a) * ((int32_t)b) >> 16; }
SCALAR_FUN_ATTR int32_t futrts_smul_hi32(int32_t a, int32_t b) { return ((int64_t)a) * ((int64_t)b) >> 32; }
SCALAR_FUN_ATTR int64_t futrts_smul_hi64(int64_t a, int64_t b) { return ((__int128_t)a) * ((__int128_t)b) >> 64; }
#endif

#if defined(__OPENCL_VERSION__)
SCALAR_FUN_ATTR  uint8_t futrts_umad_hi8 ( uint8_t a,  uint8_t b,  uint8_t c) { return mad_hi(a, b, c); }
SCALAR_FUN_ATTR uint16_t futrts_umad_hi16(uint16_t a, uint16_t b, uint16_t c) { return mad_hi(a, b, c); }
SCALAR_FUN_ATTR uint32_t futrts_umad_hi32(uint32_t a, uint32_t b, uint32_t c) { return mad_hi(a, b, c); }
SCALAR_FUN_ATTR uint64_t futrts_umad_hi64(uint64_t a, uint64_t b, uint64_t c) { return mad_hi(a, b, c); }
SCALAR_FUN_ATTR  uint8_t futrts_smad_hi8( int8_t a,  int8_t b,   int8_t c) { return mad_hi(a, b, c); }
SCALAR_FUN_ATTR uint16_t futrts_smad_hi16(int16_t a, int16_t b, int16_t c) { return mad_hi(a, b, c); }
SCALAR_FUN_ATTR uint32_t futrts_smad_hi32(int32_t a, int32_t b, int32_t c) { return mad_hi(a, b, c); }
SCALAR_FUN_ATTR uint64_t futrts_smad_hi64(int64_t a, int64_t b, int64_t c) { return mad_hi(a, b, c); }
#else // Not OpenCL

SCALAR_FUN_ATTR  uint8_t futrts_umad_hi8( uint8_t a,  uint8_t b,  uint8_t c) { return futrts_umul_hi8(a, b) + c; }
SCALAR_FUN_ATTR uint16_t futrts_umad_hi16(uint16_t a, uint16_t b, uint16_t c) { return futrts_umul_hi16(a, b) + c; }
SCALAR_FUN_ATTR uint32_t futrts_umad_hi32(uint32_t a, uint32_t b, uint32_t c) { return futrts_umul_hi32(a, b) + c; }
SCALAR_FUN_ATTR uint64_t futrts_umad_hi64(uint64_t a, uint64_t b, uint64_t c) { return futrts_umul_hi64(a, b) + c; }
SCALAR_FUN_ATTR  uint8_t futrts_smad_hi8 ( int8_t a,  int8_t b,  int8_t c) { return futrts_smul_hi8(a, b) + c; }
SCALAR_FUN_ATTR uint16_t futrts_smad_hi16(int16_t a, int16_t b, int16_t c) { return futrts_smul_hi16(a, b) + c; }
SCALAR_FUN_ATTR uint32_t futrts_smad_hi32(int32_t a, int32_t b, int32_t c) { return futrts_smul_hi32(a, b) + c; }
SCALAR_FUN_ATTR uint64_t futrts_smad_hi64(int64_t a, int64_t b, int64_t c) { return futrts_smul_hi64(a, b) + c; }
#endif

#if defined(__OPENCL_VERSION__)
SCALAR_FUN_ATTR int32_t futrts_clzz8(int8_t x) {
  return clz(x);
}

SCALAR_FUN_ATTR int32_t futrts_clzz16(int16_t x) {
  return clz(x);
}

SCALAR_FUN_ATTR int32_t futrts_clzz32(int32_t x) {
  return clz(x);
}

SCALAR_FUN_ATTR int32_t futrts_clzz64(int64_t x) {
  return clz(x);
}

#elif defined(__CUDA_ARCH__)

SCALAR_FUN_ATTR int32_t futrts_clzz8(int8_t x) {
  return __clz(zext_i8_i32(x)) - 24;
}

SCALAR_FUN_ATTR int32_t futrts_clzz16(int16_t x) {
  return __clz(zext_i16_i32(x)) - 16;
}

SCALAR_FUN_ATTR int32_t futrts_clzz32(int32_t x) {
  return __clz(x);
}

SCALAR_FUN_ATTR int32_t futrts_clzz64(int64_t x) {
  return __clzll(x);
}

#elif ISPC

SCALAR_FUN_ATTR int32_t futrts_clzz8(int8_t x) {
  return count_leading_zeros((int32_t)(uint8_t)x)-24;
}

SCALAR_FUN_ATTR int32_t futrts_clzz16(int16_t x) {
  return count_leading_zeros((int32_t)(uint16_t)x)-16;
}

SCALAR_FUN_ATTR int32_t futrts_clzz32(int32_t x) {
  return count_leading_zeros(x);
}

SCALAR_FUN_ATTR int32_t futrts_clzz64(int64_t x) {
  return count_leading_zeros(x);
}

#else // Not OpenCL, ISPC or CUDA, but plain C.

SCALAR_FUN_ATTR int32_t futrts_clzz8(int8_t x) {
  return x == 0 ? 8 : __builtin_clz((uint32_t)zext_i8_i32(x)) - 24;
}

SCALAR_FUN_ATTR int32_t futrts_clzz16(int16_t x) {
  return x == 0 ? 16 : __builtin_clz((uint32_t)zext_i16_i32(x)) - 16;
}

SCALAR_FUN_ATTR int32_t futrts_clzz32(int32_t x) {
  return x == 0 ? 32 : __builtin_clz((uint32_t)x);
}

SCALAR_FUN_ATTR int32_t futrts_clzz64(int64_t x) {
  return x == 0 ? 64 : __builtin_clzll((uint64_t)x);
}
#endif

#if defined(__OPENCL_VERSION__)
SCALAR_FUN_ATTR int32_t futrts_ctzz8(int8_t x) {
  int i = 0;
  for (; i < 8 && (x & 1) == 0; i++, x >>= 1)
    ;
  return i;
}

SCALAR_FUN_ATTR int32_t futrts_ctzz16(int16_t x) {
  int i = 0;
  for (; i < 16 && (x & 1) == 0; i++, x >>= 1)
    ;
  return i;
}

SCALAR_FUN_ATTR int32_t futrts_ctzz32(int32_t x) {
  int i = 0;
  for (; i < 32 && (x & 1) == 0; i++, x >>= 1)
    ;
  return i;
}

SCALAR_FUN_ATTR int32_t futrts_ctzz64(int64_t x) {
  int i = 0;
  for (; i < 64 && (x & 1) == 0; i++, x >>= 1)
    ;
  return i;
}

#elif defined(__CUDA_ARCH__)

SCALAR_FUN_ATTR int32_t futrts_ctzz8(int8_t x) {
  int y = __ffs(x);
  return y == 0 ? 8 : y - 1;
}

SCALAR_FUN_ATTR int32_t futrts_ctzz16(int16_t x) {
  int y = __ffs(x);
  return y == 0 ? 16 : y - 1;
}

SCALAR_FUN_ATTR int32_t futrts_ctzz32(int32_t x) {
  int y = __ffs(x);
  return y == 0 ? 32 : y - 1;
}

SCALAR_FUN_ATTR int32_t futrts_ctzz64(int64_t x) {
  int y = __ffsll(x);
  return y == 0 ? 64 : y - 1;
}

#elif ISPC

SCALAR_FUN_ATTR int32_t futrts_ctzz8(int8_t x) {
  return x == 0 ? 8 : count_trailing_zeros((int32_t)x);
}

SCALAR_FUN_ATTR int32_t futrts_ctzz16(int16_t x) {
  return x == 0 ? 16 : count_trailing_zeros((int32_t)x);
}

SCALAR_FUN_ATTR int32_t futrts_ctzz32(int32_t x) {
  return count_trailing_zeros(x);
}

SCALAR_FUN_ATTR int32_t futrts_ctzz64(int64_t x) {
  return count_trailing_zeros(x);
}

#else // Not OpenCL or CUDA, but plain C.

SCALAR_FUN_ATTR int32_t futrts_ctzz8(int8_t x) {
  return x == 0 ? 8 : __builtin_ctz((uint32_t)x);
}

SCALAR_FUN_ATTR int32_t futrts_ctzz16(int16_t x) {
  return x == 0 ? 16 : __builtin_ctz((uint32_t)x);
}

SCALAR_FUN_ATTR int32_t futrts_ctzz32(int32_t x) {
  return x == 0 ? 32 : __builtin_ctz((uint32_t)x);
}

SCALAR_FUN_ATTR int32_t futrts_ctzz64(int64_t x) {
  return x == 0 ? 64 : __builtin_ctzll((uint64_t)x);
}
#endif

SCALAR_FUN_ATTR float fdiv32(float x, float y) {
  return x / y;
}

SCALAR_FUN_ATTR float fadd32(float x, float y) {
  return x + y;
}

SCALAR_FUN_ATTR float fsub32(float x, float y) {
  return x - y;
}

SCALAR_FUN_ATTR float fmul32(float x, float y) {
  return x * y;
}

SCALAR_FUN_ATTR bool cmplt32(float x, float y) {
  return x < y;
}

SCALAR_FUN_ATTR bool cmple32(float x, float y) {
  return x <= y;
}

SCALAR_FUN_ATTR float sitofp_i8_f32(int8_t x) {
  return (float) x;
}

SCALAR_FUN_ATTR float sitofp_i16_f32(int16_t x) {
  return (float) x;
}

SCALAR_FUN_ATTR float sitofp_i32_f32(int32_t x) {
  return (float) x;
}

SCALAR_FUN_ATTR float sitofp_i64_f32(int64_t x) {
  return (float) x;
}

SCALAR_FUN_ATTR float uitofp_i8_f32(uint8_t x) {
  return (float) x;
}

SCALAR_FUN_ATTR float uitofp_i16_f32(uint16_t x) {
  return (float) x;
}

SCALAR_FUN_ATTR float uitofp_i32_f32(uint32_t x) {
  return (float) x;
}

SCALAR_FUN_ATTR float uitofp_i64_f32(uint64_t x) {
  return (float) x;
}

#ifdef __OPENCL_VERSION__
SCALAR_FUN_ATTR float fabs32(float x) {
  return fabs(x);
}

SCALAR_FUN_ATTR float fmax32(float x, float y) {
  return fmax(x, y);
}

SCALAR_FUN_ATTR float fmin32(float x, float y) {
  return fmin(x, y);
}

SCALAR_FUN_ATTR float fpow32(float x, float y) {
  return pow(x, y);
}

#elif ISPC

SCALAR_FUN_ATTR float fabs32(float x) {
  return abs(x);
}

SCALAR_FUN_ATTR float fmax32(float x, float y) {
  return isnan(x) ? y : isnan(y) ? x : max(x, y);
}

SCALAR_FUN_ATTR float fmin32(float x, float y) {
  return isnan(x) ? y : isnan(y) ? x : min(x, y);
}

SCALAR_FUN_ATTR float fpow32(float a, float b) {
  float ret;
  foreach_active (i) {
      uniform float r = __stdlib_powf(extract(a, i), extract(b, i));
      ret = insert(ret, i, r);
  }
  return ret;
}

#else // Not OpenCL, but CUDA or plain C.

SCALAR_FUN_ATTR float fabs32(float x) {
  return fabsf(x);
}

SCALAR_FUN_ATTR float fmax32(float x, float y) {
  return fmaxf(x, y);
}

SCALAR_FUN_ATTR float fmin32(float x, float y) {
  return fminf(x, y);
}

SCALAR_FUN_ATTR float fpow32(float x, float y) {
  return powf(x, y);
}
#endif

SCALAR_FUN_ATTR bool futrts_isnan32(float x) {
  return isnan(x);
}

#if ISPC

SCALAR_FUN_ATTR bool futrts_isinf32(float x) {
  return !isnan(x) && isnan(x - x);
}

SCALAR_FUN_ATTR bool futrts_isfinite32(float x) {
  return !isnan(x) && !futrts_isinf32(x);
}

#else

SCALAR_FUN_ATTR bool futrts_isinf32(float x) {
  return isinf(x);
}

#endif

SCALAR_FUN_ATTR int8_t fptosi_f32_i8(float x) {
  if (futrts_isnan32(x) || futrts_isinf32(x)) {
    return 0;
  } else {
    return (int8_t) x;
  }
}

SCALAR_FUN_ATTR int16_t fptosi_f32_i16(float x) {
  if (futrts_isnan32(x) || futrts_isinf32(x)) {
    return 0;
  } else {
    return (int16_t) x;
  }
}

SCALAR_FUN_ATTR int32_t fptosi_f32_i32(float x) {
  if (futrts_isnan32(x) || futrts_isinf32(x)) {
    return 0;
  } else {
    return (int32_t) x;
  }
}

SCALAR_FUN_ATTR int64_t fptosi_f32_i64(float x) {
  if (futrts_isnan32(x) || futrts_isinf32(x)) {
    return 0;
  } else {
    return (int64_t) x;
  };
}

SCALAR_FUN_ATTR uint8_t fptoui_f32_i8(float x) {
  if (futrts_isnan32(x) || futrts_isinf32(x)) {
    return 0;
  } else {
    return (uint8_t) (int8_t) x;
  }
}

SCALAR_FUN_ATTR uint16_t fptoui_f32_i16(float x) {
  if (futrts_isnan32(x) || futrts_isinf32(x)) {
    return 0;
  } else {
    return (uint16_t) (int16_t) x;
  }
}

SCALAR_FUN_ATTR uint32_t fptoui_f32_i32(float x) {
  if (futrts_isnan32(x) || futrts_isinf32(x)) {
    return 0;
  } else {
    return (uint32_t) (int32_t) x;
  }
}

SCALAR_FUN_ATTR uint64_t fptoui_f32_i64(float x) {
  if (futrts_isnan32(x) || futrts_isinf32(x)) {
    return 0;
  } else {
    return (uint64_t) (int64_t) x;
  }
}

SCALAR_FUN_ATTR bool ftob_f32_bool(float x) {
  return x != 0;
}

SCALAR_FUN_ATTR float btof_bool_f32(bool x) {
  return x ? 1 : 0;
}

#ifdef __OPENCL_VERSION__
SCALAR_FUN_ATTR float futrts_log32(float x) {
  return log(x);
}

SCALAR_FUN_ATTR float futrts_log2_32(float x) {
  return log2(x);
}

SCALAR_FUN_ATTR float futrts_log10_32(float x) {
  return log10(x);
}

SCALAR_FUN_ATTR float futrts_log1p_32(float x) {
  return log1p(x);
}

SCALAR_FUN_ATTR float futrts_sqrt32(float x) {
  return sqrt(x);
}

SCALAR_FUN_ATTR float futrts_cbrt32(float x) {
  return cbrt(x);
}

SCALAR_FUN_ATTR float futrts_exp32(float x) {
  return exp(x);
}

SCALAR_FUN_ATTR float futrts_cos32(float x) {
  return cos(x);
}

SCALAR_FUN_ATTR float futrts_sin32(float x) {
  return sin(x);
}

SCALAR_FUN_ATTR float futrts_tan32(float x) {
  return tan(x);
}

SCALAR_FUN_ATTR float futrts_acos32(float x) {
  return acos(x);
}

SCALAR_FUN_ATTR float futrts_asin32(float x) {
  return asin(x);
}

SCALAR_FUN_ATTR float futrts_atan32(float x) {
  return atan(x);
}

SCALAR_FUN_ATTR float futrts_cosh32(float x) {
  return cosh(x);
}

SCALAR_FUN_ATTR float futrts_sinh32(float x) {
  return sinh(x);
}

SCALAR_FUN_ATTR float futrts_tanh32(float x) {
  return tanh(x);
}

SCALAR_FUN_ATTR float futrts_acosh32(float x) {
  return acosh(x);
}

SCALAR_FUN_ATTR float futrts_asinh32(float x) {
  return asinh(x);
}

SCALAR_FUN_ATTR float futrts_atanh32(float x) {
  return atanh(x);
}

SCALAR_FUN_ATTR float futrts_atan2_32(float x, float y) {
  return atan2(x, y);
}

SCALAR_FUN_ATTR float futrts_hypot32(float x, float y) {
  return hypot(x, y);
}

SCALAR_FUN_ATTR float futrts_gamma32(float x) {
  return tgamma(x);
}

SCALAR_FUN_ATTR float futrts_lgamma32(float x) {
  return lgamma(x);
}

SCALAR_FUN_ATTR float futrts_erf32(float x) {
  return erf(x);
}

SCALAR_FUN_ATTR float futrts_erfc32(float x) {
  return erfc(x);
}

SCALAR_FUN_ATTR float fmod32(float x, float y) {
  return fmod(x, y);
}

SCALAR_FUN_ATTR float futrts_round32(float x) {
  return rint(x);
}

SCALAR_FUN_ATTR float futrts_floor32(float x) {
  return floor(x);
}

SCALAR_FUN_ATTR float futrts_ceil32(float x) {
  return ceil(x);
}

SCALAR_FUN_ATTR float futrts_nextafter32(float x, float y) {
  return nextafter(x, y);
}

SCALAR_FUN_ATTR float futrts_lerp32(float v0, float v1, float t) {
  return mix(v0, v1, t);
}

SCALAR_FUN_ATTR float futrts_ldexp32(float x, int32_t y) {
  return ldexp(x, y);
}

SCALAR_FUN_ATTR float futrts_copysign32(float x, float y) {
  return copysign(x, y);
}

SCALAR_FUN_ATTR float futrts_mad32(float a, float b, float c) {
  return mad(a, b, c);
}

SCALAR_FUN_ATTR float futrts_fma32(float a, float b, float c) {
  return fma(a, b, c);
}

#elif ISPC

SCALAR_FUN_ATTR float futrts_log32(float x) {
  return futrts_isfinite32(x) || (futrts_isinf32(x) && x < 0)? log(x) : x;
}

SCALAR_FUN_ATTR float futrts_log2_32(float x) {
  return futrts_log32(x) / log(2.0f);
}

SCALAR_FUN_ATTR float futrts_log10_32(float x) {
  return futrts_log32(x) / log(10.0f);
}

SCALAR_FUN_ATTR float futrts_log1p_32(float x) {
  if(x == -1.0f || (futrts_isinf32(x) && x > 0.0f)) return x / 0.0f;
  float y = 1.0f + x;
  float z = y - 1.0f;
  return log(y) - (z-x)/y;
}

SCALAR_FUN_ATTR float futrts_sqrt32(float x) {
  return sqrt(x);
}

extern "C" unmasked uniform float cbrtf(uniform float);
SCALAR_FUN_ATTR float futrts_cbrt32(float x) {
  float res;
  foreach_active (i) {
    uniform float r = cbrtf(extract(x, i));
    res = insert(res, i, r);
  }
  return res;
}

SCALAR_FUN_ATTR float futrts_exp32(float x) {
  return exp(x);
}

SCALAR_FUN_ATTR float futrts_cos32(float x) {
  return cos(x);
}

SCALAR_FUN_ATTR float futrts_sin32(float x) {
  return sin(x);
}

SCALAR_FUN_ATTR float futrts_tan32(float x) {
  return tan(x);
}

SCALAR_FUN_ATTR float futrts_acos32(float x) {
  return acos(x);
}

SCALAR_FUN_ATTR float futrts_asin32(float x) {
  return asin(x);
}

SCALAR_FUN_ATTR float futrts_atan32(float x) {
  return atan(x);
}

SCALAR_FUN_ATTR float futrts_cosh32(float x) {
  return (exp(x)+exp(-x)) / 2.0f;
}

SCALAR_FUN_ATTR float futrts_sinh32(float x) {
  return (exp(x)-exp(-x)) / 2.0f;
}

SCALAR_FUN_ATTR float futrts_tanh32(float x) {
  return futrts_sinh32(x)/futrts_cosh32(x);
}

SCALAR_FUN_ATTR float futrts_acosh32(float x) {
  float f = x+sqrt(x*x-1);
  if(futrts_isfinite32(f)) return log(f);
  return f;
}

SCALAR_FUN_ATTR float futrts_asinh32(float x) {
  float f = x+sqrt(x*x+1);
  if(futrts_isfinite32(f)) return log(f);
  return f;

}

SCALAR_FUN_ATTR float futrts_atanh32(float x) {
  float f = (1+x)/(1-x);
  if(futrts_isfinite32(f)) return log(f)/2.0f;
  return f;

}

SCALAR_FUN_ATTR float futrts_atan2_32(float x, float y) {
  return (x == 0.0f && y == 0.0f) ? 0.0f : atan2(x, y);
}

SCALAR_FUN_ATTR float futrts_hypot32(float x, float y) {
  if (futrts_isfinite32(x) && futrts_isfinite32(y)) {
    x = abs(x);
    y = abs(y);
    float a;
    float b;
    if (x >= y){
        a = x;
        b = y;
    } else {
        a = y;
        b = x;
    }
    if(b == 0){
      return a;
    }

    int e;
    float an;
    float bn;
    an = frexp (a, &e);
    bn = ldexp (b, - e);
    float cn;
    cn = sqrt (an * an + bn * bn);
    return ldexp (cn, e);
  } else {
    if (futrts_isinf32(x) || futrts_isinf32(y)) return INFINITY;
    else return x + y;
  }

}

extern "C" unmasked uniform float tgammaf(uniform float x);
SCALAR_FUN_ATTR float futrts_gamma32(float x) {
  float res;
  foreach_active (i) {
    uniform float r = tgammaf(extract(x, i));
    res = insert(res, i, r);
  }
  return res;
}

extern "C" unmasked uniform float lgammaf(uniform float x);
SCALAR_FUN_ATTR float futrts_lgamma32(float x) {
  float res;
  foreach_active (i) {
    uniform float r = lgammaf(extract(x, i));
    res = insert(res, i, r);
  }
  return res;
}

extern "C" unmasked uniform float erff(uniform float x);
SCALAR_FUN_ATTR float futrts_erf32(float x) {
  float res;
  foreach_active (i) {
    uniform float r = erff(extract(x, i));
    res = insert(res, i, r);
  }
  return res;
}

extern "C" unmasked uniform float erfcf(uniform float x);
SCALAR_FUN_ATTR float futrts_erfc32(float x) {
  float res;
  foreach_active (i) {
    uniform float r = erfcf(extract(x, i));
    res = insert(res, i, r);
  }
  return res;
}

SCALAR_FUN_ATTR float fmod32(float x, float y) {
  return x - y * trunc(x/y);
}

SCALAR_FUN_ATTR float futrts_round32(float x) {
  return round(x);
}

SCALAR_FUN_ATTR float futrts_floor32(float x) {
  return floor(x);
}

SCALAR_FUN_ATTR float futrts_ceil32(float x) {
  return ceil(x);
}

extern "C" unmasked uniform float nextafterf(uniform float x, uniform float y);
SCALAR_FUN_ATTR float futrts_nextafter32(float x, float y) {
  float res;
  foreach_active (i) {
    uniform float r = nextafterf(extract(x, i), extract(y, i));
    res = insert(res, i, r);
  }
  return res;
}

SCALAR_FUN_ATTR float futrts_lerp32(float v0, float v1, float t) {
  return v0 + (v1 - v0) * t;
}

SCALAR_FUN_ATTR float futrts_ldexp32(float x, int32_t y) {
  return x * pow((double)2.0, (double)y);
}

SCALAR_FUN_ATTR float futrts_copysign32(float x, float y) {
  int32_t xb = futrts_to_bits32(x);
  int32_t yb = futrts_to_bits32(y);
  return futrts_from_bits32((xb & ~(1<<31)) | (yb & (1<<31)));
}

SCALAR_FUN_ATTR float futrts_mad32(float a, float b, float c) {
  return a * b + c;
}

SCALAR_FUN_ATTR float futrts_fma32(float a, float b, float c) {
  return a * b + c;
}

#else // Not OpenCL or ISPC, but CUDA or plain C.

SCALAR_FUN_ATTR float futrts_log32(float x) {
  return logf(x);
}

SCALAR_FUN_ATTR float futrts_log2_32(float x) {
  return log2f(x);
}

SCALAR_FUN_ATTR float futrts_log10_32(float x) {
  return log10f(x);
}

SCALAR_FUN_ATTR float futrts_log1p_32(float x) {
  return log1pf(x);
}

SCALAR_FUN_ATTR float futrts_sqrt32(float x) {
  return sqrtf(x);
}

SCALAR_FUN_ATTR float futrts_cbrt32(float x) {
  return cbrtf(x);
}

SCALAR_FUN_ATTR float futrts_exp32(float x) {
  return expf(x);
}

SCALAR_FUN_ATTR float futrts_cos32(float x) {
  return cosf(x);
}

SCALAR_FUN_ATTR float futrts_sin32(float x) {
  return sinf(x);
}

SCALAR_FUN_ATTR float futrts_tan32(float x) {
  return tanf(x);
}

SCALAR_FUN_ATTR float futrts_acos32(float x) {
  return acosf(x);
}

SCALAR_FUN_ATTR float futrts_asin32(float x) {
  return asinf(x);
}

SCALAR_FUN_ATTR float futrts_atan32(float x) {
  return atanf(x);
}

SCALAR_FUN_ATTR float futrts_cosh32(float x) {
  return coshf(x);
}

SCALAR_FUN_ATTR float futrts_sinh32(float x) {
  return sinhf(x);
}

SCALAR_FUN_ATTR float futrts_tanh32(float x) {
  return tanhf(x);
}

SCALAR_FUN_ATTR float futrts_acosh32(float x) {
  return acoshf(x);
}

SCALAR_FUN_ATTR float futrts_asinh32(float x) {
  return asinhf(x);
}

SCALAR_FUN_ATTR float futrts_atanh32(float x) {
  return atanhf(x);
}

SCALAR_FUN_ATTR float futrts_atan2_32(float x, float y) {
  return atan2f(x, y);
}

SCALAR_FUN_ATTR float futrts_hypot32(float x, float y) {
  return hypotf(x, y);
}

SCALAR_FUN_ATTR float futrts_gamma32(float x) {
  return tgammaf(x);
}

SCALAR_FUN_ATTR float futrts_lgamma32(float x) {
  return lgammaf(x);
}

SCALAR_FUN_ATTR float futrts_erf32(float x) {
  return erff(x);
}

SCALAR_FUN_ATTR float futrts_erfc32(float x) {
  return erfcf(x);
}

SCALAR_FUN_ATTR float fmod32(float x, float y) {
  return fmodf(x, y);
}

SCALAR_FUN_ATTR float futrts_round32(float x) {
  return rintf(x);
}

SCALAR_FUN_ATTR float futrts_floor32(float x) {
  return floorf(x);
}

SCALAR_FUN_ATTR float futrts_ceil32(float x) {
  return ceilf(x);
}

SCALAR_FUN_ATTR float futrts_nextafter32(float x, float y) {
  return nextafterf(x, y);
}

SCALAR_FUN_ATTR float futrts_lerp32(float v0, float v1, float t) {
  return v0 + (v1 - v0) * t;
}

SCALAR_FUN_ATTR float futrts_ldexp32(float x, int32_t y) {
  return ldexpf(x, y);
}

SCALAR_FUN_ATTR float futrts_copysign32(float x, float y) {
  return copysignf(x, y);
}

SCALAR_FUN_ATTR float futrts_mad32(float a, float b, float c) {
  return a * b + c;
}

SCALAR_FUN_ATTR float futrts_fma32(float a, float b, float c) {
  return fmaf(a, b, c);
}
#endif

#if ISPC
SCALAR_FUN_ATTR int32_t futrts_to_bits32(float x) {
  return intbits(x);
}

SCALAR_FUN_ATTR float futrts_from_bits32(int32_t x) {
  return floatbits(x);
}
#else
SCALAR_FUN_ATTR int32_t futrts_to_bits32(float x) {
  union {
    float f;
    int32_t t;
  } p;

  p.f = x;
  return p.t;
}

SCALAR_FUN_ATTR float futrts_from_bits32(int32_t x) {
  union {
    int32_t f;
    float t;
  } p;

  p.f = x;
  return p.t;
}
#endif

SCALAR_FUN_ATTR float fsignum32(float x) {
  return futrts_isnan32(x) ? x : (x > 0 ? 1 : 0) - (x < 0 ? 1 : 0);
}

#ifdef FUTHARK_F64_ENABLED

SCALAR_FUN_ATTR double futrts_from_bits64(int64_t x);
SCALAR_FUN_ATTR int64_t futrts_to_bits64(double x);

#if ISPC
SCALAR_FUN_ATTR bool futrts_isinf64(float x) {
  return !isnan(x) && isnan(x - x);
}

SCALAR_FUN_ATTR bool futrts_isfinite64(float x) {
  return !isnan(x) && !futrts_isinf64(x);
}

SCALAR_FUN_ATTR double fdiv64(double x, double y) {
  return x / y;
}

SCALAR_FUN_ATTR double fadd64(double x, double y) {
  return x + y;
}

SCALAR_FUN_ATTR double fsub64(double x, double y) {
  return x - y;
}

SCALAR_FUN_ATTR double fmul64(double x, double y) {
  return x * y;
}

SCALAR_FUN_ATTR bool cmplt64(double x, double y) {
  return x < y;
}

SCALAR_FUN_ATTR bool cmple64(double x, double y) {
  return x <= y;
}

SCALAR_FUN_ATTR double sitofp_i8_f64(int8_t x) {
  return (double) x;
}

SCALAR_FUN_ATTR double sitofp_i16_f64(int16_t x) {
  return (double) x;
}

SCALAR_FUN_ATTR double sitofp_i32_f64(int32_t x) {
  return (double) x;
}

SCALAR_FUN_ATTR double sitofp_i64_f64(int64_t x) {
  return (double) x;
}

SCALAR_FUN_ATTR double uitofp_i8_f64(uint8_t x) {
  return (double) x;
}

SCALAR_FUN_ATTR double uitofp_i16_f64(uint16_t x) {
  return (double) x;
}

SCALAR_FUN_ATTR double uitofp_i32_f64(uint32_t x) {
  return (double) x;
}

SCALAR_FUN_ATTR double uitofp_i64_f64(uint64_t x) {
  return (double) x;
}

SCALAR_FUN_ATTR double fabs64(double x) {
  return abs(x);
}

SCALAR_FUN_ATTR double fmax64(double x, double y) {
  return isnan(x) ? y : isnan(y) ? x : max(x, y);
}

SCALAR_FUN_ATTR double fmin64(double x, double y) {
  return isnan(x) ? y : isnan(y) ? x : min(x, y);
}

SCALAR_FUN_ATTR double fpow64(double a, double b) {
  float ret;
  foreach_active (i) {
      uniform float r = __stdlib_powf(extract(a, i), extract(b, i));
      ret = insert(ret, i, r);
  }
  return ret;
}

SCALAR_FUN_ATTR double futrts_log64(double x) {
  return futrts_isfinite64(x) || (futrts_isinf64(x) && x < 0)? log(x) : x;
}

SCALAR_FUN_ATTR double futrts_log2_64(double x) {
  return futrts_log64(x)/log(2.0d);
}

SCALAR_FUN_ATTR double futrts_log10_64(double x) {
  return futrts_log64(x)/log(10.0d);
}

SCALAR_FUN_ATTR double futrts_log1p_64(double x) {
  if(x == -1.0d || (futrts_isinf64(x) && x > 0.0d)) return x / 0.0d;
  double y = 1.0d + x;
  double z = y - 1.0d;
  return log(y) - (z-x)/y;
}

SCALAR_FUN_ATTR double futrts_sqrt64(double x) {
  return sqrt(x);
}

extern "C" unmasked uniform double cbrt(uniform double);
SCALAR_FUN_ATTR double futrts_cbrt64(double x) {
  double res;
  foreach_active (i) {
    uniform double r = cbrtf(extract(x, i));
    res = insert(res, i, r);
  }
  return res;
}

SCALAR_FUN_ATTR double futrts_exp64(double x) {
  return exp(x);
}

SCALAR_FUN_ATTR double futrts_cos64(double x) {
  return cos(x);
}

SCALAR_FUN_ATTR double futrts_sin64(double x) {
  return sin(x);
}

SCALAR_FUN_ATTR double futrts_tan64(double x) {
  return tan(x);
}

SCALAR_FUN_ATTR double futrts_acos64(double x) {
  return acos(x);
}

SCALAR_FUN_ATTR double futrts_asin64(double x) {
  return asin(x);
}

SCALAR_FUN_ATTR double futrts_atan64(double x) {
  return atan(x);
}

SCALAR_FUN_ATTR double futrts_cosh64(double x) {
  return (exp(x)+exp(-x)) / 2.0d;
}

SCALAR_FUN_ATTR double futrts_sinh64(double x) {
  return (exp(x)-exp(-x)) / 2.0d;
}

SCALAR_FUN_ATTR double futrts_tanh64(double x) {
  return futrts_sinh64(x)/futrts_cosh64(x);
}

SCALAR_FUN_ATTR double futrts_acosh64(double x) {
  double f = x+sqrt(x*x-1.0d);
  if(futrts_isfinite64(f)) return log(f);
  return f;
}

SCALAR_FUN_ATTR double futrts_asinh64(double x) {
  double f = x+sqrt(x*x+1.0d);
  if(futrts_isfinite64(f)) return log(f);
  return f;
}

SCALAR_FUN_ATTR double futrts_atanh64(double x) {
  double f = (1.0d+x)/(1.0d-x);
  if(futrts_isfinite64(f)) return log(f)/2.0d;
  return f;

}

SCALAR_FUN_ATTR double futrts_atan2_64(double x, double y) {
  return atan2(x, y);
}

extern "C" unmasked uniform double hypot(uniform double x, uniform double y);
SCALAR_FUN_ATTR double futrts_hypot64(double x, double y) {
  double res;
  foreach_active (i) {
    uniform double r = hypot(extract(x, i), extract(y, i));
    res = insert(res, i, r);
  }
  return res;
}

extern "C" unmasked uniform double tgamma(uniform double x);
SCALAR_FUN_ATTR double futrts_gamma64(double x) {
  double res;
  foreach_active (i) {
    uniform double r = tgamma(extract(x, i));
    res = insert(res, i, r);
  }
  return res;
}

extern "C" unmasked uniform double lgamma(uniform double x);
SCALAR_FUN_ATTR double futrts_lgamma64(double x) {
  double res;
  foreach_active (i) {
    uniform double r = lgamma(extract(x, i));
    res = insert(res, i, r);
  }
  return res;
}

extern "C" unmasked uniform double erf(uniform double x);
SCALAR_FUN_ATTR double futrts_erf64(double x) {
  double res;
  foreach_active (i) {
    uniform double r = erf(extract(x, i));
    res = insert(res, i, r);
  }
  return res;
}

extern "C" unmasked uniform double erfc(uniform double x);
SCALAR_FUN_ATTR double futrts_erfc64(double x) {
  double res;
  foreach_active (i) {
    uniform double r = erfc(extract(x, i));
    res = insert(res, i, r);
  }
  return res;
}

SCALAR_FUN_ATTR double futrts_fma64(double a, double b, double c) {
  return a * b + c;
}

SCALAR_FUN_ATTR double futrts_round64(double x) {
  return round(x);
}

SCALAR_FUN_ATTR double futrts_ceil64(double x) {
  return ceil(x);
}

extern "C" unmasked uniform double nextafter(uniform float x, uniform double y);
SCALAR_FUN_ATTR float futrts_nextafter64(double x, double y) {
  double res;
  foreach_active (i) {
    uniform double r = nextafter(extract(x, i), extract(y, i));
    res = insert(res, i, r);
  }
  return res;
}

SCALAR_FUN_ATTR double futrts_floor64(double x) {
  return floor(x);
}

SCALAR_FUN_ATTR bool futrts_isnan64(double x) {
  return isnan(x);
}

SCALAR_FUN_ATTR int8_t fptosi_f64_i8(double x) {
  if (futrts_isnan64(x) || futrts_isinf64(x)) {
    return 0;
  } else {
    return (int8_t) x;
  }
}

SCALAR_FUN_ATTR int16_t fptosi_f64_i16(double x) {
  if (futrts_isnan64(x) || futrts_isinf64(x)) {
    return 0;
  } else {
    return (int16_t) x;
  }
}

SCALAR_FUN_ATTR int32_t fptosi_f64_i32(double x) {
  if (futrts_isnan64(x) || futrts_isinf64(x)) {
    return 0;
  } else {
    return (int32_t) x;
  }
}

SCALAR_FUN_ATTR int64_t fptosi_f64_i64(double x) {
  if (futrts_isnan64(x) || futrts_isinf64(x)) {
    return 0;
  } else {
    return (int64_t) x;
  }
}

SCALAR_FUN_ATTR uint8_t fptoui_f64_i8(double x) {
  if (futrts_isnan64(x) || futrts_isinf64(x)) {
    return 0;
  } else {
    return (uint8_t) (int8_t) x;
  }
}

SCALAR_FUN_ATTR uint16_t fptoui_f64_i16(double x) {
  if (futrts_isnan64(x) || futrts_isinf64(x)) {
    return 0;
  } else {
    return (uint16_t) (int16_t) x;
  }
}

SCALAR_FUN_ATTR uint32_t fptoui_f64_i32(double x) {
  if (futrts_isnan64(x) || futrts_isinf64(x)) {
    return 0;
  } else {
    return (uint32_t) (int32_t) x;
  }
}

SCALAR_FUN_ATTR uint64_t fptoui_f64_i64(double x) {
  if (futrts_isnan64(x) || futrts_isinf64(x)) {
    return 0;
  } else {
    return (uint64_t) (int64_t) x;
  }
}

SCALAR_FUN_ATTR bool ftob_f64_bool(double x) {
  return x != 0.0;
}

SCALAR_FUN_ATTR double btof_bool_f64(bool x) {
  return x ? 1.0 : 0.0;
}

SCALAR_FUN_ATTR int64_t futrts_to_bits64(double x) {
  int64_t res;
  foreach_active (i) {
    uniform double tmp = extract(x, i);
    uniform int64_t r = *((uniform int64_t* uniform)&tmp);
    res = insert(res, i, r);
  }
  return res;
}

SCALAR_FUN_ATTR double futrts_from_bits64(int64_t x) {
  double res;
  foreach_active (i) {
    uniform int64_t tmp = extract(x, i);
    uniform double r = *((uniform double* uniform)&tmp);
    res = insert(res, i, r);
  }
  return res;
}

SCALAR_FUN_ATTR double fmod64(double x, double y) {
  return x - y * trunc(x/y);
}

SCALAR_FUN_ATTR double fsignum64(double x) {
  return futrts_isnan64(x) ? x : (x > 0 ? 1.0d : 0.0d) - (x < 0 ? 1.0d : 0.0d);
}

SCALAR_FUN_ATTR double futrts_lerp64(double v0, double v1, double t) {
  return v0 + (v1 - v0) * t;
}

SCALAR_FUN_ATTR double futrts_ldexp64(double x, int32_t y) {
  return x * pow((double)2.0, (double)y);
}

SCALAR_FUN_ATTR double futrts_copysign64(double x, double y) {
  int64_t xb = futrts_to_bits64(x);
  int64_t yb = futrts_to_bits64(y);
  return futrts_from_bits64((xb & ~(((int64_t)1)<<63)) | (yb & (((int64_t)1)<<63)));
}

SCALAR_FUN_ATTR double futrts_mad64(double a, double b, double c) {
  return a * b + c;
}

SCALAR_FUN_ATTR float fpconv_f32_f32(float x) {
  return (float) x;
}

SCALAR_FUN_ATTR double fpconv_f32_f64(float x) {
  return (double) x;
}

SCALAR_FUN_ATTR float fpconv_f64_f32(double x) {
  return (float) x;
}

SCALAR_FUN_ATTR double fpconv_f64_f64(double x) {
  return (double) x;
}

#else

SCALAR_FUN_ATTR double fdiv64(double x, double y) {
  return x / y;
}

SCALAR_FUN_ATTR double fadd64(double x, double y) {
  return x + y;
}

SCALAR_FUN_ATTR double fsub64(double x, double y) {
  return x - y;
}

SCALAR_FUN_ATTR double fmul64(double x, double y) {
  return x * y;
}

SCALAR_FUN_ATTR bool cmplt64(double x, double y) {
  return x < y;
}

SCALAR_FUN_ATTR bool cmple64(double x, double y) {
  return x <= y;
}

SCALAR_FUN_ATTR double sitofp_i8_f64(int8_t x) {
  return (double) x;
}

SCALAR_FUN_ATTR double sitofp_i16_f64(int16_t x) {
  return (double) x;
}

SCALAR_FUN_ATTR double sitofp_i32_f64(int32_t x) {
  return (double) x;
}

SCALAR_FUN_ATTR double sitofp_i64_f64(int64_t x) {
  return (double) x;
}

SCALAR_FUN_ATTR double uitofp_i8_f64(uint8_t x) {
  return (double) x;
}

SCALAR_FUN_ATTR double uitofp_i16_f64(uint16_t x) {
  return (double) x;
}

SCALAR_FUN_ATTR double uitofp_i32_f64(uint32_t x) {
  return (double) x;
}

SCALAR_FUN_ATTR double uitofp_i64_f64(uint64_t x) {
  return (double) x;
}

SCALAR_FUN_ATTR double fabs64(double x) {
  return fabs(x);
}

SCALAR_FUN_ATTR double fmax64(double x, double y) {
  return fmax(x, y);
}

SCALAR_FUN_ATTR double fmin64(double x, double y) {
  return fmin(x, y);
}

SCALAR_FUN_ATTR double fpow64(double x, double y) {
  return pow(x, y);
}

SCALAR_FUN_ATTR double futrts_log64(double x) {
  return log(x);
}

SCALAR_FUN_ATTR double futrts_log2_64(double x) {
  return log2(x);
}

SCALAR_FUN_ATTR double futrts_log10_64(double x) {
  return log10(x);
}

SCALAR_FUN_ATTR double futrts_log1p_64(double x) {
  return log1p(x);
}

SCALAR_FUN_ATTR double futrts_sqrt64(double x) {
  return sqrt(x);
}

SCALAR_FUN_ATTR double futrts_cbrt64(double x) {
  return cbrt(x);
}

SCALAR_FUN_ATTR double futrts_exp64(double x) {
  return exp(x);
}

SCALAR_FUN_ATTR double futrts_cos64(double x) {
  return cos(x);
}

SCALAR_FUN_ATTR double futrts_sin64(double x) {
  return sin(x);
}

SCALAR_FUN_ATTR double futrts_tan64(double x) {
  return tan(x);
}

SCALAR_FUN_ATTR double futrts_acos64(double x) {
  return acos(x);
}

SCALAR_FUN_ATTR double futrts_asin64(double x) {
  return asin(x);
}

SCALAR_FUN_ATTR double futrts_atan64(double x) {
  return atan(x);
}

SCALAR_FUN_ATTR double futrts_cosh64(double x) {
  return cosh(x);
}

SCALAR_FUN_ATTR double futrts_sinh64(double x) {
  return sinh(x);
}

SCALAR_FUN_ATTR double futrts_tanh64(double x) {
  return tanh(x);
}

SCALAR_FUN_ATTR double futrts_acosh64(double x) {
  return acosh(x);
}

SCALAR_FUN_ATTR double futrts_asinh64(double x) {
  return asinh(x);
}

SCALAR_FUN_ATTR double futrts_atanh64(double x) {
  return atanh(x);
}

SCALAR_FUN_ATTR double futrts_atan2_64(double x, double y) {
  return atan2(x, y);
}

SCALAR_FUN_ATTR double futrts_hypot64(double x, double y) {
  return hypot(x, y);
}

SCALAR_FUN_ATTR double futrts_gamma64(double x) {
  return tgamma(x);
}

SCALAR_FUN_ATTR double futrts_lgamma64(double x) {
  return lgamma(x);
}

SCALAR_FUN_ATTR double futrts_erf64(double x) {
  return erf(x);
}

SCALAR_FUN_ATTR double futrts_erfc64(double x) {
  return erfc(x);
}

SCALAR_FUN_ATTR double futrts_fma64(double a, double b, double c) {
  return fma(a, b, c);
}

SCALAR_FUN_ATTR double futrts_round64(double x) {
  return rint(x);
}

SCALAR_FUN_ATTR double futrts_ceil64(double x) {
  return ceil(x);
}

SCALAR_FUN_ATTR float futrts_nextafter64(float x, float y) {
  return nextafter(x, y);
}

SCALAR_FUN_ATTR double futrts_floor64(double x) {
  return floor(x);
}

SCALAR_FUN_ATTR bool futrts_isnan64(double x) {
  return isnan(x);
}

SCALAR_FUN_ATTR bool futrts_isinf64(double x) {
  return isinf(x);
}

SCALAR_FUN_ATTR int8_t fptosi_f64_i8(double x) {
  if (futrts_isnan64(x) || futrts_isinf64(x)) {
    return 0;
  } else {
    return (int8_t) x;
  }
}

SCALAR_FUN_ATTR int16_t fptosi_f64_i16(double x) {
  if (futrts_isnan64(x) || futrts_isinf64(x)) {
    return 0;
  } else {
    return (int16_t) x;
  }
}

SCALAR_FUN_ATTR int32_t fptosi_f64_i32(double x) {
  if (futrts_isnan64(x) || futrts_isinf64(x)) {
    return 0;
  } else {
    return (int32_t) x;
  }
}

SCALAR_FUN_ATTR int64_t fptosi_f64_i64(double x) {
  if (futrts_isnan64(x) || futrts_isinf64(x)) {
    return 0;
  } else {
    return (int64_t) x;
  }
}

SCALAR_FUN_ATTR uint8_t fptoui_f64_i8(double x) {
  if (futrts_isnan64(x) || futrts_isinf64(x)) {
    return 0;
  } else {
    return (uint8_t) (int8_t) x;
  }
}

SCALAR_FUN_ATTR uint16_t fptoui_f64_i16(double x) {
  if (futrts_isnan64(x) || futrts_isinf64(x)) {
    return 0;
  } else {
    return (uint16_t) (int16_t) x;
  }
}

SCALAR_FUN_ATTR uint32_t fptoui_f64_i32(double x) {
  if (futrts_isnan64(x) || futrts_isinf64(x)) {
    return 0;
  } else {
    return (uint32_t) (int32_t) x;
  }
}

SCALAR_FUN_ATTR uint64_t fptoui_f64_i64(double x) {
  if (futrts_isnan64(x) || futrts_isinf64(x)) {
    return 0;
  } else {
    return (uint64_t) (int64_t) x;
  }
}

SCALAR_FUN_ATTR bool ftob_f64_bool(double x) {
  return x != 0;
}

SCALAR_FUN_ATTR double btof_bool_f64(bool x) {
  return x ? 1 : 0;
}

SCALAR_FUN_ATTR int64_t futrts_to_bits64(double x) {
  union {
    double f;
    int64_t t;
  } p;

  p.f = x;
  return p.t;
}

SCALAR_FUN_ATTR double futrts_from_bits64(int64_t x) {
  union {
    int64_t f;
    double t;
  } p;

  p.f = x;
  return p.t;
}

SCALAR_FUN_ATTR double fmod64(double x, double y) {
  return fmod(x, y);
}

SCALAR_FUN_ATTR double fsignum64(double x) {
  return futrts_isnan64(x) ? x : (x > 0) - (x < 0);
}

SCALAR_FUN_ATTR double futrts_lerp64(double v0, double v1, double t) {
#ifdef __OPENCL_VERSION__
  return mix(v0, v1, t);
#else
  return v0 + (v1 - v0) * t;
#endif
}

SCALAR_FUN_ATTR double futrts_ldexp64(double x, int32_t y) {
  return ldexp(x, y);
}

SCALAR_FUN_ATTR float futrts_copysign64(double x, double y) {
  return copysign(x, y);
}

SCALAR_FUN_ATTR double futrts_mad64(double a, double b, double c) {
#ifdef __OPENCL_VERSION__
  return mad(a, b, c);
#else
  return a * b + c;
#endif
}

SCALAR_FUN_ATTR float fpconv_f32_f32(float x) {
  return (float) x;
}

SCALAR_FUN_ATTR double fpconv_f32_f64(float x) {
  return (double) x;
}

SCALAR_FUN_ATTR float fpconv_f64_f32(double x) {
  return (float) x;
}

SCALAR_FUN_ATTR double fpconv_f64_f64(double x) {
  return (double) x;
}

#endif

#endif

// End of scalar.h.
// Start of scalar_f16.h.

// Half-precision is emulated if needed (e.g. in straight C) with the
// native type used if possible.  The emulation works by typedef'ing
// 'float' to 'f16', and then implementing all operations on single
// precision.  To cut down on duplication, we use the same code for
// those Futhark functions that require just operators or casts.  The
// in-memory representation for arrays will still be 16 bits even
// under emulation, so the compiler will have to be careful when
// generating reads or writes.

#if !defined(cl_khr_fp16) && !(defined(__CUDA_ARCH__) && __CUDA_ARCH__ >= 600) && !(defined(ISPC))
#define EMULATE_F16
#endif

#if !defined(EMULATE_F16) && defined(__OPENCL_VERSION__)
#pragma OPENCL EXTENSION cl_khr_fp16 : enable
#endif

#ifdef EMULATE_F16

// Note that the half-precision storage format is still 16 bits - the
// compiler will have to be real careful!
typedef float f16;

#elif ISPC
typedef float16 f16;

#else

#ifdef __CUDA_ARCH__
#include <cuda_fp16.h>
#endif

typedef half f16;

#endif

// Some of these functions convert to single precision because half
// precision versions are not available.

SCALAR_FUN_ATTR f16 fadd16(f16 x, f16 y) {
  return x + y;
}

SCALAR_FUN_ATTR f16 fsub16(f16 x, f16 y) {
  return x - y;
}

SCALAR_FUN_ATTR f16 fmul16(f16 x, f16 y) {
  return x * y;
}

SCALAR_FUN_ATTR bool cmplt16(f16 x, f16 y) {
  return x < y;
}

SCALAR_FUN_ATTR bool cmple16(f16 x, f16 y) {
  return x <= y;
}

SCALAR_FUN_ATTR f16 sitofp_i8_f16(int8_t x) {
  return (f16) x;
}

SCALAR_FUN_ATTR f16 sitofp_i16_f16(int16_t x) {
  return (f16) x;
}

SCALAR_FUN_ATTR f16 sitofp_i32_f16(int32_t x) {
  return (f16) x;
}

SCALAR_FUN_ATTR f16 sitofp_i64_f16(int64_t x) {
  return (f16) x;
}

SCALAR_FUN_ATTR f16 uitofp_i8_f16(uint8_t x) {
  return (f16) x;
}

SCALAR_FUN_ATTR f16 uitofp_i16_f16(uint16_t x) {
  return (f16) x;
}

SCALAR_FUN_ATTR f16 uitofp_i32_f16(uint32_t x) {
  return (f16) x;
}

SCALAR_FUN_ATTR f16 uitofp_i64_f16(uint64_t x) {
  return (f16) x;
}

SCALAR_FUN_ATTR int8_t fptosi_f16_i8(f16 x) {
  return (int8_t) (float) x;
}

SCALAR_FUN_ATTR int16_t fptosi_f16_i16(f16 x) {
  return (int16_t) x;
}

SCALAR_FUN_ATTR int32_t fptosi_f16_i32(f16 x) {
  return (int32_t) x;
}

SCALAR_FUN_ATTR int64_t fptosi_f16_i64(f16 x) {
  return (int64_t) x;
}

SCALAR_FUN_ATTR uint8_t fptoui_f16_i8(f16 x) {
  return (uint8_t) (float) x;
}

SCALAR_FUN_ATTR uint16_t fptoui_f16_i16(f16 x) {
  return (uint16_t) x;
}

SCALAR_FUN_ATTR uint32_t fptoui_f16_i32(f16 x) {
  return (uint32_t) x;
}

SCALAR_FUN_ATTR uint64_t fptoui_f16_i64(f16 x) {
  return (uint64_t) x;
}

SCALAR_FUN_ATTR bool ftob_f16_bool(f16 x) {
  return x != (f16)0;
}

SCALAR_FUN_ATTR f16 btof_bool_f16(bool x) {
  return x ? 1 : 0;
}

#ifndef EMULATE_F16
SCALAR_FUN_ATTR bool futrts_isnan16(f16 x) {
  return isnan((float)x);
}

#ifdef __OPENCL_VERSION__

SCALAR_FUN_ATTR f16 fabs16(f16 x) {
  return fabs(x);
}

SCALAR_FUN_ATTR f16 fmax16(f16 x, f16 y) {
  return fmax(x, y);
}

SCALAR_FUN_ATTR f16 fmin16(f16 x, f16 y) {
  return fmin(x, y);
}

SCALAR_FUN_ATTR f16 fpow16(f16 x, f16 y) {
  return pow(x, y);
}

#elif ISPC
SCALAR_FUN_ATTR f16 fabs16(f16 x) {
  return abs(x);
}

SCALAR_FUN_ATTR f16 fmax16(f16 x, f16 y) {
  return futrts_isnan16(x) ? y : futrts_isnan16(y) ? x : max(x, y);
}

SCALAR_FUN_ATTR f16 fmin16(f16 x, f16 y) {
  return futrts_isnan16(x) ? y : futrts_isnan16(y) ? x : min(x, y);
}

SCALAR_FUN_ATTR f16 fpow16(f16 x, f16 y) {
  return pow(x, y);
}

#else // Assuming CUDA.

SCALAR_FUN_ATTR f16 fabs16(f16 x) {
  return fabsf(x);
}

SCALAR_FUN_ATTR f16 fmax16(f16 x, f16 y) {
  return fmaxf(x, y);
}

SCALAR_FUN_ATTR f16 fmin16(f16 x, f16 y) {
  return fminf(x, y);
}

SCALAR_FUN_ATTR f16 fpow16(f16 x, f16 y) {
  return powf(x, y);
}
#endif

#if ISPC
SCALAR_FUN_ATTR bool futrts_isinf16(float x) {
  return !futrts_isnan16(x) && futrts_isnan16(x - x);
}
SCALAR_FUN_ATTR bool futrts_isfinite16(float x) {
  return !futrts_isnan16(x) && !futrts_isinf16(x);
}

#else

SCALAR_FUN_ATTR bool futrts_isinf16(f16 x) {
  return isinf((float)x);
}
#endif

#ifdef __OPENCL_VERSION__
SCALAR_FUN_ATTR f16 futrts_log16(f16 x) {
  return log(x);
}

SCALAR_FUN_ATTR f16 futrts_log2_16(f16 x) {
  return log2(x);
}

SCALAR_FUN_ATTR f16 futrts_log10_16(f16 x) {
  return log10(x);
}

SCALAR_FUN_ATTR f16 futrts_log1p_16(f16 x) {
  return log1p(x);
}

SCALAR_FUN_ATTR f16 futrts_sqrt16(f16 x) {
  return sqrt(x);
}

SCALAR_FUN_ATTR f16 futrts_cbrt16(f16 x) {
  return cbrt(x);
}

SCALAR_FUN_ATTR f16 futrts_exp16(f16 x) {
  return exp(x);
}

SCALAR_FUN_ATTR f16 futrts_cos16(f16 x) {
  return cos(x);
}

SCALAR_FUN_ATTR f16 futrts_sin16(f16 x) {
  return sin(x);
}

SCALAR_FUN_ATTR f16 futrts_tan16(f16 x) {
  return tan(x);
}

SCALAR_FUN_ATTR f16 futrts_acos16(f16 x) {
  return acos(x);
}

SCALAR_FUN_ATTR f16 futrts_asin16(f16 x) {
  return asin(x);
}

SCALAR_FUN_ATTR f16 futrts_atan16(f16 x) {
  return atan(x);
}

SCALAR_FUN_ATTR f16 futrts_cosh16(f16 x) {
  return cosh(x);
}

SCALAR_FUN_ATTR f16 futrts_sinh16(f16 x) {
  return sinh(x);
}

SCALAR_FUN_ATTR f16 futrts_tanh16(f16 x) {
  return tanh(x);
}

SCALAR_FUN_ATTR f16 futrts_acosh16(f16 x) {
  return acosh(x);
}

SCALAR_FUN_ATTR f16 futrts_asinh16(f16 x) {
  return asinh(x);
}

SCALAR_FUN_ATTR f16 futrts_atanh16(f16 x) {
  return atanh(x);
}

SCALAR_FUN_ATTR f16 futrts_atan2_16(f16 x, f16 y) {
  return atan2(x, y);
}

SCALAR_FUN_ATTR f16 futrts_hypot16(f16 x, f16 y) {
  return hypot(x, y);
}

SCALAR_FUN_ATTR f16 futrts_gamma16(f16 x) {
  return tgamma(x);
}

SCALAR_FUN_ATTR f16 futrts_lgamma16(f16 x) {
  return lgamma(x);
}

SCALAR_FUN_ATTR f16 futrts_erf16(f16 x) {
  return erf(x);
}

SCALAR_FUN_ATTR f16 futrts_erfc16(f16 x) {
  return erfc(x);
}

SCALAR_FUN_ATTR f16 fmod16(f16 x, f16 y) {
  return fmod(x, y);
}

SCALAR_FUN_ATTR f16 futrts_round16(f16 x) {
  return rint(x);
}

SCALAR_FUN_ATTR f16 futrts_floor16(f16 x) {
  return floor(x);
}

SCALAR_FUN_ATTR f16 futrts_ceil16(f16 x) {
  return ceil(x);
}

SCALAR_FUN_ATTR f16 futrts_nextafter16(f16 x, f16 y) {
  return nextafter(x, y);
}

SCALAR_FUN_ATTR f16 futrts_lerp16(f16 v0, f16 v1, f16 t) {
  return mix(v0, v1, t);
}

SCALAR_FUN_ATTR f16 futrts_ldexp16(f16 x, int32_t y) {
  return ldexp(x, y);
}

SCALAR_FUN_ATTR f16 futrts_copysign16(f16 x, f16 y) {
  return copysign(x, y);
}

SCALAR_FUN_ATTR f16 futrts_mad16(f16 a, f16 b, f16 c) {
  return mad(a, b, c);
}

SCALAR_FUN_ATTR f16 futrts_fma16(f16 a, f16 b, f16 c) {
  return fma(a, b, c);
}
#elif ISPC

SCALAR_FUN_ATTR f16 futrts_log16(f16 x) {
  return futrts_isfinite16(x) || (futrts_isinf16(x) && x < 0) ? log(x) : x;
}

SCALAR_FUN_ATTR f16 futrts_log2_16(f16 x) {
  return futrts_log16(x) / log(2.0f16);
}

SCALAR_FUN_ATTR f16 futrts_log10_16(f16 x) {
  return futrts_log16(x) / log(10.0f16);
}

SCALAR_FUN_ATTR f16 futrts_log1p_16(f16 x) {
  if(x == -1.0f16 || (futrts_isinf16(x) && x > 0.0f16)) return x / 0.0f16;
  f16 y = 1.0f16 + x;
  f16 z = y - 1.0f16;
  return log(y) - (z-x)/y;
}

SCALAR_FUN_ATTR f16 futrts_sqrt16(f16 x) {
  return (float16)sqrt((float)x);
}

SCALAR_FUN_ATTR f16 futrts_exp16(f16 x) {
  return exp(x);
}

SCALAR_FUN_ATTR f16 futrts_cos16(f16 x) {
  return (float16)cos((float)x);
}

SCALAR_FUN_ATTR f16 futrts_sin16(f16 x) {
  return (float16)sin((float)x);
}

SCALAR_FUN_ATTR f16 futrts_tan16(f16 x) {
  return (float16)tan((float)x);
}

SCALAR_FUN_ATTR f16 futrts_acos16(f16 x) {
  return (float16)acos((float)x);
}

SCALAR_FUN_ATTR f16 futrts_asin16(f16 x) {
  return (float16)asin((float)x);
}

SCALAR_FUN_ATTR f16 futrts_atan16(f16 x) {
  return (float16)atan((float)x);
}

SCALAR_FUN_ATTR f16 futrts_cosh16(f16 x) {
  return (exp(x)+exp(-x)) / 2.0f16;
}

SCALAR_FUN_ATTR f16 futrts_sinh16(f16 x) {
  return (exp(x)-exp(-x)) / 2.0f16;
}

SCALAR_FUN_ATTR f16 futrts_tanh16(f16 x) {
  return futrts_sinh16(x)/futrts_cosh16(x);
}

SCALAR_FUN_ATTR f16 futrts_acosh16(f16 x) {
  float16 f = x+(float16)sqrt((float)(x*x-1));
  if(futrts_isfinite16(f)) return log(f);
  return f;
}

SCALAR_FUN_ATTR f16 futrts_asinh16(f16 x) {
  float16 f = x+(float16)sqrt((float)(x*x+1));
  if(futrts_isfinite16(f)) return log(f);
  return f;
}

SCALAR_FUN_ATTR f16 futrts_atanh16(f16 x) {
  float16 f = (1+x)/(1-x);
  if(futrts_isfinite16(f)) return log(f)/2.0f16;
  return f;
}

SCALAR_FUN_ATTR f16 futrts_atan2_16(f16 x, f16 y) {
  return (float16)atan2((float)x, (float)y);
}

SCALAR_FUN_ATTR f16 futrts_hypot16(f16 x, f16 y) {
  return (float16)futrts_hypot32((float)x, (float)y);
}

extern "C" unmasked uniform float tgammaf(uniform float x);
SCALAR_FUN_ATTR f16 futrts_gamma16(f16 x) {
  f16 res;
  foreach_active (i) {
    uniform f16 r = (f16)tgammaf(extract((float)x, i));
    res = insert(res, i, r);
  }
  return res;
}

extern "C" unmasked uniform float lgammaf(uniform float x);
SCALAR_FUN_ATTR f16 futrts_lgamma16(f16 x) {
  f16 res;
  foreach_active (i) {
    uniform f16 r = (f16)lgammaf(extract((float)x, i));
    res = insert(res, i, r);
  }
  return res;
}

SCALAR_FUN_ATTR f16 futrts_cbrt16(f16 x) {
  f16 res = (f16)futrts_cbrt32((float)x);
  return res;
}

SCALAR_FUN_ATTR f16 futrts_erf16(f16 x) {
  f16 res = (f16)futrts_erf32((float)x);
  return res;
}

SCALAR_FUN_ATTR f16 futrts_erfc16(f16 x) {
  f16 res = (f16)futrts_erfc32((float)x);
  return res;
}

SCALAR_FUN_ATTR f16 fmod16(f16 x, f16 y) {
  return x - y * (float16)trunc((float) (x/y));
}

SCALAR_FUN_ATTR f16 futrts_round16(f16 x) {
  return (float16)round((float)x);
}

SCALAR_FUN_ATTR f16 futrts_floor16(f16 x) {
  return (float16)floor((float)x);
}

SCALAR_FUN_ATTR f16 futrts_ceil16(f16 x) {
  return (float16)ceil((float)x);
}

SCALAR_FUN_ATTR f16 futrts_nextafter16(f16 x, f16 y) {
  return (float16)futrts_nextafter32((float)x, (float) y);
}

SCALAR_FUN_ATTR f16 futrts_lerp16(f16 v0, f16 v1, f16 t) {
  return v0 + (v1 - v0) * t;
}

SCALAR_FUN_ATTR f16 futrts_ldexp16(f16 x, int32_t y) {
  return futrts_ldexp32((float)x, y);
}

SCALAR_FUN_ATTR f16 futrts_copysign16(f16 x, f16 y) {
  return futrts_copysign32((float)x, y);
}

SCALAR_FUN_ATTR f16 futrts_mad16(f16 a, f16 b, f16 c) {
  return a * b + c;
}

SCALAR_FUN_ATTR f16 futrts_fma16(f16 a, f16 b, f16 c) {
  return a * b + c;
}

#else // Assume CUDA.

SCALAR_FUN_ATTR f16 futrts_log16(f16 x) {
  return hlog(x);
}

SCALAR_FUN_ATTR f16 futrts_log2_16(f16 x) {
  return hlog2(x);
}

SCALAR_FUN_ATTR f16 futrts_log10_16(f16 x) {
  return hlog10(x);
}

SCALAR_FUN_ATTR f16 futrts_log1p_16(f16 x) {
  return (f16)log1pf((float)x);
}

SCALAR_FUN_ATTR f16 futrts_sqrt16(f16 x) {
  return hsqrt(x);
}

SCALAR_FUN_ATTR f16 futrts_cbrt16(f16 x) {
  return cbrtf(x);
}

SCALAR_FUN_ATTR f16 futrts_exp16(f16 x) {
  return hexp(x);
}

SCALAR_FUN_ATTR f16 futrts_cos16(f16 x) {
  return hcos(x);
}

SCALAR_FUN_ATTR f16 futrts_sin16(f16 x) {
  return hsin(x);
}

SCALAR_FUN_ATTR f16 futrts_tan16(f16 x) {
  return tanf(x);
}

SCALAR_FUN_ATTR f16 futrts_acos16(f16 x) {
  return acosf(x);
}

SCALAR_FUN_ATTR f16 futrts_asin16(f16 x) {
  return asinf(x);
}

SCALAR_FUN_ATTR f16 futrts_atan16(f16 x) {
  return atanf(x);
}

SCALAR_FUN_ATTR f16 futrts_cosh16(f16 x) {
  return coshf(x);
}

SCALAR_FUN_ATTR f16 futrts_sinh16(f16 x) {
  return sinhf(x);
}

SCALAR_FUN_ATTR f16 futrts_tanh16(f16 x) {
  return tanhf(x);
}

SCALAR_FUN_ATTR f16 futrts_acosh16(f16 x) {
  return acoshf(x);
}

SCALAR_FUN_ATTR f16 futrts_asinh16(f16 x) {
  return asinhf(x);
}

SCALAR_FUN_ATTR f16 futrts_atanh16(f16 x) {
  return atanhf(x);
}

SCALAR_FUN_ATTR f16 futrts_atan2_16(f16 x, f16 y) {
  return atan2f(x, y);
}

SCALAR_FUN_ATTR f16 futrts_hypot16(f16 x, f16 y) {
  return hypotf(x, y);
}

SCALAR_FUN_ATTR f16 futrts_gamma16(f16 x) {
  return tgammaf(x);
}

SCALAR_FUN_ATTR f16 futrts_lgamma16(f16 x) {
  return lgammaf(x);
}

SCALAR_FUN_ATTR f16 futrts_erf16(f16 x) {
  return erff(x);
}

SCALAR_FUN_ATTR f16 futrts_erfc16(f16 x) {
  return erfcf(x);
}

SCALAR_FUN_ATTR f16 fmod16(f16 x, f16 y) {
  return fmodf(x, y);
}

SCALAR_FUN_ATTR f16 futrts_round16(f16 x) {
  return rintf(x);
}

SCALAR_FUN_ATTR f16 futrts_floor16(f16 x) {
  return hfloor(x);
}

SCALAR_FUN_ATTR f16 futrts_ceil16(f16 x) {
  return hceil(x);
}

SCALAR_FUN_ATTR f16 futrts_nextafter16(f16 x, f16 y) {
  return __ushort_as_half(halfbitsnextafter(__half_as_ushort(x), __half_as_ushort(y)));
}

SCALAR_FUN_ATTR f16 futrts_lerp16(f16 v0, f16 v1, f16 t) {
  return v0 + (v1 - v0) * t;
}

SCALAR_FUN_ATTR f16 futrts_ldexp16(f16 x, int32_t y) {
  return futrts_ldexp32((float)x, y);
}

SCALAR_FUN_ATTR f16 futrts_copysign16(f16 x, f16 y) {
  return futrts_copysign32((float)x, y);
}

SCALAR_FUN_ATTR f16 futrts_mad16(f16 a, f16 b, f16 c) {
  return a * b + c;
}

SCALAR_FUN_ATTR f16 futrts_fma16(f16 a, f16 b, f16 c) {
  return fmaf(a, b, c);
}

#endif

// The CUDA __half type cannot be put in unions for some reason, so we
// use bespoke conversion functions instead.
#ifdef __CUDA_ARCH__
SCALAR_FUN_ATTR int16_t futrts_to_bits16(f16 x) {
  return __half_as_ushort(x);
}
SCALAR_FUN_ATTR f16 futrts_from_bits16(int16_t x) {
  return __ushort_as_half(x);
}
#elif ISPC

SCALAR_FUN_ATTR int16_t futrts_to_bits16(f16 x) {
  varying int16_t y = *((varying int16_t * uniform)&x);
  return y;
}

SCALAR_FUN_ATTR f16 futrts_from_bits16(int16_t x) {
  varying f16 y = *((varying f16 * uniform)&x);
  return y;
}
#else
SCALAR_FUN_ATTR int16_t futrts_to_bits16(f16 x) {
  union {
    f16 f;
    int16_t t;
  } p;

  p.f = x;
  return p.t;
}

SCALAR_FUN_ATTR f16 futrts_from_bits16(int16_t x) {
  union {
    int16_t f;
    f16 t;
  } p;

  p.f = x;
  return p.t;
}
#endif

#else // No native f16 - emulate.

SCALAR_FUN_ATTR f16 fabs16(f16 x) {
  return fabs32(x);
}

SCALAR_FUN_ATTR f16 fmax16(f16 x, f16 y) {
  return fmax32(x, y);
}

SCALAR_FUN_ATTR f16 fmin16(f16 x, f16 y) {
  return fmin32(x, y);
}

SCALAR_FUN_ATTR f16 fpow16(f16 x, f16 y) {
  return fpow32(x, y);
}

SCALAR_FUN_ATTR bool futrts_isnan16(f16 x) {
  return futrts_isnan32(x);
}

SCALAR_FUN_ATTR bool futrts_isinf16(f16 x) {
  return futrts_isinf32(x);
}

SCALAR_FUN_ATTR f16 futrts_log16(f16 x) {
  return futrts_log32(x);
}

SCALAR_FUN_ATTR f16 futrts_log2_16(f16 x) {
  return futrts_log2_32(x);
}

SCALAR_FUN_ATTR f16 futrts_log10_16(f16 x) {
  return futrts_log10_32(x);
}

SCALAR_FUN_ATTR f16 futrts_log1p_16(f16 x) {
  return futrts_log1p_32(x);
}

SCALAR_FUN_ATTR f16 futrts_sqrt16(f16 x) {
  return futrts_sqrt32(x);
}

SCALAR_FUN_ATTR f16 futrts_cbrt16(f16 x) {
  return futrts_cbrt32(x);
}

SCALAR_FUN_ATTR f16 futrts_exp16(f16 x) {
  return futrts_exp32(x);
}

SCALAR_FUN_ATTR f16 futrts_cos16(f16 x) {
  return futrts_cos32(x);
}

SCALAR_FUN_ATTR f16 futrts_sin16(f16 x) {
  return futrts_sin32(x);
}

SCALAR_FUN_ATTR f16 futrts_tan16(f16 x) {
  return futrts_tan32(x);
}

SCALAR_FUN_ATTR f16 futrts_acos16(f16 x) {
  return futrts_acos32(x);
}

SCALAR_FUN_ATTR f16 futrts_asin16(f16 x) {
  return futrts_asin32(x);
}

SCALAR_FUN_ATTR f16 futrts_atan16(f16 x) {
  return futrts_atan32(x);
}

SCALAR_FUN_ATTR f16 futrts_cosh16(f16 x) {
  return futrts_cosh32(x);
}

SCALAR_FUN_ATTR f16 futrts_sinh16(f16 x) {
  return futrts_sinh32(x);
}

SCALAR_FUN_ATTR f16 futrts_tanh16(f16 x) {
  return futrts_tanh32(x);
}

SCALAR_FUN_ATTR f16 futrts_acosh16(f16 x) {
  return futrts_acosh32(x);
}

SCALAR_FUN_ATTR f16 futrts_asinh16(f16 x) {
  return futrts_asinh32(x);
}

SCALAR_FUN_ATTR f16 futrts_atanh16(f16 x) {
  return futrts_atanh32(x);
}

SCALAR_FUN_ATTR f16 futrts_atan2_16(f16 x, f16 y) {
  return futrts_atan2_32(x, y);
}

SCALAR_FUN_ATTR f16 futrts_hypot16(f16 x, f16 y) {
  return futrts_hypot32(x, y);
}

SCALAR_FUN_ATTR f16 futrts_gamma16(f16 x) {
  return futrts_gamma32(x);
}

SCALAR_FUN_ATTR f16 futrts_lgamma16(f16 x) {
  return futrts_lgamma32(x);
}

SCALAR_FUN_ATTR f16 futrts_erf16(f16 x) {
  return futrts_erf32(x);
}

SCALAR_FUN_ATTR f16 futrts_erfc16(f16 x) {
  return futrts_erfc32(x);
}

SCALAR_FUN_ATTR f16 fmod16(f16 x, f16 y) {
  return fmod32(x, y);
}

SCALAR_FUN_ATTR f16 futrts_round16(f16 x) {
  return futrts_round32(x);
}

SCALAR_FUN_ATTR f16 futrts_floor16(f16 x) {
  return futrts_floor32(x);
}

SCALAR_FUN_ATTR f16 futrts_ceil16(f16 x) {
  return futrts_ceil32(x);
}

SCALAR_FUN_ATTR f16 futrts_nextafter16(f16 x, f16 y) {
  return halfbits2float(halfbitsnextafter(float2halfbits(x), float2halfbits(y)));
}

SCALAR_FUN_ATTR f16 futrts_lerp16(f16 v0, f16 v1, f16 t) {
  return futrts_lerp32(v0, v1, t);
}

SCALAR_FUN_ATTR f16 futrts_ldexp16(f16 x, int32_t y) {
  return futrts_ldexp32(x, y);
}

SCALAR_FUN_ATTR f16 futrts_copysign16(f16 x, f16 y) {
  return futrts_copysign32((float)x, y);
}

SCALAR_FUN_ATTR f16 futrts_mad16(f16 a, f16 b, f16 c) {
  return futrts_mad32(a, b, c);
}

SCALAR_FUN_ATTR f16 futrts_fma16(f16 a, f16 b, f16 c) {
  return futrts_fma32(a, b, c);
}

// Even when we are using an OpenCL that does not support cl_khr_fp16,
// it must still support vload_half for actually creating a
// half-precision number, which can then be efficiently converted to a
// float.  Similarly for vstore_half.
#ifdef __OPENCL_VERSION__

SCALAR_FUN_ATTR int16_t futrts_to_bits16(f16 x) {
  int16_t y;
  // Violating strict aliasing here.
  vstore_half((float)x, 0, (half*)&y);
  return y;
}

SCALAR_FUN_ATTR f16 futrts_from_bits16(int16_t x) {
  return (f16)vload_half(0, (half*)&x);
}

#else

SCALAR_FUN_ATTR int16_t futrts_to_bits16(f16 x) {
  return (int16_t)float2halfbits(x);
}

SCALAR_FUN_ATTR f16 futrts_from_bits16(int16_t x) {
  return halfbits2float((uint16_t)x);
}

SCALAR_FUN_ATTR f16 fsignum16(f16 x) {
  return futrts_isnan16(x) ? x : (x > 0 ? 1 : 0) - (x < 0 ? 1 : 0);
}

#endif

#endif

SCALAR_FUN_ATTR float fpconv_f16_f16(f16 x) {
  return x;
}

SCALAR_FUN_ATTR float fpconv_f16_f32(f16 x) {
  return x;
}

SCALAR_FUN_ATTR f16 fpconv_f32_f16(float x) {
  return (f16) x;
}

#ifdef FUTHARK_F64_ENABLED

SCALAR_FUN_ATTR double fpconv_f16_f64(f16 x) {
  return (double) x;
}

#if ISPC
SCALAR_FUN_ATTR f16 fpconv_f64_f16(double x) {
  return (f16) ((float)x);
}
#else
SCALAR_FUN_ATTR f16 fpconv_f64_f16(double x) {
  return (f16) x;
}
#endif
#endif


// End of scalar_f16.h.
// Start of atomics.h

SCALAR_FUN_ATTR int32_t atomic_xchg_i32_global(volatile __global int32_t *p, int32_t x);
SCALAR_FUN_ATTR int32_t atomic_xchg_i32_shared(volatile __local int32_t *p, int32_t x);
SCALAR_FUN_ATTR int32_t atomic_cmpxchg_i32_global(volatile __global int32_t *p,
                                                         int32_t cmp, int32_t val);
SCALAR_FUN_ATTR int32_t atomic_cmpxchg_i32_shared(volatile __local int32_t *p,
                                                        int32_t cmp, int32_t val);
SCALAR_FUN_ATTR int32_t atomic_add_i32_global(volatile __global int32_t *p, int32_t x);
SCALAR_FUN_ATTR int32_t atomic_add_i32_shared(volatile __local int32_t *p, int32_t x);
SCALAR_FUN_ATTR float atomic_fadd_f32_global(volatile __global float *p, float x);
SCALAR_FUN_ATTR float atomic_fadd_f32_shared(volatile __local float *p, float x);
SCALAR_FUN_ATTR int32_t atomic_smax_i32_global(volatile __global int32_t *p, int32_t x);
SCALAR_FUN_ATTR int32_t atomic_smax_i32_shared(volatile __local int32_t *p, int32_t x);
SCALAR_FUN_ATTR int32_t atomic_smin_i32_global(volatile __global int32_t *p, int32_t x);
SCALAR_FUN_ATTR int32_t atomic_smin_i32_shared(volatile __local int32_t *p, int32_t x);
SCALAR_FUN_ATTR uint32_t atomic_umax_i32_global(volatile __global uint32_t *p, uint32_t x);
SCALAR_FUN_ATTR uint32_t atomic_umax_i32_shared(volatile __local uint32_t *p, uint32_t x);
SCALAR_FUN_ATTR uint32_t atomic_umin_i32_global(volatile __global uint32_t *p, uint32_t x);
SCALAR_FUN_ATTR uint32_t atomic_umin_i32_shared(volatile __local uint32_t *p, uint32_t x);
SCALAR_FUN_ATTR int32_t atomic_and_i32_global(volatile __global int32_t *p, int32_t x);
SCALAR_FUN_ATTR int32_t atomic_and_i32_shared(volatile __local int32_t *p, int32_t x);
SCALAR_FUN_ATTR int32_t atomic_or_i32_global(volatile __global int32_t *p, int32_t x);
SCALAR_FUN_ATTR int32_t atomic_or_i32_shared(volatile __local int32_t *p, int32_t x);
SCALAR_FUN_ATTR int32_t atomic_xor_i32_global(volatile __global int32_t *p, int32_t x);
SCALAR_FUN_ATTR int32_t atomic_xor_i32_shared(volatile __local int32_t *p, int32_t x);

SCALAR_FUN_ATTR int32_t atomic_xchg_i32_global(volatile __global int32_t *p, int32_t x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicExch((int32_t*)p, x);
#else
  return atomic_xor(p, x);
#endif
}

SCALAR_FUN_ATTR int32_t atomic_xchg_i32_shared(volatile __local int32_t *p, int32_t x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicExch((int32_t*)p, x);
#else
  return atomic_xor(p, x);
#endif
}

SCALAR_FUN_ATTR int32_t atomic_cmpxchg_i32_global(volatile __global int32_t *p,
                                                         int32_t cmp, int32_t val) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicCAS((int32_t*)p, cmp, val);
#else
  return atomic_cmpxchg(p, cmp, val);
#endif
}

SCALAR_FUN_ATTR int32_t atomic_cmpxchg_i32_shared(volatile __local int32_t *p,
                                                        int32_t cmp, int32_t val) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicCAS((int32_t*)p, cmp, val);
#else
  return atomic_cmpxchg(p, cmp, val);
#endif
}

SCALAR_FUN_ATTR int32_t atomic_add_i32_global(volatile __global int32_t *p, int32_t x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicAdd((int32_t*)p, x);
#else
  return atomic_add(p, x);
#endif
}

SCALAR_FUN_ATTR int32_t atomic_add_i32_shared(volatile __local int32_t *p, int32_t x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicAdd((int32_t*)p, x);
#else
  return atomic_add(p, x);
#endif
}

SCALAR_FUN_ATTR float atomic_fadd_f32_global(volatile __global float *p, float x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicAdd((float*)p, x);
#else
  union { int32_t i; float f; } old;
  union { int32_t i; float f; } assumed;
  old.f = *p;
  do {
    assumed.f = old.f;
    old.f = old.f + x;
    old.i = atomic_cmpxchg_i32_global((volatile __global int32_t*)p, assumed.i, old.i);
  } while (assumed.i != old.i);
  return old.f;
#endif
}

SCALAR_FUN_ATTR float atomic_fadd_f32_shared(volatile __local float *p, float x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicAdd((float*)p, x);
#else
  union { int32_t i; float f; } old;
  union { int32_t i; float f; } assumed;
  old.f = *p;
  do {
    assumed.f = old.f;
    old.f = old.f + x;
    old.i = atomic_cmpxchg_i32_shared((volatile __local int32_t*)p, assumed.i, old.i);
  } while (assumed.i != old.i);
  return old.f;
#endif
}

SCALAR_FUN_ATTR int32_t atomic_smax_i32_global(volatile __global int32_t *p, int32_t x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicMax((int32_t*)p, x);
#else
  return atomic_max(p, x);
#endif
}

SCALAR_FUN_ATTR int32_t atomic_smax_i32_shared(volatile __local int32_t *p, int32_t x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicMax((int32_t*)p, x);
#else
  return atomic_max(p, x);
#endif
}

SCALAR_FUN_ATTR int32_t atomic_smin_i32_global(volatile __global int32_t *p, int32_t x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicMin((int32_t*)p, x);
#else
  return atomic_min(p, x);
#endif
}

SCALAR_FUN_ATTR int32_t atomic_smin_i32_shared(volatile __local int32_t *p, int32_t x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicMin((int32_t*)p, x);
#else
  return atomic_min(p, x);
#endif
}

SCALAR_FUN_ATTR uint32_t atomic_umax_i32_global(volatile __global uint32_t *p, uint32_t x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicMax((uint32_t*)p, x);
#else
  return atomic_max(p, x);
#endif
}

SCALAR_FUN_ATTR uint32_t atomic_umax_i32_shared(volatile __local uint32_t *p, uint32_t x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicMax((uint32_t*)p, x);
#else
  return atomic_max(p, x);
#endif
}

SCALAR_FUN_ATTR uint32_t atomic_umin_i32_global(volatile __global uint32_t *p, uint32_t x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicMin((uint32_t*)p, x);
#else
  return atomic_min(p, x);
#endif
}

SCALAR_FUN_ATTR uint32_t atomic_umin_i32_shared(volatile __local uint32_t *p, uint32_t x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicMin((uint32_t*)p, x);
#else
  return atomic_min(p, x);
#endif
}

SCALAR_FUN_ATTR int32_t atomic_and_i32_global(volatile __global int32_t *p, int32_t x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicAnd((int32_t*)p, x);
#else
  return atomic_and(p, x);
#endif
}

SCALAR_FUN_ATTR int32_t atomic_and_i32_shared(volatile __local int32_t *p, int32_t x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicAnd((int32_t*)p, x);
#else
  return atomic_and(p, x);
#endif
}

SCALAR_FUN_ATTR int32_t atomic_or_i32_global(volatile __global int32_t *p, int32_t x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicOr((int32_t*)p, x);
#else
  return atomic_or(p, x);
#endif
}

SCALAR_FUN_ATTR int32_t atomic_or_i32_shared(volatile __local int32_t *p, int32_t x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicOr((int32_t*)p, x);
#else
  return atomic_or(p, x);
#endif
}

SCALAR_FUN_ATTR int32_t atomic_xor_i32_global(volatile __global int32_t *p, int32_t x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicXor((int32_t*)p, x);
#else
  return atomic_xor(p, x);
#endif
}

SCALAR_FUN_ATTR int32_t atomic_xor_i32_shared(volatile __local int32_t *p, int32_t x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicXor((int32_t*)p, x);
#else
  return atomic_xor(p, x);
#endif
}

// Start of 64 bit atomics

#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP) || defined(cl_khr_int64_base_atomics) && defined(cl_khr_int64_extended_atomics)

SCALAR_FUN_ATTR int64_t atomic_xchg_i64_global(volatile __global int64_t *p, int64_t x);
SCALAR_FUN_ATTR int64_t atomic_xchg_i64_shared(volatile __local int64_t *p, int64_t x);
SCALAR_FUN_ATTR int64_t atomic_cmpxchg_i64_global(volatile __global int64_t *p,
                                                         int64_t cmp, int64_t val);
SCALAR_FUN_ATTR int64_t atomic_cmpxchg_i64_shared(volatile __local int64_t *p,
                                                        int64_t cmp, int64_t val);
SCALAR_FUN_ATTR int64_t atomic_add_i64_global(volatile __global int64_t *p, int64_t x);
SCALAR_FUN_ATTR int64_t atomic_add_i64_shared(volatile __local int64_t *p, int64_t x);
SCALAR_FUN_ATTR int64_t atomic_smax_i64_global(volatile __global int64_t *p, int64_t x);
SCALAR_FUN_ATTR int64_t atomic_smax_i64_shared(volatile __local int64_t *p, int64_t x);
SCALAR_FUN_ATTR int64_t atomic_smin_i64_global(volatile __global int64_t *p, int64_t x);
SCALAR_FUN_ATTR int64_t atomic_smin_i64_shared(volatile __local int64_t *p, int64_t x);
SCALAR_FUN_ATTR uint64_t atomic_umax_i64_global(volatile __global uint64_t *p, uint64_t x);
SCALAR_FUN_ATTR uint64_t atomic_umax_i64_shared(volatile __local uint64_t *p, uint64_t x);
SCALAR_FUN_ATTR uint64_t atomic_umin_i64_global(volatile __global uint64_t *p, uint64_t x);
SCALAR_FUN_ATTR uint64_t atomic_umin_i64_shared(volatile __local uint64_t *p, uint64_t x);
SCALAR_FUN_ATTR int64_t atomic_and_i64_global(volatile __global int64_t *p, int64_t x);
SCALAR_FUN_ATTR int64_t atomic_and_i64_shared(volatile __local int64_t *p, int64_t x);
SCALAR_FUN_ATTR int64_t atomic_or_i64_global(volatile __global int64_t *p, int64_t x);
SCALAR_FUN_ATTR int64_t atomic_or_i64_shared(volatile __local int64_t *p, int64_t x);
SCALAR_FUN_ATTR int64_t atomic_xor_i64_global(volatile __global int64_t *p, int64_t x);
SCALAR_FUN_ATTR int64_t atomic_xor_i64_shared(volatile __local int64_t *p, int64_t x);

#ifdef FUTHARK_F64_ENABLED
SCALAR_FUN_ATTR double atomic_fadd_f64_global(volatile __global double *p, double x);
SCALAR_FUN_ATTR double atomic_fadd_f64_shared(volatile __local double *p, double x);
#endif

SCALAR_FUN_ATTR int64_t atomic_xchg_i64_global(volatile __global int64_t *p, int64_t x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicExch((uint64_t*)p, x);
#else
  return atom_xor(p, x);
#endif
}

SCALAR_FUN_ATTR int64_t atomic_xchg_i64_shared(volatile __local int64_t *p, int64_t x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicExch((uint64_t*)p, x);
#else
  return atom_xor(p, x);
#endif
}

SCALAR_FUN_ATTR int64_t atomic_cmpxchg_i64_global(volatile __global int64_t *p,
                                                         int64_t cmp, int64_t val) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicCAS((uint64_t*)p, cmp, val);
#else
  return atom_cmpxchg(p, cmp, val);
#endif
}

SCALAR_FUN_ATTR int64_t atomic_cmpxchg_i64_shared(volatile __local int64_t *p,
                                                        int64_t cmp, int64_t val) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicCAS((uint64_t*)p, cmp, val);
#else
  return atom_cmpxchg(p, cmp, val);
#endif
}

SCALAR_FUN_ATTR int64_t atomic_add_i64_global(volatile __global int64_t *p, int64_t x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicAdd((uint64_t*)p, x);
#else
  return atom_add(p, x);
#endif
}

SCALAR_FUN_ATTR int64_t atomic_add_i64_shared(volatile __local int64_t *p, int64_t x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicAdd((uint64_t*)p, x);
#else
  return atom_add(p, x);
#endif
}

#ifdef FUTHARK_F64_ENABLED

SCALAR_FUN_ATTR double atomic_fadd_f64_global(volatile __global double *p, double x) {
#if defined(FUTHARK_CUDA) && __CUDA_ARCH__ >= 600 || defined(FUTHARK_HIP)
  return atomicAdd((double*)p, x);
#else
  union { int64_t i; double f; } old;
  union { int64_t i; double f; } assumed;
  old.f = *p;
  do {
    assumed.f = old.f;
    old.f = old.f + x;
    old.i = atomic_cmpxchg_i64_global((volatile __global int64_t*)p, assumed.i, old.i);
  } while (assumed.i != old.i);
  return old.f;
#endif
}

SCALAR_FUN_ATTR double atomic_fadd_f64_shared(volatile __local double *p, double x) {
#if defined(FUTHARK_CUDA) && __CUDA_ARCH__ >= 600 || defined(FUTHARK_HIP)
  return atomicAdd((double*)p, x);
#else
  union { int64_t i; double f; } old;
  union { int64_t i; double f; } assumed;
  old.f = *p;
  do {
    assumed.f = old.f;
    old.f = old.f + x;
    old.i = atomic_cmpxchg_i64_shared((volatile __local int64_t*)p, assumed.i, old.i);
  } while (assumed.i != old.i);
  return old.f;
#endif
}

#endif

SCALAR_FUN_ATTR int64_t atomic_smax_i64_global(volatile __global int64_t *p, int64_t x) {
#if defined(FUTHARK_CUDA)
  return atomicMax((int64_t*)p, x);
#elif defined(FUTHARK_HIP)
  // Currentely missing in HIP; probably a temporary oversight.
  int64_t old = *p, assumed;
  do {
    assumed = old;
    old = smax64(old, x);
    old = atomic_cmpxchg_i64_global((volatile __global int64_t*)p, assumed, old);
  } while (assumed != old);
  return old;
#else
  return atom_max(p, x);
#endif
}

SCALAR_FUN_ATTR int64_t atomic_smax_i64_shared(volatile __local int64_t *p, int64_t x) {
#if defined(FUTHARK_CUDA)
  return atomicMax((int64_t*)p, x);
#elif defined(FUTHARK_HIP)
  // Currentely missing in HIP; probably a temporary oversight.
  int64_t old = *p, assumed;
  do {
    assumed = old;
    old = smax64(old, x);
    old = atomic_cmpxchg_i64_shared((volatile __local int64_t*)p, assumed, old);
  } while (assumed != old);
  return old;
#else
  return atom_max(p, x);
#endif
}

SCALAR_FUN_ATTR int64_t atomic_smin_i64_global(volatile __global int64_t *p, int64_t x) {
#if defined(FUTHARK_CUDA)
  return atomicMin((int64_t*)p, x);
#elif defined(FUTHARK_HIP)
  // Currentely missing in HIP; probably a temporary oversight.
  int64_t old = *p, assumed;
  do {
    assumed = old;
    old = smin64(old, x);
    old = atomic_cmpxchg_i64_global((volatile __global int64_t*)p, assumed, old);
  } while (assumed != old);
  return old;
#else
  return atom_min(p, x);
#endif
}

SCALAR_FUN_ATTR int64_t atomic_smin_i64_shared(volatile __local int64_t *p, int64_t x) {
#if defined(FUTHARK_CUDA)
  return atomicMin((int64_t*)p, x);
#elif defined(FUTHARK_HIP)
  // Currentely missing in HIP; probably a temporary oversight.
  int64_t old = *p, assumed;
  do {
    assumed = old;
    old = smin64(old, x);
    old = atomic_cmpxchg_i64_shared((volatile __local int64_t*)p, assumed, old);
  } while (assumed != old);
  return old;
#else
  return atom_min(p, x);
#endif
}

SCALAR_FUN_ATTR uint64_t atomic_umax_i64_global(volatile __global uint64_t *p, uint64_t x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicMax((uint64_t*)p, x);
#else
  return atom_max(p, x);
#endif
}

SCALAR_FUN_ATTR uint64_t atomic_umax_i64_shared(volatile __local uint64_t *p, uint64_t x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicMax((uint64_t*)p, x);
#else
  return atom_max(p, x);
#endif
}

SCALAR_FUN_ATTR uint64_t atomic_umin_i64_global(volatile __global uint64_t *p, uint64_t x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicMin((uint64_t*)p, x);
#else
  return atom_min(p, x);
#endif
}

SCALAR_FUN_ATTR uint64_t atomic_umin_i64_shared(volatile __local uint64_t *p, uint64_t x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicMin((uint64_t*)p, x);
#else
  return atom_min(p, x);
#endif
}

SCALAR_FUN_ATTR int64_t atomic_and_i64_global(volatile __global int64_t *p, int64_t x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicAnd((uint64_t*)p, x);
#else
  return atom_and(p, x);
#endif
}

SCALAR_FUN_ATTR int64_t atomic_and_i64_shared(volatile __local int64_t *p, int64_t x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicAnd((uint64_t*)p, x);
#else
  return atom_and(p, x);
#endif
}

SCALAR_FUN_ATTR int64_t atomic_or_i64_global(volatile __global int64_t *p, int64_t x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicOr((uint64_t*)p, x);
#else
  return atom_or(p, x);
#endif
}

SCALAR_FUN_ATTR int64_t atomic_or_i64_shared(volatile __local int64_t *p, int64_t x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicOr((uint64_t*)p, x);
#else
  return atom_or(p, x);
#endif
}

SCALAR_FUN_ATTR int64_t atomic_xor_i64_global(volatile __global int64_t *p, int64_t x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicXor((uint64_t*)p, x);
#else
  return atom_xor(p, x);
#endif
}

SCALAR_FUN_ATTR int64_t atomic_xor_i64_shared(volatile __local int64_t *p, int64_t x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicXor((uint64_t*)p, x);
#else
  return atom_xor(p, x);
#endif
}

#endif // defined(FUTHARK_CUDA) || defined(FUTHARK_HIP) || defined(cl_khr_int64_base_atomics) && defined(cl_khr_int64_extended_atomics)

// End of atomics.h
// Start of transpose.cl

#define GEN_TRANSPOSE_KERNELS(NAME, ELEM_TYPE)                          \
FUTHARK_KERNEL_SIZED(TR_BLOCK_DIM*2, TR_TILE_DIM/TR_ELEMS_PER_THREAD, 1)\
void map_transpose_##NAME(SHARED_MEM_PARAM                              \
                          __global ELEM_TYPE *dst_mem,                  \
                          int64_t dst_offset,                           \
                          __global ELEM_TYPE *src_mem,                  \
                          int64_t src_offset,                           \
                          int32_t num_arrays,                           \
                          int32_t x_elems,                              \
                          int32_t y_elems,                              \
                          int32_t mulx,                                 \
                          int32_t muly,                                 \
                          int32_t repeat_1,                             \
                          int32_t repeat_2) {                           \
  (void)mulx; (void)muly;                                               \
  __local ELEM_TYPE* block = (__local ELEM_TYPE*)shared_mem;            \
  int tblock_id_0 = get_tblock_id(0);                                   \
  int global_id_0 = get_global_id(0);                                   \
  int tblock_id_1 = get_tblock_id(1);                                   \
  int global_id_1 = get_global_id(1);                                   \
  for (int i1 = 0; i1 <= repeat_1; i1++) {                              \
    int tblock_id_2 = get_tblock_id(2);                                 \
    int global_id_2 = get_global_id(2);                                 \
    for (int i2 = 0; i2 <= repeat_2; i2++) {                            \
      int32_t our_array_offset = tblock_id_2 * x_elems * y_elems;       \
      int32_t odata_offset = dst_offset + our_array_offset;             \
      int32_t idata_offset = src_offset + our_array_offset;             \
      int32_t x_index = global_id_0;                                    \
      int32_t y_index = tblock_id_1 * TR_TILE_DIM + get_local_id(1);    \
      if (x_index < x_elems) {                                          \
        for (int32_t j = 0; j < TR_ELEMS_PER_THREAD; j++) {             \
          int32_t index_i = (y_index + j * (TR_TILE_DIM/TR_ELEMS_PER_THREAD)) * x_elems + x_index; \
          if (y_index + j * (TR_TILE_DIM/TR_ELEMS_PER_THREAD) < y_elems) { \
            block[(get_local_id(1) + j * (TR_TILE_DIM/TR_ELEMS_PER_THREAD)) * (TR_TILE_DIM+1) + \
                  get_local_id(0)] =                                    \
              src_mem[idata_offset + index_i];                          \
          }                                                             \
        }                                                               \
      }                                                                 \
      barrier_local();                                                  \
      x_index = tblock_id_1 * TR_TILE_DIM + get_local_id(0);            \
      y_index = tblock_id_0 * TR_TILE_DIM + get_local_id(1);            \
      if (x_index < y_elems) {                                          \
        for (int32_t j = 0; j < TR_ELEMS_PER_THREAD; j++) {             \
          int32_t index_out = (y_index + j * (TR_TILE_DIM/TR_ELEMS_PER_THREAD)) * y_elems + x_index; \
          if (y_index + j * (TR_TILE_DIM/TR_ELEMS_PER_THREAD) < x_elems) { \
            dst_mem[(odata_offset + index_out)] =                       \
              block[get_local_id(0) * (TR_TILE_DIM+1) +                 \
                    get_local_id(1) + j * (TR_TILE_DIM/TR_ELEMS_PER_THREAD)]; \
          }                                                             \
        }                                                               \
      }                                                                 \
      tblock_id_2 += get_num_tblocks(2);                                \
      global_id_2 += get_global_size(2);                                \
    }                                                                   \
    tblock_id_1 += get_num_tblocks(1);                                  \
    global_id_1 += get_global_size(1);                                  \
  }                                                                     \
}                                                                       \
                                                                        \
FUTHARK_KERNEL_SIZED(TR_BLOCK_DIM, TR_BLOCK_DIM, 1)                     \
void map_transpose_##NAME##_low_height(SHARED_MEM_PARAM                 \
                                                __global ELEM_TYPE *dst_mem, \
                                                int64_t dst_offset,     \
                                                __global ELEM_TYPE *src_mem, \
                                                int64_t src_offset,     \
                                                int32_t num_arrays,     \
                                                int32_t x_elems,        \
                                                int32_t y_elems,        \
                                                int32_t mulx,           \
                                                int32_t muly,           \
                                                int32_t repeat_1,       \
                                                int32_t repeat_2) {     \
  __local ELEM_TYPE* block = (__local ELEM_TYPE*)shared_mem;            \
  int tblock_id_0 = get_tblock_id(0);                                   \
  int global_id_0 = get_global_id(0);                                   \
  int tblock_id_1 = get_tblock_id(1);                                   \
  int global_id_1 = get_global_id(1);                                   \
  for (int i1 = 0; i1 <= repeat_1; i1++) {                              \
    int tblock_id_2 = get_tblock_id(2);                                 \
    int global_id_2 = get_global_id(2);                                 \
    for (int i2 = 0; i2 <= repeat_2; i2++) {                            \
      int32_t our_array_offset = tblock_id_2 * x_elems * y_elems;       \
      int32_t odata_offset = dst_offset + our_array_offset;             \
      int32_t idata_offset = src_offset + our_array_offset;             \
      int32_t x_index =                                                 \
        tblock_id_0 * TR_BLOCK_DIM * mulx +                             \
        get_local_id(0) +                                               \
        get_local_id(1)%mulx * TR_BLOCK_DIM;                            \
      int32_t y_index = tblock_id_1 * TR_BLOCK_DIM + get_local_id(1)/mulx; \
      int32_t index_in = y_index * x_elems + x_index;                   \
      if (x_index < x_elems && y_index < y_elems) {                     \
        block[get_local_id(1) * (TR_BLOCK_DIM+1) + get_local_id(0)] =   \
          src_mem[idata_offset + index_in];                             \
      }                                                                 \
      barrier_local();                                                  \
      x_index = tblock_id_1 * TR_BLOCK_DIM + get_local_id(0)/mulx;      \
      y_index =                                                         \
        tblock_id_0 * TR_BLOCK_DIM * mulx +                             \
        get_local_id(1) +                                               \
        (get_local_id(0)%mulx) * TR_BLOCK_DIM;                          \
      int32_t index_out = y_index * y_elems + x_index;                  \
      if (x_index < y_elems && y_index < x_elems) {                     \
        dst_mem[odata_offset + index_out] =                             \
          block[get_local_id(0) * (TR_BLOCK_DIM+1) + get_local_id(1)];  \
      }                                                                 \
      tblock_id_2 += get_num_tblocks(2);                                \
      global_id_2 += get_global_size(2);                                \
    }                                                                   \
    tblock_id_1 += get_num_tblocks(1);                                  \
    global_id_1 += get_global_size(1);                                  \
  }                                                                     \
}                                                                       \
                                                                        \
FUTHARK_KERNEL_SIZED(TR_BLOCK_DIM, TR_BLOCK_DIM, 1)                     \
void map_transpose_##NAME##_low_width(SHARED_MEM_PARAM                  \
                                      __global ELEM_TYPE *dst_mem,      \
                                      int64_t dst_offset,               \
                                      __global ELEM_TYPE *src_mem,      \
                                      int64_t src_offset,               \
                                      int32_t num_arrays,               \
                                      int32_t x_elems,                  \
                                      int32_t y_elems,                  \
                                      int32_t mulx,                     \
                                      int32_t muly,                     \
                                      int32_t repeat_1,                 \
                                      int32_t repeat_2) {               \
  __local ELEM_TYPE* block = (__local ELEM_TYPE*)shared_mem;            \
  int tblock_id_0 = get_tblock_id(0);                                   \
  int global_id_0 = get_global_id(0);                                   \
  int tblock_id_1 = get_tblock_id(1);                                   \
  int global_id_1 = get_global_id(1);                                   \
  for (int i1 = 0; i1 <= repeat_1; i1++) {                              \
    int tblock_id_2 = get_tblock_id(2);                                 \
    int global_id_2 = get_global_id(2);                                 \
    for (int i2 = 0; i2 <= repeat_2; i2++) {                            \
      int32_t our_array_offset = tblock_id_2 * x_elems * y_elems;       \
      int32_t odata_offset = dst_offset + our_array_offset;             \
      int32_t idata_offset = src_offset + our_array_offset;             \
      int32_t x_index = tblock_id_0 * TR_BLOCK_DIM + get_local_id(0)/muly; \
      int32_t y_index =                                                 \
        tblock_id_1 * TR_BLOCK_DIM * muly +                             \
        get_local_id(1) + (get_local_id(0)%muly) * TR_BLOCK_DIM;        \
      int32_t index_in = y_index * x_elems + x_index;                   \
      if (x_index < x_elems && y_index < y_elems) {                     \
        block[get_local_id(1) * (TR_BLOCK_DIM+1) + get_local_id(0)] =   \
          src_mem[idata_offset + index_in];                             \
      }                                                                 \
      barrier_local();                                                  \
      x_index = tblock_id_1 * TR_BLOCK_DIM * muly +                     \
        get_local_id(0) + (get_local_id(1)%muly) * TR_BLOCK_DIM;        \
      y_index = tblock_id_0 * TR_BLOCK_DIM + get_local_id(1)/muly;      \
      int32_t index_out = y_index * y_elems + x_index;                  \
      if (x_index < y_elems && y_index < x_elems) {                     \
        dst_mem[odata_offset + index_out] =                             \
          block[get_local_id(0) * (TR_BLOCK_DIM+1) + get_local_id(1)];  \
      }                                                                 \
      tblock_id_2 += get_num_tblocks(2);                                \
      global_id_2 += get_num_tblocks(2) * get_local_size(2);            \
    }                                                                   \
    tblock_id_1 += get_num_tblocks(1);                                  \
    global_id_1 += get_num_tblocks(1) * get_local_size(1);              \
  }                                                                     \
}                                                                       \
                                                                        \
FUTHARK_KERNEL_SIZED(TR_BLOCK_DIM*TR_BLOCK_DIM, 1, 1)                   \
void map_transpose_##NAME##_small(SHARED_MEM_PARAM                       \
                                  __global ELEM_TYPE *dst_mem,          \
                                  int64_t dst_offset,                   \
                                  __global ELEM_TYPE *src_mem,          \
                                  int64_t src_offset,                   \
                                  int32_t num_arrays,                   \
                                  int32_t x_elems,                      \
                                  int32_t y_elems,                      \
                                  int32_t mulx,                         \
                                  int32_t muly,                         \
                                  int32_t repeat_1,                     \
                                  int32_t repeat_2) {                   \
  (void)mulx; (void)muly;                                               \
  __local ELEM_TYPE* block = (__local ELEM_TYPE*)shared_mem;            \
  int tblock_id_0 = get_tblock_id(0);                                   \
  int global_id_0 = get_global_id(0);                                   \
  int tblock_id_1 = get_tblock_id(1);                                   \
  int global_id_1 = get_global_id(1);                                   \
  for (int i1 = 0; i1 <= repeat_1; i1++) {                              \
    int tblock_id_2 = get_tblock_id(2);                                 \
    int global_id_2 = get_global_id(2);                                 \
    for (int i2 = 0; i2 <= repeat_2; i2++) {                            \
      int32_t our_array_offset = global_id_0/(y_elems * x_elems) * y_elems * x_elems; \
      int32_t x_index = (global_id_0 % (y_elems * x_elems))/y_elems;    \
      int32_t y_index = global_id_0%y_elems;                            \
      int32_t odata_offset = dst_offset + our_array_offset;             \
      int32_t idata_offset = src_offset + our_array_offset;             \
      int32_t index_in = y_index * x_elems + x_index;                   \
      int32_t index_out = x_index * y_elems + y_index;                  \
      if (global_id_0 < x_elems * y_elems * num_arrays) {               \
        dst_mem[odata_offset + index_out] = src_mem[idata_offset + index_in]; \
      }                                                                 \
      tblock_id_2 += get_num_tblocks(2);                                \
      global_id_2 += get_global_size(2);                                \
    }                                                                   \
    tblock_id_1 += get_num_tblocks(1);                                  \
    global_id_1 += get_global_size(1);                                  \
  }                                                                     \
}                                                                       \
                                                                        \
FUTHARK_KERNEL_SIZED(TR_BLOCK_DIM*2, TR_TILE_DIM/TR_ELEMS_PER_THREAD, 1)\
void map_transpose_##NAME##_large(SHARED_MEM_PARAM                      \
                                  __global ELEM_TYPE *dst_mem,          \
                                  int64_t dst_offset,                   \
                                  __global ELEM_TYPE *src_mem,          \
                                  int64_t src_offset,                   \
                                  int64_t num_arrays,                   \
                                  int64_t x_elems,                      \
                                  int64_t y_elems,                      \
                                  int64_t mulx,                         \
                                  int64_t muly,                         \
                                  int32_t repeat_1,                     \
                                  int32_t repeat_2) {                   \
  (void)mulx; (void)muly;                                               \
  __local ELEM_TYPE* block = (__local ELEM_TYPE*)shared_mem;             \
  int tblock_id_0 = get_tblock_id(0);                                   \
  int global_id_0 = get_global_id(0);                                   \
  int tblock_id_1 = get_tblock_id(1);                                   \
  int global_id_1 = get_global_id(1);                                   \
  for (int i1 = 0; i1 <= repeat_1; i1++) {                              \
    int tblock_id_2 = get_tblock_id(2);                                 \
    int global_id_2 = get_global_id(2);                                 \
    for (int i2 = 0; i2 <= repeat_2; i2++) {                            \
      int64_t our_array_offset = tblock_id_2 * x_elems * y_elems;       \
      int64_t odata_offset = dst_offset + our_array_offset;             \
      int64_t idata_offset = src_offset + our_array_offset;             \
      int64_t x_index = global_id_0;                                    \
      int64_t y_index = tblock_id_1 * TR_TILE_DIM + get_local_id(1);    \
      if (x_index < x_elems) {                                          \
        for (int64_t j = 0; j < TR_ELEMS_PER_THREAD; j++) {             \
          int64_t index_i = (y_index + j * (TR_TILE_DIM/TR_ELEMS_PER_THREAD)) * x_elems + x_index; \
          if (y_index + j * (TR_TILE_DIM/TR_ELEMS_PER_THREAD) < y_elems) { \
            block[(get_local_id(1) + j * (TR_TILE_DIM/TR_ELEMS_PER_THREAD)) * (TR_TILE_DIM+1) + \
                  get_local_id(0)] =                                    \
              src_mem[idata_offset + index_i];                          \
          }                                                             \
        }                                                               \
      }                                                                 \
      barrier_local();                                                  \
      x_index = tblock_id_1 * TR_TILE_DIM + get_local_id(0);            \
      y_index = tblock_id_0 * TR_TILE_DIM + get_local_id(1);            \
      if (x_index < y_elems) {                                          \
        for (int64_t j = 0; j < TR_ELEMS_PER_THREAD; j++) {             \
          int64_t index_out = (y_index + j * (TR_TILE_DIM/TR_ELEMS_PER_THREAD)) * y_elems + x_index; \
          if (y_index + j * (TR_TILE_DIM/TR_ELEMS_PER_THREAD) < x_elems) { \
            dst_mem[(odata_offset + index_out)] =                       \
              block[get_local_id(0) * (TR_TILE_DIM+1) +                 \
                    get_local_id(1) + j * (TR_TILE_DIM/TR_ELEMS_PER_THREAD)]; \
          }                                                             \
        }                                                               \
      }                                                                 \
      tblock_id_2 += get_num_tblocks(2);                                \
      global_id_2 += get_global_size(2);                                \
    }                                                                   \
    tblock_id_1 += get_num_tblocks(1);                                  \
    global_id_1 += get_global_size(1);                                  \
  }                                                                     \
}                                                                       \

GEN_TRANSPOSE_KERNELS(1b, uint8_t)
GEN_TRANSPOSE_KERNELS(2b, uint16_t)
GEN_TRANSPOSE_KERNELS(4b, uint32_t)
GEN_TRANSPOSE_KERNELS(8b, uint64_t)

// End of transpose.cl
// Start of copy.cl

#define GEN_COPY_KERNEL(NAME, ELEM_TYPE) \
FUTHARK_KERNEL void lmad_copy_##NAME(SHARED_MEM_PARAM                   \
                               __global ELEM_TYPE *dst_mem,             \
                               int64_t dst_offset,                      \
                               __global ELEM_TYPE *src_mem,             \
                               int64_t src_offset,                      \
                               int64_t n,                               \
                               int r,                                   \
                               int64_t shape0, int64_t dst_stride0, int64_t src_stride0, \
                               int64_t shape1, int64_t dst_stride1, int64_t src_stride1, \
                               int64_t shape2, int64_t dst_stride2, int64_t src_stride2, \
                               int64_t shape3, int64_t dst_stride3, int64_t src_stride3, \
                               int64_t shape4, int64_t dst_stride4, int64_t src_stride4, \
                               int64_t shape5, int64_t dst_stride5, int64_t src_stride5, \
                               int64_t shape6, int64_t dst_stride6, int64_t src_stride6, \
                               int64_t shape7, int64_t dst_stride7, int64_t src_stride7) { \
  int64_t gtid = get_global_id(0);                                      \
  int64_t remainder = gtid;                                             \
                                                                        \
  if (gtid >= n) {                                                      \
    return;                                                             \
  }                                                                     \
                                                                        \
  if (r > 0) {                                                          \
    int64_t i = remainder % shape0;                                     \
    dst_offset += i * dst_stride0;                                      \
    src_offset += i * src_stride0;                                      \
    remainder /= shape0;                                                \
  }                                                                     \
  if (r > 1) {                                                          \
    int64_t i = remainder % shape1;                                     \
    dst_offset += i * dst_stride1;                                      \
    src_offset += i * src_stride1;                                      \
    remainder /= shape1;                                                \
  }                                                                     \
  if (r > 2) {                                                          \
    int64_t i = remainder % shape2;                                     \
    dst_offset += i * dst_stride2;                                      \
    src_offset += i * src_stride2;                                      \
    remainder /= shape2;                                                \
  }                                                                     \
  if (r > 3) {                                                          \
    int64_t i = remainder % shape3;                                     \
    dst_offset += i * dst_stride3;                                      \
    src_offset += i * src_stride3;                                      \
    remainder /= shape3;                                                \
  }                                                                     \
  if (r > 4) {                                                          \
    int64_t i = remainder % shape4;                                     \
    dst_offset += i * dst_stride4;                                      \
    src_offset += i * src_stride4;                                      \
    remainder /= shape4;                                                \
  }                                                                     \
  if (r > 5) {                                                          \
    int64_t i = remainder % shape5;                                     \
    dst_offset += i * dst_stride5;                                      \
    src_offset += i * src_stride5;                                      \
    remainder /= shape5;                                                \
  }                                                                     \
  if (r > 6) {                                                          \
    int64_t i = remainder % shape6;                                     \
    dst_offset += i * dst_stride6;                                      \
    src_offset += i * src_stride6;                                      \
    remainder /= shape6;                                                \
  }                                                                     \
  if (r > 7) {                                                          \
    int64_t i = remainder % shape7;                                     \
    dst_offset += i * dst_stride7;                                      \
    src_offset += i * src_stride7;                                      \
    remainder /= shape7;                                                \
  }                                                                     \
                                                                        \
  dst_mem[dst_offset] = src_mem[src_offset];                            \
}

GEN_COPY_KERNEL(1b, uint8_t)
GEN_COPY_KERNEL(2b, uint16_t)
GEN_COPY_KERNEL(4b, uint32_t)
GEN_COPY_KERNEL(8b, uint64_t)

// End of copy.cl
using namespace cute;

template<class TypeIn>
struct convert_type {
    using TypeOut = TypeIn;
};

template<>
struct convert_type<f16> {
    using TypeOut = half_t;
};

template<class ElmTypeAIn, class ElmTypeBIn, class ElmTypeCIn, class SizeM, class SizeN, class WarpsM, class WarpsN>
struct get_mma_config {};

// TODO: use FMA when Tensor Cores not available?

template<class SizeM, class SizeN, class WarpsM, class WarpsN>
struct get_mma_config<half_t, half_t, half_t, SizeM, SizeN, WarpsM, WarpsN> {
    // TODO: should depend on architecture available
    using MMATraits = MMA_Traits<SM80_16x8x16_F16F16F16F16_TN>;
    using ACopyOpSharedRegisters = SM75_U32x4_LDSM_N;
    using BCopyOpSharedRegisters = SM75_U16x8_LDSM_T;

    using MMATile = Tile<Int<16 * WarpsM{}>, Int<16 * WarpsN{}>, _16>;
    using TiledMMA = TiledMMA<
        MMA_Atom<MMATraits>,
        Layout<Shape<WarpsM,WarpsN,_1>>,
        MMATile
    >;
};

template<class SizeM, class SizeN, class WarpsM, class WarpsN>
struct get_mma_config<half_t, half_t, float, SizeM, SizeN, WarpsM, WarpsN>{
    // TODO: should depend on architecture available
    using MMATraits = MMA_Traits<SM80_16x8x16_F32F16F16F32_TN>;
    using ACopyOpSharedRegisters = SM75_U32x4_LDSM_N;
    using BCopyOpSharedRegisters = SM75_U16x8_LDSM_T;

    using MMATile = Tile<Int<16 * WarpsM{}>, Int<16 * WarpsN{}>, _16>;
    using TiledMMA = TiledMMA<
        MMA_Atom<MMATraits>,
        Layout<Shape<WarpsM,WarpsN,_1>>,
        MMATile
    >;
};

template<class SizeY, class SizeX, class Swizzle, class Majorness, int shift_len>
struct get_layout_config {};

template<class SizeY, class SizeX, int shift_len>
struct get_layout_config<SizeY, SizeX, _1, LayoutRight, shift_len>{
    using SharedLayout = ComposedLayout<Swizzle<3, 3, shift_len>, _0, Layout<Shape<SizeY, SizeX>, Stride<SizeX, _1>>>;
};

template<class SizeY, class SizeX, int shift_len>
struct get_layout_config<SizeY, SizeX, _0, LayoutRight, shift_len>{
    using SharedLayout = Layout<Shape<SizeY, SizeX>, Stride<SizeX, _1>>;
};

template<class SizeY, class SizeX, int shift_len>
struct get_layout_config<SizeY, SizeX, _1, LayoutLeft, shift_len>{
    using SharedLayout = ComposedLayout<Swizzle<3, 3, shift_len>, _0, Layout<Shape<SizeY, SizeX>, Stride<_1, SizeY>>>;
};

template<class SizeY, class SizeX, int shift_len>
struct get_layout_config<SizeY, SizeX, _0, LayoutLeft, shift_len>{
    using SharedLayout = Layout<Shape<SizeY, SizeX>, Stride<_1, SizeY>>;
};

template<class ElmTypeIn, class SizeY, class SizeX, class WarpsM, class WarpsN>
FUTHARK_FUN_ATTR void futrts_copyGlobalShared(unsigned char **mem_out_p, unsigned char *global_mem, unsigned char *shared_mem, int64_t offset, ElmTypeIn, SizeY, SizeX, WarpsM, WarpsN)
{
    *mem_out_p = shared_mem;

    int flatThreadIdx = threadIdx.z * blockDim.y * blockDim.x + threadIdx.y * blockDim.x + threadIdx.x;

    if (flatThreadIdx < WarpsM{} * WarpsN{} * 32) {
      using ElmType = typename convert_type<ElmTypeIn>::TypeOut;

      using CopyOpGlobalShared = SM80_CP_ASYNC_CACHEGLOBAL<uint128_t>;

      constexpr int elmsPerLoad = 16 / sizeof(ElmType);
      constexpr int threadsX = SizeX{} / elmsPerLoad;
      constexpr int threadsY = (WarpsM{} * WarpsN{} * 32) / threadsX;

      constexpr unsigned int sizeXunsigned = SizeX{};
      constexpr unsigned int shift_len = max(bit_width(sizeXunsigned) - 4, _3{});

      using LayoutConfig = get_layout_config<SizeY, SizeX, _1, LayoutRight, shift_len>;
      typename LayoutConfig::SharedLayout s_layout;

      auto g_layout = make_layout(Shape<SizeY, SizeX>{}, LayoutRight{});

      TiledCopy copy_global_shared = make_tiled_copy(Copy_Atom<CopyOpGlobalShared, ElmType>{},
          make_layout(Shape<Int<threadsY>, Int<threadsX>>{}, LayoutRight{}),
          Layout<Shape<_1,Int<elmsPerLoad>>>{}
      );

      Tensor s = make_tensor(make_smem_ptr(reinterpret_cast<ElmType *>(shared_mem)), s_layout);
      Tensor g = make_tensor(make_gmem_ptr(&reinterpret_cast<ElmType *>(global_mem)[offset]), g_layout);

      ThrCopy thr_copy_global_shared = copy_global_shared.get_slice(flatThreadIdx);
      Tensor tAgA = thr_copy_global_shared.partition_S(g);
      Tensor tAsA = thr_copy_global_shared.partition_D(s);

      copy(copy_global_shared, tAgA, tAsA);

      cp_async_fence();
    }

//     Assuming the copied data is only used in futrts_tensorMMM, we do not need to wait for it here
//     cp_async_wait<0>();
//     __syncthreads();
}

template<class ElmTypeAIn, class ElmTypeBIn, class ElmTypeCIn, class SizeM, class SizeN, class WarpsM, class WarpsN, int numRegs>
FUTHARK_FUN_ATTR void futrts_copyRegistersShared(unsigned char **mem_out_p, ElmTypeCIn (&registers_mem)[numRegs], unsigned char *shared_mem, ElmTypeAIn, ElmTypeBIn, SizeM, SizeN, WarpsM, WarpsN)
{
    *mem_out_p = shared_mem;

    int flatThreadIdx = threadIdx.z * blockDim.y * blockDim.x + threadIdx.y * blockDim.x + threadIdx.x;

    if (flatThreadIdx < WarpsM{} * WarpsN{} * 32) {
        using ElmTypeA = typename convert_type<ElmTypeAIn>::TypeOut;
        using ElmTypeB = typename convert_type<ElmTypeBIn>::TypeOut;
        using ElmTypeC = typename convert_type<ElmTypeCIn>::TypeOut;

        using MMAConfig = get_mma_config<ElmTypeA, ElmTypeB, ElmTypeC, SizeM, SizeN, WarpsM, WarpsN>;
        typename MMAConfig::TiledMMA tiled_mma;

        auto s_layout = make_layout(Shape<SizeM, SizeN>{}, LayoutRight{});

        ThrMMA thr_mma = tiled_mma.get_slice(flatThreadIdx);

        auto r_layout = partition_shape_C(thr_mma, s_layout.shape());
        Tensor tCrC = make_tensor(make_rmem_ptr(reinterpret_cast<ElmTypeC *>(registers_mem)), r_layout);

        Tensor s = make_tensor(make_smem_ptr(reinterpret_cast<ElmTypeC *>(shared_mem)), s_layout);
        Tensor tCsC = thr_mma.partition_C(s);

        copy(AutoVectorizingCopy{}, tCrC, tCsC);
    }
    __syncthreads();
}

template<class ElmTypeAIn, class ElmTypeBIn, class ElmTypeCIn, class SizeM, class SizeN, class SizeK, class WarpsM, class WarpsN, class ASwizzled, class BSwizzled, int numRegs>
FUTHARK_FUN_ATTR void futrts_tensorMMM(ElmTypeCIn (*mem_out_p)[numRegs], unsigned char *A_mem, unsigned char *B_mem, ElmTypeCIn (&C_mem)[numRegs], ElmTypeAIn, ElmTypeBIn, SizeM, SizeN, SizeK, WarpsM, WarpsN, ASwizzled, BSwizzled)
{
    int flatThreadIdx = threadIdx.z * blockDim.y * blockDim.x + threadIdx.y * blockDim.x + threadIdx.x;

    using ElmTypeA = typename convert_type<ElmTypeAIn>::TypeOut;
    using ElmTypeB = typename convert_type<ElmTypeBIn>::TypeOut;
    using ElmTypeC = typename convert_type<ElmTypeCIn>::TypeOut;

    using MMAConfig = get_mma_config<ElmTypeA, ElmTypeB, ElmTypeC, SizeM, SizeN, WarpsM, WarpsN>;
    typename MMAConfig::TiledMMA tiled_mma;

    constexpr unsigned int sizeKunsigned = SizeK{};
    constexpr unsigned int shift_lenK = max(bit_width(sizeKunsigned) - 4, _3{});

    constexpr unsigned int sizeNunsigned = SizeN{};
    constexpr unsigned int shift_lenN = max(bit_width(sizeNunsigned) - 4, _3{});

    using ALayoutConfig = get_layout_config<SizeM, SizeK, ASwizzled, LayoutRight, shift_lenK>;
    using BLayoutConfig = get_layout_config<SizeN, SizeK, BSwizzled, LayoutLeft, shift_lenN>;
    typename ALayoutConfig::SharedLayout sA_layout;
    typename BLayoutConfig::SharedLayout sB_layout;

    auto sC_layout = make_layout(Shape<SizeM, SizeN>{}, LayoutRight{});

    ThrMMA thr_mma = tiled_mma.get_slice(flatThreadIdx);

    auto rC_layout = partition_shape_C(thr_mma, sC_layout.shape());
    Tensor tCrC = make_tensor(make_rmem_ptr(reinterpret_cast<ElmTypeC *>(C_mem)), rC_layout);

    Tensor sA = make_tensor(make_smem_ptr(reinterpret_cast<ElmTypeA *>(A_mem)), sA_layout);
    Tensor sB = make_tensor(make_smem_ptr(reinterpret_cast<ElmTypeB *>(B_mem)), sB_layout);

    TiledCopy copyA_shared_registers = make_tiled_copy_A(Copy_Atom<typename MMAConfig::ACopyOpSharedRegisters, ElmTypeA>{}, tiled_mma);
    TiledCopy copyB_shared_registers = make_tiled_copy_B(Copy_Atom<typename MMAConfig::BCopyOpSharedRegisters, ElmTypeB>{}, tiled_mma);

    Tensor tCrA  = thr_mma.partition_fragment_A(sA);
    Tensor tCrB  = thr_mma.partition_fragment_B(sB);

    auto smem_thr_copy_A   = copyA_shared_registers.get_thread_slice(threadIdx.x);
    Tensor tCsA            = smem_thr_copy_A.partition_S(sA);
    Tensor tCrA_copy_view  = smem_thr_copy_A.retile_D(tCrA);

    auto smem_thr_copy_B   = copyB_shared_registers.get_thread_slice(threadIdx.x);
    Tensor tCsB            = smem_thr_copy_B.partition_S(sB);
    Tensor tCrB_copy_view  = smem_thr_copy_B.retile_D(tCrB);

    // Wait for data copied asynchronously by futrts_copyGlobalShared
    cp_async_wait<0>();
    __syncthreads();

    constexpr int K_BLOCK_MAX = size<2>(tCrA);
    CUTE_UNROLL
    for (int k_block = 0; k_block < K_BLOCK_MAX; ++k_block)
    {
        // Copy shared->registers
        copy(copyA_shared_registers, tCsA(_,_,k_block), tCrA_copy_view(_,_,k_block));
        copy(copyB_shared_registers, tCsB(_,_,k_block), tCrB_copy_view(_,_,k_block));

        // Perform mma on k_block in registers
        gemm(tiled_mma, tCrA(_,_,k_block), tCrB(_,_,k_block), tCrC);
    }

    for (int32_t i = 0; i < numRegs; i++)
        (*mem_out_p)[i] = C_mem[i];
}



FUTHARK_KERNEL_SIZED(FlashAttention_6021zisegmap_15596_dim1, 1, 1)
void FlashAttention_6021zisegmap_15596(__global int *global_failure, int failure_is_an_option, __global int64_t *global_failure_args, int64_t d_10788, int64_t m_10789, __global unsigned char *mem_16578)
{
    #define segmap_tblock_sizze_15591 (FlashAttention_6021zisegmap_15596zisegmap_tblock_sizze_15591)
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_17913;
    int32_t tblock_sizze_17916;
    int32_t wave_sizze_17915;
    int32_t block_id_17914;
    int32_t global_tid_17912;
    int64_t phys_tid_15596;
    int64_t global_tid_17917;
    int64_t slice_17918;
    int64_t slice_17919;
    int64_t gtid_15594;
    int64_t remnant_17920;
    int64_t gtid_15595;
    int64_t remnant_17921;
    
    local_tid_17913 = get_local_id(0);
    tblock_sizze_17916 = get_local_size(0);
    wave_sizze_17915 = LOCKSTEP_WIDTH;
    block_id_17914 = get_tblock_id(0);
    global_tid_17912 = block_id_17914 * tblock_sizze_17916 + local_tid_17913;
    phys_tid_15596 = sext_i32_i64(global_tid_17912);
    global_tid_17917 = sext_i32_i64(block_id_17914) * segmap_tblock_sizze_15591 + sext_i32_i64(local_tid_17913);
    slice_17918 = d_10788;
    slice_17919 = m_10789 * slice_17918;
    gtid_15594 = squot64(global_tid_17917, slice_17918);
    remnant_17920 = global_tid_17917 - gtid_15594 * slice_17918;
    gtid_15595 = remnant_17920;
    remnant_17921 = remnant_17920 - gtid_15595;
    if (slt64(gtid_15594, m_10789) && slt64(gtid_15595, d_10788)) {
        bool y_15599;
        bool index_certs_15601;
        
        y_15599 = slt64(gtid_15595, (int64_t) 64);
        if (!y_15599) {
            {
                if (atomic_cmpxchg_i32_global(global_failure, -1, 5) == -1) {
                    global_failure_args[0] = (int64_t) gtid_15595;
                    global_failure_args[1] = (int64_t) (int64_t) 64;
                    ;
                }
                return;
            }
        }
    }
    
  error_0:
    return;
    #undef segmap_tblock_sizze_15591
}
FUTHARK_KERNEL_SIZED(FlashAttention_6021zisegmap_15616_dim1, 1, 1)
void FlashAttention_6021zisegmap_15616(__global int *global_failure, int failure_is_an_option, __global int64_t *global_failure_args, int64_t d_10788, int64_t m_10789, int64_t dzlz7bUZLztZRz20Umz20UZLZLzpZRz20Udz20UnZRz7dUzg_11873, int64_t dzlz7bUZLztZRz20Unz20Umz7dUzg_11905, int64_t dzlz7bUZLztZRz20Umz20Udz7dUzg_11948, __global unsigned char *mem_16576, __global unsigned char *mem_16578, __global unsigned char *mem_16583)
{
    #define segmap_tblock_sizze_15610 (FlashAttention_6021zisegmap_15616zisegmap_tblock_sizze_15610)
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_17924;
    int32_t tblock_sizze_17927;
    int32_t wave_sizze_17926;
    int32_t block_id_17925;
    int32_t global_tid_17923;
    int64_t phys_tid_15616;
    int64_t global_tid_17928;
    int64_t slice_17929;
    int64_t slice_17930;
    int64_t slice_17931;
    int64_t gtid_15613;
    int64_t remnant_17932;
    int64_t gtid_15614;
    int64_t remnant_17933;
    int64_t gtid_15615;
    int64_t remnant_17934;
    
    local_tid_17924 = get_local_id(0);
    tblock_sizze_17927 = get_local_size(0);
    wave_sizze_17926 = LOCKSTEP_WIDTH;
    block_id_17925 = get_tblock_id(0);
    global_tid_17923 = block_id_17925 * tblock_sizze_17927 + local_tid_17924;
    phys_tid_15616 = sext_i32_i64(global_tid_17923);
    global_tid_17928 = sext_i32_i64(block_id_17925) * segmap_tblock_sizze_15610 + sext_i32_i64(local_tid_17924);
    slice_17929 = dzlz7bUZLztZRz20Umz20Udz7dUzg_11948;
    slice_17930 = d_10788 * slice_17929;
    slice_17931 = m_10789 * slice_17930;
    gtid_15613 = squot64(global_tid_17928, slice_17930);
    remnant_17932 = global_tid_17928 - gtid_15613 * slice_17930;
    gtid_15614 = squot64(remnant_17932, slice_17929);
    remnant_17933 = remnant_17932 - gtid_15614 * slice_17929;
    gtid_15615 = remnant_17933;
    remnant_17934 = remnant_17933 - gtid_15615;
    if ((slt64(gtid_15613, m_10789) && slt64(gtid_15614, d_10788)) && slt64(gtid_15615, dzlz7bUZLztZRz20Umz20Udz7dUzg_11948)) {
        bool y_15622;
        bool index_certs_15624;
        bool index_certs_15619;
        int64_t binop_x_16130;
        int64_t binop_y_16131;
        int64_t binop_x_16132;
        int64_t binop_x_16133;
        int64_t new_index_16136;
        int64_t binop_y_16152;
        int64_t binop_x_16153;
        int64_t new_index_16154;
        int64_t binop_y_16190;
        int64_t binop_x_16191;
        int64_t new_index_16192;
        int64_t binop_y_16268;
        int64_t new_index_16269;
        f16 lifted_lambda_res_15625;
        
        y_15622 = slt64(gtid_15615, dzlz7bUZLztZRz20Umz20UZLZLzpZRz20Udz20UnZRz7dUzg_11873);
        if (!y_15622) {
            {
                if (atomic_cmpxchg_i32_global(global_failure, -1, 6) == -1) {
                    global_failure_args[0] = (int64_t) gtid_15615;
                    global_failure_args[1] = (int64_t) dzlz7bUZLztZRz20Umz20UZLZLzpZRz20Udz20UnZRz7dUzg_11873;
                    ;
                }
                return;
            }
        }
        index_certs_15619 = 0;
        binop_x_16130 = dzlz7bUZLztZRz20Unz20Umz7dUzg_11905 * gtid_15613;
        binop_y_16131 = (int64_t) 64 * gtid_15615;
        binop_x_16132 = binop_x_16130 + binop_y_16131;
        binop_x_16133 = gtid_15614 + binop_x_16132;
        new_index_16136 = squot64(binop_x_16133, dzlz7bUZLztZRz20Unz20Umz7dUzg_11905);
        binop_y_16152 = dzlz7bUZLztZRz20Unz20Umz7dUzg_11905 * new_index_16136;
        binop_x_16153 = binop_x_16133 - binop_y_16152;
        new_index_16154 = squot64(binop_x_16153, (int64_t) 4096);
        binop_y_16190 = (int64_t) 4096 * new_index_16154;
        binop_x_16191 = binop_x_16153 - binop_y_16190;
        new_index_16192 = squot64(binop_x_16191, (int64_t) 64);
        binop_y_16268 = (int64_t) 64 * new_index_16192;
        new_index_16269 = binop_x_16191 - binop_y_16268;
        lifted_lambda_res_15625 = futrts_from_bits16(((__global uint16_t *) mem_16576)[new_index_16136 * ((int64_t) 4096 * m_10789) + new_index_16154 * (int64_t) 4096 + new_index_16192 * (int64_t) 64 + new_index_16269]);
        ((__global uint16_t *) mem_16583)[gtid_15613 * (dzlz7bUZLztZRz20Umz20Udz7dUzg_11948 * d_10788) + gtid_15614 * dzlz7bUZLztZRz20Umz20Udz7dUzg_11948 + gtid_15615] = futrts_to_bits16(lifted_lambda_res_15625);
    }
    
  error_0:
    return;
    #undef segmap_tblock_sizze_15610
}
FUTHARK_KERNEL_SIZED(FlashAttention_6021zisegmap_15767_dim1, 1, 1)
void FlashAttention_6021zisegmap_15767(__global int *global_failure, int64_t d_10788, int64_t m_10789, int64_t dzlz7bUZLztZRz20Umz20Udz7dUzg_10790, int64_t ext_16619, int64_t ext_16620, __global unsigned char *ext_mem_16621, __global unsigned char *mem_16626, __global unsigned char *mem_16629, __global unsigned char *mem_16634)
{
    #define segmap_tblock_sizze_15761 (FlashAttention_6021zisegmap_15767zisegmap_tblock_sizze_15761)
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_18020;
    int32_t tblock_sizze_18023;
    int32_t wave_sizze_18022;
    int32_t block_id_18021;
    int32_t global_tid_18019;
    int64_t phys_tid_15767;
    int64_t global_tid_18024;
    int64_t slice_18025;
    int64_t slice_18026;
    int64_t slice_18027;
    int64_t gtid_15764;
    int64_t remnant_18028;
    int64_t gtid_15765;
    int64_t remnant_18029;
    int64_t gtid_15766;
    int64_t remnant_18030;
    
    local_tid_18020 = get_local_id(0);
    tblock_sizze_18023 = get_local_size(0);
    wave_sizze_18022 = LOCKSTEP_WIDTH;
    block_id_18021 = get_tblock_id(0);
    global_tid_18019 = block_id_18021 * tblock_sizze_18023 + local_tid_18020;
    phys_tid_15767 = sext_i32_i64(global_tid_18019);
    global_tid_18024 = sext_i32_i64(block_id_18021) * segmap_tblock_sizze_15761 + sext_i32_i64(local_tid_18020);
    slice_18025 = dzlz7bUZLztZRz20Umz20Udz7dUzg_10790;
    slice_18026 = d_10788 * slice_18025;
    slice_18027 = m_10789 * slice_18026;
    gtid_15764 = squot64(global_tid_18024, slice_18026);
    remnant_18028 = global_tid_18024 - gtid_15764 * slice_18026;
    gtid_15765 = squot64(remnant_18028, slice_18025);
    remnant_18029 = remnant_18028 - gtid_15765 * slice_18025;
    gtid_15766 = remnant_18029;
    remnant_18030 = remnant_18029 - gtid_15766;
    if ((slt64(gtid_15764, m_10789) && slt64(gtid_15765, d_10788)) && slt64(gtid_15766, dzlz7bUZLztZRz20Umz20Udz7dUzg_10790)) {
        f16 eta_p_15768;
        f16 eta_p_15769;
        f16 eta_p_15770;
        f16 real_exp_arg0_15771;
        f16 exp_res_15772;
        f16 lifted_lambda_res_15773;
        
        eta_p_15768 = futrts_from_bits16(((__global uint16_t *) mem_16626)[gtid_15764 * d_10788 + gtid_15765]);
        eta_p_15769 = futrts_from_bits16(((__global uint16_t *) mem_16629)[gtid_15764 * d_10788 + gtid_15765]);
        eta_p_15770 = futrts_from_bits16(((__global uint16_t *) ext_mem_16621)[gtid_15764 * ext_16620 + gtid_15765 * ext_16619 + gtid_15766]);
        real_exp_arg0_15771 = eta_p_15770 - eta_p_15768;
        exp_res_15772 = futrts_exp16(real_exp_arg0_15771);
        lifted_lambda_res_15773 = exp_res_15772 / eta_p_15769;
        ((__global uint16_t *) mem_16634)[gtid_15764 * (dzlz7bUZLztZRz20Umz20Udz7dUzg_10790 * d_10788) + gtid_15765 * dzlz7bUZLztZRz20Umz20Udz7dUzg_10790 + gtid_15766] = futrts_to_bits16(lifted_lambda_res_15773);
    }
    
  error_0:
    return;
    #undef segmap_tblock_sizze_15761
}
FUTHARK_KERNEL_SIZED(FlashAttention_6021zisegmap_15947_dim1, 1, 1)
void FlashAttention_6021zisegmap_15947(__global int *global_failure, int64_t d_10788, int64_t m_10789, int64_t m_12246, int64_t y_13481, int64_t lmad_ext_16658, __global unsigned char *ext_mem_16665, __global unsigned char *mem_16675)
{
    #define segmap_tblock_sizze_15936 (FlashAttention_6021zisegmap_15947zisegmap_tblock_sizze_15936)
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_18128;
    int32_t tblock_sizze_18131;
    int32_t wave_sizze_18130;
    int32_t block_id_18129;
    int32_t global_tid_18127;
    int64_t phys_tid_15947;
    int64_t global_tid_18132;
    int64_t slice_18133;
    int64_t slice_18134;
    int64_t slice_18135;
    int64_t gtid_15944;
    int64_t remnant_18136;
    int64_t gtid_15945;
    int64_t remnant_18137;
    int64_t gtid_15946;
    int64_t remnant_18138;
    
    local_tid_18128 = get_local_id(0);
    tblock_sizze_18131 = get_local_size(0);
    wave_sizze_18130 = LOCKSTEP_WIDTH;
    block_id_18129 = get_tblock_id(0);
    global_tid_18127 = block_id_18129 * tblock_sizze_18131 + local_tid_18128;
    phys_tid_15947 = sext_i32_i64(global_tid_18127);
    global_tid_18132 = sext_i32_i64(block_id_18129) * segmap_tblock_sizze_15936 + sext_i32_i64(local_tid_18128);
    slice_18133 = d_10788;
    slice_18134 = d_10788 * slice_18133;
    slice_18135 = m_10789 * slice_18134;
    gtid_15944 = squot64(global_tid_18132, slice_18134);
    remnant_18136 = global_tid_18132 - gtid_15944 * slice_18134;
    gtid_15945 = squot64(remnant_18136, slice_18133);
    remnant_18137 = remnant_18136 - gtid_15945 * slice_18133;
    gtid_15946 = remnant_18137;
    remnant_18138 = remnant_18137 - gtid_15946;
    if ((slt64(gtid_15944, m_10789) && slt64(gtid_15945, d_10788)) && slt64(gtid_15946, d_10788)) {
        f16 defunc_0_map_res_15950;
        f16 redout_16420 = (f16) 0.0F;
        
        for (int64_t i_16421 = 0; i_16421 < m_12246; i_16421++) {
            f16 x_15954;
            f16 defunc_0_f_res_15953;
            f16 redout_tmp_18139;
            
            x_15954 = futrts_from_bits16(((__global uint16_t *) ext_mem_16665)[gtid_15944 * lmad_ext_16658 + i_16421 * y_13481 + gtid_15945 * d_10788 + gtid_15946]);
            defunc_0_f_res_15953 = x_15954 + redout_16420;
            redout_tmp_18139 = defunc_0_f_res_15953;
            redout_16420 = redout_tmp_18139;
        }
        defunc_0_map_res_15950 = redout_16420;
        ((__global uint16_t *) mem_16675)[gtid_15944 * (d_10788 * d_10788) + gtid_15945 * d_10788 + gtid_15946] = futrts_to_bits16(defunc_0_map_res_15950);
    }
    
  error_0:
    return;
    #undef segmap_tblock_sizze_15936
}
FUTHARK_KERNEL_SIZED(FlashAttention_6021zisegmap_15964_dim1, 1, 1)
void FlashAttention_6021zisegmap_15964(__global int *global_failure, int64_t d_10788, int64_t m_10789, int64_t m_12246, int64_t y_13481, int64_t lmad_ext_16658, __global unsigned char *ext_mem_16665, __global unsigned char *mem_16670)
{
    #define segmap_tblock_sizze_15958 (FlashAttention_6021zisegmap_15964zisegmap_tblock_sizze_15958)
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_18142;
    int32_t tblock_sizze_18145;
    int32_t wave_sizze_18144;
    int32_t block_id_18143;
    int32_t global_tid_18141;
    int64_t phys_tid_15964;
    int64_t global_tid_18146;
    int64_t slice_18147;
    int64_t slice_18148;
    int64_t slice_18149;
    int64_t gtid_15961;
    int64_t remnant_18150;
    int64_t gtid_15962;
    int64_t remnant_18151;
    int64_t gtid_15963;
    int64_t remnant_18152;
    
    local_tid_18142 = get_local_id(0);
    tblock_sizze_18145 = get_local_size(0);
    wave_sizze_18144 = LOCKSTEP_WIDTH;
    block_id_18143 = get_tblock_id(0);
    global_tid_18141 = block_id_18143 * tblock_sizze_18145 + local_tid_18142;
    phys_tid_15964 = sext_i32_i64(global_tid_18141);
    global_tid_18146 = sext_i32_i64(block_id_18143) * segmap_tblock_sizze_15958 + sext_i32_i64(local_tid_18142);
    slice_18147 = d_10788;
    slice_18148 = d_10788 * slice_18147;
    slice_18149 = m_10789 * slice_18148;
    gtid_15961 = squot64(global_tid_18146, slice_18148);
    remnant_18150 = global_tid_18146 - gtid_15961 * slice_18148;
    gtid_15962 = squot64(remnant_18150, slice_18147);
    remnant_18151 = remnant_18150 - gtid_15962 * slice_18147;
    gtid_15963 = remnant_18151;
    remnant_18152 = remnant_18151 - gtid_15963;
    if ((slt64(gtid_15961, m_10789) && slt64(gtid_15962, d_10788)) && slt64(gtid_15963, d_10788)) {
        f16 defunc_0_map_res_15967;
        f16 redout_16422 = (f16) 0.0F;
        
        for (int64_t i_16423 = 0; i_16423 < m_12246; i_16423++) {
            f16 x_15971;
            f16 defunc_0_f_res_15970;
            f16 redout_tmp_18153;
            
            x_15971 = futrts_from_bits16(((__global uint16_t *) ext_mem_16665)[gtid_15961 * lmad_ext_16658 + i_16423 * y_13481 + gtid_15962 * d_10788 + gtid_15963]);
            defunc_0_f_res_15970 = x_15971 + redout_16422;
            redout_tmp_18153 = defunc_0_f_res_15970;
            redout_16422 = redout_tmp_18153;
        }
        defunc_0_map_res_15967 = redout_16422;
        ((__global uint16_t *) mem_16670)[gtid_15961 * (d_10788 * d_10788) + gtid_15962 * d_10788 + gtid_15963] = futrts_to_bits16(defunc_0_map_res_15967);
    }
    
  error_0:
    return;
    #undef segmap_tblock_sizze_15958
}
FUTHARK_KERNEL
void FlashAttention_6021zisegmap_intrablock_13876(__global int *global_failure, int failure_is_an_option, __global int64_t *global_failure_args, int64_t d_10788, int64_t m_10789, int64_t dzlz7bUZLztZRz20Umz20Udz7dUzg_10790, unsigned char cond_11871_bits, int64_t n_11872, int64_t dzlz7bUZLztZRz20Umz20UZLZLzpZRz20Udz20UnZRz7dUzg_11873, int64_t add_both_arg0_11874, int64_t dzlz7bUZLztZRz20Umz20Udz7dUzg_11948, int64_t q_11975, unsigned char opaque_res_11979_bits, int64_t m_12246, int64_t computed_tblock_sizze_13286, int64_t y_13481, int64_t binop_x_16534, int64_t bytes_16607, int64_t bytes_16669, int64_t bytes_16746, int64_t maxSubHelper_17261, int64_t maxSubHelper_17264, int64_t maxSubHelper_17267, int64_t ext_17335, int64_t ext_17336, int64_t ctx_17360, int64_t ctx_17361, int64_t ctx_17367, int64_t ctx_17382, int64_t ctx_17383, int64_t ctx_17389, int64_t binop_x_17398, int64_t ctx_17402, int32_t num_chunks_17433, int32_t num_chunks_17437, int32_t num_chunks_17443, int32_t num_chunks_17444, int32_t num_chunks_17445, __global unsigned char *Q_mem_16531, __global unsigned char *K_mem_16532, __global unsigned char *V_mem_16533, __global unsigned char *mem_16779, __global unsigned char *mem_16785, __global unsigned char *mem_16829, __global unsigned char *color_17255, __global unsigned char *color_17256, __global unsigned char *color_17270)
{
    bool cond_11871 = cond_11871_bits;
    bool opaque_res_11979 = opaque_res_11979_bits;
    volatile __local unsigned char *red_arr_mem_17725_backing_14 = &shared_mem[0];
    const int64_t red_arr_mem_17725_backing_14_offset = 0 + ((int64_t) 2 * (m_12246 * d_10788 * d_10788) + srem64((int64_t) 8 - srem64((int64_t) 2 * (m_12246 * d_10788 * d_10788), (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *red_arr_mem_17705_backing_13 = &shared_mem[red_arr_mem_17725_backing_14_offset];
    const int64_t red_arr_mem_17705_backing_13_offset = red_arr_mem_17725_backing_14_offset + ((int64_t) 2 * (d_10788 * (int64_t) 32) + srem64((int64_t) 8 - srem64((int64_t) 2 * (d_10788 * (int64_t) 32), (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *red_arr_mem_17685_backing_12 = &shared_mem[red_arr_mem_17705_backing_13_offset];
    const int64_t red_arr_mem_17685_backing_12_offset = red_arr_mem_17705_backing_13_offset + ((int64_t) 2 * (d_10788 * (int64_t) 32) + srem64((int64_t) 8 - srem64((int64_t) 2 * (d_10788 * (int64_t) 32), (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *red_arr_mem_17637_backing_11 = &shared_mem[red_arr_mem_17685_backing_12_offset];
    const int64_t red_arr_mem_17637_backing_11_offset = red_arr_mem_17685_backing_12_offset + ((int64_t) 4 * (m_10789 * d_10788 * d_10788 * d_10788) + srem64((int64_t) 8 - srem64((int64_t) 4 * (m_10789 * d_10788 * d_10788 * d_10788), (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *red_arr_mem_17615_backing_10 = &shared_mem[red_arr_mem_17637_backing_11_offset];
    const int64_t red_arr_mem_17615_backing_10_offset = red_arr_mem_17637_backing_11_offset + ((int64_t) 4 * (m_10789 * (int64_t) 64 * (int64_t) 64 * (int64_t) 64) + srem64((int64_t) 8 - srem64((int64_t) 4 * (m_10789 * (int64_t) 64 * (int64_t) 64 * (int64_t) 64), (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_17278_backing_9 = &shared_mem[red_arr_mem_17615_backing_10_offset];
    const int64_t color_17278_backing_9_offset = red_arr_mem_17615_backing_10_offset + (bytes_16669 + srem64((int64_t) 8 - srem64(bytes_16669, (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_17277_backing_8 = &shared_mem[color_17278_backing_9_offset];
    const int64_t color_17277_backing_8_offset = color_17278_backing_9_offset + (bytes_16607 + srem64((int64_t) 8 - srem64(bytes_16607, (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_17276_backing_7 = &shared_mem[color_17277_backing_8_offset];
    const int64_t color_17276_backing_7_offset = color_17277_backing_8_offset + (bytes_16746 + srem64((int64_t) 8 - srem64(bytes_16746, (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_17275_backing_6 = &shared_mem[color_17276_backing_7_offset];
    const int64_t color_17275_backing_6_offset = color_17276_backing_7_offset + (bytes_16746 + srem64((int64_t) 8 - srem64(bytes_16746, (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_17274_backing_5 = &shared_mem[color_17275_backing_6_offset];
    const int64_t color_17274_backing_5_offset = color_17275_backing_6_offset + (binop_x_16534 + srem64((int64_t) 8 - srem64(binop_x_16534, (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_17273_backing_4 = &shared_mem[color_17274_backing_5_offset];
    const int64_t color_17273_backing_4_offset = color_17274_backing_5_offset + (binop_x_16534 + srem64((int64_t) 8 - srem64(binop_x_16534, (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_17272_backing_3 = &shared_mem[color_17273_backing_4_offset];
    const int64_t color_17272_backing_3_offset = color_17273_backing_4_offset + (binop_x_16534 + srem64((int64_t) 8 - srem64(binop_x_16534, (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_17271_backing_2 = &shared_mem[color_17272_backing_3_offset];
    const int64_t color_17271_backing_2_offset = color_17272_backing_3_offset + (maxSubHelper_17267 + srem64((int64_t) 8 - srem64(maxSubHelper_17267, (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_17269_backing_1 = &shared_mem[color_17271_backing_2_offset];
    const int64_t color_17269_backing_1_offset = color_17271_backing_2_offset + (maxSubHelper_17264 + srem64((int64_t) 8 - srem64(maxSubHelper_17264, (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_17268_backing_0 = &shared_mem[color_17269_backing_1_offset];
    const int64_t color_17268_backing_0_offset = color_17269_backing_1_offset + (maxSubHelper_17261 + srem64((int64_t) 8 - srem64(maxSubHelper_17261, (int64_t) 8), (int64_t) 8));
    volatile __local int local_failure;
    
    if (failure_is_an_option) {
        int failed = *global_failure >= 0;
        
        if (failed)
            return;
    }
    local_failure = 0;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t local_tid_17449;
    int32_t tblock_sizze_17452;
    int32_t wave_sizze_17451;
    int32_t block_id_17450;
    int32_t global_tid_17448;
    int64_t phys_tblock_id_13876;
    int64_t slice_17454;
    int64_t ltid_pre_17453;
    int64_t remnant_17455;
    int64_t slice_17458;
    int64_t slice_17459;
    int64_t ltid_pre_17456;
    int64_t remnant_17460;
    int64_t ltid_pre_17457;
    int64_t remnant_17461;
    int64_t slice_17464;
    int64_t slice_17465;
    int64_t ltid_pre_17462;
    int64_t remnant_17466;
    int64_t ltid_pre_17463;
    int64_t remnant_17467;
    int64_t slice_17470;
    int64_t slice_17471;
    int64_t ltid_pre_17468;
    int64_t remnant_17472;
    int64_t ltid_pre_17469;
    int64_t remnant_17473;
    int64_t slice_17476;
    int64_t slice_17477;
    int64_t ltid_pre_17474;
    int64_t remnant_17478;
    int64_t ltid_pre_17475;
    int64_t remnant_17479;
    int64_t slice_17482;
    int64_t slice_17483;
    int64_t ltid_pre_17480;
    int64_t remnant_17484;
    int64_t ltid_pre_17481;
    int64_t remnant_17485;
    int64_t slice_17489;
    int64_t slice_17490;
    int64_t slice_17491;
    int64_t ltid_pre_17486;
    int64_t remnant_17492;
    int64_t ltid_pre_17487;
    int64_t remnant_17493;
    int64_t ltid_pre_17488;
    int64_t remnant_17494;
    int64_t slice_17499;
    int64_t slice_17500;
    int64_t slice_17501;
    int64_t slice_17502;
    int64_t ltid_pre_17495;
    int64_t remnant_17503;
    int64_t ltid_pre_17496;
    int64_t remnant_17504;
    int64_t ltid_pre_17497;
    int64_t remnant_17505;
    int64_t ltid_pre_17498;
    int64_t remnant_17506;
    int64_t slice_17510;
    int64_t slice_17511;
    int64_t slice_17512;
    int64_t ltid_pre_17507;
    int64_t remnant_17513;
    int64_t ltid_pre_17508;
    int64_t remnant_17514;
    int64_t ltid_pre_17509;
    int64_t remnant_17515;
    int64_t slice_17520;
    int64_t slice_17521;
    int64_t slice_17522;
    int64_t slice_17523;
    int64_t ltid_pre_17516;
    int64_t remnant_17524;
    int64_t ltid_pre_17517;
    int64_t remnant_17525;
    int64_t ltid_pre_17518;
    int64_t remnant_17526;
    int64_t ltid_pre_17519;
    int64_t remnant_17527;
    int64_t slice_17530;
    int64_t slice_17531;
    int64_t ltid_pre_17528;
    int64_t remnant_17532;
    int64_t ltid_pre_17529;
    int64_t remnant_17533;
    int64_t slice_17536;
    int64_t slice_17537;
    int64_t ltid_pre_17534;
    int64_t remnant_17538;
    int64_t ltid_pre_17535;
    int64_t remnant_17539;
    int64_t slice_17542;
    int64_t slice_17543;
    int64_t ltid_pre_17540;
    int64_t remnant_17544;
    int64_t ltid_pre_17541;
    int64_t remnant_17545;
    int64_t slice_17547;
    int64_t ltid_pre_17546;
    int64_t remnant_17548;
    int64_t slice_17549;
    int64_t gtid_13875;
    int64_t remnant_17550;
    __local unsigned char *color_17268;
    __local unsigned char *color_17269;
    __local unsigned char *color_17271;
    __local unsigned char *color_17272;
    __local unsigned char *color_17273;
    __local unsigned char *color_17274;
    __local unsigned char *color_17275;
    __local unsigned char *color_17276;
    __local unsigned char *color_17277;
    __local unsigned char *color_17278;
    __local unsigned char *ext_mem_ext_17333;
    __local unsigned char *ext_mem_16768;
    __local unsigned char *ext_mem_unused_17214;
    __local unsigned char *ext_mem_16767;
    __local unsigned char *ext_mem_unused_17223;
    __local unsigned char *ext_mem_ext_17347;
    __local unsigned char *ext_mem_ext_17350;
    __local unsigned char *mem_param_16741;
    __local unsigned char *mem_param_16744;
    __local unsigned char *mem_param_out_17215;
    __local unsigned char *mem_param_out_17224;
    __local unsigned char *mem_param_ext_17337;
    __local unsigned char *mem_param_ext_17340;
    int64_t phys_tid_14044;
    int64_t gtid_14042;
    int64_t gtid_14043;
    int64_t binop_x_17357;
    int64_t binop_x_17365;
    int64_t binop_x_17379;
    int64_t binop_x_17387;
    int64_t binop_x_17396;
    int64_t phys_tid_14054;
    __local unsigned char *red_arr_mem_17725;
    int64_t gtid_14053;
    int32_t offset_17731;
    int32_t skip_waves_17732;
    int32_t num_chunks_17740;
    
    local_tid_17449 = get_local_id(0);
    tblock_sizze_17452 = get_local_size(0);
    wave_sizze_17451 = LOCKSTEP_WIDTH;
    block_id_17450 = get_tblock_id(0);
    global_tid_17448 = block_id_17450 * tblock_sizze_17452 + local_tid_17449;
    phys_tblock_id_13876 = sext_i32_i64(block_id_17450);
    slice_17454 = d_10788;
    ltid_pre_17453 = sext_i32_i64(local_tid_17449);
    remnant_17455 = sext_i32_i64(local_tid_17449) - ltid_pre_17453;
    slice_17458 = (int64_t) 32;
    slice_17459 = d_10788 * slice_17458;
    ltid_pre_17456 = squot64(sext_i32_i64(local_tid_17449), slice_17458);
    remnant_17460 = sext_i32_i64(local_tid_17449) - ltid_pre_17456 * slice_17458;
    ltid_pre_17457 = remnant_17460;
    remnant_17461 = remnant_17460 - ltid_pre_17457;
    slice_17464 = (int64_t) 1024;
    slice_17465 = d_10788 * slice_17464;
    ltid_pre_17462 = squot64(sext_i32_i64(local_tid_17449), slice_17464);
    remnant_17466 = sext_i32_i64(local_tid_17449) - ltid_pre_17462 * slice_17464;
    ltid_pre_17463 = remnant_17466;
    remnant_17467 = remnant_17466 - ltid_pre_17463;
    slice_17470 = dzlz7bUZLztZRz20Umz20Udz7dUzg_10790;
    slice_17471 = d_10788 * slice_17470;
    ltid_pre_17468 = squot64(sext_i32_i64(local_tid_17449), slice_17470);
    remnant_17472 = sext_i32_i64(local_tid_17449) - ltid_pre_17468 * slice_17470;
    ltid_pre_17469 = remnant_17472;
    remnant_17473 = remnant_17472 - ltid_pre_17469;
    slice_17476 = n_11872;
    slice_17477 = d_10788 * slice_17476;
    ltid_pre_17474 = squot64(sext_i32_i64(local_tid_17449), slice_17476);
    remnant_17478 = sext_i32_i64(local_tid_17449) - ltid_pre_17474 * slice_17476;
    ltid_pre_17475 = remnant_17478;
    remnant_17479 = remnant_17478 - ltid_pre_17475;
    slice_17482 = dzlz7bUZLztZRz20Umz20Udz7dUzg_11948;
    slice_17483 = d_10788 * slice_17482;
    ltid_pre_17480 = squot64(sext_i32_i64(local_tid_17449), slice_17482);
    remnant_17484 = sext_i32_i64(local_tid_17449) - ltid_pre_17480 * slice_17482;
    ltid_pre_17481 = remnant_17484;
    remnant_17485 = remnant_17484 - ltid_pre_17481;
    slice_17489 = (int64_t) 64;
    slice_17490 = (int64_t) 64 * slice_17489;
    slice_17491 = m_10789 * slice_17490;
    ltid_pre_17486 = squot64(sext_i32_i64(local_tid_17449), slice_17490);
    remnant_17492 = sext_i32_i64(local_tid_17449) - ltid_pre_17486 * slice_17490;
    ltid_pre_17487 = squot64(remnant_17492, slice_17489);
    remnant_17493 = remnant_17492 - ltid_pre_17487 * slice_17489;
    ltid_pre_17488 = remnant_17493;
    remnant_17494 = remnant_17493 - ltid_pre_17488;
    slice_17499 = (int64_t) 64;
    slice_17500 = (int64_t) 64 * slice_17499;
    slice_17501 = (int64_t) 64 * slice_17500;
    slice_17502 = m_10789 * slice_17501;
    ltid_pre_17495 = squot64(sext_i32_i64(local_tid_17449), slice_17501);
    remnant_17503 = sext_i32_i64(local_tid_17449) - ltid_pre_17495 * slice_17501;
    ltid_pre_17496 = squot64(remnant_17503, slice_17500);
    remnant_17504 = remnant_17503 - ltid_pre_17496 * slice_17500;
    ltid_pre_17497 = squot64(remnant_17504, slice_17499);
    remnant_17505 = remnant_17504 - ltid_pre_17497 * slice_17499;
    ltid_pre_17498 = remnant_17505;
    remnant_17506 = remnant_17505 - ltid_pre_17498;
    slice_17510 = d_10788;
    slice_17511 = d_10788 * slice_17510;
    slice_17512 = m_10789 * slice_17511;
    ltid_pre_17507 = squot64(sext_i32_i64(local_tid_17449), slice_17511);
    remnant_17513 = sext_i32_i64(local_tid_17449) - ltid_pre_17507 * slice_17511;
    ltid_pre_17508 = squot64(remnant_17513, slice_17510);
    remnant_17514 = remnant_17513 - ltid_pre_17508 * slice_17510;
    ltid_pre_17509 = remnant_17514;
    remnant_17515 = remnant_17514 - ltid_pre_17509;
    slice_17520 = d_10788;
    slice_17521 = d_10788 * slice_17520;
    slice_17522 = d_10788 * slice_17521;
    slice_17523 = m_10789 * slice_17522;
    ltid_pre_17516 = squot64(sext_i32_i64(local_tid_17449), slice_17522);
    remnant_17524 = sext_i32_i64(local_tid_17449) - ltid_pre_17516 * slice_17522;
    ltid_pre_17517 = squot64(remnant_17524, slice_17521);
    remnant_17525 = remnant_17524 - ltid_pre_17517 * slice_17521;
    ltid_pre_17518 = squot64(remnant_17525, slice_17520);
    remnant_17526 = remnant_17525 - ltid_pre_17518 * slice_17520;
    ltid_pre_17519 = remnant_17526;
    remnant_17527 = remnant_17526 - ltid_pre_17519;
    slice_17530 = n_11872;
    slice_17531 = dzlz7bUZLztZRz20Umz20Udz7dUzg_10790 * slice_17530;
    ltid_pre_17528 = squot64(sext_i32_i64(local_tid_17449), slice_17530);
    remnant_17532 = sext_i32_i64(local_tid_17449) - ltid_pre_17528 * slice_17530;
    ltid_pre_17529 = remnant_17532;
    remnant_17533 = remnant_17532 - ltid_pre_17529;
    slice_17536 = (int64_t) 64;
    slice_17537 = n_11872 * slice_17536;
    ltid_pre_17534 = squot64(sext_i32_i64(local_tid_17449), slice_17536);
    remnant_17538 = sext_i32_i64(local_tid_17449) - ltid_pre_17534 * slice_17536;
    ltid_pre_17535 = remnant_17538;
    remnant_17539 = remnant_17538 - ltid_pre_17535;
    slice_17542 = (int64_t) 64;
    slice_17543 = add_both_arg0_11874 * slice_17542;
    ltid_pre_17540 = squot64(sext_i32_i64(local_tid_17449), slice_17542);
    remnant_17544 = sext_i32_i64(local_tid_17449) - ltid_pre_17540 * slice_17542;
    ltid_pre_17541 = remnant_17544;
    remnant_17545 = remnant_17544 - ltid_pre_17541;
    slice_17547 = m_12246;
    ltid_pre_17546 = sext_i32_i64(local_tid_17449);
    remnant_17548 = sext_i32_i64(local_tid_17449) - ltid_pre_17546;
    slice_17549 = m_10789;
    gtid_13875 = sext_i32_i64(block_id_17450);
    remnant_17550 = sext_i32_i64(block_id_17450) - gtid_13875;
    color_17268 = (__local unsigned char *) color_17268_backing_0;
    color_17269 = (__local unsigned char *) color_17269_backing_1;
    color_17271 = (__local unsigned char *) color_17271_backing_2;
    color_17272 = (__local unsigned char *) color_17272_backing_3;
    color_17273 = (__local unsigned char *) color_17273_backing_4;
    color_17274 = (__local unsigned char *) color_17274_backing_5;
    color_17275 = (__local unsigned char *) color_17275_backing_6;
    color_17276 = (__local unsigned char *) color_17276_backing_7;
    color_17277 = (__local unsigned char *) color_17277_backing_8;
    color_17278 = (__local unsigned char *) color_17278_backing_9;
    barrier(CLK_LOCAL_MEM_FENCE);
    if (cond_11871) {
        int64_t tmp_offs_17560;
        int32_t num_chunks_17561;
        int64_t tmp_offs_17576;
        int64_t tmp_offs_17592;
        int32_t num_chunks_17593;
        int64_t tmp_offs_17608;
        int64_t phys_tid_13895;
        __local unsigned char *red_arr_mem_17615;
        int64_t gtid_13891;
        int64_t gtid_13892;
        int64_t gtid_13893;
        int64_t gtid_13894;
        int64_t dims_flat_17617;
        float eta_p_13896;
        float eta_p_13897;
        float eta_p_17619;
        float eta_p_17620;
        bool ltid_in_bounds_17622;
        int32_t skip_threads_17623;
        bool no_carry_in_17629;
        int64_t phys_tid_13910;
        int64_t gtid_13907;
        int64_t gtid_13908;
        int64_t gtid_13909;
        int32_t num_chunks_17634;
        int64_t phys_tid_13922;
        int64_t gtid_13921;
        int64_t phys_tid_13931;
        int64_t gtid_13929;
        int64_t gtid_13930;
        
        for (int32_t chunk_i_17554 = 0; chunk_i_17554 < num_chunks_17443; chunk_i_17554++) {
            int32_t i_17555;
            int64_t slice_17556;
            int64_t slice_17557;
            int64_t rep_i_17552;
            int64_t remnant_17558;
            int64_t rep_i_17553;
            int64_t remnant_17559;
            
            i_17555 = chunk_i_17554 * sext_i64_i32(computed_tblock_sizze_13286) + local_tid_17449;
            slice_17556 = n_11872;
            slice_17557 = dzlz7bUZLztZRz20Umz20Udz7dUzg_10790 * slice_17556;
            rep_i_17552 = squot64(sext_i32_i64(i_17555), slice_17556);
            remnant_17558 = sext_i32_i64(i_17555) - rep_i_17552 * slice_17556;
            rep_i_17553 = remnant_17558;
            remnant_17559 = remnant_17558 - rep_i_17553;
            if ((sle64((int64_t) 0, rep_i_17552) && slt64(rep_i_17552, dzlz7bUZLztZRz20Umz20Udz7dUzg_10790)) && (sle64((int64_t) 0, rep_i_17553) && slt64(rep_i_17553, n_11872))) {
                ((__local uint16_t *) color_17271)[d_10788 + (rep_i_17552 * (int64_t) 64 + rep_i_17553)] = futrts_to_bits16((f16) 0.0F);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        tmp_offs_17560 = (int64_t) 0;
        num_chunks_17561 = sdiv_up32(sext_i64_i32(dzlz7bUZLztZRz20Umz20Udz7dUzg_10790) * sext_i64_i32(d_10788), sext_i64_i32(computed_tblock_sizze_13286));
        for (int32_t chunk_i_17562 = 0; chunk_i_17562 < num_chunks_17561; chunk_i_17562++) {
            int32_t i_17563 = chunk_i_17562 * sext_i64_i32(computed_tblock_sizze_13286) + local_tid_17449;
            
            if (slt32(i_17563, sext_i64_i32(dzlz7bUZLztZRz20Umz20Udz7dUzg_10790) * sext_i64_i32(d_10788))) {
                ((__local uint16_t *) color_17271)[tmp_offs_17560 + sext_i32_i64(squot32(i_17563, sext_i64_i32(d_10788))) * (int64_t) 64 + sext_i32_i64(i_17563 - squot32(i_17563, sext_i64_i32(d_10788)) * sext_i64_i32(d_10788))] = futrts_to_bits16(futrts_from_bits16(((__global uint16_t *) K_mem_16532)[sext_i32_i64(squot32(i_17563, sext_i64_i32(d_10788))) * d_10788 + sext_i32_i64(i_17563 - squot32(i_17563, sext_i64_i32(d_10788)) * sext_i64_i32(d_10788))]));
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        tmp_offs_17560 += d_10788;
        if (!(tmp_offs_17560 == d_10788)) {
            int32_t num_chunks_17564 = sdiv_up32(sext_i64_i32(dzlz7bUZLztZRz20Umz20Udz7dUzg_10790) * sext_i64_i32(n_11872), sext_i64_i32(computed_tblock_sizze_13286));
            
            for (int32_t chunk_i_17565 = 0; chunk_i_17565 < num_chunks_17564; chunk_i_17565++) {
                int32_t i_17566 = chunk_i_17565 * sext_i64_i32(computed_tblock_sizze_13286) + local_tid_17449;
                
                if (slt32(i_17566, sext_i64_i32(dzlz7bUZLztZRz20Umz20Udz7dUzg_10790) * sext_i64_i32(n_11872))) {
                    ((__local uint16_t *) color_17271)[tmp_offs_17560 + sext_i32_i64(squot32(i_17566, sext_i64_i32(n_11872))) * (int64_t) 64 + sext_i32_i64(i_17566 - squot32(i_17566, sext_i64_i32(n_11872)) * sext_i64_i32(n_11872))] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) color_17271)[d_10788 + sext_i32_i64(squot32(i_17566, sext_i64_i32(n_11872))) * (int64_t) 64 + sext_i32_i64(i_17566 - squot32(i_17566, sext_i64_i32(n_11872)) * sext_i64_i32(n_11872))]));
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }
        tmp_offs_17560 += n_11872;
        for (int32_t chunk_i_17570 = 0; chunk_i_17570 < num_chunks_17445; chunk_i_17570++) {
            int32_t i_17571;
            int64_t slice_17572;
            int64_t slice_17573;
            int64_t rep_i_17568;
            int64_t remnant_17574;
            int64_t rep_i_17569;
            int64_t remnant_17575;
            
            i_17571 = chunk_i_17570 * sext_i64_i32(computed_tblock_sizze_13286) + local_tid_17449;
            slice_17572 = (int64_t) 64;
            slice_17573 = add_both_arg0_11874 * slice_17572;
            rep_i_17568 = squot64(sext_i32_i64(i_17571), slice_17572);
            remnant_17574 = sext_i32_i64(i_17571) - rep_i_17568 * slice_17572;
            rep_i_17569 = remnant_17574;
            remnant_17575 = remnant_17574 - rep_i_17569;
            if ((sle64((int64_t) 0, rep_i_17568) && slt64(rep_i_17568, add_both_arg0_11874)) && (sle64((int64_t) 0, rep_i_17569) && slt64(rep_i_17569, (int64_t) 64))) {
                ((__local uint16_t *) color_17271)[(int64_t) 64 * dzlz7bUZLztZRz20Umz20Udz7dUzg_10790 + (rep_i_17568 * (int64_t) 64 + rep_i_17569)] = futrts_to_bits16((f16) 0.0F);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        tmp_offs_17576 = (int64_t) 0;
        if (!((int64_t) 64 * tmp_offs_17576 == (int64_t) 0)) {
            int32_t num_chunks_17577 = sdiv_up32(sext_i64_i32(dzlz7bUZLztZRz20Umz20Udz7dUzg_10790) * 64, sext_i64_i32(computed_tblock_sizze_13286));
            
            for (int32_t chunk_i_17578 = 0; chunk_i_17578 < num_chunks_17577; chunk_i_17578++) {
                int32_t i_17579 = chunk_i_17578 * sext_i64_i32(computed_tblock_sizze_13286) + local_tid_17449;
                
                if (slt32(i_17579, sext_i64_i32(dzlz7bUZLztZRz20Umz20Udz7dUzg_10790) * 64)) {
                    ((__local uint16_t *) color_17271)[(int64_t) 64 * tmp_offs_17576 + sext_i32_i64(squot32(i_17579, 64)) * (int64_t) 64 + sext_i32_i64(i_17579 - squot32(i_17579, 64) * 64)] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) color_17271)[sext_i32_i64(squot32(i_17579, 64)) * (int64_t) 64 + sext_i32_i64(i_17579 - squot32(i_17579, 64) * 64)]));
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }
        tmp_offs_17576 += dzlz7bUZLztZRz20Umz20Udz7dUzg_10790;
        if (!((int64_t) 64 * tmp_offs_17576 == (int64_t) 64 * dzlz7bUZLztZRz20Umz20Udz7dUzg_10790)) {
            int32_t num_chunks_17580 = sdiv_up32(sext_i64_i32(add_both_arg0_11874) * 64, sext_i64_i32(computed_tblock_sizze_13286));
            
            for (int32_t chunk_i_17581 = 0; chunk_i_17581 < num_chunks_17580; chunk_i_17581++) {
                int32_t i_17582 = chunk_i_17581 * sext_i64_i32(computed_tblock_sizze_13286) + local_tid_17449;
                
                if (slt32(i_17582, sext_i64_i32(add_both_arg0_11874) * 64)) {
                    ((__local uint16_t *) color_17271)[(int64_t) 64 * tmp_offs_17576 + sext_i32_i64(squot32(i_17582, 64)) * (int64_t) 64 + sext_i32_i64(i_17582 - squot32(i_17582, 64) * 64)] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) color_17271)[(int64_t) 64 * dzlz7bUZLztZRz20Umz20Udz7dUzg_10790 + sext_i32_i64(squot32(i_17582, 64)) * (int64_t) 64 + sext_i32_i64(i_17582 - squot32(i_17582, 64) * 64)]));
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }
        tmp_offs_17576 += add_both_arg0_11874;
        for (int32_t chunk_i_17586 = 0; chunk_i_17586 < num_chunks_17437; chunk_i_17586++) {
            int32_t i_17587;
            int64_t slice_17588;
            int64_t slice_17589;
            int64_t rep_i_17584;
            int64_t remnant_17590;
            int64_t rep_i_17585;
            int64_t remnant_17591;
            
            i_17587 = chunk_i_17586 * sext_i64_i32(computed_tblock_sizze_13286) + local_tid_17449;
            slice_17588 = n_11872;
            slice_17589 = d_10788 * slice_17588;
            rep_i_17584 = squot64(sext_i32_i64(i_17587), slice_17588);
            remnant_17590 = sext_i32_i64(i_17587) - rep_i_17584 * slice_17588;
            rep_i_17585 = remnant_17590;
            remnant_17591 = remnant_17590 - rep_i_17585;
            if ((sle64((int64_t) 0, rep_i_17584) && slt64(rep_i_17584, d_10788)) && (sle64((int64_t) 0, rep_i_17585) && slt64(rep_i_17585, n_11872))) {
                ((__local uint16_t *) color_17268)[d_10788 + (rep_i_17584 * (int64_t) 64 + rep_i_17585)] = futrts_to_bits16((f16) 0.0F);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        tmp_offs_17592 = (int64_t) 0;
        num_chunks_17593 = sdiv_up32(sext_i64_i32(d_10788) * sext_i64_i32(d_10788), sext_i64_i32(computed_tblock_sizze_13286));
        for (int32_t chunk_i_17594 = 0; chunk_i_17594 < num_chunks_17593; chunk_i_17594++) {
            int32_t i_17595 = chunk_i_17594 * sext_i64_i32(computed_tblock_sizze_13286) + local_tid_17449;
            
            if (slt32(i_17595, sext_i64_i32(d_10788) * sext_i64_i32(d_10788))) {
                ((__local uint16_t *) color_17268)[tmp_offs_17592 + sext_i32_i64(squot32(i_17595, sext_i64_i32(d_10788))) * (int64_t) 64 + sext_i32_i64(i_17595 - squot32(i_17595, sext_i64_i32(d_10788)) * sext_i64_i32(d_10788))] = futrts_to_bits16(futrts_from_bits16(((__global uint16_t *) Q_mem_16531)[gtid_13875 * (d_10788 * d_10788) + sext_i32_i64(squot32(i_17595, sext_i64_i32(d_10788))) * d_10788 + sext_i32_i64(i_17595 - squot32(i_17595, sext_i64_i32(d_10788)) * sext_i64_i32(d_10788))]));
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        tmp_offs_17592 += d_10788;
        if (!(tmp_offs_17592 == d_10788)) {
            int32_t num_chunks_17596 = sdiv_up32(sext_i64_i32(d_10788) * sext_i64_i32(n_11872), sext_i64_i32(computed_tblock_sizze_13286));
            
            for (int32_t chunk_i_17597 = 0; chunk_i_17597 < num_chunks_17596; chunk_i_17597++) {
                int32_t i_17598 = chunk_i_17597 * sext_i64_i32(computed_tblock_sizze_13286) + local_tid_17449;
                
                if (slt32(i_17598, sext_i64_i32(d_10788) * sext_i64_i32(n_11872))) {
                    ((__local uint16_t *) color_17268)[tmp_offs_17592 + sext_i32_i64(squot32(i_17598, sext_i64_i32(n_11872))) * (int64_t) 64 + sext_i32_i64(i_17598 - squot32(i_17598, sext_i64_i32(n_11872)) * sext_i64_i32(n_11872))] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) color_17268)[d_10788 + sext_i32_i64(squot32(i_17598, sext_i64_i32(n_11872))) * (int64_t) 64 + sext_i32_i64(i_17598 - squot32(i_17598, sext_i64_i32(n_11872)) * sext_i64_i32(n_11872))]));
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }
        tmp_offs_17592 += n_11872;
        for (int32_t chunk_i_17602 = 0; chunk_i_17602 < num_chunks_17444; chunk_i_17602++) {
            int32_t i_17603;
            int64_t slice_17604;
            int64_t slice_17605;
            int64_t rep_i_17600;
            int64_t remnant_17606;
            int64_t rep_i_17601;
            int64_t remnant_17607;
            
            i_17603 = chunk_i_17602 * sext_i64_i32(computed_tblock_sizze_13286) + local_tid_17449;
            slice_17604 = (int64_t) 64;
            slice_17605 = n_11872 * slice_17604;
            rep_i_17600 = squot64(sext_i32_i64(i_17603), slice_17604);
            remnant_17606 = sext_i32_i64(i_17603) - rep_i_17600 * slice_17604;
            rep_i_17601 = remnant_17606;
            remnant_17607 = remnant_17606 - rep_i_17601;
            if ((sle64((int64_t) 0, rep_i_17600) && slt64(rep_i_17600, n_11872)) && (sle64((int64_t) 0, rep_i_17601) && slt64(rep_i_17601, (int64_t) 64))) {
                ((__local uint16_t *) color_17268)[(int64_t) 64 * d_10788 + (rep_i_17600 * (int64_t) 64 + rep_i_17601)] = futrts_to_bits16((f16) 0.0F);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        tmp_offs_17608 = (int64_t) 0;
        if (!((int64_t) 64 * tmp_offs_17608 == (int64_t) 0)) {
            int32_t num_chunks_17609 = sdiv_up32(sext_i64_i32(d_10788) * 64, sext_i64_i32(computed_tblock_sizze_13286));
            
            for (int32_t chunk_i_17610 = 0; chunk_i_17610 < num_chunks_17609; chunk_i_17610++) {
                int32_t i_17611 = chunk_i_17610 * sext_i64_i32(computed_tblock_sizze_13286) + local_tid_17449;
                
                if (slt32(i_17611, sext_i64_i32(d_10788) * 64)) {
                    ((__local uint16_t *) color_17268)[(int64_t) 64 * tmp_offs_17608 + sext_i32_i64(squot32(i_17611, 64)) * (int64_t) 64 + sext_i32_i64(i_17611 - squot32(i_17611, 64) * 64)] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) color_17268)[sext_i32_i64(squot32(i_17611, 64)) * (int64_t) 64 + sext_i32_i64(i_17611 - squot32(i_17611, 64) * 64)]));
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }
        tmp_offs_17608 += d_10788;
        if (!((int64_t) 64 * tmp_offs_17608 == (int64_t) 64 * d_10788)) {
            int32_t num_chunks_17612 = sdiv_up32(sext_i64_i32(n_11872) * 64, sext_i64_i32(computed_tblock_sizze_13286));
            
            for (int32_t chunk_i_17613 = 0; chunk_i_17613 < num_chunks_17612; chunk_i_17613++) {
                int32_t i_17614 = chunk_i_17613 * sext_i64_i32(computed_tblock_sizze_13286) + local_tid_17449;
                
                if (slt32(i_17614, sext_i64_i32(n_11872) * 64)) {
                    ((__local uint16_t *) color_17268)[(int64_t) 64 * tmp_offs_17608 + sext_i32_i64(squot32(i_17614, 64)) * (int64_t) 64 + sext_i32_i64(i_17614 - squot32(i_17614, 64) * 64)] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) color_17268)[(int64_t) 64 * d_10788 + sext_i32_i64(squot32(i_17614, 64)) * (int64_t) 64 + sext_i32_i64(i_17614 - squot32(i_17614, 64) * 64)]));
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }
        tmp_offs_17608 += n_11872;
        phys_tid_13895 = sext_i32_i64(local_tid_17449);
        red_arr_mem_17615 = (__local unsigned char *) red_arr_mem_17615_backing_10;
        gtid_13891 = sext_i32_i64(sext_i64_i32(ltid_pre_17495));
        gtid_13892 = sext_i32_i64(sext_i64_i32(ltid_pre_17496));
        gtid_13893 = sext_i32_i64(sext_i64_i32(ltid_pre_17497));
        gtid_13894 = sext_i32_i64(sext_i64_i32(ltid_pre_17498));
        if (((slt64(gtid_13891, m_10789) && slt64(gtid_13892, (int64_t) 64)) && slt64(gtid_13893, (int64_t) 64)) && slt64(gtid_13894, (int64_t) 64)) {
            f16 eta_p_13902;
            int64_t binop_x_16031;
            int64_t binop_y_16032;
            int64_t binop_x_16033;
            int64_t binop_x_16034;
            int64_t new_index_16035;
            int64_t binop_y_16045;
            int64_t new_index_16046;
            f16 eta_p_13903;
            f16 defunc_0_f_res_13904;
            float f16_res_13905;
            
            eta_p_13902 = futrts_from_bits16(((__local uint16_t *) color_17268)[gtid_13892 * (int64_t) 64 + gtid_13894]);
            binop_x_16031 = (int64_t) 4096 * gtid_13891;
            binop_y_16032 = (int64_t) 64 * gtid_13893;
            binop_x_16033 = binop_x_16031 + binop_y_16032;
            binop_x_16034 = gtid_13894 + binop_x_16033;
            new_index_16035 = squot64(binop_x_16034, (int64_t) 64);
            binop_y_16045 = (int64_t) 64 * new_index_16035;
            new_index_16046 = binop_x_16034 - binop_y_16045;
            eta_p_13903 = futrts_from_bits16(((__local uint16_t *) color_17271)[new_index_16035 * (int64_t) 64 + new_index_16046]);
            defunc_0_f_res_13904 = eta_p_13902 * eta_p_13903;
            f16_res_13905 = fpconv_f16_f32(defunc_0_f_res_13904);
            ((__local float *) red_arr_mem_17615)[gtid_13891 * (int64_t) 262144 + gtid_13892 * (int64_t) 4096 + gtid_13893 * (int64_t) 64 + gtid_13894] = f16_res_13905;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        dims_flat_17617 = m_10789 * (int64_t) 64 * (int64_t) 64 * (int64_t) 64;
        ltid_in_bounds_17622 = slt64(sext_i32_i64(local_tid_17449), m_10789 * (int64_t) 64 * (int64_t) 64 * (int64_t) 64);
        // read input for in-block scan
        {
            if (ltid_in_bounds_17622) {
                eta_p_13897 = ((volatile __local float *) red_arr_mem_17615)[sext_i32_i64(local_tid_17449)];
                if ((local_tid_17449 - squot32(local_tid_17449, 32) * 32) == 0) {
                    eta_p_13896 = eta_p_13897;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_17623 = 1;
            while (slt32(skip_threads_17623, 32)) {
                bool thread_active_17624 = sle32(skip_threads_17623, local_tid_17449 - squot32(local_tid_17449, 32) * 32) && ltid_in_bounds_17622;
                
                if (thread_active_17624) {
                    // read operands
                    {
                        eta_p_13896 = ((volatile __local float *) red_arr_mem_17615)[sext_i32_i64(local_tid_17449) - sext_i32_i64(skip_threads_17623)];
                    }
                }
                // perform operation
                {
                    bool inactive_17625 = slt64(srem64(sext_i32_i64(local_tid_17449), (int64_t) 64), sext_i32_i64(local_tid_17449) - sext_i32_i64(local_tid_17449 - skip_threads_17623));
                    
                    if (thread_active_17624 && inactive_17625) {
                        eta_p_13896 = eta_p_13897;
                    }
                    if (thread_active_17624) {
                        if (!inactive_17625) {
                            float defunc_0_op_res_13898 = eta_p_13896 + eta_p_13897;
                            
                            eta_p_13896 = defunc_0_op_res_13898;
                        }
                    }
                }
                if (sle32(wave_sizze_17451, skip_threads_17623)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (thread_active_17624) {
                    // write result
                    {
                        ((volatile __local float *) red_arr_mem_17615)[sext_i32_i64(local_tid_17449)] = eta_p_13896;
                        eta_p_13897 = eta_p_13896;
                    }
                }
                if (sle32(wave_sizze_17451, skip_threads_17623)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_17623 *= 2;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // last thread of block 'i' writes its result to offset 'i'
        {
            if ((local_tid_17449 - squot32(local_tid_17449, 32) * 32) == 31 && ltid_in_bounds_17622) {
                ((volatile __local float *) red_arr_mem_17615)[sext_i32_i64(squot32(local_tid_17449, 32))] = eta_p_13896;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
        {
            int32_t skip_threads_17626;
            
            // read input for in-block scan
            {
                if (squot32(local_tid_17449, 32) == 0 && ltid_in_bounds_17622) {
                    eta_p_17620 = ((volatile __local float *) red_arr_mem_17615)[sext_i32_i64(local_tid_17449)];
                    if ((local_tid_17449 - squot32(local_tid_17449, 32) * 32) == 0) {
                        eta_p_17619 = eta_p_17620;
                    }
                }
            }
            // in-block scan (hopefully no barriers needed)
            {
                skip_threads_17626 = 1;
                while (slt32(skip_threads_17626, 32)) {
                    bool thread_active_17627 = sle32(skip_threads_17626, local_tid_17449 - squot32(local_tid_17449, 32) * 32) && (squot32(local_tid_17449, 32) == 0 && ltid_in_bounds_17622);
                    
                    if (thread_active_17627) {
                        // read operands
                        {
                            eta_p_17619 = ((volatile __local float *) red_arr_mem_17615)[sext_i32_i64(local_tid_17449) - sext_i32_i64(skip_threads_17626)];
                        }
                    }
                    // perform operation
                    {
                        bool inactive_17628 = slt64(srem64(sext_i32_i64(local_tid_17449 * 32 + 32 - 1), (int64_t) 64), sext_i32_i64(local_tid_17449 * 32 + 32 - 1) - sext_i32_i64((local_tid_17449 - skip_threads_17626) * 32 + 32 - 1));
                        
                        if (thread_active_17627 && inactive_17628) {
                            eta_p_17619 = eta_p_17620;
                        }
                        if (thread_active_17627) {
                            if (!inactive_17628) {
                                float defunc_0_op_res_17621 = eta_p_17619 + eta_p_17620;
                                
                                eta_p_17619 = defunc_0_op_res_17621;
                            }
                        }
                    }
                    if (sle32(wave_sizze_17451, skip_threads_17626)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    if (thread_active_17627) {
                        // write result
                        {
                            ((volatile __local float *) red_arr_mem_17615)[sext_i32_i64(local_tid_17449)] = eta_p_17619;
                            eta_p_17620 = eta_p_17619;
                        }
                    }
                    if (sle32(wave_sizze_17451, skip_threads_17626)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    skip_threads_17626 *= 2;
                }
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        no_carry_in_17629 = squot32(local_tid_17449, 32) == 0 || !ltid_in_bounds_17622;
        // carry-in for every block except the first
        {
            // read operands
            {
                if (!no_carry_in_17629) {
                    eta_p_13897 = eta_p_13896;
                    eta_p_13896 = ((__local float *) red_arr_mem_17615)[sext_i32_i64(squot32(local_tid_17449, 32)) - (int64_t) 1];
                }
            }
            // perform operation
            {
                bool inactive_17630 = slt64(srem64(sext_i32_i64(local_tid_17449), (int64_t) 64), sext_i32_i64(local_tid_17449) - sext_i32_i64(squot32(local_tid_17449, 32) * 32 - 1));
                
                if (!no_carry_in_17629) {
                    if (inactive_17630) {
                        eta_p_13896 = eta_p_13897;
                    }
                }
                if (!no_carry_in_17629) {
                    if (!inactive_17630) {
                        float defunc_0_op_res_13898 = eta_p_13896 + eta_p_13897;
                        
                        eta_p_13896 = defunc_0_op_res_13898;
                    }
                }
            }
            // write final result
            {
                if (!no_carry_in_17629) {
                    ((__local float *) red_arr_mem_17615)[sext_i32_i64(local_tid_17449)] = eta_p_13896;
                }
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // restore correct values for first block
        {
            if (squot32(local_tid_17449, 32) == 0 && ltid_in_bounds_17622) {
                ((__local float *) red_arr_mem_17615)[sext_i32_i64(local_tid_17449)] = eta_p_13897;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_LOCAL_MEM_FENCE);
        // Save result of reduction.
        {
            int32_t num_chunks_17631 = sdiv_up32(sext_i64_i32(m_10789) * 64 * 64, sext_i64_i32(computed_tblock_sizze_13286));
            
            for (int32_t chunk_i_17632 = 0; chunk_i_17632 < num_chunks_17631; chunk_i_17632++) {
                int32_t i_17633 = chunk_i_17632 * sext_i64_i32(computed_tblock_sizze_13286) + local_tid_17449;
                
                if (slt32(i_17633, sext_i64_i32(m_10789) * 64 * 64)) {
                    ((__local float *) color_17269)[sext_i32_i64(squot32(i_17633, 4096)) * (int64_t) 4096 + sext_i32_i64(squot32(i_17633 - squot32(i_17633, 4096) * 4096, 64)) * (int64_t) 64 + sext_i32_i64(i_17633 - squot32(i_17633, 4096) * 4096 - squot32(i_17633 - squot32(i_17633, 4096) * 4096, 64) * 64)] = ((__local float *) red_arr_mem_17615)[(int64_t) 63 + sext_i32_i64(squot32(i_17633, 4096)) * (int64_t) 262144 + sext_i32_i64(squot32(i_17633 - squot32(i_17633, 4096) * 4096, 64)) * (int64_t) 4096 + sext_i32_i64(i_17633 - squot32(i_17633, 4096) * 4096 - squot32(i_17633 - squot32(i_17633, 4096) * 4096, 64) * 64) * (int64_t) 64];
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        phys_tid_13910 = sext_i32_i64(local_tid_17449);
        gtid_13907 = sext_i32_i64(sext_i64_i32(ltid_pre_17486));
        gtid_13908 = sext_i32_i64(sext_i64_i32(ltid_pre_17487));
        gtid_13909 = sext_i32_i64(sext_i64_i32(ltid_pre_17488));
        if ((slt64(gtid_13907, m_10789) && slt64(gtid_13908, (int64_t) 64)) && slt64(gtid_13909, (int64_t) 64)) {
            float defunc_0_f_res_13911;
            f16 f32_res_13912;
            
            defunc_0_f_res_13911 = ((__local float *) color_17269)[gtid_13907 * (int64_t) 4096 + gtid_13908 * (int64_t) 64 + gtid_13909];
            f32_res_13912 = fpconv_f32_f16(defunc_0_f_res_13911);
            ((__local uint16_t *) color_17268)[gtid_13907 * (int64_t) 4096 + gtid_13908 * (int64_t) 64 + gtid_13909] = futrts_to_bits16(f32_res_13912);
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        num_chunks_17634 = sdiv_up32(sext_i64_i32(m_10789) * 64 * 64, sext_i64_i32(computed_tblock_sizze_13286));
        for (int32_t chunk_i_17635 = 0; chunk_i_17635 < num_chunks_17634; chunk_i_17635++) {
            int32_t i_17636 = chunk_i_17635 * sext_i64_i32(computed_tblock_sizze_13286) + local_tid_17449;
            
            if (slt32(i_17636, sext_i64_i32(m_10789) * 64 * 64)) {
                ((__local uint16_t *) color_17269)[sext_i32_i64(squot32(i_17636, 4096)) * (int64_t) 4096 + sext_i32_i64(squot32(i_17636 - squot32(i_17636, 4096) * 4096, 64)) * (int64_t) 64 + sext_i32_i64(i_17636 - squot32(i_17636, 4096) * 4096 - squot32(i_17636 - squot32(i_17636, 4096) * 4096, 64) * 64)] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) color_17268)[sext_i32_i64(squot32(i_17636, 4096)) * (int64_t) 4096 + sext_i32_i64(squot32(i_17636 - squot32(i_17636, 4096) * 4096, 64)) + sext_i32_i64(i_17636 - squot32(i_17636, 4096) * 4096 - squot32(i_17636 - squot32(i_17636, 4096) * 4096, 64) * 64) * (int64_t) 64]));
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        phys_tid_13922 = sext_i32_i64(local_tid_17449);
        gtid_13921 = sext_i32_i64(sext_i64_i32(ltid_pre_17453));
        if (slt64(gtid_13921, d_10788)) {
            bool y_13925;
            bool index_certs_13927;
            
            y_13925 = slt64(gtid_13921, (int64_t) 64);
            if (!y_13925) {
                {
                    if (atomic_cmpxchg_i32_global(global_failure, -1, 0) == -1) {
                        global_failure_args[0] = (int64_t) gtid_13921;
                        global_failure_args[1] = (int64_t) (int64_t) 64;
                        ;
                    }
                    local_failure = 1;
                    goto error_5;
                }
            }
        }
        
      error_5:
        barrier(CLK_LOCAL_MEM_FENCE);
        if (local_failure)
            return;
        barrier(CLK_LOCAL_MEM_FENCE);
        phys_tid_13931 = sext_i32_i64(local_tid_17449);
        gtid_13929 = sext_i32_i64(sext_i64_i32(ltid_pre_17480));
        gtid_13930 = sext_i32_i64(sext_i64_i32(ltid_pre_17481));
        if (slt64(gtid_13929, d_10788) && slt64(gtid_13930, dzlz7bUZLztZRz20Umz20Udz7dUzg_11948)) {
            bool y_13936;
            bool index_certs_13938;
            bool index_certs_13933;
            f16 lifted_lambda_res_13939;
            
            y_13936 = slt64(gtid_13930, dzlz7bUZLztZRz20Umz20UZLZLzpZRz20Udz20UnZRz7dUzg_11873);
            if (!y_13936) {
                {
                    if (atomic_cmpxchg_i32_global(global_failure, -1, 1) == -1) {
                        global_failure_args[0] = (int64_t) gtid_13930;
                        global_failure_args[1] = (int64_t) dzlz7bUZLztZRz20Umz20UZLZLzpZRz20Udz20UnZRz7dUzg_11873;
                        ;
                    }
                    local_failure = 1;
                    goto error_6;
                }
            }
            index_certs_13933 = 0;
            lifted_lambda_res_13939 = futrts_from_bits16(((__local uint16_t *) color_17269)[gtid_13929 + gtid_13930 * (int64_t) 64]);
            ((__local uint16_t *) color_17277)[gtid_13929 * dzlz7bUZLztZRz20Umz20Udz7dUzg_11948 + gtid_13930] = futrts_to_bits16(lifted_lambda_res_13939);
        }
        
      error_6:
        barrier(CLK_LOCAL_MEM_FENCE);
        if (local_failure)
            return;
        barrier(CLK_LOCAL_MEM_FENCE);
        ext_mem_ext_17333 = color_17277;
    } else {
        int64_t phys_tid_13946;
        __local unsigned char *red_arr_mem_17637;
        int64_t gtid_13942;
        int64_t gtid_13943;
        int64_t gtid_13944;
        int64_t gtid_13945;
        int64_t dims_flat_17639;
        float eta_p_13947;
        float eta_p_13948;
        float eta_p_17641;
        float eta_p_17642;
        bool ltid_in_bounds_17644;
        int32_t skip_threads_17645;
        bool no_carry_in_17651;
        int64_t phys_tid_13961;
        int64_t gtid_13958;
        int64_t gtid_13959;
        int64_t gtid_13960;
        int32_t num_chunks_17656;
        
        phys_tid_13946 = sext_i32_i64(local_tid_17449);
        red_arr_mem_17637 = (__local unsigned char *) red_arr_mem_17637_backing_11;
        gtid_13942 = sext_i32_i64(sext_i64_i32(ltid_pre_17516));
        gtid_13943 = sext_i32_i64(sext_i64_i32(ltid_pre_17517));
        gtid_13944 = sext_i32_i64(sext_i64_i32(ltid_pre_17518));
        gtid_13945 = sext_i32_i64(sext_i64_i32(ltid_pre_17519));
        if (((slt64(gtid_13942, m_10789) && slt64(gtid_13943, d_10788)) && slt64(gtid_13944, d_10788)) && slt64(gtid_13945, d_10788)) {
            f16 eta_p_13953;
            int64_t binop_x_16048;
            int64_t binop_y_16049;
            int64_t binop_x_16050;
            int64_t binop_x_16051;
            int64_t new_index_16052;
            int64_t binop_y_16064;
            int64_t new_index_16065;
            f16 eta_p_13954;
            f16 defunc_0_f_res_13955;
            float f16_res_13956;
            
            eta_p_13953 = futrts_from_bits16(((__global uint16_t *) Q_mem_16531)[gtid_13875 * (d_10788 * d_10788) + gtid_13943 * d_10788 + gtid_13945]);
            binop_x_16048 = y_13481 * gtid_13942;
            binop_y_16049 = d_10788 * gtid_13944;
            binop_x_16050 = binop_x_16048 + binop_y_16049;
            binop_x_16051 = gtid_13945 + binop_x_16050;
            new_index_16052 = squot64(binop_x_16051, d_10788);
            binop_y_16064 = d_10788 * new_index_16052;
            new_index_16065 = binop_x_16051 - binop_y_16064;
            eta_p_13954 = futrts_from_bits16(((__global uint16_t *) K_mem_16532)[new_index_16052 * d_10788 + new_index_16065]);
            defunc_0_f_res_13955 = eta_p_13953 * eta_p_13954;
            f16_res_13956 = fpconv_f16_f32(defunc_0_f_res_13955);
            ((__local float *) red_arr_mem_17637)[gtid_13942 * (d_10788 * d_10788 * d_10788) + gtid_13943 * (d_10788 * d_10788) + gtid_13944 * d_10788 + gtid_13945] = f16_res_13956;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        dims_flat_17639 = m_10789 * d_10788 * d_10788 * d_10788;
        ltid_in_bounds_17644 = slt64(sext_i32_i64(local_tid_17449), m_10789 * d_10788 * d_10788 * d_10788);
        // read input for in-block scan
        {
            if (ltid_in_bounds_17644) {
                eta_p_13948 = ((volatile __local float *) red_arr_mem_17637)[sext_i32_i64(local_tid_17449)];
                if ((local_tid_17449 - squot32(local_tid_17449, 32) * 32) == 0) {
                    eta_p_13947 = eta_p_13948;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_17645 = 1;
            while (slt32(skip_threads_17645, 32)) {
                bool thread_active_17646 = sle32(skip_threads_17645, local_tid_17449 - squot32(local_tid_17449, 32) * 32) && ltid_in_bounds_17644;
                
                if (thread_active_17646) {
                    // read operands
                    {
                        eta_p_13947 = ((volatile __local float *) red_arr_mem_17637)[sext_i32_i64(local_tid_17449) - sext_i32_i64(skip_threads_17645)];
                    }
                }
                // perform operation
                {
                    bool inactive_17647 = slt64(srem64(sext_i32_i64(local_tid_17449), d_10788), sext_i32_i64(local_tid_17449) - sext_i32_i64(local_tid_17449 - skip_threads_17645));
                    
                    if (thread_active_17646 && inactive_17647) {
                        eta_p_13947 = eta_p_13948;
                    }
                    if (thread_active_17646) {
                        if (!inactive_17647) {
                            float defunc_0_op_res_13949 = eta_p_13947 + eta_p_13948;
                            
                            eta_p_13947 = defunc_0_op_res_13949;
                        }
                    }
                }
                if (sle32(wave_sizze_17451, skip_threads_17645)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (thread_active_17646) {
                    // write result
                    {
                        ((volatile __local float *) red_arr_mem_17637)[sext_i32_i64(local_tid_17449)] = eta_p_13947;
                        eta_p_13948 = eta_p_13947;
                    }
                }
                if (sle32(wave_sizze_17451, skip_threads_17645)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_17645 *= 2;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // last thread of block 'i' writes its result to offset 'i'
        {
            if ((local_tid_17449 - squot32(local_tid_17449, 32) * 32) == 31 && ltid_in_bounds_17644) {
                ((volatile __local float *) red_arr_mem_17637)[sext_i32_i64(squot32(local_tid_17449, 32))] = eta_p_13947;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
        {
            int32_t skip_threads_17648;
            
            // read input for in-block scan
            {
                if (squot32(local_tid_17449, 32) == 0 && ltid_in_bounds_17644) {
                    eta_p_17642 = ((volatile __local float *) red_arr_mem_17637)[sext_i32_i64(local_tid_17449)];
                    if ((local_tid_17449 - squot32(local_tid_17449, 32) * 32) == 0) {
                        eta_p_17641 = eta_p_17642;
                    }
                }
            }
            // in-block scan (hopefully no barriers needed)
            {
                skip_threads_17648 = 1;
                while (slt32(skip_threads_17648, 32)) {
                    bool thread_active_17649 = sle32(skip_threads_17648, local_tid_17449 - squot32(local_tid_17449, 32) * 32) && (squot32(local_tid_17449, 32) == 0 && ltid_in_bounds_17644);
                    
                    if (thread_active_17649) {
                        // read operands
                        {
                            eta_p_17641 = ((volatile __local float *) red_arr_mem_17637)[sext_i32_i64(local_tid_17449) - sext_i32_i64(skip_threads_17648)];
                        }
                    }
                    // perform operation
                    {
                        bool inactive_17650 = slt64(srem64(sext_i32_i64(local_tid_17449 * 32 + 32 - 1), d_10788), sext_i32_i64(local_tid_17449 * 32 + 32 - 1) - sext_i32_i64((local_tid_17449 - skip_threads_17648) * 32 + 32 - 1));
                        
                        if (thread_active_17649 && inactive_17650) {
                            eta_p_17641 = eta_p_17642;
                        }
                        if (thread_active_17649) {
                            if (!inactive_17650) {
                                float defunc_0_op_res_17643 = eta_p_17641 + eta_p_17642;
                                
                                eta_p_17641 = defunc_0_op_res_17643;
                            }
                        }
                    }
                    if (sle32(wave_sizze_17451, skip_threads_17648)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    if (thread_active_17649) {
                        // write result
                        {
                            ((volatile __local float *) red_arr_mem_17637)[sext_i32_i64(local_tid_17449)] = eta_p_17641;
                            eta_p_17642 = eta_p_17641;
                        }
                    }
                    if (sle32(wave_sizze_17451, skip_threads_17648)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    skip_threads_17648 *= 2;
                }
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        no_carry_in_17651 = squot32(local_tid_17449, 32) == 0 || !ltid_in_bounds_17644;
        // carry-in for every block except the first
        {
            // read operands
            {
                if (!no_carry_in_17651) {
                    eta_p_13948 = eta_p_13947;
                    eta_p_13947 = ((__local float *) red_arr_mem_17637)[sext_i32_i64(squot32(local_tid_17449, 32)) - (int64_t) 1];
                }
            }
            // perform operation
            {
                bool inactive_17652 = slt64(srem64(sext_i32_i64(local_tid_17449), d_10788), sext_i32_i64(local_tid_17449) - sext_i32_i64(squot32(local_tid_17449, 32) * 32 - 1));
                
                if (!no_carry_in_17651) {
                    if (inactive_17652) {
                        eta_p_13947 = eta_p_13948;
                    }
                }
                if (!no_carry_in_17651) {
                    if (!inactive_17652) {
                        float defunc_0_op_res_13949 = eta_p_13947 + eta_p_13948;
                        
                        eta_p_13947 = defunc_0_op_res_13949;
                    }
                }
            }
            // write final result
            {
                if (!no_carry_in_17651) {
                    ((__local float *) red_arr_mem_17637)[sext_i32_i64(local_tid_17449)] = eta_p_13947;
                }
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // restore correct values for first block
        {
            if (squot32(local_tid_17449, 32) == 0 && ltid_in_bounds_17644) {
                ((__local float *) red_arr_mem_17637)[sext_i32_i64(local_tid_17449)] = eta_p_13948;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_LOCAL_MEM_FENCE);
        // Save result of reduction.
        {
            int32_t num_chunks_17653 = sdiv_up32(sext_i64_i32(m_10789) * sext_i64_i32(d_10788) * sext_i64_i32(d_10788), sext_i64_i32(computed_tblock_sizze_13286));
            
            for (int32_t chunk_i_17654 = 0; chunk_i_17654 < num_chunks_17653; chunk_i_17654++) {
                int32_t i_17655 = chunk_i_17654 * sext_i64_i32(computed_tblock_sizze_13286) + local_tid_17449;
                
                if (slt32(i_17655, sext_i64_i32(m_10789) * sext_i64_i32(d_10788) * sext_i64_i32(d_10788))) {
                    ((__local float *) color_17269)[sext_i32_i64(squot32(i_17655, sext_i64_i32(d_10788) * sext_i64_i32(d_10788))) * (d_10788 * d_10788) + sext_i32_i64(squot32(i_17655 - squot32(i_17655, sext_i64_i32(d_10788) * sext_i64_i32(d_10788)) * (sext_i64_i32(d_10788) * sext_i64_i32(d_10788)), sext_i64_i32(d_10788))) * d_10788 + sext_i32_i64(i_17655 - squot32(i_17655, sext_i64_i32(d_10788) * sext_i64_i32(d_10788)) * (sext_i64_i32(d_10788) * sext_i64_i32(d_10788)) - squot32(i_17655 - squot32(i_17655, sext_i64_i32(d_10788) * sext_i64_i32(d_10788)) * (sext_i64_i32(d_10788) * sext_i64_i32(d_10788)), sext_i64_i32(d_10788)) * sext_i64_i32(d_10788))] = ((__local float *) red_arr_mem_17637)[d_10788 - (int64_t) 1 + sext_i32_i64(squot32(i_17655, sext_i64_i32(d_10788) * sext_i64_i32(d_10788))) * (d_10788 * d_10788 * d_10788) + sext_i32_i64(squot32(i_17655 - squot32(i_17655, sext_i64_i32(d_10788) * sext_i64_i32(d_10788)) * (sext_i64_i32(d_10788) * sext_i64_i32(d_10788)), sext_i64_i32(d_10788))) * (d_10788 * d_10788) + sext_i32_i64(i_17655 - squot32(i_17655, sext_i64_i32(d_10788) * sext_i64_i32(d_10788)) * (sext_i64_i32(d_10788) * sext_i64_i32(d_10788)) - squot32(i_17655 - squot32(i_17655, sext_i64_i32(d_10788) * sext_i64_i32(d_10788)) * (sext_i64_i32(d_10788) * sext_i64_i32(d_10788)), sext_i64_i32(d_10788)) * sext_i64_i32(d_10788)) * d_10788];
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        phys_tid_13961 = sext_i32_i64(local_tid_17449);
        gtid_13958 = sext_i32_i64(sext_i64_i32(ltid_pre_17507));
        gtid_13959 = sext_i32_i64(sext_i64_i32(ltid_pre_17508));
        gtid_13960 = sext_i32_i64(sext_i64_i32(ltid_pre_17509));
        if ((slt64(gtid_13958, m_10789) && slt64(gtid_13959, d_10788)) && slt64(gtid_13960, d_10788)) {
            float defunc_0_f_res_13962;
            f16 f32_res_13963;
            
            defunc_0_f_res_13962 = ((__local float *) color_17269)[gtid_13958 * (d_10788 * d_10788) + gtid_13959 * d_10788 + gtid_13960];
            f32_res_13963 = fpconv_f32_f16(defunc_0_f_res_13962);
            ((__local uint16_t *) color_17268)[gtid_13958 * (d_10788 * d_10788) + gtid_13959 * d_10788 + gtid_13960] = futrts_to_bits16(f32_res_13963);
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        num_chunks_17656 = sdiv_up32(sext_i64_i32(m_10789) * sext_i64_i32(d_10788) * sext_i64_i32(d_10788), sext_i64_i32(computed_tblock_sizze_13286));
        for (int32_t chunk_i_17657 = 0; chunk_i_17657 < num_chunks_17656; chunk_i_17657++) {
            int32_t i_17658 = chunk_i_17657 * sext_i64_i32(computed_tblock_sizze_13286) + local_tid_17449;
            
            if (slt32(i_17658, sext_i64_i32(m_10789) * sext_i64_i32(d_10788) * sext_i64_i32(d_10788))) {
                ((__local uint16_t *) color_17278)[sext_i32_i64(squot32(i_17658, sext_i64_i32(d_10788) * sext_i64_i32(d_10788))) * (d_10788 * d_10788) + sext_i32_i64(squot32(i_17658 - squot32(i_17658, sext_i64_i32(d_10788) * sext_i64_i32(d_10788)) * (sext_i64_i32(d_10788) * sext_i64_i32(d_10788)), sext_i64_i32(d_10788))) * d_10788 + sext_i32_i64(i_17658 - squot32(i_17658, sext_i64_i32(d_10788) * sext_i64_i32(d_10788)) * (sext_i64_i32(d_10788) * sext_i64_i32(d_10788)) - squot32(i_17658 - squot32(i_17658, sext_i64_i32(d_10788) * sext_i64_i32(d_10788)) * (sext_i64_i32(d_10788) * sext_i64_i32(d_10788)), sext_i64_i32(d_10788)) * sext_i64_i32(d_10788))] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) color_17268)[sext_i32_i64(squot32(i_17658, sext_i64_i32(d_10788) * sext_i64_i32(d_10788))) * (d_10788 * d_10788) + sext_i32_i64(squot32(i_17658 - squot32(i_17658, sext_i64_i32(d_10788) * sext_i64_i32(d_10788)) * (sext_i64_i32(d_10788) * sext_i64_i32(d_10788)), sext_i64_i32(d_10788))) + sext_i32_i64(i_17658 - squot32(i_17658, sext_i64_i32(d_10788) * sext_i64_i32(d_10788)) * (sext_i64_i32(d_10788) * sext_i64_i32(d_10788)) - squot32(i_17658 - squot32(i_17658, sext_i64_i32(d_10788) * sext_i64_i32(d_10788)) * (sext_i64_i32(d_10788) * sext_i64_i32(d_10788)), sext_i64_i32(d_10788)) * sext_i64_i32(d_10788)) * d_10788]));
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        ext_mem_ext_17333 = color_17278;
    }
    for (int32_t chunk_i_17661 = 0; chunk_i_17661 < num_chunks_17433; chunk_i_17661++) {
        int32_t i_17662;
        int64_t slice_17663;
        int64_t rep_i_17660;
        int64_t remnant_17664;
        
        i_17662 = chunk_i_17661 * sext_i64_i32(computed_tblock_sizze_13286) + local_tid_17449;
        slice_17663 = d_10788;
        rep_i_17660 = sext_i32_i64(i_17662);
        remnant_17664 = sext_i32_i64(i_17662) - rep_i_17660;
        if (sle64((int64_t) 0, rep_i_17660) && slt64(rep_i_17660, d_10788)) {
            ((__local uint16_t *) color_17269)[rep_i_17660] = futrts_to_bits16((f16) -INFINITY);
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    for (int32_t chunk_i_17667 = 0; chunk_i_17667 < num_chunks_17433; chunk_i_17667++) {
        int32_t i_17668;
        int64_t slice_17669;
        int64_t rep_i_17666;
        int64_t remnant_17670;
        
        i_17668 = chunk_i_17667 * sext_i64_i32(computed_tblock_sizze_13286) + local_tid_17449;
        slice_17669 = d_10788;
        rep_i_17666 = sext_i32_i64(i_17668);
        remnant_17670 = sext_i32_i64(i_17668) - rep_i_17666;
        if (sle64((int64_t) 0, rep_i_17666) && slt64(rep_i_17666, d_10788)) {
            ((__local uint16_t *) color_17268)[rep_i_17666] = futrts_to_bits16((f16) 0.0F);
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    barrier(CLK_LOCAL_MEM_FENCE);
    mem_param_16741 = color_17269;
    mem_param_out_17215 = color_17273;
    mem_param_16744 = color_17268;
    mem_param_out_17224 = color_17272;
    mem_param_ext_17337 = color_17269;
    mem_param_ext_17340 = color_17268;
    for (int64_t i_13975 = 0; i_13975 < q_11975; i_13975++) {
        int64_t copy2shr_arg0_13978;
        int32_t num_chunks_17679;
        __local unsigned char *ext_mem_ext_17343;
        int64_t phys_tid_13991;
        __local unsigned char *red_arr_mem_17685;
        int64_t gtid_13989;
        int64_t gtid_13990;
        int64_t dims_flat_17688;
        f16 eta_p_13992;
        f16 eta_p_13993;
        f16 eta_p_17690;
        f16 eta_p_17691;
        bool ltid_in_bounds_17693;
        int32_t skip_threads_17694;
        bool no_carry_in_17700;
        int64_t phys_tid_14007;
        __local unsigned char *red_arr_mem_17705;
        int64_t gtid_14005;
        int64_t gtid_14006;
        int64_t dims_flat_17708;
        f16 eta_p_14008;
        f16 eta_p_14009;
        f16 eta_p_17710;
        f16 eta_p_17711;
        bool ltid_in_bounds_17713;
        int32_t skip_threads_17714;
        bool no_carry_in_17720;
        int64_t phys_tid_14026;
        int64_t gtid_14025;
        __local unsigned char *mem_param_tmp_17671;
        __local unsigned char *mem_param_out_tmp_17672;
        __local unsigned char *mem_param_tmp_17673;
        __local unsigned char *mem_param_out_tmp_17674;
        __local unsigned char *mem_param_ext_tmp_17677;
        __local unsigned char *mem_param_ext_tmp_17678;
        
        copy2shr_arg0_13978 = mul64((int64_t) 1024, i_13975);
        num_chunks_17679 = sdiv_up32(sext_i64_i32(d_10788) * 1024, sext_i64_i32(computed_tblock_sizze_13286));
        for (int32_t chunk_i_17680 = 0; chunk_i_17680 < num_chunks_17679; chunk_i_17680++) {
            int32_t i_17681 = chunk_i_17680 * sext_i64_i32(computed_tblock_sizze_13286) + local_tid_17449;
            
            if (slt32(i_17681, sext_i64_i32(d_10788) * 1024)) {
                ((__local uint16_t *) color_17271)[sext_i32_i64(squot32(i_17681, 1024)) * (int64_t) 1024 + sext_i32_i64(i_17681 - squot32(i_17681, 1024) * 1024)] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) ext_mem_ext_17333)[(int64_t) 0 + ext_17336 * copy2shr_arg0_13978 + sext_i32_i64(squot32(i_17681, 1024)) * ext_17335 + sext_i32_i64(i_17681 - squot32(i_17681, 1024) * 1024) * ext_17336]));
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_LOCAL_MEM_FENCE);
        if (opaque_res_11979) {
            int32_t num_chunks_17682 = sdiv_up32(sext_i64_i32(d_10788) * 1024, sext_i64_i32(computed_tblock_sizze_13286));
            
            for (int32_t chunk_i_17683 = 0; chunk_i_17683 < num_chunks_17682; chunk_i_17683++) {
                int32_t i_17684 = chunk_i_17683 * sext_i64_i32(computed_tblock_sizze_13286) + local_tid_17449;
                
                if (slt32(i_17684, sext_i64_i32(d_10788) * 1024)) {
                    ((__local uint16_t *) color_17275)[sext_i32_i64(squot32(i_17684, 1024)) * (int64_t) 1024 + sext_i32_i64(i_17684 - squot32(i_17684, 1024) * 1024)] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) ext_mem_ext_17333)[(int64_t) 0 + ext_17336 * copy2shr_arg0_13978 + sext_i32_i64(squot32(i_17684, 1024)) * ext_17335 + sext_i32_i64(i_17684 - squot32(i_17684, 1024) * 1024) * ext_17336]));
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            ext_mem_ext_17343 = color_17275;
        } else {
            int64_t phys_tid_13985;
            int64_t gtid_13984;
            
            phys_tid_13985 = sext_i32_i64(local_tid_17449);
            gtid_13984 = sext_i32_i64(sext_i64_i32(ltid_pre_17453));
            if (slt64(gtid_13984, d_10788)) {
                ((__local uint16_t *) color_17271)[gtid_13984 * (int64_t) 1024] = futrts_to_bits16((f16) 0.0F);
                for (int64_t i_0 = 0; i_0 < (int64_t) 1024; i_0++) {
                    ((__local uint16_t *) color_17276)[gtid_13984 * (int64_t) 1024 + i_0] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) color_17271)[gtid_13984 * (int64_t) 1024 + i_0]));
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            ext_mem_ext_17343 = color_17276;
        }
        phys_tid_13991 = sext_i32_i64(local_tid_17449);
        red_arr_mem_17685 = (__local unsigned char *) red_arr_mem_17685_backing_12;
        gtid_13989 = sext_i32_i64(sext_i64_i32(ltid_pre_17456));
        gtid_13990 = sext_i32_i64(sext_i64_i32(ltid_pre_17457));
        if (slt64(gtid_13989, d_10788) && slt64(gtid_13990, (int64_t) 32)) {
            f16 defunc_0_f_res_13997;
            f16 r_13999 = (f16) -INFINITY;
            
            for (int64_t i_13998 = 0; i_13998 < (int64_t) 32; i_13998++) {
                int64_t zp_lhs_14000;
                int64_t f_arg0_14001;
                f16 f_arg0_14002;
                f16 max_res_14003;
                f16 r_tmp_17687;
                
                zp_lhs_14000 = mul64((int64_t) 32, i_13998);
                f_arg0_14001 = add64(gtid_13990, zp_lhs_14000);
                f_arg0_14002 = futrts_from_bits16(((__local uint16_t *) ext_mem_ext_17343)[gtid_13989 * (int64_t) 1024 + f_arg0_14001]);
                max_res_14003 = fmax16(r_13999, f_arg0_14002);
                r_tmp_17687 = max_res_14003;
                r_13999 = r_tmp_17687;
            }
            defunc_0_f_res_13997 = r_13999;
            ((__local uint16_t *) red_arr_mem_17685)[gtid_13989 * (int64_t) 32 + gtid_13990] = futrts_to_bits16(defunc_0_f_res_13997);
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        dims_flat_17688 = d_10788 * (int64_t) 32;
        ltid_in_bounds_17693 = slt64(sext_i32_i64(local_tid_17449), d_10788 * (int64_t) 32);
        // read input for in-block scan
        {
            if (ltid_in_bounds_17693) {
                eta_p_13993 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_17685)[sext_i32_i64(local_tid_17449)]);
                if ((local_tid_17449 - squot32(local_tid_17449, 32) * 32) == 0) {
                    eta_p_13992 = eta_p_13993;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_17694 = 1;
            while (slt32(skip_threads_17694, 32)) {
                bool thread_active_17695 = sle32(skip_threads_17694, local_tid_17449 - squot32(local_tid_17449, 32) * 32) && ltid_in_bounds_17693;
                
                if (thread_active_17695) {
                    // read operands
                    {
                        eta_p_13992 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_17685)[sext_i32_i64(local_tid_17449) - sext_i32_i64(skip_threads_17694)]);
                    }
                }
                // perform operation
                {
                    bool inactive_17696 = slt64(srem64(sext_i32_i64(local_tid_17449), (int64_t) 32), sext_i32_i64(local_tid_17449) - sext_i32_i64(local_tid_17449 - skip_threads_17694));
                    
                    if (thread_active_17695 && inactive_17696) {
                        eta_p_13992 = eta_p_13993;
                    }
                    if (thread_active_17695) {
                        if (!inactive_17696) {
                            f16 max_res_13994 = fmax16(eta_p_13992, eta_p_13993);
                            
                            eta_p_13992 = max_res_13994;
                        }
                    }
                }
                if (sle32(wave_sizze_17451, skip_threads_17694)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (thread_active_17695) {
                    // write result
                    {
                        ((volatile __local uint16_t *) red_arr_mem_17685)[sext_i32_i64(local_tid_17449)] = futrts_to_bits16(eta_p_13992);
                        eta_p_13993 = eta_p_13992;
                    }
                }
                if (sle32(wave_sizze_17451, skip_threads_17694)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_17694 *= 2;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // last thread of block 'i' writes its result to offset 'i'
        {
            if ((local_tid_17449 - squot32(local_tid_17449, 32) * 32) == 31 && ltid_in_bounds_17693) {
                ((volatile __local uint16_t *) red_arr_mem_17685)[sext_i32_i64(squot32(local_tid_17449, 32))] = futrts_to_bits16(eta_p_13992);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
        {
            int32_t skip_threads_17697;
            
            // read input for in-block scan
            {
                if (squot32(local_tid_17449, 32) == 0 && ltid_in_bounds_17693) {
                    eta_p_17691 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_17685)[sext_i32_i64(local_tid_17449)]);
                    if ((local_tid_17449 - squot32(local_tid_17449, 32) * 32) == 0) {
                        eta_p_17690 = eta_p_17691;
                    }
                }
            }
            // in-block scan (hopefully no barriers needed)
            {
                skip_threads_17697 = 1;
                while (slt32(skip_threads_17697, 32)) {
                    bool thread_active_17698 = sle32(skip_threads_17697, local_tid_17449 - squot32(local_tid_17449, 32) * 32) && (squot32(local_tid_17449, 32) == 0 && ltid_in_bounds_17693);
                    
                    if (thread_active_17698) {
                        // read operands
                        {
                            eta_p_17690 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_17685)[sext_i32_i64(local_tid_17449) - sext_i32_i64(skip_threads_17697)]);
                        }
                    }
                    // perform operation
                    {
                        bool inactive_17699 = slt64(srem64(sext_i32_i64(local_tid_17449 * 32 + 32 - 1), (int64_t) 32), sext_i32_i64(local_tid_17449 * 32 + 32 - 1) - sext_i32_i64((local_tid_17449 - skip_threads_17697) * 32 + 32 - 1));
                        
                        if (thread_active_17698 && inactive_17699) {
                            eta_p_17690 = eta_p_17691;
                        }
                        if (thread_active_17698) {
                            if (!inactive_17699) {
                                f16 max_res_17692 = fmax16(eta_p_17690, eta_p_17691);
                                
                                eta_p_17690 = max_res_17692;
                            }
                        }
                    }
                    if (sle32(wave_sizze_17451, skip_threads_17697)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    if (thread_active_17698) {
                        // write result
                        {
                            ((volatile __local uint16_t *) red_arr_mem_17685)[sext_i32_i64(local_tid_17449)] = futrts_to_bits16(eta_p_17690);
                            eta_p_17691 = eta_p_17690;
                        }
                    }
                    if (sle32(wave_sizze_17451, skip_threads_17697)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    skip_threads_17697 *= 2;
                }
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        no_carry_in_17700 = squot32(local_tid_17449, 32) == 0 || !ltid_in_bounds_17693;
        // carry-in for every block except the first
        {
            // read operands
            {
                if (!no_carry_in_17700) {
                    eta_p_13993 = eta_p_13992;
                    eta_p_13992 = futrts_from_bits16(((__local uint16_t *) red_arr_mem_17685)[sext_i32_i64(squot32(local_tid_17449, 32)) - (int64_t) 1]);
                }
            }
            // perform operation
            {
                bool inactive_17701 = slt64(srem64(sext_i32_i64(local_tid_17449), (int64_t) 32), sext_i32_i64(local_tid_17449) - sext_i32_i64(squot32(local_tid_17449, 32) * 32 - 1));
                
                if (!no_carry_in_17700) {
                    if (inactive_17701) {
                        eta_p_13992 = eta_p_13993;
                    }
                }
                if (!no_carry_in_17700) {
                    if (!inactive_17701) {
                        f16 max_res_13994 = fmax16(eta_p_13992, eta_p_13993);
                        
                        eta_p_13992 = max_res_13994;
                    }
                }
            }
            // write final result
            {
                if (!no_carry_in_17700) {
                    ((__local uint16_t *) red_arr_mem_17685)[sext_i32_i64(local_tid_17449)] = futrts_to_bits16(eta_p_13992);
                }
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // restore correct values for first block
        {
            if (squot32(local_tid_17449, 32) == 0 && ltid_in_bounds_17693) {
                ((__local uint16_t *) red_arr_mem_17685)[sext_i32_i64(local_tid_17449)] = futrts_to_bits16(eta_p_13993);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_LOCAL_MEM_FENCE);
        // Save result of reduction.
        {
            int32_t num_chunks_17702 = sdiv_up32(sext_i64_i32(d_10788), sext_i64_i32(computed_tblock_sizze_13286));
            
            for (int32_t chunk_i_17703 = 0; chunk_i_17703 < num_chunks_17702; chunk_i_17703++) {
                int32_t i_17704 = chunk_i_17703 * sext_i64_i32(computed_tblock_sizze_13286) + local_tid_17449;
                
                if (slt32(i_17704, sext_i64_i32(d_10788))) {
                    ((__local uint16_t *) color_17274)[sext_i32_i64(i_17704)] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) red_arr_mem_17685)[(int64_t) 31 + sext_i32_i64(i_17704) * (int64_t) 32]));
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        phys_tid_14007 = sext_i32_i64(local_tid_17449);
        red_arr_mem_17705 = (__local unsigned char *) red_arr_mem_17705_backing_13;
        gtid_14005 = sext_i32_i64(sext_i64_i32(ltid_pre_17456));
        gtid_14006 = sext_i32_i64(sext_i64_i32(ltid_pre_17457));
        if (slt64(gtid_14005, d_10788) && slt64(gtid_14006, (int64_t) 32)) {
            f16 defunc_0_reduce_comm_res_14012;
            f16 defunc_0_f_res_14014;
            f16 r_14016;
            
            defunc_0_reduce_comm_res_14012 = futrts_from_bits16(((__local uint16_t *) color_17274)[gtid_14005]);
            r_14016 = (f16) 0.0F;
            for (int64_t i_14015 = 0; i_14015 < (int64_t) 32; i_14015++) {
                int64_t zp_lhs_14017;
                int64_t f_arg0_14018;
                f16 f_arg0_14019;
                f16 real_exp_arg0_14020;
                f16 exp_res_14021;
                f16 defunc_0_bop_res_14022;
                f16 r_tmp_17707;
                
                zp_lhs_14017 = mul64((int64_t) 32, i_14015);
                f_arg0_14018 = add64(gtid_14006, zp_lhs_14017);
                f_arg0_14019 = futrts_from_bits16(((__local uint16_t *) ext_mem_ext_17343)[gtid_14005 * (int64_t) 1024 + f_arg0_14018]);
                real_exp_arg0_14020 = f_arg0_14019 - defunc_0_reduce_comm_res_14012;
                exp_res_14021 = futrts_exp16(real_exp_arg0_14020);
                defunc_0_bop_res_14022 = r_14016 + exp_res_14021;
                r_tmp_17707 = defunc_0_bop_res_14022;
                r_14016 = r_tmp_17707;
            }
            defunc_0_f_res_14014 = r_14016;
            ((__local uint16_t *) red_arr_mem_17705)[gtid_14005 * (int64_t) 32 + gtid_14006] = futrts_to_bits16(defunc_0_f_res_14014);
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        dims_flat_17708 = d_10788 * (int64_t) 32;
        ltid_in_bounds_17713 = slt64(sext_i32_i64(local_tid_17449), d_10788 * (int64_t) 32);
        // read input for in-block scan
        {
            if (ltid_in_bounds_17713) {
                eta_p_14009 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_17705)[sext_i32_i64(local_tid_17449)]);
                if ((local_tid_17449 - squot32(local_tid_17449, 32) * 32) == 0) {
                    eta_p_14008 = eta_p_14009;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_17714 = 1;
            while (slt32(skip_threads_17714, 32)) {
                bool thread_active_17715 = sle32(skip_threads_17714, local_tid_17449 - squot32(local_tid_17449, 32) * 32) && ltid_in_bounds_17713;
                
                if (thread_active_17715) {
                    // read operands
                    {
                        eta_p_14008 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_17705)[sext_i32_i64(local_tid_17449) - sext_i32_i64(skip_threads_17714)]);
                    }
                }
                // perform operation
                {
                    bool inactive_17716 = slt64(srem64(sext_i32_i64(local_tid_17449), (int64_t) 32), sext_i32_i64(local_tid_17449) - sext_i32_i64(local_tid_17449 - skip_threads_17714));
                    
                    if (thread_active_17715 && inactive_17716) {
                        eta_p_14008 = eta_p_14009;
                    }
                    if (thread_active_17715) {
                        if (!inactive_17716) {
                            f16 defunc_0_op_res_14010 = eta_p_14008 + eta_p_14009;
                            
                            eta_p_14008 = defunc_0_op_res_14010;
                        }
                    }
                }
                if (sle32(wave_sizze_17451, skip_threads_17714)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (thread_active_17715) {
                    // write result
                    {
                        ((volatile __local uint16_t *) red_arr_mem_17705)[sext_i32_i64(local_tid_17449)] = futrts_to_bits16(eta_p_14008);
                        eta_p_14009 = eta_p_14008;
                    }
                }
                if (sle32(wave_sizze_17451, skip_threads_17714)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_17714 *= 2;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // last thread of block 'i' writes its result to offset 'i'
        {
            if ((local_tid_17449 - squot32(local_tid_17449, 32) * 32) == 31 && ltid_in_bounds_17713) {
                ((volatile __local uint16_t *) red_arr_mem_17705)[sext_i32_i64(squot32(local_tid_17449, 32))] = futrts_to_bits16(eta_p_14008);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
        {
            int32_t skip_threads_17717;
            
            // read input for in-block scan
            {
                if (squot32(local_tid_17449, 32) == 0 && ltid_in_bounds_17713) {
                    eta_p_17711 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_17705)[sext_i32_i64(local_tid_17449)]);
                    if ((local_tid_17449 - squot32(local_tid_17449, 32) * 32) == 0) {
                        eta_p_17710 = eta_p_17711;
                    }
                }
            }
            // in-block scan (hopefully no barriers needed)
            {
                skip_threads_17717 = 1;
                while (slt32(skip_threads_17717, 32)) {
                    bool thread_active_17718 = sle32(skip_threads_17717, local_tid_17449 - squot32(local_tid_17449, 32) * 32) && (squot32(local_tid_17449, 32) == 0 && ltid_in_bounds_17713);
                    
                    if (thread_active_17718) {
                        // read operands
                        {
                            eta_p_17710 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_17705)[sext_i32_i64(local_tid_17449) - sext_i32_i64(skip_threads_17717)]);
                        }
                    }
                    // perform operation
                    {
                        bool inactive_17719 = slt64(srem64(sext_i32_i64(local_tid_17449 * 32 + 32 - 1), (int64_t) 32), sext_i32_i64(local_tid_17449 * 32 + 32 - 1) - sext_i32_i64((local_tid_17449 - skip_threads_17717) * 32 + 32 - 1));
                        
                        if (thread_active_17718 && inactive_17719) {
                            eta_p_17710 = eta_p_17711;
                        }
                        if (thread_active_17718) {
                            if (!inactive_17719) {
                                f16 defunc_0_op_res_17712 = eta_p_17710 + eta_p_17711;
                                
                                eta_p_17710 = defunc_0_op_res_17712;
                            }
                        }
                    }
                    if (sle32(wave_sizze_17451, skip_threads_17717)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    if (thread_active_17718) {
                        // write result
                        {
                            ((volatile __local uint16_t *) red_arr_mem_17705)[sext_i32_i64(local_tid_17449)] = futrts_to_bits16(eta_p_17710);
                            eta_p_17711 = eta_p_17710;
                        }
                    }
                    if (sle32(wave_sizze_17451, skip_threads_17717)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    skip_threads_17717 *= 2;
                }
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        no_carry_in_17720 = squot32(local_tid_17449, 32) == 0 || !ltid_in_bounds_17713;
        // carry-in for every block except the first
        {
            // read operands
            {
                if (!no_carry_in_17720) {
                    eta_p_14009 = eta_p_14008;
                    eta_p_14008 = futrts_from_bits16(((__local uint16_t *) red_arr_mem_17705)[sext_i32_i64(squot32(local_tid_17449, 32)) - (int64_t) 1]);
                }
            }
            // perform operation
            {
                bool inactive_17721 = slt64(srem64(sext_i32_i64(local_tid_17449), (int64_t) 32), sext_i32_i64(local_tid_17449) - sext_i32_i64(squot32(local_tid_17449, 32) * 32 - 1));
                
                if (!no_carry_in_17720) {
                    if (inactive_17721) {
                        eta_p_14008 = eta_p_14009;
                    }
                }
                if (!no_carry_in_17720) {
                    if (!inactive_17721) {
                        f16 defunc_0_op_res_14010 = eta_p_14008 + eta_p_14009;
                        
                        eta_p_14008 = defunc_0_op_res_14010;
                    }
                }
            }
            // write final result
            {
                if (!no_carry_in_17720) {
                    ((__local uint16_t *) red_arr_mem_17705)[sext_i32_i64(local_tid_17449)] = futrts_to_bits16(eta_p_14008);
                }
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // restore correct values for first block
        {
            if (squot32(local_tid_17449, 32) == 0 && ltid_in_bounds_17713) {
                ((__local uint16_t *) red_arr_mem_17705)[sext_i32_i64(local_tid_17449)] = futrts_to_bits16(eta_p_14009);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_LOCAL_MEM_FENCE);
        // Save result of reduction.
        {
            int32_t num_chunks_17722 = sdiv_up32(sext_i64_i32(d_10788), sext_i64_i32(computed_tblock_sizze_13286));
            
            for (int32_t chunk_i_17723 = 0; chunk_i_17723 < num_chunks_17722; chunk_i_17723++) {
                int32_t i_17724 = chunk_i_17723 * sext_i64_i32(computed_tblock_sizze_13286) + local_tid_17449;
                
                if (slt32(i_17724, sext_i64_i32(d_10788))) {
                    ((__local uint16_t *) color_17271)[sext_i32_i64(i_17724)] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) red_arr_mem_17705)[(int64_t) 31 + sext_i32_i64(i_17724) * (int64_t) 32]));
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        phys_tid_14026 = sext_i32_i64(local_tid_17449);
        gtid_14025 = sext_i32_i64(sext_i64_i32(ltid_pre_17453));
        if (slt64(gtid_14025, d_10788)) {
            f16 mi_old_14027;
            f16 li_old_14028;
            f16 defunc_0_reduce_comm_res_14029;
            f16 defunc_0_reduce_comm_res_14030;
            f16 max_res_14031;
            f16 real_exp_arg0_14032;
            f16 exp_res_14033;
            f16 exp_arg0_14034;
            f16 exp_res_14035;
            f16 eli_14036;
            f16 zp_rhs_14037;
            f16 li_new_14038;
            
            mi_old_14027 = futrts_from_bits16(((__local uint16_t *) mem_param_ext_17337)[gtid_14025]);
            li_old_14028 = futrts_from_bits16(((__local uint16_t *) mem_param_ext_17340)[gtid_14025]);
            defunc_0_reduce_comm_res_14029 = futrts_from_bits16(((__local uint16_t *) color_17274)[gtid_14025]);
            defunc_0_reduce_comm_res_14030 = futrts_from_bits16(((__local uint16_t *) color_17271)[gtid_14025]);
            max_res_14031 = fmax16(mi_old_14027, defunc_0_reduce_comm_res_14029);
            real_exp_arg0_14032 = defunc_0_reduce_comm_res_14029 - max_res_14031;
            exp_res_14033 = futrts_exp16(real_exp_arg0_14032);
            exp_arg0_14034 = mi_old_14027 - max_res_14031;
            exp_res_14035 = futrts_exp16(exp_arg0_14034);
            eli_14036 = li_old_14028 * exp_res_14035;
            zp_rhs_14037 = defunc_0_reduce_comm_res_14030 * exp_res_14033;
            li_new_14038 = eli_14036 + zp_rhs_14037;
            ((__local uint16_t *) mem_param_out_17215)[gtid_14025] = futrts_to_bits16(max_res_14031);
            ((__local uint16_t *) mem_param_out_17224)[gtid_14025] = futrts_to_bits16(li_new_14038);
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        mem_param_tmp_17671 = mem_param_out_17215;
        mem_param_out_tmp_17672 = mem_param_16741;
        mem_param_tmp_17673 = mem_param_out_17224;
        mem_param_out_tmp_17674 = mem_param_16744;
        mem_param_ext_tmp_17677 = mem_param_out_17215;
        mem_param_ext_tmp_17678 = mem_param_out_17224;
        mem_param_16741 = mem_param_tmp_17671;
        mem_param_out_17215 = mem_param_out_tmp_17672;
        mem_param_16744 = mem_param_tmp_17673;
        mem_param_out_17224 = mem_param_out_tmp_17674;
        mem_param_ext_17337 = mem_param_ext_tmp_17677;
        mem_param_ext_17340 = mem_param_ext_tmp_17678;
    }
    ext_mem_16768 = mem_param_16741;
    ext_mem_unused_17214 = mem_param_out_17215;
    ext_mem_16767 = mem_param_16744;
    ext_mem_unused_17223 = mem_param_out_17224;
    ext_mem_ext_17347 = mem_param_ext_17337;
    ext_mem_ext_17350 = mem_param_ext_17340;
    phys_tid_14044 = sext_i32_i64(local_tid_17449);
    gtid_14042 = sext_i32_i64(sext_i64_i32(ltid_pre_17468));
    gtid_14043 = sext_i32_i64(sext_i64_i32(ltid_pre_17469));
    if (slt64(gtid_14042, d_10788) && slt64(gtid_14043, dzlz7bUZLztZRz20Umz20Udz7dUzg_10790)) {
        f16 eta_p_14045;
        f16 eta_p_14046;
        f16 eta_p_14047;
        f16 real_exp_arg0_14048;
        f16 exp_res_14049;
        f16 lifted_lambda_res_14050;
        
        eta_p_14045 = futrts_from_bits16(((__local uint16_t *) ext_mem_ext_17347)[gtid_14042]);
        eta_p_14046 = futrts_from_bits16(((__local uint16_t *) ext_mem_ext_17350)[gtid_14042]);
        eta_p_14047 = futrts_from_bits16(((__local uint16_t *) ext_mem_ext_17333)[gtid_14042 * ext_17335 + gtid_14043 * ext_17336]);
        real_exp_arg0_14048 = eta_p_14047 - eta_p_14045;
        exp_res_14049 = futrts_exp16(real_exp_arg0_14048);
        lifted_lambda_res_14050 = exp_res_14049 / eta_p_14046;
        ((__local uint16_t *) color_17271)[gtid_14042 * dzlz7bUZLztZRz20Umz20Udz7dUzg_10790 + gtid_14043] = futrts_to_bits16(lifted_lambda_res_14050);
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    binop_x_17357 = computed_tblock_sizze_13286 * phys_tblock_id_13876;
    binop_x_17365 = computed_tblock_sizze_13286 * phys_tblock_id_13876;
    binop_x_17379 = computed_tblock_sizze_13286 * phys_tblock_id_13876;
    binop_x_17387 = computed_tblock_sizze_13286 * phys_tblock_id_13876;
    binop_x_17396 = computed_tblock_sizze_13286 * phys_tblock_id_13876;
    phys_tid_14054 = sext_i32_i64(local_tid_17449);
    red_arr_mem_17725 = (__local unsigned char *) red_arr_mem_17725_backing_14;
    gtid_14053 = sext_i32_i64(sext_i64_i32(ltid_pre_17546));
    if (slt64(gtid_14053, m_12246)) {
        int64_t zp_rhs_14066;
        int64_t binop_x_16512;
        int64_t ctx_17380;
        int64_t ctx_17388;
        int64_t binop_x_17397;
        
        zp_rhs_14066 = mul64(d_10788, gtid_14053);
        binop_x_16512 = y_13481 * gtid_14053;
        ctx_17380 = phys_tid_14054 + binop_x_17379;
        ctx_17388 = phys_tid_14054 + binop_x_17387;
        binop_x_17397 = phys_tid_14054 + binop_x_17396;
        for (int64_t i_16408 = 0; i_16408 < d_10788; i_16408++) {
            int64_t binop_y_17399;
            int64_t binop_y_17400;
            int64_t ctx_17401;
            
            for (int64_t i_16412 = 0; i_16412 < d_10788; i_16412++) {
                int64_t tmp_14075;
                bool x_14076;
                bool y_14077;
                bool bounds_check_14078;
                bool index_certs_14079;
                
                tmp_14075 = add64(zp_rhs_14066, i_16412);
                x_14076 = sle64((int64_t) 0, tmp_14075);
                y_14077 = slt64(tmp_14075, dzlz7bUZLztZRz20Umz20Udz7dUzg_10790);
                bounds_check_14078 = x_14076 && y_14077;
                if (!bounds_check_14078) {
                    {
                        if (atomic_cmpxchg_i32_global(global_failure, -1, 2) == -1) {
                            global_failure_args[0] = (int64_t) tmp_14075;
                            global_failure_args[1] = (int64_t) dzlz7bUZLztZRz20Umz20Udz7dUzg_10790;
                            ;
                        }
                        local_failure = 1;
                        goto error_22;
                    }
                }
                for (int64_t i_0 = 0; i_0 < (int64_t) 1; i_0++) {
                    ((__global uint16_t *) color_17255)[ctx_17388 + ctx_17389 * i_16412 + i_0 * ctx_17389] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) color_17271)[i_16408 * dzlz7bUZLztZRz20Umz20Udz7dUzg_10790 + tmp_14075 + i_0]));
                }
            }
            binop_y_17399 = d_10788 * i_16408;
            binop_y_17400 = binop_x_17398 * binop_y_17399;
            ctx_17401 = binop_x_17397 + binop_y_17400;
            for (int64_t i_16416 = 0; i_16416 < d_10788; i_16416++) {
                f16 defunc_0_f_res_14083;
                f16 redout_16418 = (f16) 0.0F;
                
                for (int64_t i_16419 = 0; i_16419 < d_10788; i_16419++) {
                    f16 eta_p_14087;
                    int64_t binop_y_16513;
                    int64_t binop_x_16514;
                    int64_t binop_x_16515;
                    int64_t new_index_16516;
                    int64_t binop_y_16528;
                    int64_t new_index_16529;
                    f16 eta_p_14088;
                    f16 defunc_0_f_res_14089;
                    f16 defunc_0_op_res_14086;
                    f16 redout_tmp_17730;
                    
                    eta_p_14087 = futrts_from_bits16(((__global uint16_t *) color_17255)[ctx_17388 + i_16419 * ctx_17389]);
                    binop_y_16513 = d_10788 * i_16419;
                    binop_x_16514 = binop_x_16512 + binop_y_16513;
                    binop_x_16515 = i_16416 + binop_x_16514;
                    new_index_16516 = squot64(binop_x_16515, d_10788);
                    binop_y_16528 = d_10788 * new_index_16516;
                    new_index_16529 = binop_x_16515 - binop_y_16528;
                    eta_p_14088 = futrts_from_bits16(((__global uint16_t *) V_mem_16533)[new_index_16516 * d_10788 + new_index_16529]);
                    defunc_0_f_res_14089 = eta_p_14087 * eta_p_14088;
                    defunc_0_op_res_14086 = defunc_0_f_res_14089 + redout_16418;
                    redout_tmp_17730 = defunc_0_op_res_14086;
                    redout_16418 = redout_tmp_17730;
                }
                defunc_0_f_res_14083 = redout_16418;
                ((__global uint16_t *) color_17256)[ctx_17401 + i_16416 * ctx_17402] = futrts_to_bits16(defunc_0_f_res_14083);
            }
            if (!((ctx_17380 + i_16408 * ctx_17382) == ctx_17401 && ctx_17383 == ctx_17402)) {
                for (int64_t i_0 = 0; i_0 < d_10788; i_0++) {
                    ((__global uint16_t *) color_17256)[ctx_17380 + i_16408 * ctx_17382 + i_0 * ctx_17383] = futrts_to_bits16(futrts_from_bits16(((__global uint16_t *) color_17256)[ctx_17401 + i_0 * ctx_17402]));
                }
            }
        }
        for (int64_t i_0 = 0; i_0 < d_10788; i_0++) {
            for (int64_t i_1 = 0; i_1 < d_10788; i_1++) {
                ((__local uint16_t *) red_arr_mem_17725)[gtid_14053 * (d_10788 * d_10788) + (i_0 * d_10788 + i_1)] = futrts_to_bits16(futrts_from_bits16(((__global uint16_t *) color_17256)[ctx_17380 + (i_0 * ctx_17382 + i_1 * ctx_17383)]));
            }
        }
    }
    
  error_22:
    barrier(CLK_LOCAL_MEM_FENCE);
    if (local_failure)
        return;
    barrier(CLK_LOCAL_MEM_FENCE);
    skip_waves_17732 = 1;
    offset_17731 = 0;
    // participating threads read initial accumulator
    {
        if (slt32(local_tid_17449, sext_i64_i32(m_12246))) {
            for (int64_t i_0 = 0; i_0 < d_10788; i_0++) {
                for (int64_t i_1 = 0; i_1 < d_10788; i_1++) {
                    ((__global uint16_t *) color_17270)[phys_tblock_id_13876 + m_10789 * (phys_tid_14054 * (d_10788 * d_10788)) + (i_0 * (m_10789 * d_10788) + i_1 * m_10789)] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) red_arr_mem_17725)[sext_i32_i64(local_tid_17449 + offset_17731) * (d_10788 * d_10788) + (i_0 * d_10788 + i_1)]));
                }
            }
        }
    }
    offset_17731 = 1;
    while (slt32(offset_17731, wave_sizze_17451)) {
        if (slt32(local_tid_17449 + offset_17731, sext_i64_i32(m_12246)) && ((local_tid_17449 - squot32(local_tid_17449, wave_sizze_17451) * wave_sizze_17451) & (2 * offset_17731 - 1)) == 0) {
            // read array element
            {
                for (int64_t i_0 = 0; i_0 < d_10788; i_0++) {
                    for (int64_t i_1 = 0; i_1 < d_10788; i_1++) {
                        ((__global uint16_t *) color_17270)[phys_tblock_id_13876 + m_10789 * ((phys_tid_14054 + computed_tblock_sizze_13286) * (d_10788 * d_10788)) + (i_0 * (m_10789 * d_10788) + i_1 * m_10789)] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) red_arr_mem_17725)[sext_i32_i64(local_tid_17449 + offset_17731) * (d_10788 * d_10788) + (i_0 * d_10788 + i_1)]));
                    }
                }
            }
            // apply reduction operation
            {
                int64_t ctx_17358 = phys_tid_14054 + binop_x_17357;
                int64_t ctx_17366 = phys_tid_14054 + binop_x_17365;
                
                for (int64_t i_16400 = 0; i_16400 < d_10788; i_16400++) {
                    for (int64_t i_16404 = 0; i_16404 < d_10788; i_16404++) {
                        f16 eta_p_14061 = futrts_from_bits16(((volatile __global uint16_t *) color_17270)[phys_tblock_id_13876 + m_10789 * (phys_tid_14054 * (d_10788 * d_10788)) + (i_16400 * (m_10789 * d_10788) + i_16404 * m_10789)]);
                        f16 eta_p_14062 = futrts_from_bits16(((volatile __global uint16_t *) color_17270)[phys_tblock_id_13876 + m_10789 * ((phys_tid_14054 + computed_tblock_sizze_13286) * (d_10788 * d_10788)) + (i_16400 * (m_10789 * d_10788) + i_16404 * m_10789)]);
                        f16 defunc_0_f_res_14063 = eta_p_14061 + eta_p_14062;
                        
                        ((volatile __global uint16_t *) mem_16785)[ctx_17366 + i_16404 * ctx_17367] = futrts_to_bits16(defunc_0_f_res_14063);
                    }
                    for (int64_t i_0 = 0; i_0 < d_10788; i_0++) {
                        ((__global uint16_t *) mem_16779)[ctx_17358 + i_16400 * ctx_17360 + i_0 * ctx_17361] = futrts_to_bits16(futrts_from_bits16(((__global uint16_t *) mem_16785)[ctx_17366 + i_0 * ctx_17367]));
                    }
                }
                for (int64_t i_0 = 0; i_0 < d_10788; i_0++) {
                    for (int64_t i_1 = 0; i_1 < d_10788; i_1++) {
                        ((__global uint16_t *) color_17270)[phys_tblock_id_13876 + m_10789 * (phys_tid_14054 * (d_10788 * d_10788)) + (i_0 * (m_10789 * d_10788) + i_1 * m_10789)] = futrts_to_bits16(futrts_from_bits16(((__global uint16_t *) mem_16779)[ctx_17358 + (i_0 * ctx_17360 + i_1 * ctx_17361)]));
                    }
                }
            }
            // write result of operation
            { }
        }
        offset_17731 *= 2;
    }
    while (slt32(skip_waves_17732, squot32(sext_i64_i32(computed_tblock_sizze_13286) + wave_sizze_17451 - 1, wave_sizze_17451))) {
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
        offset_17731 = skip_waves_17732 * wave_sizze_17451;
        if (slt32(local_tid_17449 + offset_17731, sext_i64_i32(m_12246)) && ((local_tid_17449 - squot32(local_tid_17449, wave_sizze_17451) * wave_sizze_17451) == 0 && (squot32(local_tid_17449, wave_sizze_17451) & (2 * skip_waves_17732 - 1)) == 0)) {
            // read array element
            {
                for (int64_t i_0 = 0; i_0 < d_10788; i_0++) {
                    for (int64_t i_1 = 0; i_1 < d_10788; i_1++) {
                        ((__global uint16_t *) color_17270)[phys_tblock_id_13876 + m_10789 * ((phys_tid_14054 + computed_tblock_sizze_13286) * (d_10788 * d_10788)) + (i_0 * (m_10789 * d_10788) + i_1 * m_10789)] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) red_arr_mem_17725)[sext_i32_i64(local_tid_17449 + offset_17731) * (d_10788 * d_10788) + (i_0 * d_10788 + i_1)]));
                    }
                }
            }
            // apply reduction operation
            {
                int64_t ctx_17358 = phys_tid_14054 + binop_x_17357;
                int64_t ctx_17366 = phys_tid_14054 + binop_x_17365;
                
                for (int64_t i_16400 = 0; i_16400 < d_10788; i_16400++) {
                    for (int64_t i_16404 = 0; i_16404 < d_10788; i_16404++) {
                        f16 eta_p_14061 = futrts_from_bits16(((__global uint16_t *) color_17270)[phys_tblock_id_13876 + m_10789 * (phys_tid_14054 * (d_10788 * d_10788)) + (i_16400 * (m_10789 * d_10788) + i_16404 * m_10789)]);
                        f16 eta_p_14062 = futrts_from_bits16(((__global uint16_t *) color_17270)[phys_tblock_id_13876 + m_10789 * ((phys_tid_14054 + computed_tblock_sizze_13286) * (d_10788 * d_10788)) + (i_16400 * (m_10789 * d_10788) + i_16404 * m_10789)]);
                        f16 defunc_0_f_res_14063 = eta_p_14061 + eta_p_14062;
                        
                        ((__global uint16_t *) mem_16785)[ctx_17366 + i_16404 * ctx_17367] = futrts_to_bits16(defunc_0_f_res_14063);
                    }
                    for (int64_t i_0 = 0; i_0 < d_10788; i_0++) {
                        ((__global uint16_t *) mem_16779)[ctx_17358 + i_16400 * ctx_17360 + i_0 * ctx_17361] = futrts_to_bits16(futrts_from_bits16(((__global uint16_t *) mem_16785)[ctx_17366 + i_0 * ctx_17367]));
                    }
                }
                for (int64_t i_0 = 0; i_0 < d_10788; i_0++) {
                    for (int64_t i_1 = 0; i_1 < d_10788; i_1++) {
                        ((__global uint16_t *) color_17270)[phys_tblock_id_13876 + m_10789 * (phys_tid_14054 * (d_10788 * d_10788)) + (i_0 * (m_10789 * d_10788) + i_1 * m_10789)] = futrts_to_bits16(futrts_from_bits16(((__global uint16_t *) mem_16779)[ctx_17358 + (i_0 * ctx_17360 + i_1 * ctx_17361)]));
                    }
                }
            }
            // write result of operation
            { }
        }
        skip_waves_17732 *= 2;
    }
    barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    // Copy array-typed operands to result array
    {
        if (local_tid_17449 == 0) {
            for (int64_t i_0 = 0; i_0 < d_10788; i_0++) {
                for (int64_t i_1 = 0; i_1 < d_10788; i_1++) {
                    ((__local uint16_t *) red_arr_mem_17725)[sext_i32_i64(local_tid_17449) * (d_10788 * d_10788) + (i_0 * d_10788 + i_1)] = futrts_to_bits16(futrts_from_bits16(((__global uint16_t *) color_17270)[phys_tblock_id_13876 + m_10789 * (phys_tid_14054 * (d_10788 * d_10788)) + (i_0 * (m_10789 * d_10788) + i_1 * m_10789)]));
                }
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // Save result of reduction.
    {
        int32_t num_chunks_17737 = sdiv_up32(sext_i64_i32(d_10788) * sext_i64_i32(d_10788), sext_i64_i32(computed_tblock_sizze_13286));
        
        for (int32_t chunk_i_17738 = 0; chunk_i_17738 < num_chunks_17737; chunk_i_17738++) {
            int32_t i_17739 = chunk_i_17738 * sext_i64_i32(computed_tblock_sizze_13286) + local_tid_17449;
            
            if (slt32(i_17739, sext_i64_i32(d_10788) * sext_i64_i32(d_10788))) {
                ((__local uint16_t *) color_17268)[sext_i32_i64(squot32(i_17739, sext_i64_i32(d_10788))) * d_10788 + sext_i32_i64(i_17739 - squot32(i_17739, sext_i64_i32(d_10788)) * sext_i64_i32(d_10788))] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) red_arr_mem_17725)[sext_i32_i64(squot32(i_17739, sext_i64_i32(d_10788))) * d_10788 + sext_i32_i64(i_17739 - squot32(i_17739, sext_i64_i32(d_10788)) * sext_i64_i32(d_10788))]));
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    num_chunks_17740 = sdiv_up32(sext_i64_i32(d_10788) * sext_i64_i32(d_10788), sext_i64_i32(computed_tblock_sizze_13286));
    for (int32_t chunk_i_17741 = 0; chunk_i_17741 < num_chunks_17740; chunk_i_17741++) {
        int32_t i_17742 = chunk_i_17741 * sext_i64_i32(computed_tblock_sizze_13286) + local_tid_17449;
        
        if (slt32(i_17742, sext_i64_i32(d_10788) * sext_i64_i32(d_10788))) {
            ((__global uint16_t *) mem_16829)[gtid_13875 * (d_10788 * d_10788) + sext_i32_i64(squot32(i_17742, sext_i64_i32(d_10788))) * d_10788 + sext_i32_i64(i_17742 - squot32(i_17742, sext_i64_i32(d_10788)) * sext_i64_i32(d_10788))] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) color_17268)[sext_i32_i64(squot32(i_17742, sext_i64_i32(d_10788))) * d_10788 + sext_i32_i64(i_17742 - squot32(i_17742, sext_i64_i32(d_10788)) * sext_i64_i32(d_10788))]));
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
  error_26:
    return;
}
FUTHARK_KERNEL_SIZED(FlashAttention_6021zisegmap_intrablock_15423_dim1, 1, 1)
void FlashAttention_6021zisegmap_intrablock_15423(__global int *global_failure, int64_t d_10788, int64_t dzlz7bUZLztZRz20Umz20Udz7dUzg_10790, int64_t n_11872, __global unsigned char *K_mem_16532, __global unsigned char *mem_16554, __global unsigned char *mem_16559)
{
    volatile __local unsigned char *color_17279_backing_0 = &shared_mem[0];
    const int64_t color_17279_backing_0_offset = 0 + (int64_t) 128;
    
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_17745;
    int32_t tblock_sizze_17748;
    int32_t wave_sizze_17747;
    int32_t block_id_17746;
    int32_t global_tid_17744;
    int64_t phys_tblock_id_15423;
    int64_t slice_17749;
    int64_t gtid_15422;
    int64_t remnant_17750;
    __local unsigned char *color_17279;
    int64_t tmp_offs_17751;
    int32_t num_chunks_17752;
    int32_t num_chunks_17755;
    int32_t num_chunks_17758;
    
    local_tid_17745 = get_local_id(0);
    tblock_sizze_17748 = get_local_size(0);
    wave_sizze_17747 = LOCKSTEP_WIDTH;
    block_id_17746 = get_tblock_id(0);
    global_tid_17744 = block_id_17746 * tblock_sizze_17748 + local_tid_17745;
    phys_tblock_id_15423 = sext_i32_i64(block_id_17746);
    slice_17749 = dzlz7bUZLztZRz20Umz20Udz7dUzg_10790;
    gtid_15422 = sext_i32_i64(block_id_17746);
    remnant_17750 = sext_i32_i64(block_id_17746) - gtid_15422;
    color_17279 = (__local unsigned char *) color_17279_backing_0;
    tmp_offs_17751 = (int64_t) 0;
    num_chunks_17752 = sdiv_up32(sext_i64_i32(d_10788), 0);
    for (int32_t chunk_i_17753 = 0; chunk_i_17753 < num_chunks_17752; chunk_i_17753++) {
        int32_t i_17754 = local_tid_17745;
        
        if (slt32(i_17754, sext_i64_i32(d_10788))) {
            ((__local uint16_t *) color_17279)[tmp_offs_17751 + sext_i32_i64(i_17754)] = futrts_to_bits16(futrts_from_bits16(((__global uint16_t *) K_mem_16532)[gtid_15422 * d_10788 + sext_i32_i64(i_17754)]));
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    tmp_offs_17751 += d_10788;
    num_chunks_17755 = sdiv_up32(sext_i64_i32(n_11872), 0);
    for (int32_t chunk_i_17756 = 0; chunk_i_17756 < num_chunks_17755; chunk_i_17756++) {
        int32_t i_17757 = local_tid_17745;
        
        if (slt32(i_17757, sext_i64_i32(n_11872))) {
            ((__local uint16_t *) color_17279)[tmp_offs_17751 + sext_i32_i64(i_17757)] = futrts_to_bits16(futrts_from_bits16(((__global uint16_t *) mem_16554)[sext_i32_i64(i_17757)]));
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    tmp_offs_17751 += n_11872;
    num_chunks_17758 = sdiv_up32(64, 0);
    for (int32_t chunk_i_17759 = 0; chunk_i_17759 < num_chunks_17758; chunk_i_17759++) {
        int32_t i_17760 = local_tid_17745;
        
        if (slt32(i_17760, 64)) {
            ((__global uint16_t *) mem_16559)[gtid_15422 * (int64_t) 64 + sext_i32_i64(i_17760)] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) color_17279)[sext_i32_i64(i_17760)]));
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
  error_0:
    return;
}
FUTHARK_KERNEL
void FlashAttention_6021zisegmap_intrablock_15461(__global int *global_failure, int failure_is_an_option, __global int64_t *global_failure_args, int64_t d_10788, int64_t m_10789, int64_t dzlz7bUZLztZRz20Umz20Udz7dUzg_10790, int64_t n_11872, int64_t dzlz7bUZLztZRz20Umz20UZLZLzpZRz20Udz20UnZRz7dUzg_11873, int64_t dzlz7bUZLztZRz20Umz20Udz7dUzg_11948, int64_t computed_tblock_sizze_15451, int64_t bytes_16598, int64_t maxSubHelper_17281, int64_t maxSubHelper_17282, __global unsigned char *Q_mem_16531, __global unsigned char *mem_16559, __global unsigned char *mem_16562, __global unsigned char *mem_16586, __global unsigned char *mem_16612)
{
    volatile __local unsigned char *red_arr_mem_17817_backing_3 = &shared_mem[0];
    const int64_t red_arr_mem_17817_backing_3_offset = 0 + ((int64_t) 4 * (m_10789 * (int64_t) 64 * (int64_t) 64 * (int64_t) 64) + srem64((int64_t) 8 - srem64((int64_t) 4 * (m_10789 * (int64_t) 64 * (int64_t) 64 * (int64_t) 64), (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_17285_backing_2 = &shared_mem[red_arr_mem_17817_backing_3_offset];
    const int64_t color_17285_backing_2_offset = red_arr_mem_17817_backing_3_offset + (bytes_16598 + srem64((int64_t) 8 - srem64(bytes_16598, (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_17284_backing_1 = &shared_mem[color_17285_backing_2_offset];
    const int64_t color_17284_backing_1_offset = color_17285_backing_2_offset + (maxSubHelper_17282 + srem64((int64_t) 8 - srem64(maxSubHelper_17282, (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_17283_backing_0 = &shared_mem[color_17284_backing_1_offset];
    const int64_t color_17283_backing_0_offset = color_17284_backing_1_offset + (maxSubHelper_17281 + srem64((int64_t) 8 - srem64(maxSubHelper_17281, (int64_t) 8), (int64_t) 8));
    volatile __local int local_failure;
    
    if (failure_is_an_option) {
        int failed = *global_failure >= 0;
        
        if (failed)
            return;
    }
    local_failure = 0;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t local_tid_17767;
    int32_t tblock_sizze_17770;
    int32_t wave_sizze_17769;
    int32_t block_id_17768;
    int32_t global_tid_17766;
    int64_t phys_tblock_id_15461;
    int64_t slice_17772;
    int64_t ltid_pre_17771;
    int64_t remnant_17773;
    int64_t slice_17776;
    int64_t slice_17777;
    int64_t ltid_pre_17774;
    int64_t remnant_17778;
    int64_t ltid_pre_17775;
    int64_t remnant_17779;
    int64_t slice_17783;
    int64_t slice_17784;
    int64_t slice_17785;
    int64_t ltid_pre_17780;
    int64_t remnant_17786;
    int64_t ltid_pre_17781;
    int64_t remnant_17787;
    int64_t ltid_pre_17782;
    int64_t remnant_17788;
    int64_t slice_17793;
    int64_t slice_17794;
    int64_t slice_17795;
    int64_t slice_17796;
    int64_t ltid_pre_17789;
    int64_t remnant_17797;
    int64_t ltid_pre_17790;
    int64_t remnant_17798;
    int64_t ltid_pre_17791;
    int64_t remnant_17799;
    int64_t ltid_pre_17792;
    int64_t remnant_17800;
    int64_t slice_17801;
    int64_t gtid_15460;
    int64_t remnant_17802;
    __local unsigned char *color_17283;
    __local unsigned char *color_17284;
    __local unsigned char *color_17285;
    int64_t tmp_offs_17803;
    int32_t num_chunks_17804;
    int32_t num_chunks_17807;
    int64_t tmp_offs_17810;
    int32_t num_chunks_17814;
    int64_t phys_tid_15472;
    __local unsigned char *red_arr_mem_17817;
    int64_t gtid_15468;
    int64_t gtid_15469;
    int64_t gtid_15470;
    int64_t gtid_15471;
    int64_t dims_flat_17819;
    float eta_p_15473;
    float eta_p_15474;
    float eta_p_17821;
    float eta_p_17822;
    bool ltid_in_bounds_17824;
    int32_t skip_threads_17825;
    bool no_carry_in_17831;
    int64_t phys_tid_15487;
    int64_t gtid_15484;
    int64_t gtid_15485;
    int64_t gtid_15486;
    int32_t num_chunks_17836;
    int64_t phys_tid_15497;
    int64_t gtid_15496;
    int64_t phys_tid_15506;
    int64_t gtid_15504;
    int64_t gtid_15505;
    int32_t num_chunks_17839;
    
    local_tid_17767 = get_local_id(0);
    tblock_sizze_17770 = get_local_size(0);
    wave_sizze_17769 = LOCKSTEP_WIDTH;
    block_id_17768 = get_tblock_id(0);
    global_tid_17766 = block_id_17768 * tblock_sizze_17770 + local_tid_17767;
    phys_tblock_id_15461 = sext_i32_i64(block_id_17768);
    slice_17772 = d_10788;
    ltid_pre_17771 = sext_i32_i64(local_tid_17767);
    remnant_17773 = sext_i32_i64(local_tid_17767) - ltid_pre_17771;
    slice_17776 = dzlz7bUZLztZRz20Umz20Udz7dUzg_11948;
    slice_17777 = d_10788 * slice_17776;
    ltid_pre_17774 = squot64(sext_i32_i64(local_tid_17767), slice_17776);
    remnant_17778 = sext_i32_i64(local_tid_17767) - ltid_pre_17774 * slice_17776;
    ltid_pre_17775 = remnant_17778;
    remnant_17779 = remnant_17778 - ltid_pre_17775;
    slice_17783 = (int64_t) 64;
    slice_17784 = (int64_t) 64 * slice_17783;
    slice_17785 = m_10789 * slice_17784;
    ltid_pre_17780 = squot64(sext_i32_i64(local_tid_17767), slice_17784);
    remnant_17786 = sext_i32_i64(local_tid_17767) - ltid_pre_17780 * slice_17784;
    ltid_pre_17781 = squot64(remnant_17786, slice_17783);
    remnant_17787 = remnant_17786 - ltid_pre_17781 * slice_17783;
    ltid_pre_17782 = remnant_17787;
    remnant_17788 = remnant_17787 - ltid_pre_17782;
    slice_17793 = (int64_t) 64;
    slice_17794 = (int64_t) 64 * slice_17793;
    slice_17795 = (int64_t) 64 * slice_17794;
    slice_17796 = m_10789 * slice_17795;
    ltid_pre_17789 = squot64(sext_i32_i64(local_tid_17767), slice_17795);
    remnant_17797 = sext_i32_i64(local_tid_17767) - ltid_pre_17789 * slice_17795;
    ltid_pre_17790 = squot64(remnant_17797, slice_17794);
    remnant_17798 = remnant_17797 - ltid_pre_17790 * slice_17794;
    ltid_pre_17791 = squot64(remnant_17798, slice_17793);
    remnant_17799 = remnant_17798 - ltid_pre_17791 * slice_17793;
    ltid_pre_17792 = remnant_17799;
    remnant_17800 = remnant_17799 - ltid_pre_17792;
    slice_17801 = m_10789;
    gtid_15460 = sext_i32_i64(block_id_17768);
    remnant_17802 = sext_i32_i64(block_id_17768) - gtid_15460;
    color_17283 = (__local unsigned char *) color_17283_backing_0;
    color_17284 = (__local unsigned char *) color_17284_backing_1;
    color_17285 = (__local unsigned char *) color_17285_backing_2;
    tmp_offs_17803 = (int64_t) 0;
    num_chunks_17804 = sdiv_up32(sext_i64_i32(d_10788) * sext_i64_i32(d_10788), sext_i64_i32(computed_tblock_sizze_15451));
    for (int32_t chunk_i_17805 = 0; chunk_i_17805 < num_chunks_17804; chunk_i_17805++) {
        int32_t i_17806 = chunk_i_17805 * sext_i64_i32(computed_tblock_sizze_15451) + local_tid_17767;
        
        if (slt32(i_17806, sext_i64_i32(d_10788) * sext_i64_i32(d_10788))) {
            ((__local uint16_t *) color_17283)[tmp_offs_17803 + sext_i32_i64(squot32(i_17806, sext_i64_i32(d_10788))) * (int64_t) 64 + sext_i32_i64(i_17806 - squot32(i_17806, sext_i64_i32(d_10788)) * sext_i64_i32(d_10788))] = futrts_to_bits16(futrts_from_bits16(((__global uint16_t *) Q_mem_16531)[gtid_15460 * (d_10788 * d_10788) + sext_i32_i64(squot32(i_17806, sext_i64_i32(d_10788))) * d_10788 + sext_i32_i64(i_17806 - squot32(i_17806, sext_i64_i32(d_10788)) * sext_i64_i32(d_10788))]));
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    tmp_offs_17803 += d_10788;
    num_chunks_17807 = sdiv_up32(sext_i64_i32(d_10788) * sext_i64_i32(n_11872), sext_i64_i32(computed_tblock_sizze_15451));
    for (int32_t chunk_i_17808 = 0; chunk_i_17808 < num_chunks_17807; chunk_i_17808++) {
        int32_t i_17809 = chunk_i_17808 * sext_i64_i32(computed_tblock_sizze_15451) + local_tid_17767;
        
        if (slt32(i_17809, sext_i64_i32(d_10788) * sext_i64_i32(n_11872))) {
            ((__local uint16_t *) color_17283)[tmp_offs_17803 + sext_i32_i64(squot32(i_17809, sext_i64_i32(n_11872))) * (int64_t) 64 + sext_i32_i64(i_17809 - squot32(i_17809, sext_i64_i32(n_11872)) * sext_i64_i32(n_11872))] = futrts_to_bits16(futrts_from_bits16(((__global uint16_t *) mem_16586)[sext_i32_i64(squot32(i_17809, sext_i64_i32(n_11872))) * n_11872 + sext_i32_i64(i_17809 - squot32(i_17809, sext_i64_i32(n_11872)) * sext_i64_i32(n_11872))]));
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    tmp_offs_17803 += n_11872;
    tmp_offs_17810 = (int64_t) 0;
    if (!((int64_t) 64 * tmp_offs_17810 == (int64_t) 0)) {
        int32_t num_chunks_17811 = sdiv_up32(sext_i64_i32(d_10788) * 64, sext_i64_i32(computed_tblock_sizze_15451));
        
        for (int32_t chunk_i_17812 = 0; chunk_i_17812 < num_chunks_17811; chunk_i_17812++) {
            int32_t i_17813 = chunk_i_17812 * sext_i64_i32(computed_tblock_sizze_15451) + local_tid_17767;
            
            if (slt32(i_17813, sext_i64_i32(d_10788) * 64)) {
                ((__local uint16_t *) color_17283)[(int64_t) 64 * tmp_offs_17810 + sext_i32_i64(squot32(i_17813, 64)) * (int64_t) 64 + sext_i32_i64(i_17813 - squot32(i_17813, 64) * 64)] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) color_17283)[sext_i32_i64(squot32(i_17813, 64)) * (int64_t) 64 + sext_i32_i64(i_17813 - squot32(i_17813, 64) * 64)]));
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
    }
    tmp_offs_17810 += d_10788;
    num_chunks_17814 = sdiv_up32(sext_i64_i32(n_11872) * 64, sext_i64_i32(computed_tblock_sizze_15451));
    for (int32_t chunk_i_17815 = 0; chunk_i_17815 < num_chunks_17814; chunk_i_17815++) {
        int32_t i_17816 = chunk_i_17815 * sext_i64_i32(computed_tblock_sizze_15451) + local_tid_17767;
        
        if (slt32(i_17816, sext_i64_i32(n_11872) * 64)) {
            ((__local uint16_t *) color_17283)[(int64_t) 64 * tmp_offs_17810 + sext_i32_i64(squot32(i_17816, 64)) * (int64_t) 64 + sext_i32_i64(i_17816 - squot32(i_17816, 64) * 64)] = futrts_to_bits16(futrts_from_bits16(((__global uint16_t *) mem_16562)[sext_i32_i64(squot32(i_17816, 64)) * (int64_t) 64 + sext_i32_i64(i_17816 - squot32(i_17816, 64) * 64)]));
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    tmp_offs_17810 += n_11872;
    phys_tid_15472 = sext_i32_i64(local_tid_17767);
    red_arr_mem_17817 = (__local unsigned char *) red_arr_mem_17817_backing_3;
    gtid_15468 = sext_i32_i64(sext_i64_i32(ltid_pre_17789));
    gtid_15469 = sext_i32_i64(sext_i64_i32(ltid_pre_17790));
    gtid_15470 = sext_i32_i64(sext_i64_i32(ltid_pre_17791));
    gtid_15471 = sext_i32_i64(sext_i64_i32(ltid_pre_17792));
    if (((slt64(gtid_15468, m_10789) && slt64(gtid_15469, (int64_t) 64)) && slt64(gtid_15470, (int64_t) 64)) && slt64(gtid_15471, (int64_t) 64)) {
        f16 eta_p_15479;
        int64_t binop_x_16107;
        int64_t binop_y_16108;
        int64_t binop_x_16109;
        int64_t binop_x_16110;
        int64_t new_index_16111;
        int64_t binop_y_16121;
        int64_t new_index_16122;
        bool index_concat_cmp_16124;
        f16 index_concat_branch_16128;
        f16 defunc_0_f_res_15481;
        float f16_res_15482;
        
        eta_p_15479 = futrts_from_bits16(((__local uint16_t *) color_17283)[gtid_15469 * (int64_t) 64 + gtid_15471]);
        binop_x_16107 = (int64_t) 4096 * gtid_15468;
        binop_y_16108 = (int64_t) 64 * gtid_15470;
        binop_x_16109 = binop_x_16107 + binop_y_16108;
        binop_x_16110 = gtid_15471 + binop_x_16109;
        new_index_16111 = squot64(binop_x_16110, (int64_t) 64);
        binop_y_16121 = (int64_t) 64 * new_index_16111;
        new_index_16122 = binop_x_16110 - binop_y_16121;
        index_concat_cmp_16124 = sle64(dzlz7bUZLztZRz20Umz20Udz7dUzg_10790, new_index_16111);
        if (index_concat_cmp_16124) {
            index_concat_branch_16128 = (f16) 0.0F;
        } else {
            f16 index_concat_16127 = futrts_from_bits16(((__global uint16_t *) mem_16559)[new_index_16111 * (int64_t) 64 + new_index_16122]);
            
            index_concat_branch_16128 = index_concat_16127;
        }
        defunc_0_f_res_15481 = eta_p_15479 * index_concat_branch_16128;
        f16_res_15482 = fpconv_f16_f32(defunc_0_f_res_15481);
        ((__local float *) red_arr_mem_17817)[gtid_15468 * (int64_t) 262144 + gtid_15469 * (int64_t) 4096 + gtid_15470 * (int64_t) 64 + gtid_15471] = f16_res_15482;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    dims_flat_17819 = m_10789 * (int64_t) 64 * (int64_t) 64 * (int64_t) 64;
    ltid_in_bounds_17824 = slt64(sext_i32_i64(local_tid_17767), m_10789 * (int64_t) 64 * (int64_t) 64 * (int64_t) 64);
    // read input for in-block scan
    {
        if (ltid_in_bounds_17824) {
            eta_p_15474 = ((volatile __local float *) red_arr_mem_17817)[sext_i32_i64(local_tid_17767)];
            if ((local_tid_17767 - squot32(local_tid_17767, 32) * 32) == 0) {
                eta_p_15473 = eta_p_15474;
            }
        }
    }
    // in-block scan (hopefully no barriers needed)
    {
        skip_threads_17825 = 1;
        while (slt32(skip_threads_17825, 32)) {
            bool thread_active_17826 = sle32(skip_threads_17825, local_tid_17767 - squot32(local_tid_17767, 32) * 32) && ltid_in_bounds_17824;
            
            if (thread_active_17826) {
                // read operands
                {
                    eta_p_15473 = ((volatile __local float *) red_arr_mem_17817)[sext_i32_i64(local_tid_17767) - sext_i32_i64(skip_threads_17825)];
                }
            }
            // perform operation
            {
                bool inactive_17827 = slt64(srem64(sext_i32_i64(local_tid_17767), (int64_t) 64), sext_i32_i64(local_tid_17767) - sext_i32_i64(local_tid_17767 - skip_threads_17825));
                
                if (thread_active_17826 && inactive_17827) {
                    eta_p_15473 = eta_p_15474;
                }
                if (thread_active_17826) {
                    if (!inactive_17827) {
                        float defunc_0_op_res_15475 = eta_p_15473 + eta_p_15474;
                        
                        eta_p_15473 = defunc_0_op_res_15475;
                    }
                }
            }
            if (sle32(wave_sizze_17769, skip_threads_17825)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            if (thread_active_17826) {
                // write result
                {
                    ((volatile __local float *) red_arr_mem_17817)[sext_i32_i64(local_tid_17767)] = eta_p_15473;
                    eta_p_15474 = eta_p_15473;
                }
            }
            if (sle32(wave_sizze_17769, skip_threads_17825)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            skip_threads_17825 *= 2;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // last thread of block 'i' writes its result to offset 'i'
    {
        if ((local_tid_17767 - squot32(local_tid_17767, 32) * 32) == 31 && ltid_in_bounds_17824) {
            ((volatile __local float *) red_arr_mem_17817)[sext_i32_i64(squot32(local_tid_17767, 32))] = eta_p_15473;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
    {
        int32_t skip_threads_17828;
        
        // read input for in-block scan
        {
            if (squot32(local_tid_17767, 32) == 0 && ltid_in_bounds_17824) {
                eta_p_17822 = ((volatile __local float *) red_arr_mem_17817)[sext_i32_i64(local_tid_17767)];
                if ((local_tid_17767 - squot32(local_tid_17767, 32) * 32) == 0) {
                    eta_p_17821 = eta_p_17822;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_17828 = 1;
            while (slt32(skip_threads_17828, 32)) {
                bool thread_active_17829 = sle32(skip_threads_17828, local_tid_17767 - squot32(local_tid_17767, 32) * 32) && (squot32(local_tid_17767, 32) == 0 && ltid_in_bounds_17824);
                
                if (thread_active_17829) {
                    // read operands
                    {
                        eta_p_17821 = ((volatile __local float *) red_arr_mem_17817)[sext_i32_i64(local_tid_17767) - sext_i32_i64(skip_threads_17828)];
                    }
                }
                // perform operation
                {
                    bool inactive_17830 = slt64(srem64(sext_i32_i64(local_tid_17767 * 32 + 32 - 1), (int64_t) 64), sext_i32_i64(local_tid_17767 * 32 + 32 - 1) - sext_i32_i64((local_tid_17767 - skip_threads_17828) * 32 + 32 - 1));
                    
                    if (thread_active_17829 && inactive_17830) {
                        eta_p_17821 = eta_p_17822;
                    }
                    if (thread_active_17829) {
                        if (!inactive_17830) {
                            float defunc_0_op_res_17823 = eta_p_17821 + eta_p_17822;
                            
                            eta_p_17821 = defunc_0_op_res_17823;
                        }
                    }
                }
                if (sle32(wave_sizze_17769, skip_threads_17828)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (thread_active_17829) {
                    // write result
                    {
                        ((volatile __local float *) red_arr_mem_17817)[sext_i32_i64(local_tid_17767)] = eta_p_17821;
                        eta_p_17822 = eta_p_17821;
                    }
                }
                if (sle32(wave_sizze_17769, skip_threads_17828)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_17828 *= 2;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    no_carry_in_17831 = squot32(local_tid_17767, 32) == 0 || !ltid_in_bounds_17824;
    // carry-in for every block except the first
    {
        // read operands
        {
            if (!no_carry_in_17831) {
                eta_p_15474 = eta_p_15473;
                eta_p_15473 = ((__local float *) red_arr_mem_17817)[sext_i32_i64(squot32(local_tid_17767, 32)) - (int64_t) 1];
            }
        }
        // perform operation
        {
            bool inactive_17832 = slt64(srem64(sext_i32_i64(local_tid_17767), (int64_t) 64), sext_i32_i64(local_tid_17767) - sext_i32_i64(squot32(local_tid_17767, 32) * 32 - 1));
            
            if (!no_carry_in_17831) {
                if (inactive_17832) {
                    eta_p_15473 = eta_p_15474;
                }
            }
            if (!no_carry_in_17831) {
                if (!inactive_17832) {
                    float defunc_0_op_res_15475 = eta_p_15473 + eta_p_15474;
                    
                    eta_p_15473 = defunc_0_op_res_15475;
                }
            }
        }
        // write final result
        {
            if (!no_carry_in_17831) {
                ((__local float *) red_arr_mem_17817)[sext_i32_i64(local_tid_17767)] = eta_p_15473;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // restore correct values for first block
    {
        if (squot32(local_tid_17767, 32) == 0 && ltid_in_bounds_17824) {
            ((__local float *) red_arr_mem_17817)[sext_i32_i64(local_tid_17767)] = eta_p_15474;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    barrier(CLK_LOCAL_MEM_FENCE);
    // Save result of reduction.
    {
        int32_t num_chunks_17833 = sdiv_up32(sext_i64_i32(m_10789) * 64 * 64, sext_i64_i32(computed_tblock_sizze_15451));
        
        for (int32_t chunk_i_17834 = 0; chunk_i_17834 < num_chunks_17833; chunk_i_17834++) {
            int32_t i_17835 = chunk_i_17834 * sext_i64_i32(computed_tblock_sizze_15451) + local_tid_17767;
            
            if (slt32(i_17835, sext_i64_i32(m_10789) * 64 * 64)) {
                ((__local float *) color_17284)[sext_i32_i64(squot32(i_17835, 4096)) * (int64_t) 4096 + sext_i32_i64(squot32(i_17835 - squot32(i_17835, 4096) * 4096, 64)) * (int64_t) 64 + sext_i32_i64(i_17835 - squot32(i_17835, 4096) * 4096 - squot32(i_17835 - squot32(i_17835, 4096) * 4096, 64) * 64)] = ((__local float *) red_arr_mem_17817)[(int64_t) 63 + sext_i32_i64(squot32(i_17835, 4096)) * (int64_t) 262144 + sext_i32_i64(squot32(i_17835 - squot32(i_17835, 4096) * 4096, 64)) * (int64_t) 4096 + sext_i32_i64(i_17835 - squot32(i_17835, 4096) * 4096 - squot32(i_17835 - squot32(i_17835, 4096) * 4096, 64) * 64) * (int64_t) 64];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    phys_tid_15487 = sext_i32_i64(local_tid_17767);
    gtid_15484 = sext_i32_i64(sext_i64_i32(ltid_pre_17780));
    gtid_15485 = sext_i32_i64(sext_i64_i32(ltid_pre_17781));
    gtid_15486 = sext_i32_i64(sext_i64_i32(ltid_pre_17782));
    if ((slt64(gtid_15484, m_10789) && slt64(gtid_15485, (int64_t) 64)) && slt64(gtid_15486, (int64_t) 64)) {
        float defunc_0_f_res_15488;
        f16 f32_res_15489;
        
        defunc_0_f_res_15488 = ((__local float *) color_17284)[gtid_15484 * (int64_t) 4096 + gtid_15485 * (int64_t) 64 + gtid_15486];
        f32_res_15489 = fpconv_f32_f16(defunc_0_f_res_15488);
        ((__local uint16_t *) color_17283)[gtid_15484 * (int64_t) 4096 + gtid_15485 * (int64_t) 64 + gtid_15486] = futrts_to_bits16(f32_res_15489);
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    num_chunks_17836 = sdiv_up32(sext_i64_i32(m_10789) * 64 * 64, sext_i64_i32(computed_tblock_sizze_15451));
    for (int32_t chunk_i_17837 = 0; chunk_i_17837 < num_chunks_17836; chunk_i_17837++) {
        int32_t i_17838 = chunk_i_17837 * sext_i64_i32(computed_tblock_sizze_15451) + local_tid_17767;
        
        if (slt32(i_17838, sext_i64_i32(m_10789) * 64 * 64)) {
            ((__local uint16_t *) color_17285)[sext_i32_i64(squot32(i_17838, 4096)) * (int64_t) 4096 + sext_i32_i64(squot32(i_17838 - squot32(i_17838, 4096) * 4096, 64)) * (int64_t) 64 + sext_i32_i64(i_17838 - squot32(i_17838, 4096) * 4096 - squot32(i_17838 - squot32(i_17838, 4096) * 4096, 64) * 64)] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) color_17283)[sext_i32_i64(squot32(i_17838, 4096)) * (int64_t) 4096 + sext_i32_i64(squot32(i_17838 - squot32(i_17838, 4096) * 4096, 64)) + sext_i32_i64(i_17838 - squot32(i_17838, 4096) * 4096 - squot32(i_17838 - squot32(i_17838, 4096) * 4096, 64) * 64) * (int64_t) 64]));
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    phys_tid_15497 = sext_i32_i64(local_tid_17767);
    gtid_15496 = sext_i32_i64(sext_i64_i32(ltid_pre_17771));
    if (slt64(gtid_15496, d_10788)) {
        bool y_15500;
        bool index_certs_15502;
        
        y_15500 = slt64(gtid_15496, (int64_t) 64);
        if (!y_15500) {
            {
                if (atomic_cmpxchg_i32_global(global_failure, -1, 3) == -1) {
                    global_failure_args[0] = (int64_t) gtid_15496;
                    global_failure_args[1] = (int64_t) (int64_t) 64;
                    ;
                }
                local_failure = 1;
                goto error_4;
            }
        }
    }
    
  error_4:
    barrier(CLK_LOCAL_MEM_FENCE);
    if (local_failure)
        return;
    barrier(CLK_LOCAL_MEM_FENCE);
    phys_tid_15506 = sext_i32_i64(local_tid_17767);
    gtid_15504 = sext_i32_i64(sext_i64_i32(ltid_pre_17774));
    gtid_15505 = sext_i32_i64(sext_i64_i32(ltid_pre_17775));
    if (slt64(gtid_15504, d_10788) && slt64(gtid_15505, dzlz7bUZLztZRz20Umz20Udz7dUzg_11948)) {
        bool y_15511;
        bool index_certs_15513;
        bool index_certs_15508;
        f16 lifted_lambda_res_15514;
        
        y_15511 = slt64(gtid_15505, dzlz7bUZLztZRz20Umz20UZLZLzpZRz20Udz20UnZRz7dUzg_11873);
        if (!y_15511) {
            {
                if (atomic_cmpxchg_i32_global(global_failure, -1, 4) == -1) {
                    global_failure_args[0] = (int64_t) gtid_15505;
                    global_failure_args[1] = (int64_t) dzlz7bUZLztZRz20Umz20UZLZLzpZRz20Udz20UnZRz7dUzg_11873;
                    ;
                }
                local_failure = 1;
                goto error_5;
            }
        }
        index_certs_15508 = 0;
        lifted_lambda_res_15514 = futrts_from_bits16(((__local uint16_t *) color_17285)[gtid_15504 + gtid_15505 * (int64_t) 64]);
        ((__local uint16_t *) color_17283)[gtid_15504 * dzlz7bUZLztZRz20Umz20Udz7dUzg_11948 + gtid_15505] = futrts_to_bits16(lifted_lambda_res_15514);
    }
    
  error_5:
    barrier(CLK_LOCAL_MEM_FENCE);
    if (local_failure)
        return;
    barrier(CLK_LOCAL_MEM_FENCE);
    num_chunks_17839 = sdiv_up32(sext_i64_i32(d_10788) * sext_i64_i32(dzlz7bUZLztZRz20Umz20Udz7dUzg_10790), sext_i64_i32(computed_tblock_sizze_15451));
    for (int32_t chunk_i_17840 = 0; chunk_i_17840 < num_chunks_17839; chunk_i_17840++) {
        int32_t i_17841 = chunk_i_17840 * sext_i64_i32(computed_tblock_sizze_15451) + local_tid_17767;
        
        if (slt32(i_17841, sext_i64_i32(d_10788) * sext_i64_i32(dzlz7bUZLztZRz20Umz20Udz7dUzg_10790))) {
            ((__global uint16_t *) mem_16612)[gtid_15460 * (dzlz7bUZLztZRz20Umz20Udz7dUzg_10790 * d_10788) + sext_i32_i64(squot32(i_17841, sext_i64_i32(dzlz7bUZLztZRz20Umz20Udz7dUzg_10790))) * dzlz7bUZLztZRz20Umz20Udz7dUzg_10790 + sext_i32_i64(i_17841 - squot32(i_17841, sext_i64_i32(dzlz7bUZLztZRz20Umz20Udz7dUzg_10790)) * sext_i64_i32(dzlz7bUZLztZRz20Umz20Udz7dUzg_10790))] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) color_17283)[sext_i32_i64(squot32(i_17841, sext_i64_i32(dzlz7bUZLztZRz20Umz20Udz7dUzg_10790))) * dzlz7bUZLztZRz20Umz20Udz7dUzg_11948 + sext_i32_i64(i_17841 - squot32(i_17841, sext_i64_i32(dzlz7bUZLztZRz20Umz20Udz7dUzg_10790)) * sext_i64_i32(dzlz7bUZLztZRz20Umz20Udz7dUzg_10790))]));
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
  error_6:
    return;
}
FUTHARK_KERNEL_SIZED(FlashAttention_6021zisegmap_intrablock_15528_dim1, 1, 1)
void FlashAttention_6021zisegmap_intrablock_15528(__global int *global_failure, int64_t d_10788, int64_t m_10789, int64_t n_11872, __global unsigned char *Q_mem_16531, __global unsigned char *mem_16554, __global unsigned char *mem_16568)
{
    volatile __local unsigned char *color_17286_backing_0 = &shared_mem[0];
    const int64_t color_17286_backing_0_offset = 0 + (int64_t) 128;
    
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_17844;
    int32_t tblock_sizze_17847;
    int32_t wave_sizze_17846;
    int32_t block_id_17845;
    int32_t global_tid_17843;
    int64_t phys_tblock_id_15528;
    int64_t slice_17848;
    int64_t slice_17849;
    int64_t gtid_15526;
    int64_t remnant_17850;
    int64_t gtid_15527;
    int64_t remnant_17851;
    __local unsigned char *color_17286;
    int64_t tmp_offs_17852;
    int32_t num_chunks_17853;
    int32_t num_chunks_17856;
    int32_t num_chunks_17859;
    
    local_tid_17844 = get_local_id(0);
    tblock_sizze_17847 = get_local_size(0);
    wave_sizze_17846 = LOCKSTEP_WIDTH;
    block_id_17845 = get_tblock_id(0);
    global_tid_17843 = block_id_17845 * tblock_sizze_17847 + local_tid_17844;
    phys_tblock_id_15528 = sext_i32_i64(block_id_17845);
    slice_17848 = d_10788;
    slice_17849 = m_10789 * slice_17848;
    gtid_15526 = squot64(sext_i32_i64(block_id_17845), slice_17848);
    remnant_17850 = sext_i32_i64(block_id_17845) - gtid_15526 * slice_17848;
    gtid_15527 = remnant_17850;
    remnant_17851 = remnant_17850 - gtid_15527;
    color_17286 = (__local unsigned char *) color_17286_backing_0;
    tmp_offs_17852 = (int64_t) 0;
    num_chunks_17853 = sdiv_up32(sext_i64_i32(d_10788), 0);
    for (int32_t chunk_i_17854 = 0; chunk_i_17854 < num_chunks_17853; chunk_i_17854++) {
        int32_t i_17855 = local_tid_17844;
        
        if (slt32(i_17855, sext_i64_i32(d_10788))) {
            ((__local uint16_t *) color_17286)[tmp_offs_17852 + sext_i32_i64(i_17855)] = futrts_to_bits16(futrts_from_bits16(((__global uint16_t *) Q_mem_16531)[gtid_15526 * (d_10788 * d_10788) + gtid_15527 * d_10788 + sext_i32_i64(i_17855)]));
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    tmp_offs_17852 += d_10788;
    num_chunks_17856 = sdiv_up32(sext_i64_i32(n_11872), 0);
    for (int32_t chunk_i_17857 = 0; chunk_i_17857 < num_chunks_17856; chunk_i_17857++) {
        int32_t i_17858 = local_tid_17844;
        
        if (slt32(i_17858, sext_i64_i32(n_11872))) {
            ((__local uint16_t *) color_17286)[tmp_offs_17852 + sext_i32_i64(i_17858)] = futrts_to_bits16(futrts_from_bits16(((__global uint16_t *) mem_16554)[sext_i32_i64(i_17858)]));
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    tmp_offs_17852 += n_11872;
    num_chunks_17859 = sdiv_up32(64, 0);
    for (int32_t chunk_i_17860 = 0; chunk_i_17860 < num_chunks_17859; chunk_i_17860++) {
        int32_t i_17861 = local_tid_17844;
        
        if (slt32(i_17861, 64)) {
            ((__global uint16_t *) mem_16568)[gtid_15526 * ((int64_t) 64 * d_10788) + gtid_15527 * (int64_t) 64 + sext_i32_i64(i_17861)] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) color_17286)[sext_i32_i64(i_17861)]));
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
  error_0:
    return;
}
FUTHARK_KERNEL_SIZED(FlashAttention_6021zisegmap_intrablock_15553_dim1, 1, 1)
void FlashAttention_6021zisegmap_intrablock_15553(__global int *global_failure, int64_t d_10788, int64_t m_10789, int64_t dzlz7bUZLztZRz20Umz20Udz7dUzg_10790, __global unsigned char *mem_16559, __global unsigned char *mem_16568, __global unsigned char *mem_16576)
{
    volatile __local unsigned char *red_arr_mem_17889_backing_2 = &shared_mem[0];
    const int64_t red_arr_mem_17889_backing_2_offset = 0 + (int64_t) 1048576;
    volatile __local unsigned char *color_17288_backing_1 = &shared_mem[red_arr_mem_17889_backing_2_offset];
    const int64_t color_17288_backing_1_offset = red_arr_mem_17889_backing_2_offset + (int64_t) 16384;
    volatile __local unsigned char *color_17287_backing_0 = &shared_mem[color_17288_backing_1_offset];
    const int64_t color_17287_backing_0_offset = color_17288_backing_1_offset + (int64_t) 8192;
    
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_17866;
    int32_t tblock_sizze_17869;
    int32_t wave_sizze_17868;
    int32_t block_id_17867;
    int32_t global_tid_17865;
    int64_t phys_tblock_id_15553;
    int64_t slice_17872;
    int64_t slice_17873;
    int64_t ltid_pre_17870;
    int64_t remnant_17874;
    int64_t ltid_pre_17871;
    int64_t remnant_17875;
    int64_t slice_17879;
    int64_t slice_17880;
    int64_t slice_17881;
    int64_t ltid_pre_17876;
    int64_t remnant_17882;
    int64_t ltid_pre_17877;
    int64_t remnant_17883;
    int64_t ltid_pre_17878;
    int64_t remnant_17884;
    int64_t slice_17885;
    int64_t slice_17886;
    int64_t gtid_15551;
    int64_t remnant_17887;
    int64_t gtid_15552;
    int64_t remnant_17888;
    __local unsigned char *color_17287;
    __local unsigned char *color_17288;
    int64_t binop_x_16270;
    int64_t phys_tid_15562;
    __local unsigned char *red_arr_mem_17889;
    int64_t gtid_15559;
    int64_t gtid_15560;
    int64_t gtid_15561;
    int64_t dims_flat_17891;
    float eta_p_15563;
    float eta_p_15564;
    float eta_p_17893;
    float eta_p_17894;
    bool ltid_in_bounds_17896;
    int32_t skip_threads_17897;
    bool no_carry_in_17903;
    int64_t phys_tid_15575;
    int64_t gtid_15573;
    int64_t gtid_15574;
    int32_t num_chunks_17908;
    
    local_tid_17866 = get_local_id(0);
    tblock_sizze_17869 = get_local_size(0);
    wave_sizze_17868 = LOCKSTEP_WIDTH;
    block_id_17867 = get_tblock_id(0);
    global_tid_17865 = block_id_17867 * tblock_sizze_17869 + local_tid_17866;
    phys_tblock_id_15553 = sext_i32_i64(block_id_17867);
    slice_17872 = (int64_t) 64;
    slice_17873 = (int64_t) 64 * slice_17872;
    ltid_pre_17870 = squot64(sext_i32_i64(local_tid_17866), slice_17872);
    remnant_17874 = sext_i32_i64(local_tid_17866) - ltid_pre_17870 * slice_17872;
    ltid_pre_17871 = remnant_17874;
    remnant_17875 = remnant_17874 - ltid_pre_17871;
    slice_17879 = (int64_t) 64;
    slice_17880 = (int64_t) 64 * slice_17879;
    slice_17881 = (int64_t) 64 * slice_17880;
    ltid_pre_17876 = squot64(sext_i32_i64(local_tid_17866), slice_17880);
    remnant_17882 = sext_i32_i64(local_tid_17866) - ltid_pre_17876 * slice_17880;
    ltid_pre_17877 = squot64(remnant_17882, slice_17879);
    remnant_17883 = remnant_17882 - ltid_pre_17877 * slice_17879;
    ltid_pre_17878 = remnant_17883;
    remnant_17884 = remnant_17883 - ltid_pre_17878;
    slice_17885 = m_10789;
    slice_17886 = m_10789 * slice_17885;
    gtid_15551 = squot64(sext_i32_i64(block_id_17867), slice_17885);
    remnant_17887 = sext_i32_i64(block_id_17867) - gtid_15551 * slice_17885;
    gtid_15552 = remnant_17887;
    remnant_17888 = remnant_17887 - gtid_15552;
    color_17287 = (__local unsigned char *) color_17287_backing_0;
    color_17288 = (__local unsigned char *) color_17288_backing_1;
    binop_x_16270 = (int64_t) 4096 * gtid_15552;
    phys_tid_15562 = sext_i32_i64(local_tid_17866);
    red_arr_mem_17889 = (__local unsigned char *) red_arr_mem_17889_backing_2;
    gtid_15559 = sext_i32_i64(sext_i64_i32(ltid_pre_17876));
    gtid_15560 = sext_i32_i64(sext_i64_i32(ltid_pre_17877));
    gtid_15561 = sext_i32_i64(sext_i64_i32(ltid_pre_17878));
    if ((slt64(gtid_15559, (int64_t) 64) && slt64(gtid_15560, (int64_t) 64)) && slt64(gtid_15561, (int64_t) 64)) {
        bool index_concat_cmp_16025;
        f16 index_concat_branch_16029;
        int64_t binop_y_16271;
        int64_t binop_x_16272;
        int64_t binop_x_16273;
        int64_t new_index_16274;
        int64_t binop_y_16284;
        int64_t new_index_16285;
        bool index_concat_cmp_16287;
        f16 index_concat_branch_16291;
        f16 defunc_0_f_res_15570;
        float f16_res_15571;
        
        index_concat_cmp_16025 = sle64(d_10788, gtid_15559);
        if (index_concat_cmp_16025) {
            index_concat_branch_16029 = (f16) 0.0F;
        } else {
            f16 index_concat_16028 = futrts_from_bits16(((__global uint16_t *) mem_16568)[gtid_15551 * ((int64_t) 64 * d_10788) + gtid_15559 * (int64_t) 64 + gtid_15561]);
            
            index_concat_branch_16029 = index_concat_16028;
        }
        binop_y_16271 = (int64_t) 64 * gtid_15560;
        binop_x_16272 = binop_x_16270 + binop_y_16271;
        binop_x_16273 = gtid_15561 + binop_x_16272;
        new_index_16274 = squot64(binop_x_16273, (int64_t) 64);
        binop_y_16284 = (int64_t) 64 * new_index_16274;
        new_index_16285 = binop_x_16273 - binop_y_16284;
        index_concat_cmp_16287 = sle64(dzlz7bUZLztZRz20Umz20Udz7dUzg_10790, new_index_16274);
        if (index_concat_cmp_16287) {
            index_concat_branch_16291 = (f16) 0.0F;
        } else {
            f16 index_concat_16290 = futrts_from_bits16(((__global uint16_t *) mem_16559)[new_index_16274 * (int64_t) 64 + new_index_16285]);
            
            index_concat_branch_16291 = index_concat_16290;
        }
        defunc_0_f_res_15570 = index_concat_branch_16029 * index_concat_branch_16291;
        f16_res_15571 = fpconv_f16_f32(defunc_0_f_res_15570);
        ((__local float *) red_arr_mem_17889)[gtid_15559 * (int64_t) 4096 + gtid_15560 * (int64_t) 64 + gtid_15561] = f16_res_15571;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    dims_flat_17891 = (int64_t) 262144;
    ltid_in_bounds_17896 = slt64(sext_i32_i64(local_tid_17866), (int64_t) 262144);
    // read input for in-block scan
    {
        if (ltid_in_bounds_17896) {
            eta_p_15564 = ((volatile __local float *) red_arr_mem_17889)[sext_i32_i64(local_tid_17866)];
            if ((local_tid_17866 - squot32(local_tid_17866, 32) * 32) == 0) {
                eta_p_15563 = eta_p_15564;
            }
        }
    }
    // in-block scan (hopefully no barriers needed)
    {
        skip_threads_17897 = 1;
        while (slt32(skip_threads_17897, 32)) {
            bool thread_active_17898 = sle32(skip_threads_17897, local_tid_17866 - squot32(local_tid_17866, 32) * 32) && ltid_in_bounds_17896;
            
            if (thread_active_17898) {
                // read operands
                {
                    eta_p_15563 = ((volatile __local float *) red_arr_mem_17889)[sext_i32_i64(local_tid_17866) - sext_i32_i64(skip_threads_17897)];
                }
            }
            // perform operation
            {
                bool inactive_17899 = slt64(srem64(sext_i32_i64(local_tid_17866), (int64_t) 64), sext_i32_i64(local_tid_17866) - sext_i32_i64(local_tid_17866 - skip_threads_17897));
                
                if (thread_active_17898 && inactive_17899) {
                    eta_p_15563 = eta_p_15564;
                }
                if (thread_active_17898) {
                    if (!inactive_17899) {
                        float defunc_0_op_res_15565 = eta_p_15563 + eta_p_15564;
                        
                        eta_p_15563 = defunc_0_op_res_15565;
                    }
                }
            }
            if (sle32(wave_sizze_17868, skip_threads_17897)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            if (thread_active_17898) {
                // write result
                {
                    ((volatile __local float *) red_arr_mem_17889)[sext_i32_i64(local_tid_17866)] = eta_p_15563;
                    eta_p_15564 = eta_p_15563;
                }
            }
            if (sle32(wave_sizze_17868, skip_threads_17897)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            skip_threads_17897 *= 2;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // last thread of block 'i' writes its result to offset 'i'
    {
        if ((local_tid_17866 - squot32(local_tid_17866, 32) * 32) == 31 && ltid_in_bounds_17896) {
            ((volatile __local float *) red_arr_mem_17889)[sext_i32_i64(squot32(local_tid_17866, 32))] = eta_p_15563;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
    {
        int32_t skip_threads_17900;
        
        // read input for in-block scan
        {
            if (squot32(local_tid_17866, 32) == 0 && ltid_in_bounds_17896) {
                eta_p_17894 = ((volatile __local float *) red_arr_mem_17889)[sext_i32_i64(local_tid_17866)];
                if ((local_tid_17866 - squot32(local_tid_17866, 32) * 32) == 0) {
                    eta_p_17893 = eta_p_17894;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_17900 = 1;
            while (slt32(skip_threads_17900, 32)) {
                bool thread_active_17901 = sle32(skip_threads_17900, local_tid_17866 - squot32(local_tid_17866, 32) * 32) && (squot32(local_tid_17866, 32) == 0 && ltid_in_bounds_17896);
                
                if (thread_active_17901) {
                    // read operands
                    {
                        eta_p_17893 = ((volatile __local float *) red_arr_mem_17889)[sext_i32_i64(local_tid_17866) - sext_i32_i64(skip_threads_17900)];
                    }
                }
                // perform operation
                {
                    bool inactive_17902 = slt64(srem64(sext_i32_i64(local_tid_17866 * 32 + 32 - 1), (int64_t) 64), sext_i32_i64(local_tid_17866 * 32 + 32 - 1) - sext_i32_i64((local_tid_17866 - skip_threads_17900) * 32 + 32 - 1));
                    
                    if (thread_active_17901 && inactive_17902) {
                        eta_p_17893 = eta_p_17894;
                    }
                    if (thread_active_17901) {
                        if (!inactive_17902) {
                            float defunc_0_op_res_17895 = eta_p_17893 + eta_p_17894;
                            
                            eta_p_17893 = defunc_0_op_res_17895;
                        }
                    }
                }
                if (sle32(wave_sizze_17868, skip_threads_17900)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (thread_active_17901) {
                    // write result
                    {
                        ((volatile __local float *) red_arr_mem_17889)[sext_i32_i64(local_tid_17866)] = eta_p_17893;
                        eta_p_17894 = eta_p_17893;
                    }
                }
                if (sle32(wave_sizze_17868, skip_threads_17900)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_17900 *= 2;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    no_carry_in_17903 = squot32(local_tid_17866, 32) == 0 || !ltid_in_bounds_17896;
    // carry-in for every block except the first
    {
        // read operands
        {
            if (!no_carry_in_17903) {
                eta_p_15564 = eta_p_15563;
                eta_p_15563 = ((__local float *) red_arr_mem_17889)[sext_i32_i64(squot32(local_tid_17866, 32)) - (int64_t) 1];
            }
        }
        // perform operation
        {
            bool inactive_17904 = slt64(srem64(sext_i32_i64(local_tid_17866), (int64_t) 64), sext_i32_i64(local_tid_17866) - sext_i32_i64(squot32(local_tid_17866, 32) * 32 - 1));
            
            if (!no_carry_in_17903) {
                if (inactive_17904) {
                    eta_p_15563 = eta_p_15564;
                }
            }
            if (!no_carry_in_17903) {
                if (!inactive_17904) {
                    float defunc_0_op_res_15565 = eta_p_15563 + eta_p_15564;
                    
                    eta_p_15563 = defunc_0_op_res_15565;
                }
            }
        }
        // write final result
        {
            if (!no_carry_in_17903) {
                ((__local float *) red_arr_mem_17889)[sext_i32_i64(local_tid_17866)] = eta_p_15563;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // restore correct values for first block
    {
        if (squot32(local_tid_17866, 32) == 0 && ltid_in_bounds_17896) {
            ((__local float *) red_arr_mem_17889)[sext_i32_i64(local_tid_17866)] = eta_p_15564;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    barrier(CLK_LOCAL_MEM_FENCE);
    // Save result of reduction.
    {
        int32_t num_chunks_17905 = 1;
        
        for (int32_t chunk_i_17906 = 0; chunk_i_17906 < num_chunks_17905; chunk_i_17906++) {
            int32_t i_17907 = chunk_i_17906 * 262144 + local_tid_17866;
            
            if (slt32(i_17907, 4096)) {
                ((__local float *) color_17288)[sext_i32_i64(squot32(i_17907, 64)) * (int64_t) 64 + sext_i32_i64(i_17907 - squot32(i_17907, 64) * 64)] = ((__local float *) red_arr_mem_17889)[(int64_t) 63 + sext_i32_i64(squot32(i_17907, 64)) * (int64_t) 4096 + sext_i32_i64(i_17907 - squot32(i_17907, 64) * 64) * (int64_t) 64];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    phys_tid_15575 = sext_i32_i64(local_tid_17866);
    gtid_15573 = sext_i32_i64(sext_i64_i32(ltid_pre_17870));
    gtid_15574 = sext_i32_i64(sext_i64_i32(ltid_pre_17871));
    if (slt64(gtid_15573, (int64_t) 64) && slt64(gtid_15574, (int64_t) 64)) {
        float defunc_0_f_res_15576;
        f16 f32_res_15577;
        
        defunc_0_f_res_15576 = ((__local float *) color_17288)[gtid_15573 * (int64_t) 64 + gtid_15574];
        f32_res_15577 = fpconv_f32_f16(defunc_0_f_res_15576);
        ((__local uint16_t *) color_17287)[gtid_15573 * (int64_t) 64 + gtid_15574] = futrts_to_bits16(f32_res_15577);
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    num_chunks_17908 = 1;
    for (int32_t chunk_i_17909 = 0; chunk_i_17909 < num_chunks_17908; chunk_i_17909++) {
        int32_t i_17910 = chunk_i_17909 * 262144 + local_tid_17866;
        
        if (slt32(i_17910, 4096)) {
            ((__global uint16_t *) mem_16576)[gtid_15551 * ((int64_t) 4096 * m_10789) + gtid_15552 * (int64_t) 4096 + sext_i32_i64(squot32(i_17910, 64)) * (int64_t) 64 + sext_i32_i64(i_17910 - squot32(i_17910, 64) * 64)] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) color_17287)[sext_i32_i64(squot32(i_17910, 64)) + sext_i32_i64(i_17910 - squot32(i_17910, 64) * 64) * (int64_t) 64]));
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
  error_4:
    return;
}
FUTHARK_KERNEL
void FlashAttention_6021zisegmap_intrablock_15648(__global int *global_failure, int64_t d_10788, int64_t m_10789, int64_t y_13481, int64_t computed_tblock_sizze_15642, int64_t bytes_16535, int64_t bytes_16539, __global unsigned char *Q_mem_16531, __global unsigned char *K_mem_16532, __global unsigned char *mem_16548)
{
    volatile __local unsigned char *red_arr_mem_17963_backing_2 = &shared_mem[0];
    const int64_t red_arr_mem_17963_backing_2_offset = 0 + ((int64_t) 4 * (d_10788 * d_10788 * d_10788) + srem64((int64_t) 8 - srem64((int64_t) 4 * (d_10788 * d_10788 * d_10788), (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_17290_backing_1 = &shared_mem[red_arr_mem_17963_backing_2_offset];
    const int64_t color_17290_backing_1_offset = red_arr_mem_17963_backing_2_offset + (bytes_16539 + srem64((int64_t) 8 - srem64(bytes_16539, (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_17289_backing_0 = &shared_mem[color_17290_backing_1_offset];
    const int64_t color_17289_backing_0_offset = color_17290_backing_1_offset + (bytes_16535 + srem64((int64_t) 8 - srem64(bytes_16535, (int64_t) 8), (int64_t) 8));
    
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_17940;
    int32_t tblock_sizze_17943;
    int32_t wave_sizze_17942;
    int32_t block_id_17941;
    int32_t global_tid_17939;
    int64_t phys_tblock_id_15648;
    int64_t slice_17946;
    int64_t slice_17947;
    int64_t ltid_pre_17944;
    int64_t remnant_17948;
    int64_t ltid_pre_17945;
    int64_t remnant_17949;
    int64_t slice_17953;
    int64_t slice_17954;
    int64_t slice_17955;
    int64_t ltid_pre_17950;
    int64_t remnant_17956;
    int64_t ltid_pre_17951;
    int64_t remnant_17957;
    int64_t ltid_pre_17952;
    int64_t remnant_17958;
    int64_t slice_17959;
    int64_t slice_17960;
    int64_t gtid_15646;
    int64_t remnant_17961;
    int64_t gtid_15647;
    int64_t remnant_17962;
    __local unsigned char *color_17289;
    __local unsigned char *color_17290;
    int64_t binop_x_16293;
    int64_t phys_tid_15657;
    __local unsigned char *red_arr_mem_17963;
    int64_t gtid_15654;
    int64_t gtid_15655;
    int64_t gtid_15656;
    int64_t dims_flat_17965;
    float eta_p_15658;
    float eta_p_15659;
    float eta_p_17967;
    float eta_p_17968;
    bool ltid_in_bounds_17970;
    int32_t skip_threads_17971;
    bool no_carry_in_17977;
    int64_t phys_tid_15670;
    int64_t gtid_15668;
    int64_t gtid_15669;
    int32_t num_chunks_17982;
    
    local_tid_17940 = get_local_id(0);
    tblock_sizze_17943 = get_local_size(0);
    wave_sizze_17942 = LOCKSTEP_WIDTH;
    block_id_17941 = get_tblock_id(0);
    global_tid_17939 = block_id_17941 * tblock_sizze_17943 + local_tid_17940;
    phys_tblock_id_15648 = sext_i32_i64(block_id_17941);
    slice_17946 = d_10788;
    slice_17947 = d_10788 * slice_17946;
    ltid_pre_17944 = squot64(sext_i32_i64(local_tid_17940), slice_17946);
    remnant_17948 = sext_i32_i64(local_tid_17940) - ltid_pre_17944 * slice_17946;
    ltid_pre_17945 = remnant_17948;
    remnant_17949 = remnant_17948 - ltid_pre_17945;
    slice_17953 = d_10788;
    slice_17954 = d_10788 * slice_17953;
    slice_17955 = d_10788 * slice_17954;
    ltid_pre_17950 = squot64(sext_i32_i64(local_tid_17940), slice_17954);
    remnant_17956 = sext_i32_i64(local_tid_17940) - ltid_pre_17950 * slice_17954;
    ltid_pre_17951 = squot64(remnant_17956, slice_17953);
    remnant_17957 = remnant_17956 - ltid_pre_17951 * slice_17953;
    ltid_pre_17952 = remnant_17957;
    remnant_17958 = remnant_17957 - ltid_pre_17952;
    slice_17959 = m_10789;
    slice_17960 = m_10789 * slice_17959;
    gtid_15646 = squot64(sext_i32_i64(block_id_17941), slice_17959);
    remnant_17961 = sext_i32_i64(block_id_17941) - gtid_15646 * slice_17959;
    gtid_15647 = remnant_17961;
    remnant_17962 = remnant_17961 - gtid_15647;
    color_17289 = (__local unsigned char *) color_17289_backing_0;
    color_17290 = (__local unsigned char *) color_17290_backing_1;
    binop_x_16293 = y_13481 * gtid_15647;
    phys_tid_15657 = sext_i32_i64(local_tid_17940);
    red_arr_mem_17963 = (__local unsigned char *) red_arr_mem_17963_backing_2;
    gtid_15654 = sext_i32_i64(sext_i64_i32(ltid_pre_17950));
    gtid_15655 = sext_i32_i64(sext_i64_i32(ltid_pre_17951));
    gtid_15656 = sext_i32_i64(sext_i64_i32(ltid_pre_17952));
    if ((slt64(gtid_15654, d_10788) && slt64(gtid_15655, d_10788)) && slt64(gtid_15656, d_10788)) {
        f16 eta_p_15663;
        int64_t binop_y_16294;
        int64_t binop_x_16295;
        int64_t binop_x_16296;
        int64_t new_index_16297;
        int64_t binop_y_16309;
        int64_t new_index_16310;
        f16 eta_p_15664;
        f16 defunc_0_f_res_15665;
        float f16_res_15666;
        
        eta_p_15663 = futrts_from_bits16(((__global uint16_t *) Q_mem_16531)[gtid_15646 * (d_10788 * d_10788) + gtid_15654 * d_10788 + gtid_15656]);
        binop_y_16294 = d_10788 * gtid_15655;
        binop_x_16295 = binop_x_16293 + binop_y_16294;
        binop_x_16296 = gtid_15656 + binop_x_16295;
        new_index_16297 = squot64(binop_x_16296, d_10788);
        binop_y_16309 = d_10788 * new_index_16297;
        new_index_16310 = binop_x_16296 - binop_y_16309;
        eta_p_15664 = futrts_from_bits16(((__global uint16_t *) K_mem_16532)[new_index_16297 * d_10788 + new_index_16310]);
        defunc_0_f_res_15665 = eta_p_15663 * eta_p_15664;
        f16_res_15666 = fpconv_f16_f32(defunc_0_f_res_15665);
        ((__local float *) red_arr_mem_17963)[gtid_15654 * (d_10788 * d_10788) + gtid_15655 * d_10788 + gtid_15656] = f16_res_15666;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    dims_flat_17965 = d_10788 * d_10788 * d_10788;
    ltid_in_bounds_17970 = slt64(sext_i32_i64(local_tid_17940), d_10788 * d_10788 * d_10788);
    // read input for in-block scan
    {
        if (ltid_in_bounds_17970) {
            eta_p_15659 = ((volatile __local float *) red_arr_mem_17963)[sext_i32_i64(local_tid_17940)];
            if ((local_tid_17940 - squot32(local_tid_17940, 32) * 32) == 0) {
                eta_p_15658 = eta_p_15659;
            }
        }
    }
    // in-block scan (hopefully no barriers needed)
    {
        skip_threads_17971 = 1;
        while (slt32(skip_threads_17971, 32)) {
            bool thread_active_17972 = sle32(skip_threads_17971, local_tid_17940 - squot32(local_tid_17940, 32) * 32) && ltid_in_bounds_17970;
            
            if (thread_active_17972) {
                // read operands
                {
                    eta_p_15658 = ((volatile __local float *) red_arr_mem_17963)[sext_i32_i64(local_tid_17940) - sext_i32_i64(skip_threads_17971)];
                }
            }
            // perform operation
            {
                bool inactive_17973 = slt64(srem64(sext_i32_i64(local_tid_17940), d_10788), sext_i32_i64(local_tid_17940) - sext_i32_i64(local_tid_17940 - skip_threads_17971));
                
                if (thread_active_17972 && inactive_17973) {
                    eta_p_15658 = eta_p_15659;
                }
                if (thread_active_17972) {
                    if (!inactive_17973) {
                        float defunc_0_op_res_15660 = eta_p_15658 + eta_p_15659;
                        
                        eta_p_15658 = defunc_0_op_res_15660;
                    }
                }
            }
            if (sle32(wave_sizze_17942, skip_threads_17971)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            if (thread_active_17972) {
                // write result
                {
                    ((volatile __local float *) red_arr_mem_17963)[sext_i32_i64(local_tid_17940)] = eta_p_15658;
                    eta_p_15659 = eta_p_15658;
                }
            }
            if (sle32(wave_sizze_17942, skip_threads_17971)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            skip_threads_17971 *= 2;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // last thread of block 'i' writes its result to offset 'i'
    {
        if ((local_tid_17940 - squot32(local_tid_17940, 32) * 32) == 31 && ltid_in_bounds_17970) {
            ((volatile __local float *) red_arr_mem_17963)[sext_i32_i64(squot32(local_tid_17940, 32))] = eta_p_15658;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
    {
        int32_t skip_threads_17974;
        
        // read input for in-block scan
        {
            if (squot32(local_tid_17940, 32) == 0 && ltid_in_bounds_17970) {
                eta_p_17968 = ((volatile __local float *) red_arr_mem_17963)[sext_i32_i64(local_tid_17940)];
                if ((local_tid_17940 - squot32(local_tid_17940, 32) * 32) == 0) {
                    eta_p_17967 = eta_p_17968;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_17974 = 1;
            while (slt32(skip_threads_17974, 32)) {
                bool thread_active_17975 = sle32(skip_threads_17974, local_tid_17940 - squot32(local_tid_17940, 32) * 32) && (squot32(local_tid_17940, 32) == 0 && ltid_in_bounds_17970);
                
                if (thread_active_17975) {
                    // read operands
                    {
                        eta_p_17967 = ((volatile __local float *) red_arr_mem_17963)[sext_i32_i64(local_tid_17940) - sext_i32_i64(skip_threads_17974)];
                    }
                }
                // perform operation
                {
                    bool inactive_17976 = slt64(srem64(sext_i32_i64(local_tid_17940 * 32 + 32 - 1), d_10788), sext_i32_i64(local_tid_17940 * 32 + 32 - 1) - sext_i32_i64((local_tid_17940 - skip_threads_17974) * 32 + 32 - 1));
                    
                    if (thread_active_17975 && inactive_17976) {
                        eta_p_17967 = eta_p_17968;
                    }
                    if (thread_active_17975) {
                        if (!inactive_17976) {
                            float defunc_0_op_res_17969 = eta_p_17967 + eta_p_17968;
                            
                            eta_p_17967 = defunc_0_op_res_17969;
                        }
                    }
                }
                if (sle32(wave_sizze_17942, skip_threads_17974)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (thread_active_17975) {
                    // write result
                    {
                        ((volatile __local float *) red_arr_mem_17963)[sext_i32_i64(local_tid_17940)] = eta_p_17967;
                        eta_p_17968 = eta_p_17967;
                    }
                }
                if (sle32(wave_sizze_17942, skip_threads_17974)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_17974 *= 2;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    no_carry_in_17977 = squot32(local_tid_17940, 32) == 0 || !ltid_in_bounds_17970;
    // carry-in for every block except the first
    {
        // read operands
        {
            if (!no_carry_in_17977) {
                eta_p_15659 = eta_p_15658;
                eta_p_15658 = ((__local float *) red_arr_mem_17963)[sext_i32_i64(squot32(local_tid_17940, 32)) - (int64_t) 1];
            }
        }
        // perform operation
        {
            bool inactive_17978 = slt64(srem64(sext_i32_i64(local_tid_17940), d_10788), sext_i32_i64(local_tid_17940) - sext_i32_i64(squot32(local_tid_17940, 32) * 32 - 1));
            
            if (!no_carry_in_17977) {
                if (inactive_17978) {
                    eta_p_15658 = eta_p_15659;
                }
            }
            if (!no_carry_in_17977) {
                if (!inactive_17978) {
                    float defunc_0_op_res_15660 = eta_p_15658 + eta_p_15659;
                    
                    eta_p_15658 = defunc_0_op_res_15660;
                }
            }
        }
        // write final result
        {
            if (!no_carry_in_17977) {
                ((__local float *) red_arr_mem_17963)[sext_i32_i64(local_tid_17940)] = eta_p_15658;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // restore correct values for first block
    {
        if (squot32(local_tid_17940, 32) == 0 && ltid_in_bounds_17970) {
            ((__local float *) red_arr_mem_17963)[sext_i32_i64(local_tid_17940)] = eta_p_15659;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    barrier(CLK_LOCAL_MEM_FENCE);
    // Save result of reduction.
    {
        int32_t num_chunks_17979 = sdiv_up32(sext_i64_i32(d_10788) * sext_i64_i32(d_10788), sext_i64_i32(computed_tblock_sizze_15642));
        
        for (int32_t chunk_i_17980 = 0; chunk_i_17980 < num_chunks_17979; chunk_i_17980++) {
            int32_t i_17981 = chunk_i_17980 * sext_i64_i32(computed_tblock_sizze_15642) + local_tid_17940;
            
            if (slt32(i_17981, sext_i64_i32(d_10788) * sext_i64_i32(d_10788))) {
                ((__local float *) color_17290)[sext_i32_i64(squot32(i_17981, sext_i64_i32(d_10788))) * d_10788 + sext_i32_i64(i_17981 - squot32(i_17981, sext_i64_i32(d_10788)) * sext_i64_i32(d_10788))] = ((__local float *) red_arr_mem_17963)[d_10788 - (int64_t) 1 + sext_i32_i64(squot32(i_17981, sext_i64_i32(d_10788))) * (d_10788 * d_10788) + sext_i32_i64(i_17981 - squot32(i_17981, sext_i64_i32(d_10788)) * sext_i64_i32(d_10788)) * d_10788];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    phys_tid_15670 = sext_i32_i64(local_tid_17940);
    gtid_15668 = sext_i32_i64(sext_i64_i32(ltid_pre_17944));
    gtid_15669 = sext_i32_i64(sext_i64_i32(ltid_pre_17945));
    if (slt64(gtid_15668, d_10788) && slt64(gtid_15669, d_10788)) {
        float defunc_0_f_res_15671;
        f16 f32_res_15672;
        
        defunc_0_f_res_15671 = ((__local float *) color_17290)[gtid_15668 * d_10788 + gtid_15669];
        f32_res_15672 = fpconv_f32_f16(defunc_0_f_res_15671);
        ((__local uint16_t *) color_17289)[gtid_15668 * d_10788 + gtid_15669] = futrts_to_bits16(f32_res_15672);
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    num_chunks_17982 = sdiv_up32(sext_i64_i32(d_10788) * sext_i64_i32(d_10788), sext_i64_i32(computed_tblock_sizze_15642));
    for (int32_t chunk_i_17983 = 0; chunk_i_17983 < num_chunks_17982; chunk_i_17983++) {
        int32_t i_17984 = chunk_i_17983 * sext_i64_i32(computed_tblock_sizze_15642) + local_tid_17940;
        
        if (slt32(i_17984, sext_i64_i32(d_10788) * sext_i64_i32(d_10788))) {
            ((__global uint16_t *) mem_16548)[gtid_15646 * (d_10788 * d_10788 * m_10789) + gtid_15647 * (d_10788 * d_10788) + sext_i32_i64(squot32(i_17984, sext_i64_i32(d_10788))) * d_10788 + sext_i32_i64(i_17984 - squot32(i_17984, sext_i64_i32(d_10788)) * sext_i64_i32(d_10788))] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) color_17289)[sext_i32_i64(squot32(i_17984, sext_i64_i32(d_10788))) + sext_i32_i64(i_17984 - squot32(i_17984, sext_i64_i32(d_10788)) * sext_i64_i32(d_10788)) * d_10788]));
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
  error_4:
    return;
}
FUTHARK_KERNEL_SIZED(FlashAttention_6021zisegmap_intrablock_15693_dim1, 1, 1)
void FlashAttention_6021zisegmap_intrablock_15693(__global int *global_failure, int64_t d_10788, int64_t m_10789, int64_t q_11975, unsigned char opaque_res_11979_bits, int64_t ext_16619, int64_t ext_16620, __global unsigned char *ext_mem_16621, __global unsigned char *mem_16626, __global unsigned char *mem_16629)
{
    bool opaque_res_11979 = opaque_res_11979_bits;
    volatile __local unsigned char *red_arr_mem_18013_backing_2 = &shared_mem[0];
    const int64_t red_arr_mem_18013_backing_2_offset = 0 + (int64_t) 64;
    volatile __local unsigned char *red_arr_mem_18008_backing_1 = &shared_mem[red_arr_mem_18013_backing_2_offset];
    const int64_t red_arr_mem_18008_backing_1_offset = red_arr_mem_18013_backing_2_offset + (int64_t) 64;
    volatile __local unsigned char *color_17291_backing_0 = &shared_mem[red_arr_mem_18008_backing_1_offset];
    const int64_t color_17291_backing_0_offset = red_arr_mem_18008_backing_1_offset + (int64_t) 2048;
    
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_17989;
    int32_t tblock_sizze_17992;
    int32_t wave_sizze_17991;
    int32_t block_id_17990;
    int32_t global_tid_17988;
    int64_t phys_tblock_id_15693;
    int64_t slice_17994;
    int64_t ltid_pre_17993;
    int64_t remnant_17995;
    int64_t slice_17997;
    int64_t ltid_pre_17996;
    int64_t remnant_17998;
    int64_t slice_17999;
    int64_t slice_18000;
    int64_t gtid_15691;
    int64_t remnant_18001;
    int64_t gtid_15692;
    int64_t remnant_18002;
    __local unsigned char *color_17291;
    f16 softmaxChunkML_res_15696;
    f16 softmaxChunkML_res_15697;
    f16 mi_old_15699;
    f16 li_old_15700;
    
    local_tid_17989 = get_local_id(0);
    tblock_sizze_17992 = get_local_size(0);
    wave_sizze_17991 = LOCKSTEP_WIDTH;
    block_id_17990 = get_tblock_id(0);
    global_tid_17988 = block_id_17990 * tblock_sizze_17992 + local_tid_17989;
    phys_tblock_id_15693 = sext_i32_i64(block_id_17990);
    slice_17994 = (int64_t) 32;
    ltid_pre_17993 = sext_i32_i64(local_tid_17989);
    remnant_17995 = sext_i32_i64(local_tid_17989) - ltid_pre_17993;
    slice_17997 = (int64_t) 1024;
    ltid_pre_17996 = sext_i32_i64(local_tid_17989);
    remnant_17998 = sext_i32_i64(local_tid_17989) - ltid_pre_17996;
    slice_17999 = d_10788;
    slice_18000 = m_10789 * slice_17999;
    gtid_15691 = squot64(sext_i32_i64(block_id_17990), slice_17999);
    remnant_18001 = sext_i32_i64(block_id_17990) - gtid_15691 * slice_17999;
    gtid_15692 = remnant_18001;
    remnant_18002 = remnant_18001 - gtid_15692;
    color_17291 = (__local unsigned char *) color_17291_backing_0;
    barrier(CLK_LOCAL_MEM_FENCE);
    mi_old_15699 = (f16) -INFINITY;
    li_old_15700 = (f16) 0.0F;
    for (int64_t i_15698 = 0; i_15698 < q_11975; i_15698++) {
        int64_t copy2shr_arg0_15701;
        int32_t num_chunks_18005;
        f16 defunc_0_reduce_comm_res_15706;
        int64_t phys_tid_15708;
        __local unsigned char *red_arr_mem_18008;
        int64_t gtid_15707;
        f16 defunc_0_f_res_15713;
        f16 r_15715;
        int32_t offset_18011;
        int32_t skip_waves_18012;
        f16 eta_p_15709;
        f16 eta_p_15710;
        f16 defunc_0_reduce_comm_res_15720;
        int64_t phys_tid_15722;
        __local unsigned char *red_arr_mem_18013;
        int64_t gtid_15721;
        f16 defunc_0_f_res_15727;
        f16 r_15729;
        int32_t offset_18016;
        int32_t skip_waves_18017;
        f16 eta_p_15723;
        f16 eta_p_15724;
        f16 max_res_15736;
        f16 real_exp_arg0_15737;
        f16 exp_res_15738;
        f16 exp_arg0_15739;
        f16 exp_res_15740;
        f16 eli_15741;
        f16 zp_rhs_15742;
        f16 li_new_15743;
        f16 mi_old_tmp_18003;
        f16 li_old_tmp_18004;
        
        copy2shr_arg0_15701 = mul64((int64_t) 1024, i_15698);
        num_chunks_18005 = 32;
        for (int32_t chunk_i_18006 = 0; chunk_i_18006 < num_chunks_18005; chunk_i_18006++) {
            int32_t i_18007 = chunk_i_18006 * 32 + local_tid_17989;
            
            if (slt32(i_18007, 1024)) {
                ((__local uint16_t *) color_17291)[sext_i32_i64(i_18007)] = futrts_to_bits16(futrts_from_bits16(((__global uint16_t *) ext_mem_16621)[gtid_15691 * ext_16620 + gtid_15692 * ext_16619 + copy2shr_arg0_15701 + sext_i32_i64(i_18007)]));
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_LOCAL_MEM_FENCE);
        if (!opaque_res_11979) {
            barrier(CLK_LOCAL_MEM_FENCE);
            if (local_tid_17989 == 0) {
                ((__local uint16_t *) color_17291)[(int64_t) 0] = futrts_to_bits16((f16) 0.0F);
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }
        phys_tid_15708 = sext_i32_i64(local_tid_17989);
        red_arr_mem_18008 = (__local unsigned char *) red_arr_mem_18008_backing_1;
        gtid_15707 = sext_i32_i64(sext_i64_i32(ltid_pre_17993));
        r_15715 = (f16) -INFINITY;
        for (int64_t i_15714 = 0; i_15714 < (int64_t) 32; i_15714++) {
            int64_t zp_lhs_15716;
            int64_t f_arg0_15717;
            f16 f_arg0_15718;
            f16 max_res_15719;
            f16 r_tmp_18010;
            
            zp_lhs_15716 = mul64((int64_t) 32, i_15714);
            f_arg0_15717 = add64(gtid_15707, zp_lhs_15716);
            f_arg0_15718 = futrts_from_bits16(((__local uint16_t *) color_17291)[f_arg0_15717]);
            max_res_15719 = fmax16(r_15715, f_arg0_15718);
            r_tmp_18010 = max_res_15719;
            r_15715 = r_tmp_18010;
        }
        defunc_0_f_res_15713 = r_15715;
        ((__local uint16_t *) red_arr_mem_18008)[gtid_15707] = futrts_to_bits16(defunc_0_f_res_15713);
        barrier(CLK_LOCAL_MEM_FENCE);
        skip_waves_18012 = 1;
        offset_18011 = 0;
        // participating threads read initial accumulator
        {
            if (slt32(local_tid_17989, 32)) {
                eta_p_15709 = futrts_from_bits16(((__local uint16_t *) red_arr_mem_18008)[sext_i32_i64(local_tid_17989 + offset_18011)]);
            }
        }
        offset_18011 = 1;
        while (slt32(offset_18011, wave_sizze_17991)) {
            if (slt32(local_tid_17989 + offset_18011, 32) && ((local_tid_17989 - squot32(local_tid_17989, wave_sizze_17991) * wave_sizze_17991) & (2 * offset_18011 - 1)) == 0) {
                // read array element
                {
                    eta_p_15710 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18008)[sext_i32_i64(local_tid_17989 + offset_18011)]);
                }
                // apply reduction operation
                {
                    f16 max_res_15711 = fmax16(eta_p_15709, eta_p_15710);
                    
                    eta_p_15709 = max_res_15711;
                }
                // write result of operation
                {
                    ((volatile __local uint16_t *) red_arr_mem_18008)[sext_i32_i64(local_tid_17989)] = futrts_to_bits16(eta_p_15709);
                }
            }
            offset_18011 *= 2;
        }
        while (slt32(skip_waves_18012, squot32(32 + wave_sizze_17991 - 1, wave_sizze_17991))) {
            barrier(CLK_LOCAL_MEM_FENCE);
            offset_18011 = skip_waves_18012 * wave_sizze_17991;
            if (slt32(local_tid_17989 + offset_18011, 32) && ((local_tid_17989 - squot32(local_tid_17989, wave_sizze_17991) * wave_sizze_17991) == 0 && (squot32(local_tid_17989, wave_sizze_17991) & (2 * skip_waves_18012 - 1)) == 0)) {
                // read array element
                {
                    eta_p_15710 = futrts_from_bits16(((__local uint16_t *) red_arr_mem_18008)[sext_i32_i64(local_tid_17989 + offset_18011)]);
                }
                // apply reduction operation
                {
                    f16 max_res_15711 = fmax16(eta_p_15709, eta_p_15710);
                    
                    eta_p_15709 = max_res_15711;
                }
                // write result of operation
                {
                    ((__local uint16_t *) red_arr_mem_18008)[sext_i32_i64(local_tid_17989)] = futrts_to_bits16(eta_p_15709);
                }
            }
            skip_waves_18012 *= 2;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_LOCAL_MEM_FENCE);
        // Save result of reduction.
        {
            defunc_0_reduce_comm_res_15706 = futrts_from_bits16(((__local uint16_t *) red_arr_mem_18008)[(int64_t) 0]);
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        phys_tid_15722 = sext_i32_i64(local_tid_17989);
        red_arr_mem_18013 = (__local unsigned char *) red_arr_mem_18013_backing_2;
        gtid_15721 = sext_i32_i64(sext_i64_i32(ltid_pre_17993));
        r_15729 = (f16) 0.0F;
        for (int64_t i_15728 = 0; i_15728 < (int64_t) 32; i_15728++) {
            int64_t zp_lhs_15730;
            int64_t f_arg0_15731;
            f16 f_arg0_15732;
            f16 real_exp_arg0_15733;
            f16 exp_res_15734;
            f16 defunc_0_bop_res_15735;
            f16 r_tmp_18015;
            
            zp_lhs_15730 = mul64((int64_t) 32, i_15728);
            f_arg0_15731 = add64(gtid_15721, zp_lhs_15730);
            f_arg0_15732 = futrts_from_bits16(((__local uint16_t *) color_17291)[f_arg0_15731]);
            real_exp_arg0_15733 = f_arg0_15732 - defunc_0_reduce_comm_res_15706;
            exp_res_15734 = futrts_exp16(real_exp_arg0_15733);
            defunc_0_bop_res_15735 = r_15729 + exp_res_15734;
            r_tmp_18015 = defunc_0_bop_res_15735;
            r_15729 = r_tmp_18015;
        }
        defunc_0_f_res_15727 = r_15729;
        ((__local uint16_t *) red_arr_mem_18013)[gtid_15721] = futrts_to_bits16(defunc_0_f_res_15727);
        barrier(CLK_LOCAL_MEM_FENCE);
        skip_waves_18017 = 1;
        offset_18016 = 0;
        // participating threads read initial accumulator
        {
            if (slt32(local_tid_17989, 32)) {
                eta_p_15723 = futrts_from_bits16(((__local uint16_t *) red_arr_mem_18013)[sext_i32_i64(local_tid_17989 + offset_18016)]);
            }
        }
        offset_18016 = 1;
        while (slt32(offset_18016, wave_sizze_17991)) {
            if (slt32(local_tid_17989 + offset_18016, 32) && ((local_tid_17989 - squot32(local_tid_17989, wave_sizze_17991) * wave_sizze_17991) & (2 * offset_18016 - 1)) == 0) {
                // read array element
                {
                    eta_p_15724 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18013)[sext_i32_i64(local_tid_17989 + offset_18016)]);
                }
                // apply reduction operation
                {
                    f16 defunc_0_op_res_15725 = eta_p_15723 + eta_p_15724;
                    
                    eta_p_15723 = defunc_0_op_res_15725;
                }
                // write result of operation
                {
                    ((volatile __local uint16_t *) red_arr_mem_18013)[sext_i32_i64(local_tid_17989)] = futrts_to_bits16(eta_p_15723);
                }
            }
            offset_18016 *= 2;
        }
        while (slt32(skip_waves_18017, squot32(32 + wave_sizze_17991 - 1, wave_sizze_17991))) {
            barrier(CLK_LOCAL_MEM_FENCE);
            offset_18016 = skip_waves_18017 * wave_sizze_17991;
            if (slt32(local_tid_17989 + offset_18016, 32) && ((local_tid_17989 - squot32(local_tid_17989, wave_sizze_17991) * wave_sizze_17991) == 0 && (squot32(local_tid_17989, wave_sizze_17991) & (2 * skip_waves_18017 - 1)) == 0)) {
                // read array element
                {
                    eta_p_15724 = futrts_from_bits16(((__local uint16_t *) red_arr_mem_18013)[sext_i32_i64(local_tid_17989 + offset_18016)]);
                }
                // apply reduction operation
                {
                    f16 defunc_0_op_res_15725 = eta_p_15723 + eta_p_15724;
                    
                    eta_p_15723 = defunc_0_op_res_15725;
                }
                // write result of operation
                {
                    ((__local uint16_t *) red_arr_mem_18013)[sext_i32_i64(local_tid_17989)] = futrts_to_bits16(eta_p_15723);
                }
            }
            skip_waves_18017 *= 2;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_LOCAL_MEM_FENCE);
        // Save result of reduction.
        {
            defunc_0_reduce_comm_res_15720 = futrts_from_bits16(((__local uint16_t *) red_arr_mem_18013)[(int64_t) 0]);
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        max_res_15736 = fmax16(mi_old_15699, defunc_0_reduce_comm_res_15706);
        real_exp_arg0_15737 = defunc_0_reduce_comm_res_15706 - max_res_15736;
        exp_res_15738 = futrts_exp16(real_exp_arg0_15737);
        exp_arg0_15739 = mi_old_15699 - max_res_15736;
        exp_res_15740 = futrts_exp16(exp_arg0_15739);
        eli_15741 = li_old_15700 * exp_res_15740;
        zp_rhs_15742 = defunc_0_reduce_comm_res_15720 * exp_res_15738;
        li_new_15743 = eli_15741 + zp_rhs_15742;
        mi_old_tmp_18003 = max_res_15736;
        li_old_tmp_18004 = li_new_15743;
        mi_old_15699 = mi_old_tmp_18003;
        li_old_15700 = li_old_tmp_18004;
    }
    softmaxChunkML_res_15696 = mi_old_15699;
    softmaxChunkML_res_15697 = li_old_15700;
    if (local_tid_17989 == 0) {
        ((__global uint16_t *) mem_16626)[gtid_15691 * d_10788 + gtid_15692] = futrts_to_bits16(softmaxChunkML_res_15696);
    }
    if (local_tid_17989 == 0) {
        ((__global uint16_t *) mem_16629)[gtid_15691 * d_10788 + gtid_15692] = futrts_to_bits16(softmaxChunkML_res_15697);
    }
    
  error_10:
    return;
}
FUTHARK_KERNEL
void FlashAttention_6021zisegmap_intrablock_15803(__global int *global_failure, int failure_is_an_option, __global int64_t *global_failure_args, int64_t d_10788, int64_t m_10789, int64_t dzlz7bUZLztZRz20Umz20Udz7dUzg_10790, int64_t m_12246, int64_t y_13481, int64_t computed_tblock_sizze_15791, int64_t bytes_16535, __global unsigned char *V_mem_16533, __global unsigned char *mem_16634, __global unsigned char *mem_16656)
{
    volatile __local unsigned char *red_arr_mem_18058_backing_2 = &shared_mem[0];
    const int64_t red_arr_mem_18058_backing_2_offset = 0 + ((int64_t) 2 * (d_10788 * d_10788 * d_10788) + srem64((int64_t) 8 - srem64((int64_t) 2 * (d_10788 * d_10788 * d_10788), (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_17293_backing_1 = &shared_mem[red_arr_mem_18058_backing_2_offset];
    const int64_t color_17293_backing_1_offset = red_arr_mem_18058_backing_2_offset + (bytes_16535 + srem64((int64_t) 8 - srem64(bytes_16535, (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_17292_backing_0 = &shared_mem[color_17293_backing_1_offset];
    const int64_t color_17292_backing_0_offset = color_17293_backing_1_offset + (bytes_16535 + srem64((int64_t) 8 - srem64(bytes_16535, (int64_t) 8), (int64_t) 8));
    volatile __local int local_failure;
    
    if (failure_is_an_option) {
        int failed = *global_failure >= 0;
        
        if (failed)
            return;
    }
    local_failure = 0;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t local_tid_18035;
    int32_t tblock_sizze_18038;
    int32_t wave_sizze_18037;
    int32_t block_id_18036;
    int32_t global_tid_18034;
    int64_t phys_tblock_id_15803;
    int64_t slice_18041;
    int64_t slice_18042;
    int64_t ltid_pre_18039;
    int64_t remnant_18043;
    int64_t ltid_pre_18040;
    int64_t remnant_18044;
    int64_t slice_18048;
    int64_t slice_18049;
    int64_t slice_18050;
    int64_t ltid_pre_18045;
    int64_t remnant_18051;
    int64_t ltid_pre_18046;
    int64_t remnant_18052;
    int64_t ltid_pre_18047;
    int64_t remnant_18053;
    int64_t slice_18054;
    int64_t slice_18055;
    int64_t gtid_15801;
    int64_t remnant_18056;
    int64_t gtid_15802;
    int64_t remnant_18057;
    __local unsigned char *color_17292;
    __local unsigned char *color_17293;
    int64_t zp_rhs_15809;
    int64_t phys_tid_15821;
    int64_t gtid_15819;
    int64_t gtid_15820;
    int64_t binop_x_16067;
    int64_t phys_tid_15835;
    __local unsigned char *red_arr_mem_18058;
    int64_t gtid_15832;
    int64_t gtid_15833;
    int64_t gtid_15834;
    int64_t dims_flat_18060;
    f16 eta_p_15836;
    f16 eta_p_15837;
    f16 eta_p_18062;
    f16 eta_p_18063;
    bool ltid_in_bounds_18065;
    int32_t skip_threads_18066;
    bool no_carry_in_18072;
    int32_t num_chunks_18077;
    
    local_tid_18035 = get_local_id(0);
    tblock_sizze_18038 = get_local_size(0);
    wave_sizze_18037 = LOCKSTEP_WIDTH;
    block_id_18036 = get_tblock_id(0);
    global_tid_18034 = block_id_18036 * tblock_sizze_18038 + local_tid_18035;
    phys_tblock_id_15803 = sext_i32_i64(block_id_18036);
    slice_18041 = d_10788;
    slice_18042 = d_10788 * slice_18041;
    ltid_pre_18039 = squot64(sext_i32_i64(local_tid_18035), slice_18041);
    remnant_18043 = sext_i32_i64(local_tid_18035) - ltid_pre_18039 * slice_18041;
    ltid_pre_18040 = remnant_18043;
    remnant_18044 = remnant_18043 - ltid_pre_18040;
    slice_18048 = d_10788;
    slice_18049 = d_10788 * slice_18048;
    slice_18050 = d_10788 * slice_18049;
    ltid_pre_18045 = squot64(sext_i32_i64(local_tid_18035), slice_18049);
    remnant_18051 = sext_i32_i64(local_tid_18035) - ltid_pre_18045 * slice_18049;
    ltid_pre_18046 = squot64(remnant_18051, slice_18048);
    remnant_18052 = remnant_18051 - ltid_pre_18046 * slice_18048;
    ltid_pre_18047 = remnant_18052;
    remnant_18053 = remnant_18052 - ltid_pre_18047;
    slice_18054 = m_12246;
    slice_18055 = m_10789 * slice_18054;
    gtid_15801 = squot64(sext_i32_i64(block_id_18036), slice_18054);
    remnant_18056 = sext_i32_i64(block_id_18036) - gtid_15801 * slice_18054;
    gtid_15802 = remnant_18056;
    remnant_18057 = remnant_18056 - gtid_15802;
    color_17292 = (__local unsigned char *) color_17292_backing_0;
    color_17293 = (__local unsigned char *) color_17293_backing_1;
    zp_rhs_15809 = mul64(d_10788, gtid_15802);
    phys_tid_15821 = sext_i32_i64(local_tid_18035);
    gtid_15819 = sext_i32_i64(sext_i64_i32(ltid_pre_18039));
    gtid_15820 = sext_i32_i64(sext_i64_i32(ltid_pre_18040));
    if (slt64(gtid_15819, d_10788) && slt64(gtid_15820, d_10788)) {
        int64_t tmp_15825;
        bool x_15826;
        bool y_15827;
        bool bounds_check_15828;
        bool index_certs_15829;
        f16 lifted_lambda_res_15830;
        
        tmp_15825 = add64(zp_rhs_15809, gtid_15820);
        x_15826 = sle64((int64_t) 0, tmp_15825);
        y_15827 = slt64(tmp_15825, dzlz7bUZLztZRz20Umz20Udz7dUzg_10790);
        bounds_check_15828 = x_15826 && y_15827;
        if (!bounds_check_15828) {
            {
                if (atomic_cmpxchg_i32_global(global_failure, -1, 7) == -1) {
                    global_failure_args[0] = (int64_t) tmp_15825;
                    global_failure_args[1] = (int64_t) dzlz7bUZLztZRz20Umz20Udz7dUzg_10790;
                    ;
                }
                local_failure = 1;
                goto error_0;
            }
        }
        lifted_lambda_res_15830 = futrts_from_bits16(((__global uint16_t *) mem_16634)[gtid_15801 * (dzlz7bUZLztZRz20Umz20Udz7dUzg_10790 * d_10788) + gtid_15819 * dzlz7bUZLztZRz20Umz20Udz7dUzg_10790 + tmp_15825]);
        ((__local uint16_t *) color_17293)[gtid_15819 * d_10788 + gtid_15820] = futrts_to_bits16(lifted_lambda_res_15830);
    }
    
  error_0:
    barrier(CLK_LOCAL_MEM_FENCE);
    if (local_failure)
        return;
    barrier(CLK_LOCAL_MEM_FENCE);
    binop_x_16067 = y_13481 * gtid_15802;
    phys_tid_15835 = sext_i32_i64(local_tid_18035);
    red_arr_mem_18058 = (__local unsigned char *) red_arr_mem_18058_backing_2;
    gtid_15832 = sext_i32_i64(sext_i64_i32(ltid_pre_18045));
    gtid_15833 = sext_i32_i64(sext_i64_i32(ltid_pre_18046));
    gtid_15834 = sext_i32_i64(sext_i64_i32(ltid_pre_18047));
    if ((slt64(gtid_15832, d_10788) && slt64(gtid_15833, d_10788)) && slt64(gtid_15834, d_10788)) {
        f16 eta_p_15841;
        int64_t binop_y_16068;
        int64_t binop_x_16069;
        int64_t binop_x_16070;
        int64_t new_index_16071;
        int64_t binop_y_16083;
        int64_t new_index_16084;
        f16 eta_p_15842;
        f16 defunc_0_f_res_15843;
        
        eta_p_15841 = futrts_from_bits16(((__local uint16_t *) color_17293)[gtid_15832 * d_10788 + gtid_15834]);
        binop_y_16068 = d_10788 * gtid_15834;
        binop_x_16069 = binop_x_16067 + binop_y_16068;
        binop_x_16070 = gtid_15833 + binop_x_16069;
        new_index_16071 = squot64(binop_x_16070, d_10788);
        binop_y_16083 = d_10788 * new_index_16071;
        new_index_16084 = binop_x_16070 - binop_y_16083;
        eta_p_15842 = futrts_from_bits16(((__global uint16_t *) V_mem_16533)[new_index_16071 * d_10788 + new_index_16084]);
        defunc_0_f_res_15843 = eta_p_15841 * eta_p_15842;
        ((__local uint16_t *) red_arr_mem_18058)[gtid_15832 * (d_10788 * d_10788) + gtid_15833 * d_10788 + gtid_15834] = futrts_to_bits16(defunc_0_f_res_15843);
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    dims_flat_18060 = d_10788 * d_10788 * d_10788;
    ltid_in_bounds_18065 = slt64(sext_i32_i64(local_tid_18035), d_10788 * d_10788 * d_10788);
    // read input for in-block scan
    {
        if (ltid_in_bounds_18065) {
            eta_p_15837 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18058)[sext_i32_i64(local_tid_18035)]);
            if ((local_tid_18035 - squot32(local_tid_18035, 32) * 32) == 0) {
                eta_p_15836 = eta_p_15837;
            }
        }
    }
    // in-block scan (hopefully no barriers needed)
    {
        skip_threads_18066 = 1;
        while (slt32(skip_threads_18066, 32)) {
            bool thread_active_18067 = sle32(skip_threads_18066, local_tid_18035 - squot32(local_tid_18035, 32) * 32) && ltid_in_bounds_18065;
            
            if (thread_active_18067) {
                // read operands
                {
                    eta_p_15836 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18058)[sext_i32_i64(local_tid_18035) - sext_i32_i64(skip_threads_18066)]);
                }
            }
            // perform operation
            {
                bool inactive_18068 = slt64(srem64(sext_i32_i64(local_tid_18035), d_10788), sext_i32_i64(local_tid_18035) - sext_i32_i64(local_tid_18035 - skip_threads_18066));
                
                if (thread_active_18067 && inactive_18068) {
                    eta_p_15836 = eta_p_15837;
                }
                if (thread_active_18067) {
                    if (!inactive_18068) {
                        f16 defunc_0_op_res_15838 = eta_p_15836 + eta_p_15837;
                        
                        eta_p_15836 = defunc_0_op_res_15838;
                    }
                }
            }
            if (sle32(wave_sizze_18037, skip_threads_18066)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            if (thread_active_18067) {
                // write result
                {
                    ((volatile __local uint16_t *) red_arr_mem_18058)[sext_i32_i64(local_tid_18035)] = futrts_to_bits16(eta_p_15836);
                    eta_p_15837 = eta_p_15836;
                }
            }
            if (sle32(wave_sizze_18037, skip_threads_18066)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            skip_threads_18066 *= 2;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // last thread of block 'i' writes its result to offset 'i'
    {
        if ((local_tid_18035 - squot32(local_tid_18035, 32) * 32) == 31 && ltid_in_bounds_18065) {
            ((volatile __local uint16_t *) red_arr_mem_18058)[sext_i32_i64(squot32(local_tid_18035, 32))] = futrts_to_bits16(eta_p_15836);
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
    {
        int32_t skip_threads_18069;
        
        // read input for in-block scan
        {
            if (squot32(local_tid_18035, 32) == 0 && ltid_in_bounds_18065) {
                eta_p_18063 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18058)[sext_i32_i64(local_tid_18035)]);
                if ((local_tid_18035 - squot32(local_tid_18035, 32) * 32) == 0) {
                    eta_p_18062 = eta_p_18063;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_18069 = 1;
            while (slt32(skip_threads_18069, 32)) {
                bool thread_active_18070 = sle32(skip_threads_18069, local_tid_18035 - squot32(local_tid_18035, 32) * 32) && (squot32(local_tid_18035, 32) == 0 && ltid_in_bounds_18065);
                
                if (thread_active_18070) {
                    // read operands
                    {
                        eta_p_18062 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18058)[sext_i32_i64(local_tid_18035) - sext_i32_i64(skip_threads_18069)]);
                    }
                }
                // perform operation
                {
                    bool inactive_18071 = slt64(srem64(sext_i32_i64(local_tid_18035 * 32 + 32 - 1), d_10788), sext_i32_i64(local_tid_18035 * 32 + 32 - 1) - sext_i32_i64((local_tid_18035 - skip_threads_18069) * 32 + 32 - 1));
                    
                    if (thread_active_18070 && inactive_18071) {
                        eta_p_18062 = eta_p_18063;
                    }
                    if (thread_active_18070) {
                        if (!inactive_18071) {
                            f16 defunc_0_op_res_18064 = eta_p_18062 + eta_p_18063;
                            
                            eta_p_18062 = defunc_0_op_res_18064;
                        }
                    }
                }
                if (sle32(wave_sizze_18037, skip_threads_18069)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (thread_active_18070) {
                    // write result
                    {
                        ((volatile __local uint16_t *) red_arr_mem_18058)[sext_i32_i64(local_tid_18035)] = futrts_to_bits16(eta_p_18062);
                        eta_p_18063 = eta_p_18062;
                    }
                }
                if (sle32(wave_sizze_18037, skip_threads_18069)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_18069 *= 2;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    no_carry_in_18072 = squot32(local_tid_18035, 32) == 0 || !ltid_in_bounds_18065;
    // carry-in for every block except the first
    {
        // read operands
        {
            if (!no_carry_in_18072) {
                eta_p_15837 = eta_p_15836;
                eta_p_15836 = futrts_from_bits16(((__local uint16_t *) red_arr_mem_18058)[sext_i32_i64(squot32(local_tid_18035, 32)) - (int64_t) 1]);
            }
        }
        // perform operation
        {
            bool inactive_18073 = slt64(srem64(sext_i32_i64(local_tid_18035), d_10788), sext_i32_i64(local_tid_18035) - sext_i32_i64(squot32(local_tid_18035, 32) * 32 - 1));
            
            if (!no_carry_in_18072) {
                if (inactive_18073) {
                    eta_p_15836 = eta_p_15837;
                }
            }
            if (!no_carry_in_18072) {
                if (!inactive_18073) {
                    f16 defunc_0_op_res_15838 = eta_p_15836 + eta_p_15837;
                    
                    eta_p_15836 = defunc_0_op_res_15838;
                }
            }
        }
        // write final result
        {
            if (!no_carry_in_18072) {
                ((__local uint16_t *) red_arr_mem_18058)[sext_i32_i64(local_tid_18035)] = futrts_to_bits16(eta_p_15836);
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // restore correct values for first block
    {
        if (squot32(local_tid_18035, 32) == 0 && ltid_in_bounds_18065) {
            ((__local uint16_t *) red_arr_mem_18058)[sext_i32_i64(local_tid_18035)] = futrts_to_bits16(eta_p_15837);
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    barrier(CLK_LOCAL_MEM_FENCE);
    // Save result of reduction.
    {
        int32_t num_chunks_18074 = sdiv_up32(sext_i64_i32(d_10788) * sext_i64_i32(d_10788), sext_i64_i32(computed_tblock_sizze_15791));
        
        for (int32_t chunk_i_18075 = 0; chunk_i_18075 < num_chunks_18074; chunk_i_18075++) {
            int32_t i_18076 = chunk_i_18075 * sext_i64_i32(computed_tblock_sizze_15791) + local_tid_18035;
            
            if (slt32(i_18076, sext_i64_i32(d_10788) * sext_i64_i32(d_10788))) {
                ((__local uint16_t *) color_17292)[sext_i32_i64(squot32(i_18076, sext_i64_i32(d_10788))) * d_10788 + sext_i32_i64(i_18076 - squot32(i_18076, sext_i64_i32(d_10788)) * sext_i64_i32(d_10788))] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) red_arr_mem_18058)[d_10788 - (int64_t) 1 + sext_i32_i64(squot32(i_18076, sext_i64_i32(d_10788))) * (d_10788 * d_10788) + sext_i32_i64(i_18076 - squot32(i_18076, sext_i64_i32(d_10788)) * sext_i64_i32(d_10788)) * d_10788]));
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    num_chunks_18077 = sdiv_up32(sext_i64_i32(d_10788) * sext_i64_i32(d_10788), sext_i64_i32(computed_tblock_sizze_15791));
    for (int32_t chunk_i_18078 = 0; chunk_i_18078 < num_chunks_18077; chunk_i_18078++) {
        int32_t i_18079 = chunk_i_18078 * sext_i64_i32(computed_tblock_sizze_15791) + local_tid_18035;
        
        if (slt32(i_18079, sext_i64_i32(d_10788) * sext_i64_i32(d_10788))) {
            ((__global uint16_t *) mem_16656)[gtid_15801 * (d_10788 * d_10788 * m_12246) + gtid_15802 * (d_10788 * d_10788) + sext_i32_i64(squot32(i_18079, sext_i64_i32(d_10788))) * d_10788 + sext_i32_i64(i_18079 - squot32(i_18079, sext_i64_i32(d_10788)) * sext_i64_i32(d_10788))] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) color_17292)[sext_i32_i64(squot32(i_18079, sext_i64_i32(d_10788))) * d_10788 + sext_i32_i64(i_18079 - squot32(i_18079, sext_i64_i32(d_10788)) * sext_i64_i32(d_10788))]));
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
  error_4:
    return;
}
FUTHARK_KERNEL
void FlashAttention_6021zisegmap_intrablock_15871(__global int *global_failure, int failure_is_an_option, __global int64_t *global_failure_args, int64_t d_10788, int64_t m_10789, int64_t dzlz7bUZLztZRz20Umz20Udz7dUzg_10790, int64_t m_12246, int64_t y_13481, int64_t computed_tblock_sizze_15863, int64_t binop_x_16534, __global unsigned char *V_mem_16533, __global unsigned char *mem_16634, __global unsigned char *mem_16644)
{
    volatile __local unsigned char *red_arr_mem_18103_backing_2 = &shared_mem[0];
    const int64_t red_arr_mem_18103_backing_2_offset = 0 + ((int64_t) 2 * (d_10788 * d_10788) + srem64((int64_t) 8 - srem64((int64_t) 2 * (d_10788 * d_10788), (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_17295_backing_1 = &shared_mem[red_arr_mem_18103_backing_2_offset];
    const int64_t color_17295_backing_1_offset = red_arr_mem_18103_backing_2_offset + (binop_x_16534 + srem64((int64_t) 8 - srem64(binop_x_16534, (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_17294_backing_0 = &shared_mem[color_17295_backing_1_offset];
    const int64_t color_17294_backing_0_offset = color_17295_backing_1_offset + (binop_x_16534 + srem64((int64_t) 8 - srem64(binop_x_16534, (int64_t) 8), (int64_t) 8));
    volatile __local int local_failure;
    
    if (failure_is_an_option) {
        int failed = *global_failure >= 0;
        
        if (failed)
            return;
    }
    local_failure = 0;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t local_tid_18084;
    int32_t tblock_sizze_18087;
    int32_t wave_sizze_18086;
    int32_t block_id_18085;
    int32_t global_tid_18083;
    int64_t phys_tblock_id_15871;
    int64_t slice_18089;
    int64_t ltid_pre_18088;
    int64_t remnant_18090;
    int64_t slice_18093;
    int64_t slice_18094;
    int64_t ltid_pre_18091;
    int64_t remnant_18095;
    int64_t ltid_pre_18092;
    int64_t remnant_18096;
    int64_t slice_18097;
    int64_t slice_18098;
    int64_t slice_18099;
    int64_t gtid_15868;
    int64_t remnant_18100;
    int64_t gtid_15869;
    int64_t remnant_18101;
    int64_t gtid_15870;
    int64_t remnant_18102;
    __local unsigned char *color_17294;
    __local unsigned char *color_17295;
    int64_t index_primexp_16106;
    int64_t phys_tid_15884;
    int64_t gtid_15883;
    int64_t binop_x_16086;
    int64_t phys_tid_15895;
    __local unsigned char *red_arr_mem_18103;
    int64_t gtid_15893;
    int64_t gtid_15894;
    int64_t dims_flat_18105;
    f16 eta_p_15896;
    f16 eta_p_15897;
    f16 eta_p_18107;
    f16 eta_p_18108;
    bool ltid_in_bounds_18110;
    int32_t skip_threads_18111;
    bool no_carry_in_18117;
    int32_t num_chunks_18122;
    
    local_tid_18084 = get_local_id(0);
    tblock_sizze_18087 = get_local_size(0);
    wave_sizze_18086 = LOCKSTEP_WIDTH;
    block_id_18085 = get_tblock_id(0);
    global_tid_18083 = block_id_18085 * tblock_sizze_18087 + local_tid_18084;
    phys_tblock_id_15871 = sext_i32_i64(block_id_18085);
    slice_18089 = d_10788;
    ltid_pre_18088 = sext_i32_i64(local_tid_18084);
    remnant_18090 = sext_i32_i64(local_tid_18084) - ltid_pre_18088;
    slice_18093 = d_10788;
    slice_18094 = d_10788 * slice_18093;
    ltid_pre_18091 = squot64(sext_i32_i64(local_tid_18084), slice_18093);
    remnant_18095 = sext_i32_i64(local_tid_18084) - ltid_pre_18091 * slice_18093;
    ltid_pre_18092 = remnant_18095;
    remnant_18096 = remnant_18095 - ltid_pre_18092;
    slice_18097 = d_10788;
    slice_18098 = m_12246 * slice_18097;
    slice_18099 = m_10789 * slice_18098;
    gtid_15868 = squot64(sext_i32_i64(block_id_18085), slice_18098);
    remnant_18100 = sext_i32_i64(block_id_18085) - gtid_15868 * slice_18098;
    gtid_15869 = squot64(remnant_18100, slice_18097);
    remnant_18101 = remnant_18100 - gtid_15869 * slice_18097;
    gtid_15870 = remnant_18101;
    remnant_18102 = remnant_18101 - gtid_15870;
    color_17294 = (__local unsigned char *) color_17294_backing_0;
    color_17295 = (__local unsigned char *) color_17295_backing_1;
    index_primexp_16106 = mul64(d_10788, gtid_15869);
    phys_tid_15884 = sext_i32_i64(local_tid_18084);
    gtid_15883 = sext_i32_i64(sext_i64_i32(ltid_pre_18088));
    if (slt64(gtid_15883, d_10788)) {
        int64_t tmp_15886;
        bool x_15887;
        bool y_15888;
        bool bounds_check_15889;
        bool index_certs_15890;
        f16 lifted_lambda_res_15891;
        
        tmp_15886 = add64(gtid_15883, index_primexp_16106);
        x_15887 = sle64((int64_t) 0, tmp_15886);
        y_15888 = slt64(tmp_15886, dzlz7bUZLztZRz20Umz20Udz7dUzg_10790);
        bounds_check_15889 = x_15887 && y_15888;
        if (!bounds_check_15889) {
            {
                if (atomic_cmpxchg_i32_global(global_failure, -1, 8) == -1) {
                    global_failure_args[0] = (int64_t) tmp_15886;
                    global_failure_args[1] = (int64_t) dzlz7bUZLztZRz20Umz20Udz7dUzg_10790;
                    ;
                }
                local_failure = 1;
                goto error_0;
            }
        }
        lifted_lambda_res_15891 = futrts_from_bits16(((__global uint16_t *) mem_16634)[gtid_15868 * (dzlz7bUZLztZRz20Umz20Udz7dUzg_10790 * d_10788) + gtid_15870 * dzlz7bUZLztZRz20Umz20Udz7dUzg_10790 + tmp_15886]);
        ((__local uint16_t *) color_17295)[gtid_15883] = futrts_to_bits16(lifted_lambda_res_15891);
    }
    
  error_0:
    barrier(CLK_LOCAL_MEM_FENCE);
    if (local_failure)
        return;
    barrier(CLK_LOCAL_MEM_FENCE);
    binop_x_16086 = y_13481 * gtid_15869;
    phys_tid_15895 = sext_i32_i64(local_tid_18084);
    red_arr_mem_18103 = (__local unsigned char *) red_arr_mem_18103_backing_2;
    gtid_15893 = sext_i32_i64(sext_i64_i32(ltid_pre_18091));
    gtid_15894 = sext_i32_i64(sext_i64_i32(ltid_pre_18092));
    if (slt64(gtid_15893, d_10788) && slt64(gtid_15894, d_10788)) {
        f16 eta_p_15900;
        int64_t binop_y_16087;
        int64_t binop_x_16088;
        int64_t binop_x_16089;
        int64_t new_index_16090;
        int64_t binop_y_16102;
        int64_t new_index_16103;
        f16 eta_p_15901;
        f16 defunc_0_f_res_15902;
        
        eta_p_15900 = futrts_from_bits16(((__local uint16_t *) color_17295)[gtid_15894]);
        binop_y_16087 = d_10788 * gtid_15894;
        binop_x_16088 = binop_x_16086 + binop_y_16087;
        binop_x_16089 = gtid_15893 + binop_x_16088;
        new_index_16090 = squot64(binop_x_16089, d_10788);
        binop_y_16102 = d_10788 * new_index_16090;
        new_index_16103 = binop_x_16089 - binop_y_16102;
        eta_p_15901 = futrts_from_bits16(((__global uint16_t *) V_mem_16533)[new_index_16090 * d_10788 + new_index_16103]);
        defunc_0_f_res_15902 = eta_p_15900 * eta_p_15901;
        ((__local uint16_t *) red_arr_mem_18103)[gtid_15893 * d_10788 + gtid_15894] = futrts_to_bits16(defunc_0_f_res_15902);
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    dims_flat_18105 = d_10788 * d_10788;
    ltid_in_bounds_18110 = slt64(sext_i32_i64(local_tid_18084), d_10788 * d_10788);
    // read input for in-block scan
    {
        if (ltid_in_bounds_18110) {
            eta_p_15897 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18103)[sext_i32_i64(local_tid_18084)]);
            if ((local_tid_18084 - squot32(local_tid_18084, 32) * 32) == 0) {
                eta_p_15896 = eta_p_15897;
            }
        }
    }
    // in-block scan (hopefully no barriers needed)
    {
        skip_threads_18111 = 1;
        while (slt32(skip_threads_18111, 32)) {
            bool thread_active_18112 = sle32(skip_threads_18111, local_tid_18084 - squot32(local_tid_18084, 32) * 32) && ltid_in_bounds_18110;
            
            if (thread_active_18112) {
                // read operands
                {
                    eta_p_15896 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18103)[sext_i32_i64(local_tid_18084) - sext_i32_i64(skip_threads_18111)]);
                }
            }
            // perform operation
            {
                bool inactive_18113 = slt64(srem64(sext_i32_i64(local_tid_18084), d_10788), sext_i32_i64(local_tid_18084) - sext_i32_i64(local_tid_18084 - skip_threads_18111));
                
                if (thread_active_18112 && inactive_18113) {
                    eta_p_15896 = eta_p_15897;
                }
                if (thread_active_18112) {
                    if (!inactive_18113) {
                        f16 defunc_0_op_res_15898 = eta_p_15896 + eta_p_15897;
                        
                        eta_p_15896 = defunc_0_op_res_15898;
                    }
                }
            }
            if (sle32(wave_sizze_18086, skip_threads_18111)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            if (thread_active_18112) {
                // write result
                {
                    ((volatile __local uint16_t *) red_arr_mem_18103)[sext_i32_i64(local_tid_18084)] = futrts_to_bits16(eta_p_15896);
                    eta_p_15897 = eta_p_15896;
                }
            }
            if (sle32(wave_sizze_18086, skip_threads_18111)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            skip_threads_18111 *= 2;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // last thread of block 'i' writes its result to offset 'i'
    {
        if ((local_tid_18084 - squot32(local_tid_18084, 32) * 32) == 31 && ltid_in_bounds_18110) {
            ((volatile __local uint16_t *) red_arr_mem_18103)[sext_i32_i64(squot32(local_tid_18084, 32))] = futrts_to_bits16(eta_p_15896);
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
    {
        int32_t skip_threads_18114;
        
        // read input for in-block scan
        {
            if (squot32(local_tid_18084, 32) == 0 && ltid_in_bounds_18110) {
                eta_p_18108 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18103)[sext_i32_i64(local_tid_18084)]);
                if ((local_tid_18084 - squot32(local_tid_18084, 32) * 32) == 0) {
                    eta_p_18107 = eta_p_18108;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_18114 = 1;
            while (slt32(skip_threads_18114, 32)) {
                bool thread_active_18115 = sle32(skip_threads_18114, local_tid_18084 - squot32(local_tid_18084, 32) * 32) && (squot32(local_tid_18084, 32) == 0 && ltid_in_bounds_18110);
                
                if (thread_active_18115) {
                    // read operands
                    {
                        eta_p_18107 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_18103)[sext_i32_i64(local_tid_18084) - sext_i32_i64(skip_threads_18114)]);
                    }
                }
                // perform operation
                {
                    bool inactive_18116 = slt64(srem64(sext_i32_i64(local_tid_18084 * 32 + 32 - 1), d_10788), sext_i32_i64(local_tid_18084 * 32 + 32 - 1) - sext_i32_i64((local_tid_18084 - skip_threads_18114) * 32 + 32 - 1));
                    
                    if (thread_active_18115 && inactive_18116) {
                        eta_p_18107 = eta_p_18108;
                    }
                    if (thread_active_18115) {
                        if (!inactive_18116) {
                            f16 defunc_0_op_res_18109 = eta_p_18107 + eta_p_18108;
                            
                            eta_p_18107 = defunc_0_op_res_18109;
                        }
                    }
                }
                if (sle32(wave_sizze_18086, skip_threads_18114)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (thread_active_18115) {
                    // write result
                    {
                        ((volatile __local uint16_t *) red_arr_mem_18103)[sext_i32_i64(local_tid_18084)] = futrts_to_bits16(eta_p_18107);
                        eta_p_18108 = eta_p_18107;
                    }
                }
                if (sle32(wave_sizze_18086, skip_threads_18114)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_18114 *= 2;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    no_carry_in_18117 = squot32(local_tid_18084, 32) == 0 || !ltid_in_bounds_18110;
    // carry-in for every block except the first
    {
        // read operands
        {
            if (!no_carry_in_18117) {
                eta_p_15897 = eta_p_15896;
                eta_p_15896 = futrts_from_bits16(((__local uint16_t *) red_arr_mem_18103)[sext_i32_i64(squot32(local_tid_18084, 32)) - (int64_t) 1]);
            }
        }
        // perform operation
        {
            bool inactive_18118 = slt64(srem64(sext_i32_i64(local_tid_18084), d_10788), sext_i32_i64(local_tid_18084) - sext_i32_i64(squot32(local_tid_18084, 32) * 32 - 1));
            
            if (!no_carry_in_18117) {
                if (inactive_18118) {
                    eta_p_15896 = eta_p_15897;
                }
            }
            if (!no_carry_in_18117) {
                if (!inactive_18118) {
                    f16 defunc_0_op_res_15898 = eta_p_15896 + eta_p_15897;
                    
                    eta_p_15896 = defunc_0_op_res_15898;
                }
            }
        }
        // write final result
        {
            if (!no_carry_in_18117) {
                ((__local uint16_t *) red_arr_mem_18103)[sext_i32_i64(local_tid_18084)] = futrts_to_bits16(eta_p_15896);
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // restore correct values for first block
    {
        if (squot32(local_tid_18084, 32) == 0 && ltid_in_bounds_18110) {
            ((__local uint16_t *) red_arr_mem_18103)[sext_i32_i64(local_tid_18084)] = futrts_to_bits16(eta_p_15897);
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    barrier(CLK_LOCAL_MEM_FENCE);
    // Save result of reduction.
    {
        int32_t num_chunks_18119 = sdiv_up32(sext_i64_i32(d_10788), sext_i64_i32(computed_tblock_sizze_15863));
        
        for (int32_t chunk_i_18120 = 0; chunk_i_18120 < num_chunks_18119; chunk_i_18120++) {
            int32_t i_18121 = chunk_i_18120 * sext_i64_i32(computed_tblock_sizze_15863) + local_tid_18084;
            
            if (slt32(i_18121, sext_i64_i32(d_10788))) {
                ((__local uint16_t *) color_17294)[sext_i32_i64(i_18121)] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) red_arr_mem_18103)[d_10788 - (int64_t) 1 + sext_i32_i64(i_18121) * d_10788]));
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    num_chunks_18122 = sdiv_up32(sext_i64_i32(d_10788), sext_i64_i32(computed_tblock_sizze_15863));
    for (int32_t chunk_i_18123 = 0; chunk_i_18123 < num_chunks_18122; chunk_i_18123++) {
        int32_t i_18124 = chunk_i_18123 * sext_i64_i32(computed_tblock_sizze_15863) + local_tid_18084;
        
        if (slt32(i_18124, sext_i64_i32(d_10788))) {
            ((__global uint16_t *) mem_16644)[gtid_15868 * (d_10788 * d_10788 * m_12246) + gtid_15869 * (d_10788 * d_10788) + gtid_15870 * d_10788 + sext_i32_i64(i_18124)] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) color_17294)[sext_i32_i64(i_18124)]));
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
  error_4:
    return;
}
FUTHARK_KERNEL
void add_bothzireplicate_17452(int64_t n_8319, int64_t pn_8321, int64_t dzlz7bUZLzpZRz20Umz20Upmz7dUzg_11202, int64_t replicate_n_17451, int64_t virt_num_tblocks_17457, int64_t num_tblocks_17458, __global unsigned char *mem_16545)
{
    int32_t replicate_ltid_17453;
    int32_t tblock_sizze_17455;
    int32_t replicate_gid_17454;
    int32_t replicate_gtid_17452;
    int32_t phys_tblock_id_17459;
    int32_t iterations_17460;
    
    replicate_ltid_17453 = get_local_id(0);
    tblock_sizze_17455 = get_local_size(0);
    replicate_gid_17454 = get_tblock_id(0);
    replicate_gtid_17452 = replicate_gid_17454 * tblock_sizze_17455 + replicate_ltid_17453;
    phys_tblock_id_17459 = get_tblock_id(0);
    iterations_17460 = sdiv_up32(sext_i64_i32(virt_num_tblocks_17457) - phys_tblock_id_17459, sext_i64_i32(num_tblocks_17458));
    for (int32_t i_17461 = 0; i_17461 < iterations_17460; i_17461++) {
        int32_t virt_tblock_id_17462;
        int64_t global_tid_17463;
        int64_t slice_17466;
        int64_t slice_17467;
        int64_t rep_i_17464;
        int64_t remnant_17468;
        int64_t rep_i_17465;
        int64_t remnant_17469;
        
        virt_tblock_id_17462 = phys_tblock_id_17459 + i_17461 * sext_i64_i32(num_tblocks_17458);
        global_tid_17463 = sext_i32_i64(virt_tblock_id_17462) * sext_i32_i64(tblock_sizze_17455) + sext_i32_i64(replicate_ltid_17453);
        slice_17466 = dzlz7bUZLzpZRz20Umz20Upmz7dUzg_11202;
        slice_17467 = pn_8321 * slice_17466;
        rep_i_17464 = squot64(global_tid_17463, slice_17466);
        remnant_17468 = global_tid_17463 - rep_i_17464 * slice_17466;
        rep_i_17465 = remnant_17468;
        remnant_17469 = remnant_17468 - rep_i_17465;
        if (slt64(global_tid_17463, replicate_n_17451)) {
            ((__global uint16_t *) mem_16545)[dzlz7bUZLzpZRz20Umz20Upmz7dUzg_11202 * n_8319 + (rep_i_17464 * dzlz7bUZLzpZRz20Umz20Upmz7dUzg_11202 + rep_i_17465)] = futrts_to_bits16((f16) 0.0F);
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
}
FUTHARK_KERNEL_SIZED(add_bothzisegmap_intrablock_12724_dim1, 1, 1)
void add_bothzisegmap_intrablock_12724(__global int *global_failure, int64_t n_8319, int64_t m_8320, int64_t pm_8322, int64_t dzlz7bUZLzpZRz20Umz20Upmz7dUzg_11202, int64_t bytes_16535, __global unsigned char *a_mem_16531, __global unsigned char *mem_16533, __global unsigned char *mem_16545)
{
    volatile __local unsigned char *color_17239_backing_0 = &shared_mem[0];
    const int64_t color_17239_backing_0_offset = 0 + (bytes_16535 + srem64((int64_t) 8 - srem64(bytes_16535, (int64_t) 8), (int64_t) 8));
    
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_17435;
    int32_t tblock_sizze_17438;
    int32_t wave_sizze_17437;
    int32_t block_id_17436;
    int32_t global_tid_17434;
    int64_t phys_tblock_id_12724;
    int64_t slice_17439;
    int64_t gtid_12723;
    int64_t remnant_17440;
    __local unsigned char *color_17239;
    int64_t tmp_offs_17441;
    int32_t num_chunks_17442;
    int32_t num_chunks_17445;
    int32_t num_chunks_17448;
    
    local_tid_17435 = get_local_id(0);
    tblock_sizze_17438 = get_local_size(0);
    wave_sizze_17437 = LOCKSTEP_WIDTH;
    block_id_17436 = get_tblock_id(0);
    global_tid_17434 = block_id_17436 * tblock_sizze_17438 + local_tid_17435;
    phys_tblock_id_12724 = sext_i32_i64(block_id_17436);
    slice_17439 = n_8319;
    gtid_12723 = sext_i32_i64(block_id_17436);
    remnant_17440 = sext_i32_i64(block_id_17436) - gtid_12723;
    color_17239 = (__local unsigned char *) color_17239_backing_0;
    tmp_offs_17441 = (int64_t) 0;
    num_chunks_17442 = sdiv_up32(sext_i64_i32(m_8320), 0);
    for (int32_t chunk_i_17443 = 0; chunk_i_17443 < num_chunks_17442; chunk_i_17443++) {
        int32_t i_17444 = local_tid_17435;
        
        if (slt32(i_17444, sext_i64_i32(m_8320))) {
            ((__local uint16_t *) color_17239)[tmp_offs_17441 + sext_i32_i64(i_17444)] = futrts_to_bits16(futrts_from_bits16(((__global uint16_t *) a_mem_16531)[gtid_12723 * m_8320 + sext_i32_i64(i_17444)]));
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    tmp_offs_17441 += m_8320;
    num_chunks_17445 = sdiv_up32(sext_i64_i32(pm_8322), 0);
    for (int32_t chunk_i_17446 = 0; chunk_i_17446 < num_chunks_17445; chunk_i_17446++) {
        int32_t i_17447 = local_tid_17435;
        
        if (slt32(i_17447, sext_i64_i32(pm_8322))) {
            ((__local uint16_t *) color_17239)[tmp_offs_17441 + sext_i32_i64(i_17447)] = futrts_to_bits16(futrts_from_bits16(((__global uint16_t *) mem_16533)[sext_i32_i64(i_17447)]));
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    tmp_offs_17441 += pm_8322;
    num_chunks_17448 = sdiv_up32(sext_i64_i32(dzlz7bUZLzpZRz20Umz20Upmz7dUzg_11202), 0);
    for (int32_t chunk_i_17449 = 0; chunk_i_17449 < num_chunks_17448; chunk_i_17449++) {
        int32_t i_17450 = local_tid_17435;
        
        if (slt32(i_17450, sext_i64_i32(dzlz7bUZLzpZRz20Umz20Upmz7dUzg_11202))) {
            ((__global uint16_t *) mem_16545)[gtid_12723 * dzlz7bUZLzpZRz20Umz20Upmz7dUzg_11202 + sext_i32_i64(i_17450)] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) color_17239)[sext_i32_i64(i_17450)]));
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
  error_0:
    return;
}
FUTHARK_KERNEL_SIZED(add_colszisegmap_intrablock_12712_dim1, 1, 1)
void add_colszisegmap_intrablock_12712(__global int *global_failure, int64_t n_8295, int64_t m_8296, int64_t pm_8297, int64_t dzlz7bUZLzpZRz20Umz20Upmz7dUzg_11166, int64_t bytes_16535, __global unsigned char *a_mem_16531, __global unsigned char *mem_16533, __global unsigned char *mem_16539)
{
    volatile __local unsigned char *color_17239_backing_0 = &shared_mem[0];
    const int64_t color_17239_backing_0_offset = 0 + (bytes_16535 + srem64((int64_t) 8 - srem64(bytes_16535, (int64_t) 8), (int64_t) 8));
    
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_17434;
    int32_t tblock_sizze_17437;
    int32_t wave_sizze_17436;
    int32_t block_id_17435;
    int32_t global_tid_17433;
    int64_t phys_tblock_id_12712;
    int64_t slice_17438;
    int64_t gtid_12711;
    int64_t remnant_17439;
    __local unsigned char *color_17239;
    int64_t tmp_offs_17440;
    int32_t num_chunks_17441;
    int32_t num_chunks_17444;
    int32_t num_chunks_17447;
    
    local_tid_17434 = get_local_id(0);
    tblock_sizze_17437 = get_local_size(0);
    wave_sizze_17436 = LOCKSTEP_WIDTH;
    block_id_17435 = get_tblock_id(0);
    global_tid_17433 = block_id_17435 * tblock_sizze_17437 + local_tid_17434;
    phys_tblock_id_12712 = sext_i32_i64(block_id_17435);
    slice_17438 = n_8295;
    gtid_12711 = sext_i32_i64(block_id_17435);
    remnant_17439 = sext_i32_i64(block_id_17435) - gtid_12711;
    color_17239 = (__local unsigned char *) color_17239_backing_0;
    tmp_offs_17440 = (int64_t) 0;
    num_chunks_17441 = sdiv_up32(sext_i64_i32(m_8296), 0);
    for (int32_t chunk_i_17442 = 0; chunk_i_17442 < num_chunks_17441; chunk_i_17442++) {
        int32_t i_17443 = local_tid_17434;
        
        if (slt32(i_17443, sext_i64_i32(m_8296))) {
            ((__local uint16_t *) color_17239)[tmp_offs_17440 + sext_i32_i64(i_17443)] = futrts_to_bits16(futrts_from_bits16(((__global uint16_t *) a_mem_16531)[gtid_12711 * m_8296 + sext_i32_i64(i_17443)]));
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    tmp_offs_17440 += m_8296;
    num_chunks_17444 = sdiv_up32(sext_i64_i32(pm_8297), 0);
    for (int32_t chunk_i_17445 = 0; chunk_i_17445 < num_chunks_17444; chunk_i_17445++) {
        int32_t i_17446 = local_tid_17434;
        
        if (slt32(i_17446, sext_i64_i32(pm_8297))) {
            ((__local uint16_t *) color_17239)[tmp_offs_17440 + sext_i32_i64(i_17446)] = futrts_to_bits16(futrts_from_bits16(((__global uint16_t *) mem_16533)[sext_i32_i64(i_17446)]));
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    tmp_offs_17440 += pm_8297;
    num_chunks_17447 = sdiv_up32(sext_i64_i32(dzlz7bUZLzpZRz20Umz20Upmz7dUzg_11166), 0);
    for (int32_t chunk_i_17448 = 0; chunk_i_17448 < num_chunks_17447; chunk_i_17448++) {
        int32_t i_17449 = local_tid_17434;
        
        if (slt32(i_17449, sext_i64_i32(dzlz7bUZLzpZRz20Umz20Upmz7dUzg_11166))) {
            ((__global uint16_t *) mem_16539)[gtid_12711 * dzlz7bUZLzpZRz20Umz20Upmz7dUzg_11166 + sext_i32_i64(i_17449)] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) color_17239)[sext_i32_i64(i_17449)]));
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
  error_0:
    return;
}
FUTHARK_KERNEL
void add_rowszireplicate_17413(int64_t n_8209, int64_t m_8210, int64_t pn_8211, int64_t replicate_n_17412, int64_t virt_num_tblocks_17418, int64_t num_tblocks_17419, __global unsigned char *mem_16537)
{
    int32_t replicate_ltid_17414;
    int32_t tblock_sizze_17416;
    int32_t replicate_gid_17415;
    int32_t replicate_gtid_17413;
    int32_t phys_tblock_id_17420;
    int32_t iterations_17421;
    
    replicate_ltid_17414 = get_local_id(0);
    tblock_sizze_17416 = get_local_size(0);
    replicate_gid_17415 = get_tblock_id(0);
    replicate_gtid_17413 = replicate_gid_17415 * tblock_sizze_17416 + replicate_ltid_17414;
    phys_tblock_id_17420 = get_tblock_id(0);
    iterations_17421 = sdiv_up32(sext_i64_i32(virt_num_tblocks_17418) - phys_tblock_id_17420, sext_i64_i32(num_tblocks_17419));
    for (int32_t i_17422 = 0; i_17422 < iterations_17421; i_17422++) {
        int32_t virt_tblock_id_17423;
        int64_t global_tid_17424;
        int64_t slice_17427;
        int64_t slice_17428;
        int64_t rep_i_17425;
        int64_t remnant_17429;
        int64_t rep_i_17426;
        int64_t remnant_17430;
        
        virt_tblock_id_17423 = phys_tblock_id_17420 + i_17422 * sext_i64_i32(num_tblocks_17419);
        global_tid_17424 = sext_i32_i64(virt_tblock_id_17423) * sext_i32_i64(tblock_sizze_17416) + sext_i32_i64(replicate_ltid_17414);
        slice_17427 = m_8210;
        slice_17428 = pn_8211 * slice_17427;
        rep_i_17425 = squot64(global_tid_17424, slice_17427);
        remnant_17429 = global_tid_17424 - rep_i_17425 * slice_17427;
        rep_i_17426 = remnant_17429;
        remnant_17430 = remnant_17429 - rep_i_17426;
        if (slt64(global_tid_17424, replicate_n_17412)) {
            ((__global uint16_t *) mem_16537)[m_8210 * n_8209 + (rep_i_17425 * m_8210 + rep_i_17426)] = futrts_to_bits16((f16) 0.0F);
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
}
FUTHARK_KERNEL
void builtinzhreplicate_f16zireplicate_17416(int64_t num_elems_17412, uint16_t val_17413_bits, int64_t replicate_n_17415, int64_t virt_num_tblocks_17421, int64_t num_tblocks_17422, __global unsigned char *mem_17411)
{
    f16 val_17413 = futrts_from_bits16(val_17413_bits);
    int32_t replicate_ltid_17417;
    int32_t tblock_sizze_17419;
    int32_t replicate_gid_17418;
    int32_t replicate_gtid_17416;
    int32_t phys_tblock_id_17423;
    int32_t iterations_17424;
    
    replicate_ltid_17417 = get_local_id(0);
    tblock_sizze_17419 = get_local_size(0);
    replicate_gid_17418 = get_tblock_id(0);
    replicate_gtid_17416 = replicate_gid_17418 * tblock_sizze_17419 + replicate_ltid_17417;
    phys_tblock_id_17423 = get_tblock_id(0);
    iterations_17424 = sdiv_up32(sext_i64_i32(virt_num_tblocks_17421) - phys_tblock_id_17423, sext_i64_i32(num_tblocks_17422));
    for (int32_t i_17425 = 0; i_17425 < iterations_17424; i_17425++) {
        int32_t virt_tblock_id_17426;
        int64_t global_tid_17427;
        int64_t slice_17429;
        int64_t rep_i_17428;
        int64_t remnant_17430;
        
        virt_tblock_id_17426 = phys_tblock_id_17423 + i_17425 * sext_i64_i32(num_tblocks_17422);
        global_tid_17427 = sext_i32_i64(virt_tblock_id_17426) * sext_i32_i64(tblock_sizze_17419) + sext_i32_i64(replicate_ltid_17417);
        slice_17429 = num_elems_17412;
        rep_i_17428 = global_tid_17427;
        remnant_17430 = global_tid_17427 - rep_i_17428;
        if (slt64(global_tid_17427, replicate_n_17415)) {
            ((__global uint16_t *) mem_17411)[rep_i_17428] = futrts_to_bits16(val_17413);
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
}
FUTHARK_KERNEL
void builtinzhreplicate_i32zireplicate_17421(int64_t num_elems_17417, int32_t val_17418, int64_t replicate_n_17420, int64_t virt_num_tblocks_17426, int64_t num_tblocks_17427, __global unsigned char *mem_17416)
{
    int32_t replicate_ltid_17422;
    int32_t tblock_sizze_17424;
    int32_t replicate_gid_17423;
    int32_t replicate_gtid_17421;
    int32_t phys_tblock_id_17428;
    int32_t iterations_17429;
    
    replicate_ltid_17422 = get_local_id(0);
    tblock_sizze_17424 = get_local_size(0);
    replicate_gid_17423 = get_tblock_id(0);
    replicate_gtid_17421 = replicate_gid_17423 * tblock_sizze_17424 + replicate_ltid_17422;
    phys_tblock_id_17428 = get_tblock_id(0);
    iterations_17429 = sdiv_up32(sext_i64_i32(virt_num_tblocks_17426) - phys_tblock_id_17428, sext_i64_i32(num_tblocks_17427));
    for (int32_t i_17430 = 0; i_17430 < iterations_17429; i_17430++) {
        int32_t virt_tblock_id_17431;
        int64_t global_tid_17432;
        int64_t slice_17434;
        int64_t rep_i_17433;
        int64_t remnant_17435;
        
        virt_tblock_id_17431 = phys_tblock_id_17428 + i_17430 * sext_i64_i32(num_tblocks_17427);
        global_tid_17432 = sext_i32_i64(virt_tblock_id_17431) * sext_i32_i64(tblock_sizze_17424) + sext_i32_i64(replicate_ltid_17422);
        slice_17434 = num_elems_17417;
        rep_i_17433 = global_tid_17432;
        remnant_17435 = global_tid_17432 - rep_i_17433;
        if (slt64(global_tid_17432, replicate_n_17420)) {
            ((__global int32_t *) mem_17416)[rep_i_17433] = val_17418;
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
}
FUTHARK_KERNEL_SIZED(matmul_tiledzisegmap_13257_dim1, 1, 1)
void matmul_tiledzisegmap_13257(__global int *global_failure, int64_t d_9096, int64_t m_12166, int64_t one_intra_par_min_13130, __global unsigned char *ext_mem_16556, __global unsigned char *mem_16581)
{
    #define segmap_tblock_sizze_13248 (matmul_tiledzisegmap_13257zisegmap_tblock_sizze_13248)
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_17575;
    int32_t tblock_sizze_17578;
    int32_t wave_sizze_17577;
    int32_t block_id_17576;
    int32_t global_tid_17574;
    int64_t phys_tid_13257;
    int64_t global_tid_17579;
    int64_t slice_17580;
    int64_t slice_17581;
    int64_t gtid_13255;
    int64_t remnant_17582;
    int64_t gtid_13256;
    int64_t remnant_17583;
    
    local_tid_17575 = get_local_id(0);
    tblock_sizze_17578 = get_local_size(0);
    wave_sizze_17577 = LOCKSTEP_WIDTH;
    block_id_17576 = get_tblock_id(0);
    global_tid_17574 = block_id_17576 * tblock_sizze_17578 + local_tid_17575;
    phys_tid_13257 = sext_i32_i64(global_tid_17574);
    global_tid_17579 = sext_i32_i64(block_id_17576) * segmap_tblock_sizze_13248 + sext_i32_i64(local_tid_17575);
    slice_17580 = d_9096;
    slice_17581 = d_9096 * slice_17580;
    gtid_13255 = squot64(global_tid_17579, slice_17580);
    remnant_17582 = global_tid_17579 - gtid_13255 * slice_17580;
    gtid_13256 = remnant_17582;
    remnant_17583 = remnant_17582 - gtid_13256;
    if (slt64(gtid_13255, d_9096) && slt64(gtid_13256, d_9096)) {
        f16 defunc_0_map_res_13259;
        f16 redout_16325 = (f16) 0.0F;
        
        for (int64_t i_16326 = 0; i_16326 < m_12166; i_16326++) {
            f16 x_13263;
            f16 defunc_0_f_res_13262;
            f16 redout_tmp_17584;
            
            x_13263 = futrts_from_bits16(((__global uint16_t *) ext_mem_16556)[i_16326 * one_intra_par_min_13130 + gtid_13255 * d_9096 + gtid_13256]);
            defunc_0_f_res_13262 = x_13263 + redout_16325;
            redout_tmp_17584 = defunc_0_f_res_13262;
            redout_16325 = redout_tmp_17584;
        }
        defunc_0_map_res_13259 = redout_16325;
        ((__global uint16_t *) mem_16581)[gtid_13255 * d_9096 + gtid_13256] = futrts_to_bits16(defunc_0_map_res_13259);
    }
    
  error_0:
    return;
    #undef segmap_tblock_sizze_13248
}
FUTHARK_KERNEL
void matmul_tiledzisegmap_intrablock_13149(__global int *global_failure, int failure_is_an_option, __global int64_t *global_failure_args, int64_t md_9095, int64_t d_9096, int64_t m_12166, int64_t one_intra_par_min_13130, int64_t computed_tblock_sizze_13139, int64_t bytes_16544, __global unsigned char *A_mem_16531, __global unsigned char *B_mem_16532, __global unsigned char *mem_16552)
{
    volatile __local unsigned char *red_arr_mem_17507_backing_2 = &shared_mem[0];
    const int64_t red_arr_mem_17507_backing_2_offset = 0 + ((int64_t) 2 * (d_9096 * d_9096 * d_9096) + srem64((int64_t) 8 - srem64((int64_t) 2 * (d_9096 * d_9096 * d_9096), (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_17242_backing_1 = &shared_mem[red_arr_mem_17507_backing_2_offset];
    const int64_t color_17242_backing_1_offset = red_arr_mem_17507_backing_2_offset + (bytes_16544 + srem64((int64_t) 8 - srem64(bytes_16544, (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_17241_backing_0 = &shared_mem[color_17242_backing_1_offset];
    const int64_t color_17241_backing_0_offset = color_17242_backing_1_offset + (bytes_16544 + srem64((int64_t) 8 - srem64(bytes_16544, (int64_t) 8), (int64_t) 8));
    volatile __local int local_failure;
    
    if (failure_is_an_option) {
        int failed = *global_failure >= 0;
        
        if (failed)
            return;
    }
    local_failure = 0;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t local_tid_17486;
    int32_t tblock_sizze_17489;
    int32_t wave_sizze_17488;
    int32_t block_id_17487;
    int32_t global_tid_17485;
    int64_t phys_tblock_id_13149;
    int64_t slice_17492;
    int64_t slice_17493;
    int64_t ltid_pre_17490;
    int64_t remnant_17494;
    int64_t ltid_pre_17491;
    int64_t remnant_17495;
    int64_t slice_17499;
    int64_t slice_17500;
    int64_t slice_17501;
    int64_t ltid_pre_17496;
    int64_t remnant_17502;
    int64_t ltid_pre_17497;
    int64_t remnant_17503;
    int64_t ltid_pre_17498;
    int64_t remnant_17504;
    int64_t slice_17505;
    int64_t gtid_13148;
    int64_t remnant_17506;
    __local unsigned char *color_17241;
    __local unsigned char *color_17242;
    int64_t zp_rhs_13153;
    int64_t phys_tid_13165;
    int64_t gtid_13163;
    int64_t gtid_13164;
    int64_t binop_x_15993;
    int64_t phys_tid_13179;
    __local unsigned char *red_arr_mem_17507;
    int64_t gtid_13176;
    int64_t gtid_13177;
    int64_t gtid_13178;
    int64_t dims_flat_17509;
    f16 eta_p_13180;
    f16 eta_p_13181;
    f16 eta_p_17511;
    f16 eta_p_17512;
    bool ltid_in_bounds_17514;
    int32_t skip_threads_17515;
    bool no_carry_in_17521;
    int32_t num_chunks_17526;
    
    local_tid_17486 = get_local_id(0);
    tblock_sizze_17489 = get_local_size(0);
    wave_sizze_17488 = LOCKSTEP_WIDTH;
    block_id_17487 = get_tblock_id(0);
    global_tid_17485 = block_id_17487 * tblock_sizze_17489 + local_tid_17486;
    phys_tblock_id_13149 = sext_i32_i64(block_id_17487);
    slice_17492 = d_9096;
    slice_17493 = d_9096 * slice_17492;
    ltid_pre_17490 = squot64(sext_i32_i64(local_tid_17486), slice_17492);
    remnant_17494 = sext_i32_i64(local_tid_17486) - ltid_pre_17490 * slice_17492;
    ltid_pre_17491 = remnant_17494;
    remnant_17495 = remnant_17494 - ltid_pre_17491;
    slice_17499 = d_9096;
    slice_17500 = d_9096 * slice_17499;
    slice_17501 = d_9096 * slice_17500;
    ltid_pre_17496 = squot64(sext_i32_i64(local_tid_17486), slice_17500);
    remnant_17502 = sext_i32_i64(local_tid_17486) - ltid_pre_17496 * slice_17500;
    ltid_pre_17497 = squot64(remnant_17502, slice_17499);
    remnant_17503 = remnant_17502 - ltid_pre_17497 * slice_17499;
    ltid_pre_17498 = remnant_17503;
    remnant_17504 = remnant_17503 - ltid_pre_17498;
    slice_17505 = m_12166;
    gtid_13148 = sext_i32_i64(block_id_17487);
    remnant_17506 = sext_i32_i64(block_id_17487) - gtid_13148;
    color_17241 = (__local unsigned char *) color_17241_backing_0;
    color_17242 = (__local unsigned char *) color_17242_backing_1;
    zp_rhs_13153 = mul64(d_9096, gtid_13148);
    phys_tid_13165 = sext_i32_i64(local_tid_17486);
    gtid_13163 = sext_i32_i64(sext_i64_i32(ltid_pre_17490));
    gtid_13164 = sext_i32_i64(sext_i64_i32(ltid_pre_17491));
    if (slt64(gtid_13163, d_9096) && slt64(gtid_13164, d_9096)) {
        int64_t tmp_13169;
        bool x_13170;
        bool y_13171;
        bool bounds_check_13172;
        bool index_certs_13173;
        f16 lifted_lambda_res_13174;
        
        tmp_13169 = add64(zp_rhs_13153, gtid_13164);
        x_13170 = sle64((int64_t) 0, tmp_13169);
        y_13171 = slt64(tmp_13169, md_9095);
        bounds_check_13172 = x_13170 && y_13171;
        if (!bounds_check_13172) {
            {
                if (atomic_cmpxchg_i32_global(global_failure, -1, 10) == -1) {
                    global_failure_args[0] = (int64_t) tmp_13169;
                    global_failure_args[1] = (int64_t) md_9095;
                    ;
                }
                local_failure = 1;
                goto error_0;
            }
        }
        lifted_lambda_res_13174 = futrts_from_bits16(((__global uint16_t *) A_mem_16531)[gtid_13163 * md_9095 + tmp_13169]);
        ((__local uint16_t *) color_17242)[gtid_13163 * d_9096 + gtid_13164] = futrts_to_bits16(lifted_lambda_res_13174);
    }
    
  error_0:
    barrier(CLK_LOCAL_MEM_FENCE);
    if (local_failure)
        return;
    barrier(CLK_LOCAL_MEM_FENCE);
    binop_x_15993 = one_intra_par_min_13130 * gtid_13148;
    phys_tid_13179 = sext_i32_i64(local_tid_17486);
    red_arr_mem_17507 = (__local unsigned char *) red_arr_mem_17507_backing_2;
    gtid_13176 = sext_i32_i64(sext_i64_i32(ltid_pre_17496));
    gtid_13177 = sext_i32_i64(sext_i64_i32(ltid_pre_17497));
    gtid_13178 = sext_i32_i64(sext_i64_i32(ltid_pre_17498));
    if ((slt64(gtid_13176, d_9096) && slt64(gtid_13177, d_9096)) && slt64(gtid_13178, d_9096)) {
        f16 eta_p_13185;
        int64_t binop_y_15994;
        int64_t binop_x_15995;
        int64_t binop_x_15996;
        int64_t new_index_15997;
        int64_t binop_y_16009;
        int64_t new_index_16010;
        f16 eta_p_13186;
        f16 defunc_0_f_res_13187;
        
        eta_p_13185 = futrts_from_bits16(((__local uint16_t *) color_17242)[gtid_13176 * d_9096 + gtid_13178]);
        binop_y_15994 = d_9096 * gtid_13178;
        binop_x_15995 = binop_x_15993 + binop_y_15994;
        binop_x_15996 = gtid_13177 + binop_x_15995;
        new_index_15997 = squot64(binop_x_15996, d_9096);
        binop_y_16009 = d_9096 * new_index_15997;
        new_index_16010 = binop_x_15996 - binop_y_16009;
        eta_p_13186 = futrts_from_bits16(((__global uint16_t *) B_mem_16532)[new_index_15997 * d_9096 + new_index_16010]);
        defunc_0_f_res_13187 = eta_p_13185 * eta_p_13186;
        ((__local uint16_t *) red_arr_mem_17507)[gtid_13176 * (d_9096 * d_9096) + gtid_13177 * d_9096 + gtid_13178] = futrts_to_bits16(defunc_0_f_res_13187);
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    dims_flat_17509 = d_9096 * d_9096 * d_9096;
    ltid_in_bounds_17514 = slt64(sext_i32_i64(local_tid_17486), d_9096 * d_9096 * d_9096);
    // read input for in-block scan
    {
        if (ltid_in_bounds_17514) {
            eta_p_13181 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_17507)[sext_i32_i64(local_tid_17486)]);
            if ((local_tid_17486 - squot32(local_tid_17486, 32) * 32) == 0) {
                eta_p_13180 = eta_p_13181;
            }
        }
    }
    // in-block scan (hopefully no barriers needed)
    {
        skip_threads_17515 = 1;
        while (slt32(skip_threads_17515, 32)) {
            bool thread_active_17516 = sle32(skip_threads_17515, local_tid_17486 - squot32(local_tid_17486, 32) * 32) && ltid_in_bounds_17514;
            
            if (thread_active_17516) {
                // read operands
                {
                    eta_p_13180 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_17507)[sext_i32_i64(local_tid_17486) - sext_i32_i64(skip_threads_17515)]);
                }
            }
            // perform operation
            {
                bool inactive_17517 = slt64(srem64(sext_i32_i64(local_tid_17486), d_9096), sext_i32_i64(local_tid_17486) - sext_i32_i64(local_tid_17486 - skip_threads_17515));
                
                if (thread_active_17516 && inactive_17517) {
                    eta_p_13180 = eta_p_13181;
                }
                if (thread_active_17516) {
                    if (!inactive_17517) {
                        f16 defunc_0_op_res_13182 = eta_p_13180 + eta_p_13181;
                        
                        eta_p_13180 = defunc_0_op_res_13182;
                    }
                }
            }
            if (sle32(wave_sizze_17488, skip_threads_17515)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            if (thread_active_17516) {
                // write result
                {
                    ((volatile __local uint16_t *) red_arr_mem_17507)[sext_i32_i64(local_tid_17486)] = futrts_to_bits16(eta_p_13180);
                    eta_p_13181 = eta_p_13180;
                }
            }
            if (sle32(wave_sizze_17488, skip_threads_17515)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            skip_threads_17515 *= 2;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // last thread of block 'i' writes its result to offset 'i'
    {
        if ((local_tid_17486 - squot32(local_tid_17486, 32) * 32) == 31 && ltid_in_bounds_17514) {
            ((volatile __local uint16_t *) red_arr_mem_17507)[sext_i32_i64(squot32(local_tid_17486, 32))] = futrts_to_bits16(eta_p_13180);
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
    {
        int32_t skip_threads_17518;
        
        // read input for in-block scan
        {
            if (squot32(local_tid_17486, 32) == 0 && ltid_in_bounds_17514) {
                eta_p_17512 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_17507)[sext_i32_i64(local_tid_17486)]);
                if ((local_tid_17486 - squot32(local_tid_17486, 32) * 32) == 0) {
                    eta_p_17511 = eta_p_17512;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_17518 = 1;
            while (slt32(skip_threads_17518, 32)) {
                bool thread_active_17519 = sle32(skip_threads_17518, local_tid_17486 - squot32(local_tid_17486, 32) * 32) && (squot32(local_tid_17486, 32) == 0 && ltid_in_bounds_17514);
                
                if (thread_active_17519) {
                    // read operands
                    {
                        eta_p_17511 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_17507)[sext_i32_i64(local_tid_17486) - sext_i32_i64(skip_threads_17518)]);
                    }
                }
                // perform operation
                {
                    bool inactive_17520 = slt64(srem64(sext_i32_i64(local_tid_17486 * 32 + 32 - 1), d_9096), sext_i32_i64(local_tid_17486 * 32 + 32 - 1) - sext_i32_i64((local_tid_17486 - skip_threads_17518) * 32 + 32 - 1));
                    
                    if (thread_active_17519 && inactive_17520) {
                        eta_p_17511 = eta_p_17512;
                    }
                    if (thread_active_17519) {
                        if (!inactive_17520) {
                            f16 defunc_0_op_res_17513 = eta_p_17511 + eta_p_17512;
                            
                            eta_p_17511 = defunc_0_op_res_17513;
                        }
                    }
                }
                if (sle32(wave_sizze_17488, skip_threads_17518)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (thread_active_17519) {
                    // write result
                    {
                        ((volatile __local uint16_t *) red_arr_mem_17507)[sext_i32_i64(local_tid_17486)] = futrts_to_bits16(eta_p_17511);
                        eta_p_17512 = eta_p_17511;
                    }
                }
                if (sle32(wave_sizze_17488, skip_threads_17518)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_17518 *= 2;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    no_carry_in_17521 = squot32(local_tid_17486, 32) == 0 || !ltid_in_bounds_17514;
    // carry-in for every block except the first
    {
        // read operands
        {
            if (!no_carry_in_17521) {
                eta_p_13181 = eta_p_13180;
                eta_p_13180 = futrts_from_bits16(((__local uint16_t *) red_arr_mem_17507)[sext_i32_i64(squot32(local_tid_17486, 32)) - (int64_t) 1]);
            }
        }
        // perform operation
        {
            bool inactive_17522 = slt64(srem64(sext_i32_i64(local_tid_17486), d_9096), sext_i32_i64(local_tid_17486) - sext_i32_i64(squot32(local_tid_17486, 32) * 32 - 1));
            
            if (!no_carry_in_17521) {
                if (inactive_17522) {
                    eta_p_13180 = eta_p_13181;
                }
            }
            if (!no_carry_in_17521) {
                if (!inactive_17522) {
                    f16 defunc_0_op_res_13182 = eta_p_13180 + eta_p_13181;
                    
                    eta_p_13180 = defunc_0_op_res_13182;
                }
            }
        }
        // write final result
        {
            if (!no_carry_in_17521) {
                ((__local uint16_t *) red_arr_mem_17507)[sext_i32_i64(local_tid_17486)] = futrts_to_bits16(eta_p_13180);
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // restore correct values for first block
    {
        if (squot32(local_tid_17486, 32) == 0 && ltid_in_bounds_17514) {
            ((__local uint16_t *) red_arr_mem_17507)[sext_i32_i64(local_tid_17486)] = futrts_to_bits16(eta_p_13181);
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    barrier(CLK_LOCAL_MEM_FENCE);
    // Save result of reduction.
    {
        int32_t num_chunks_17523 = sdiv_up32(sext_i64_i32(d_9096) * sext_i64_i32(d_9096), sext_i64_i32(computed_tblock_sizze_13139));
        
        for (int32_t chunk_i_17524 = 0; chunk_i_17524 < num_chunks_17523; chunk_i_17524++) {
            int32_t i_17525 = chunk_i_17524 * sext_i64_i32(computed_tblock_sizze_13139) + local_tid_17486;
            
            if (slt32(i_17525, sext_i64_i32(d_9096) * sext_i64_i32(d_9096))) {
                ((__local uint16_t *) color_17241)[sext_i32_i64(squot32(i_17525, sext_i64_i32(d_9096))) * d_9096 + sext_i32_i64(i_17525 - squot32(i_17525, sext_i64_i32(d_9096)) * sext_i64_i32(d_9096))] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) red_arr_mem_17507)[d_9096 - (int64_t) 1 + sext_i32_i64(squot32(i_17525, sext_i64_i32(d_9096))) * (d_9096 * d_9096) + sext_i32_i64(i_17525 - squot32(i_17525, sext_i64_i32(d_9096)) * sext_i64_i32(d_9096)) * d_9096]));
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    num_chunks_17526 = sdiv_up32(sext_i64_i32(d_9096) * sext_i64_i32(d_9096), sext_i64_i32(computed_tblock_sizze_13139));
    for (int32_t chunk_i_17527 = 0; chunk_i_17527 < num_chunks_17526; chunk_i_17527++) {
        int32_t i_17528 = chunk_i_17527 * sext_i64_i32(computed_tblock_sizze_13139) + local_tid_17486;
        
        if (slt32(i_17528, sext_i64_i32(d_9096) * sext_i64_i32(d_9096))) {
            ((__global uint16_t *) mem_16552)[gtid_13148 * (d_9096 * d_9096) + sext_i32_i64(squot32(i_17528, sext_i64_i32(d_9096))) * d_9096 + sext_i32_i64(i_17528 - squot32(i_17528, sext_i64_i32(d_9096)) * sext_i64_i32(d_9096))] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) color_17241)[sext_i32_i64(squot32(i_17528, sext_i64_i32(d_9096))) * d_9096 + sext_i32_i64(i_17528 - squot32(i_17528, sext_i64_i32(d_9096)) * sext_i64_i32(d_9096))]));
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
  error_4:
    return;
}
FUTHARK_KERNEL
void matmul_tiledzisegmap_intrablock_13210(__global int *global_failure, int failure_is_an_option, __global int64_t *global_failure_args, int64_t md_9095, int64_t d_9096, int64_t m_12166, int64_t one_intra_par_min_13130, int64_t computed_tblock_sizze_13204, int64_t bytes_16534, __global unsigned char *A_mem_16531, __global unsigned char *B_mem_16532, __global unsigned char *mem_16541)
{
    volatile __local unsigned char *red_arr_mem_17550_backing_2 = &shared_mem[0];
    const int64_t red_arr_mem_17550_backing_2_offset = 0 + ((int64_t) 2 * (d_9096 * d_9096) + srem64((int64_t) 8 - srem64((int64_t) 2 * (d_9096 * d_9096), (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_17244_backing_1 = &shared_mem[red_arr_mem_17550_backing_2_offset];
    const int64_t color_17244_backing_1_offset = red_arr_mem_17550_backing_2_offset + (bytes_16534 + srem64((int64_t) 8 - srem64(bytes_16534, (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_17243_backing_0 = &shared_mem[color_17244_backing_1_offset];
    const int64_t color_17243_backing_0_offset = color_17244_backing_1_offset + (bytes_16534 + srem64((int64_t) 8 - srem64(bytes_16534, (int64_t) 8), (int64_t) 8));
    volatile __local int local_failure;
    
    if (failure_is_an_option) {
        int failed = *global_failure >= 0;
        
        if (failed)
            return;
    }
    local_failure = 0;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t local_tid_17533;
    int32_t tblock_sizze_17536;
    int32_t wave_sizze_17535;
    int32_t block_id_17534;
    int32_t global_tid_17532;
    int64_t phys_tblock_id_13210;
    int64_t slice_17538;
    int64_t ltid_pre_17537;
    int64_t remnant_17539;
    int64_t slice_17542;
    int64_t slice_17543;
    int64_t ltid_pre_17540;
    int64_t remnant_17544;
    int64_t ltid_pre_17541;
    int64_t remnant_17545;
    int64_t slice_17546;
    int64_t slice_17547;
    int64_t gtid_13208;
    int64_t remnant_17548;
    int64_t gtid_13209;
    int64_t remnant_17549;
    __local unsigned char *color_17243;
    __local unsigned char *color_17244;
    int64_t index_primexp_16032;
    int64_t phys_tid_13221;
    int64_t gtid_13220;
    int64_t binop_x_16012;
    int64_t phys_tid_13232;
    __local unsigned char *red_arr_mem_17550;
    int64_t gtid_13230;
    int64_t gtid_13231;
    int64_t dims_flat_17552;
    f16 eta_p_13233;
    f16 eta_p_13234;
    f16 eta_p_17554;
    f16 eta_p_17555;
    bool ltid_in_bounds_17557;
    int32_t skip_threads_17558;
    bool no_carry_in_17564;
    int32_t num_chunks_17569;
    
    local_tid_17533 = get_local_id(0);
    tblock_sizze_17536 = get_local_size(0);
    wave_sizze_17535 = LOCKSTEP_WIDTH;
    block_id_17534 = get_tblock_id(0);
    global_tid_17532 = block_id_17534 * tblock_sizze_17536 + local_tid_17533;
    phys_tblock_id_13210 = sext_i32_i64(block_id_17534);
    slice_17538 = d_9096;
    ltid_pre_17537 = sext_i32_i64(local_tid_17533);
    remnant_17539 = sext_i32_i64(local_tid_17533) - ltid_pre_17537;
    slice_17542 = d_9096;
    slice_17543 = d_9096 * slice_17542;
    ltid_pre_17540 = squot64(sext_i32_i64(local_tid_17533), slice_17542);
    remnant_17544 = sext_i32_i64(local_tid_17533) - ltid_pre_17540 * slice_17542;
    ltid_pre_17541 = remnant_17544;
    remnant_17545 = remnant_17544 - ltid_pre_17541;
    slice_17546 = d_9096;
    slice_17547 = m_12166 * slice_17546;
    gtid_13208 = squot64(sext_i32_i64(block_id_17534), slice_17546);
    remnant_17548 = sext_i32_i64(block_id_17534) - gtid_13208 * slice_17546;
    gtid_13209 = remnant_17548;
    remnant_17549 = remnant_17548 - gtid_13209;
    color_17243 = (__local unsigned char *) color_17243_backing_0;
    color_17244 = (__local unsigned char *) color_17244_backing_1;
    index_primexp_16032 = mul64(d_9096, gtid_13208);
    phys_tid_13221 = sext_i32_i64(local_tid_17533);
    gtid_13220 = sext_i32_i64(sext_i64_i32(ltid_pre_17537));
    if (slt64(gtid_13220, d_9096)) {
        int64_t tmp_13223;
        bool x_13224;
        bool y_13225;
        bool bounds_check_13226;
        bool index_certs_13227;
        f16 lifted_lambda_res_13228;
        
        tmp_13223 = add64(gtid_13220, index_primexp_16032);
        x_13224 = sle64((int64_t) 0, tmp_13223);
        y_13225 = slt64(tmp_13223, md_9095);
        bounds_check_13226 = x_13224 && y_13225;
        if (!bounds_check_13226) {
            {
                if (atomic_cmpxchg_i32_global(global_failure, -1, 11) == -1) {
                    global_failure_args[0] = (int64_t) tmp_13223;
                    global_failure_args[1] = (int64_t) md_9095;
                    ;
                }
                local_failure = 1;
                goto error_0;
            }
        }
        lifted_lambda_res_13228 = futrts_from_bits16(((__global uint16_t *) A_mem_16531)[gtid_13209 * md_9095 + tmp_13223]);
        ((__local uint16_t *) color_17244)[gtid_13220] = futrts_to_bits16(lifted_lambda_res_13228);
    }
    
  error_0:
    barrier(CLK_LOCAL_MEM_FENCE);
    if (local_failure)
        return;
    barrier(CLK_LOCAL_MEM_FENCE);
    binop_x_16012 = one_intra_par_min_13130 * gtid_13208;
    phys_tid_13232 = sext_i32_i64(local_tid_17533);
    red_arr_mem_17550 = (__local unsigned char *) red_arr_mem_17550_backing_2;
    gtid_13230 = sext_i32_i64(sext_i64_i32(ltid_pre_17540));
    gtid_13231 = sext_i32_i64(sext_i64_i32(ltid_pre_17541));
    if (slt64(gtid_13230, d_9096) && slt64(gtid_13231, d_9096)) {
        f16 eta_p_13237;
        int64_t binop_y_16013;
        int64_t binop_x_16014;
        int64_t binop_x_16015;
        int64_t new_index_16016;
        int64_t binop_y_16028;
        int64_t new_index_16029;
        f16 eta_p_13238;
        f16 defunc_0_f_res_13239;
        
        eta_p_13237 = futrts_from_bits16(((__local uint16_t *) color_17244)[gtid_13231]);
        binop_y_16013 = d_9096 * gtid_13231;
        binop_x_16014 = binop_x_16012 + binop_y_16013;
        binop_x_16015 = gtid_13230 + binop_x_16014;
        new_index_16016 = squot64(binop_x_16015, d_9096);
        binop_y_16028 = d_9096 * new_index_16016;
        new_index_16029 = binop_x_16015 - binop_y_16028;
        eta_p_13238 = futrts_from_bits16(((__global uint16_t *) B_mem_16532)[new_index_16016 * d_9096 + new_index_16029]);
        defunc_0_f_res_13239 = eta_p_13237 * eta_p_13238;
        ((__local uint16_t *) red_arr_mem_17550)[gtid_13230 * d_9096 + gtid_13231] = futrts_to_bits16(defunc_0_f_res_13239);
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    dims_flat_17552 = d_9096 * d_9096;
    ltid_in_bounds_17557 = slt64(sext_i32_i64(local_tid_17533), d_9096 * d_9096);
    // read input for in-block scan
    {
        if (ltid_in_bounds_17557) {
            eta_p_13234 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_17550)[sext_i32_i64(local_tid_17533)]);
            if ((local_tid_17533 - squot32(local_tid_17533, 32) * 32) == 0) {
                eta_p_13233 = eta_p_13234;
            }
        }
    }
    // in-block scan (hopefully no barriers needed)
    {
        skip_threads_17558 = 1;
        while (slt32(skip_threads_17558, 32)) {
            bool thread_active_17559 = sle32(skip_threads_17558, local_tid_17533 - squot32(local_tid_17533, 32) * 32) && ltid_in_bounds_17557;
            
            if (thread_active_17559) {
                // read operands
                {
                    eta_p_13233 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_17550)[sext_i32_i64(local_tid_17533) - sext_i32_i64(skip_threads_17558)]);
                }
            }
            // perform operation
            {
                bool inactive_17560 = slt64(srem64(sext_i32_i64(local_tid_17533), d_9096), sext_i32_i64(local_tid_17533) - sext_i32_i64(local_tid_17533 - skip_threads_17558));
                
                if (thread_active_17559 && inactive_17560) {
                    eta_p_13233 = eta_p_13234;
                }
                if (thread_active_17559) {
                    if (!inactive_17560) {
                        f16 defunc_0_op_res_13235 = eta_p_13233 + eta_p_13234;
                        
                        eta_p_13233 = defunc_0_op_res_13235;
                    }
                }
            }
            if (sle32(wave_sizze_17535, skip_threads_17558)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            if (thread_active_17559) {
                // write result
                {
                    ((volatile __local uint16_t *) red_arr_mem_17550)[sext_i32_i64(local_tid_17533)] = futrts_to_bits16(eta_p_13233);
                    eta_p_13234 = eta_p_13233;
                }
            }
            if (sle32(wave_sizze_17535, skip_threads_17558)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            skip_threads_17558 *= 2;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // last thread of block 'i' writes its result to offset 'i'
    {
        if ((local_tid_17533 - squot32(local_tid_17533, 32) * 32) == 31 && ltid_in_bounds_17557) {
            ((volatile __local uint16_t *) red_arr_mem_17550)[sext_i32_i64(squot32(local_tid_17533, 32))] = futrts_to_bits16(eta_p_13233);
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
    {
        int32_t skip_threads_17561;
        
        // read input for in-block scan
        {
            if (squot32(local_tid_17533, 32) == 0 && ltid_in_bounds_17557) {
                eta_p_17555 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_17550)[sext_i32_i64(local_tid_17533)]);
                if ((local_tid_17533 - squot32(local_tid_17533, 32) * 32) == 0) {
                    eta_p_17554 = eta_p_17555;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_17561 = 1;
            while (slt32(skip_threads_17561, 32)) {
                bool thread_active_17562 = sle32(skip_threads_17561, local_tid_17533 - squot32(local_tid_17533, 32) * 32) && (squot32(local_tid_17533, 32) == 0 && ltid_in_bounds_17557);
                
                if (thread_active_17562) {
                    // read operands
                    {
                        eta_p_17554 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_17550)[sext_i32_i64(local_tid_17533) - sext_i32_i64(skip_threads_17561)]);
                    }
                }
                // perform operation
                {
                    bool inactive_17563 = slt64(srem64(sext_i32_i64(local_tid_17533 * 32 + 32 - 1), d_9096), sext_i32_i64(local_tid_17533 * 32 + 32 - 1) - sext_i32_i64((local_tid_17533 - skip_threads_17561) * 32 + 32 - 1));
                    
                    if (thread_active_17562 && inactive_17563) {
                        eta_p_17554 = eta_p_17555;
                    }
                    if (thread_active_17562) {
                        if (!inactive_17563) {
                            f16 defunc_0_op_res_17556 = eta_p_17554 + eta_p_17555;
                            
                            eta_p_17554 = defunc_0_op_res_17556;
                        }
                    }
                }
                if (sle32(wave_sizze_17535, skip_threads_17561)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (thread_active_17562) {
                    // write result
                    {
                        ((volatile __local uint16_t *) red_arr_mem_17550)[sext_i32_i64(local_tid_17533)] = futrts_to_bits16(eta_p_17554);
                        eta_p_17555 = eta_p_17554;
                    }
                }
                if (sle32(wave_sizze_17535, skip_threads_17561)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_17561 *= 2;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    no_carry_in_17564 = squot32(local_tid_17533, 32) == 0 || !ltid_in_bounds_17557;
    // carry-in for every block except the first
    {
        // read operands
        {
            if (!no_carry_in_17564) {
                eta_p_13234 = eta_p_13233;
                eta_p_13233 = futrts_from_bits16(((__local uint16_t *) red_arr_mem_17550)[sext_i32_i64(squot32(local_tid_17533, 32)) - (int64_t) 1]);
            }
        }
        // perform operation
        {
            bool inactive_17565 = slt64(srem64(sext_i32_i64(local_tid_17533), d_9096), sext_i32_i64(local_tid_17533) - sext_i32_i64(squot32(local_tid_17533, 32) * 32 - 1));
            
            if (!no_carry_in_17564) {
                if (inactive_17565) {
                    eta_p_13233 = eta_p_13234;
                }
            }
            if (!no_carry_in_17564) {
                if (!inactive_17565) {
                    f16 defunc_0_op_res_13235 = eta_p_13233 + eta_p_13234;
                    
                    eta_p_13233 = defunc_0_op_res_13235;
                }
            }
        }
        // write final result
        {
            if (!no_carry_in_17564) {
                ((__local uint16_t *) red_arr_mem_17550)[sext_i32_i64(local_tid_17533)] = futrts_to_bits16(eta_p_13233);
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // restore correct values for first block
    {
        if (squot32(local_tid_17533, 32) == 0 && ltid_in_bounds_17557) {
            ((__local uint16_t *) red_arr_mem_17550)[sext_i32_i64(local_tid_17533)] = futrts_to_bits16(eta_p_13234);
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    barrier(CLK_LOCAL_MEM_FENCE);
    // Save result of reduction.
    {
        int32_t num_chunks_17566 = sdiv_up32(sext_i64_i32(d_9096), sext_i64_i32(computed_tblock_sizze_13204));
        
        for (int32_t chunk_i_17567 = 0; chunk_i_17567 < num_chunks_17566; chunk_i_17567++) {
            int32_t i_17568 = chunk_i_17567 * sext_i64_i32(computed_tblock_sizze_13204) + local_tid_17533;
            
            if (slt32(i_17568, sext_i64_i32(d_9096))) {
                ((__local uint16_t *) color_17243)[sext_i32_i64(i_17568)] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) red_arr_mem_17550)[d_9096 - (int64_t) 1 + sext_i32_i64(i_17568) * d_9096]));
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    num_chunks_17569 = sdiv_up32(sext_i64_i32(d_9096), sext_i64_i32(computed_tblock_sizze_13204));
    for (int32_t chunk_i_17570 = 0; chunk_i_17570 < num_chunks_17569; chunk_i_17570++) {
        int32_t i_17571 = chunk_i_17570 * sext_i64_i32(computed_tblock_sizze_13204) + local_tid_17533;
        
        if (slt32(i_17571, sext_i64_i32(d_9096))) {
            ((__global uint16_t *) mem_16541)[gtid_13208 * (d_9096 * d_9096) + gtid_13209 * d_9096 + sext_i32_i64(i_17571)] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) color_17243)[sext_i32_i64(i_17571)]));
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
  error_4:
    return;
}
FUTHARK_KERNEL_SIZED(matmul_tiledzisegred_large_13274_dim1, 1, 1)
void matmul_tiledzisegred_large_13274(__global int *global_failure, int64_t d_9096, int64_t m_12166, int64_t num_tblocks_13268, int64_t blocks_per_segment_17616, int64_t q_17617, int64_t num_virtblocks_17618, int64_t threads_per_segment_17619, __global unsigned char *mem_16573, __global unsigned char *mem_16577, __global unsigned char *segred_tmp_mem_17620, __global unsigned char *counters_mem_17622)
{
    #define segred_tblock_sizze_13267 (matmul_tiledzisegred_large_13274zisegred_tblock_sizze_13267)
    #define chunk_sizze_17585 (matmul_tiledzisegred_large_13274zichunk_sizze_17585)
    
    volatile __local unsigned char *sync_arr_mem_17631_backing_1 = &shared_mem[0];
    const int64_t sync_arr_mem_17631_backing_1_offset = 0 + 8;
    volatile __local unsigned char *red_arr_f16_mem_17629_backing_0 = &shared_mem[sync_arr_mem_17631_backing_1_offset];
    const int64_t red_arr_f16_mem_17629_backing_0_offset = sync_arr_mem_17631_backing_1_offset + ((int64_t) 2 * segred_tblock_sizze_13267 + srem64((int64_t) 8 - srem64((int64_t) 2 * segred_tblock_sizze_13267, (int64_t) 8), (int64_t) 8));
    
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_17625;
    int32_t tblock_sizze_17628;
    int32_t wave_sizze_17627;
    int32_t block_id_17626;
    int32_t global_tid_17624;
    int64_t phys_tid_13274;
    __local unsigned char *red_arr_f16_mem_17629;
    __local unsigned char *sync_arr_mem_17631;
    int32_t phys_tblock_id_17633;
    int32_t iterations_17634;
    
    local_tid_17625 = get_local_id(0);
    tblock_sizze_17628 = get_local_size(0);
    wave_sizze_17627 = LOCKSTEP_WIDTH;
    block_id_17626 = get_tblock_id(0);
    global_tid_17624 = block_id_17626 * tblock_sizze_17628 + local_tid_17625;
    phys_tid_13274 = sext_i32_i64(global_tid_17624);
    red_arr_f16_mem_17629 = (__local unsigned char *) red_arr_f16_mem_17629_backing_0;
    sync_arr_mem_17631 = (__local unsigned char *) sync_arr_mem_17631_backing_1;
    phys_tblock_id_17633 = get_tblock_id(0);
    iterations_17634 = sdiv_up32(sext_i64_i32(num_virtblocks_17618) - phys_tblock_id_17633, sext_i64_i32(num_tblocks_13268));
    for (int32_t i_17635 = 0; i_17635 < iterations_17634; i_17635++) {
        int32_t virt_tblock_id_17636;
        int64_t flat_segment_id_17637;
        int64_t global_tid_17638;
        int64_t slice_17639;
        int64_t slice_17640;
        int64_t gtid_13271;
        int64_t remnant_17641;
        int64_t gtid_13272;
        int64_t remnant_17642;
        int64_t gtid_13273;
        f16 eta_p_block_res_acc_17643;
        f16 eta_p_13275;
        f16 eta_p_13276;
        int64_t tblock_id_in_segment_17647;
        int64_t block_base_offset_17648;
        int32_t offset_17651;
        int32_t skip_waves_17652;
        f16 eta_p_17644;
        f16 eta_p_17645;
        
        virt_tblock_id_17636 = phys_tblock_id_17633 + i_17635 * sext_i64_i32(num_tblocks_13268);
        flat_segment_id_17637 = squot64(sext_i32_i64(virt_tblock_id_17636), blocks_per_segment_17616);
        global_tid_17638 = srem64(sext_i32_i64(virt_tblock_id_17636) * segred_tblock_sizze_13267 + sext_i32_i64(local_tid_17625), threads_per_segment_17619);
        slice_17639 = d_9096;
        slice_17640 = d_9096 * slice_17639;
        gtid_13271 = squot64(flat_segment_id_17637, slice_17639);
        remnant_17641 = flat_segment_id_17637 - gtid_13271 * slice_17639;
        gtid_13272 = remnant_17641;
        remnant_17642 = remnant_17641 - gtid_13272;
        // ne-initialise the outer (per-block) accumulator(s)
        {
            eta_p_block_res_acc_17643 = (f16) 0.0F;
        }
        tblock_id_in_segment_17647 = squot64(global_tid_17638, segred_tblock_sizze_13267);
        block_base_offset_17648 = tblock_id_in_segment_17647 * q_17617 * segred_tblock_sizze_13267;
        for (int64_t i_17649 = 0; i_17649 < q_17617; i_17649++) {
            int64_t block_offset_17650 = block_base_offset_17648 + i_17649 * segred_tblock_sizze_13267;
            
            gtid_13273 = global_tid_17638 + threads_per_segment_17619 * i_17649;
            if (slt64(gtid_13273, m_12166)) {
                // apply map function(s)
                {
                    // apply map function
                    {
                        f16 x_13280 = futrts_from_bits16(((__global uint16_t *) mem_16573)[gtid_13273 + gtid_13271 * (m_12166 * d_9096) + gtid_13272 * m_12166]);
                        
                        // load accumulator(s)
                        {
                            eta_p_13275 = eta_p_block_res_acc_17643;
                        }
                        // load next value(s)
                        {
                            eta_p_13276 = x_13280;
                        }
                        // apply reduction operator(s)
                        {
                            f16 defunc_0_f_res_13277 = eta_p_13275 + eta_p_13276;
                            
                            // store in accumulator(s)
                            {
                                eta_p_block_res_acc_17643 = defunc_0_f_res_13277;
                            }
                        }
                    }
                }
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // store accs. prims go in lmem; non-prims in params (in global mem)
        {
            ((__local uint16_t *) red_arr_f16_mem_17629)[sext_i32_i64(local_tid_17625)] = futrts_to_bits16(eta_p_block_res_acc_17643);
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        skip_waves_17652 = 1;
        offset_17651 = 0;
        // participating threads read initial accumulator
        {
            if (slt32(local_tid_17625, sext_i64_i32(segred_tblock_sizze_13267))) {
                eta_p_17644 = futrts_from_bits16(((__local uint16_t *) red_arr_f16_mem_17629)[sext_i32_i64(local_tid_17625 + offset_17651)]);
            }
        }
        offset_17651 = 1;
        while (slt32(offset_17651, wave_sizze_17627)) {
            if (slt32(local_tid_17625 + offset_17651, sext_i64_i32(segred_tblock_sizze_13267)) && ((local_tid_17625 - squot32(local_tid_17625, wave_sizze_17627) * wave_sizze_17627) & (2 * offset_17651 - 1)) == 0) {
                // read array element
                {
                    eta_p_17645 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_f16_mem_17629)[sext_i32_i64(local_tid_17625 + offset_17651)]);
                }
                // apply reduction operation
                {
                    f16 defunc_0_f_res_17646 = eta_p_17644 + eta_p_17645;
                    
                    eta_p_17644 = defunc_0_f_res_17646;
                }
                // write result of operation
                {
                    ((volatile __local uint16_t *) red_arr_f16_mem_17629)[sext_i32_i64(local_tid_17625)] = futrts_to_bits16(eta_p_17644);
                }
            }
            offset_17651 *= 2;
        }
        while (slt32(skip_waves_17652, squot32(sext_i64_i32(segred_tblock_sizze_13267) + wave_sizze_17627 - 1, wave_sizze_17627))) {
            barrier(CLK_LOCAL_MEM_FENCE);
            offset_17651 = skip_waves_17652 * wave_sizze_17627;
            if (slt32(local_tid_17625 + offset_17651, sext_i64_i32(segred_tblock_sizze_13267)) && ((local_tid_17625 - squot32(local_tid_17625, wave_sizze_17627) * wave_sizze_17627) == 0 && (squot32(local_tid_17625, wave_sizze_17627) & (2 * skip_waves_17652 - 1)) == 0)) {
                // read array element
                {
                    eta_p_17645 = futrts_from_bits16(((__local uint16_t *) red_arr_f16_mem_17629)[sext_i32_i64(local_tid_17625 + offset_17651)]);
                }
                // apply reduction operation
                {
                    f16 defunc_0_f_res_17646 = eta_p_17644 + eta_p_17645;
                    
                    eta_p_17644 = defunc_0_f_res_17646;
                }
                // write result of operation
                {
                    ((__local uint16_t *) red_arr_f16_mem_17629)[sext_i32_i64(local_tid_17625)] = futrts_to_bits16(eta_p_17644);
                }
            }
            skip_waves_17652 *= 2;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_LOCAL_MEM_FENCE);
        // thread 0 updates per-block acc(s); rest reset to ne
        {
            if (sext_i32_i64(local_tid_17625) == (int64_t) 0) {
                eta_p_block_res_acc_17643 = eta_p_17644;
            } else {
                eta_p_block_res_acc_17643 = (f16) 0.0F;
            }
        }
        if (blocks_per_segment_17616 == (int64_t) 1) {
            // first thread in block saves final result to memory
            {
                if (local_tid_17625 == 0) {
                    ((__global uint16_t *) mem_16577)[gtid_13271 * d_9096 + gtid_13272] = futrts_to_bits16(eta_p_block_res_acc_17643);
                }
            }
        } else {
            int32_t old_counter_17653;
            bool is_last_block_17654;
            
            // first thread in block saves block result to global memory
            {
                if (local_tid_17625 == 0) {
                    ((__global uint16_t *) segred_tmp_mem_17620)[sext_i32_i64(virt_tblock_id_17636)] = futrts_to_bits16(eta_p_block_res_acc_17643);
                    mem_fence_global();
                    old_counter_17653 = atomic_add_i32_global(&((volatile __global int *) counters_mem_17622)[srem64(flat_segment_id_17637, (int64_t) 20480)], (int) 1);
                    ((__local bool *) sync_arr_mem_17631)[(int64_t) 0] = old_counter_17653 == sext_i64_i32(blocks_per_segment_17616 - (int64_t) 1);
                }
            }
            barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
            is_last_block_17654 = ((__local bool *) sync_arr_mem_17631)[(int64_t) 0];
            if (is_last_block_17654) {
                if (local_tid_17625 == 0) {
                    old_counter_17653 = atomic_add_i32_global(&((volatile __global int *) counters_mem_17622)[srem64(flat_segment_id_17637, (int64_t) 20480)], (int) sext_i64_i32((int64_t) 0 - blocks_per_segment_17616));
                }
                // read in the per-block-results
                {
                    int64_t read_per_thread_17655 = sdiv_up64(blocks_per_segment_17616, segred_tblock_sizze_13267);
                    
                    eta_p_13275 = (f16) 0.0F;
                    for (int64_t i_17656 = 0; i_17656 < read_per_thread_17655; i_17656++) {
                        int64_t block_res_id_17657 = sext_i32_i64(local_tid_17625) * read_per_thread_17655 + i_17656;
                        int64_t index_of_block_res_17658 = flat_segment_id_17637 * blocks_per_segment_17616 + block_res_id_17657;
                        
                        if (slt64(block_res_id_17657, blocks_per_segment_17616)) {
                            eta_p_13276 = futrts_from_bits16(((__global uint16_t *) segred_tmp_mem_17620)[index_of_block_res_17658]);
                            
                            f16 defunc_0_f_res_13277 = eta_p_13275 + eta_p_13276;
                            
                            eta_p_13275 = defunc_0_f_res_13277;
                        }
                    }
                }
                ((__local uint16_t *) red_arr_f16_mem_17629)[sext_i32_i64(local_tid_17625)] = futrts_to_bits16(eta_p_13275);
                barrier(CLK_LOCAL_MEM_FENCE);
                // reduce the per-block results
                {
                    int32_t offset_17659;
                    int32_t skip_waves_17660 = 1;
                    f16 eta_p_17644;
                    f16 eta_p_17645;
                    
                    offset_17659 = 0;
                    // participating threads read initial accumulator
                    {
                        if (slt32(local_tid_17625, sext_i64_i32(segred_tblock_sizze_13267))) {
                            eta_p_17644 = futrts_from_bits16(((__local uint16_t *) red_arr_f16_mem_17629)[sext_i32_i64(local_tid_17625 + offset_17659)]);
                        }
                    }
                    offset_17659 = 1;
                    while (slt32(offset_17659, wave_sizze_17627)) {
                        if (slt32(local_tid_17625 + offset_17659, sext_i64_i32(segred_tblock_sizze_13267)) && ((local_tid_17625 - squot32(local_tid_17625, wave_sizze_17627) * wave_sizze_17627) & (2 * offset_17659 - 1)) == 0) {
                            // read array element
                            {
                                eta_p_17645 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_f16_mem_17629)[sext_i32_i64(local_tid_17625 + offset_17659)]);
                            }
                            // apply reduction operation
                            {
                                f16 defunc_0_f_res_17646 = eta_p_17644 + eta_p_17645;
                                
                                eta_p_17644 = defunc_0_f_res_17646;
                            }
                            // write result of operation
                            {
                                ((volatile __local uint16_t *) red_arr_f16_mem_17629)[sext_i32_i64(local_tid_17625)] = futrts_to_bits16(eta_p_17644);
                            }
                        }
                        offset_17659 *= 2;
                    }
                    while (slt32(skip_waves_17660, squot32(sext_i64_i32(segred_tblock_sizze_13267) + wave_sizze_17627 - 1, wave_sizze_17627))) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                        offset_17659 = skip_waves_17660 * wave_sizze_17627;
                        if (slt32(local_tid_17625 + offset_17659, sext_i64_i32(segred_tblock_sizze_13267)) && ((local_tid_17625 - squot32(local_tid_17625, wave_sizze_17627) * wave_sizze_17627) == 0 && (squot32(local_tid_17625, wave_sizze_17627) & (2 * skip_waves_17660 - 1)) == 0)) {
                            // read array element
                            {
                                eta_p_17645 = futrts_from_bits16(((__local uint16_t *) red_arr_f16_mem_17629)[sext_i32_i64(local_tid_17625 + offset_17659)]);
                            }
                            // apply reduction operation
                            {
                                f16 defunc_0_f_res_17646 = eta_p_17644 + eta_p_17645;
                                
                                eta_p_17644 = defunc_0_f_res_17646;
                            }
                            // write result of operation
                            {
                                ((__local uint16_t *) red_arr_f16_mem_17629)[sext_i32_i64(local_tid_17625)] = futrts_to_bits16(eta_p_17644);
                            }
                        }
                        skip_waves_17660 *= 2;
                    }
                    barrier(CLK_LOCAL_MEM_FENCE);
                    // and back to memory with the final result
                    {
                        if (local_tid_17625 == 0) {
                            ((__global uint16_t *) mem_16577)[gtid_13271 * d_9096 + gtid_13272] = futrts_to_bits16(eta_p_17644);
                        }
                    }
                }
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_6:
    return;
    #undef segred_tblock_sizze_13267
    #undef chunk_sizze_17585
}
FUTHARK_KERNEL_SIZED(matmul_tiledzisegred_nonseg_12749_dim1, 1, 1)
void matmul_tiledzisegred_nonseg_12749(__global int *global_failure, int failure_is_an_option, __global int64_t *global_failure_args, int64_t md_9095, int64_t d_9096, int64_t m_12166, int64_t num_tblocks_12744, int64_t one_intra_par_min_13130, int64_t num_threads_17296, int64_t ctx_17303, int64_t num_threads_17438, __global unsigned char *A_mem_16531, __global unsigned char *B_mem_16532, __global unsigned char *mem_16613, __global unsigned char *color_17239, __global unsigned char *color_17240, __global unsigned char *counters_mem_17414, __global unsigned char *segred_tmp_mem_17436)
{
    #define segred_tblock_sizze_12743 (matmul_tiledzisegred_nonseg_12749zisegred_tblock_sizze_12743)
    #define chunk_sizze_17413 (matmul_tiledzisegred_nonseg_12749zichunk_sizze_17413)
    
    volatile __local unsigned char *sync_arr_mem_17446_backing_1 = &shared_mem[0];
    const int64_t sync_arr_mem_17446_backing_1_offset = 0 + 8;
    volatile __local unsigned char *red_arr_f16_mem_17444_backing_0 = &shared_mem[sync_arr_mem_17446_backing_1_offset];
    const int64_t red_arr_f16_mem_17444_backing_0_offset = sync_arr_mem_17446_backing_1_offset + ((int64_t) 2 * segred_tblock_sizze_12743 + srem64((int64_t) 8 - srem64((int64_t) 2 * segred_tblock_sizze_12743, (int64_t) 8), (int64_t) 8));
    volatile __local int local_failure;
    
    if (failure_is_an_option) {
        int failed = *global_failure >= 0;
        
        if (failed)
            return;
    }
    local_failure = 0;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t local_tid_17440;
    int32_t tblock_sizze_17443;
    int32_t wave_sizze_17442;
    int32_t block_id_17441;
    int32_t global_tid_17439;
    int64_t phys_tid_12749;
    __local unsigned char *red_arr_f16_mem_17444;
    __local unsigned char *sync_arr_mem_17446;
    int64_t dummy_12747;
    int64_t gtid_12748;
    int64_t q_17448;
    f16 eta_p_12750;
    f16 eta_p_12751;
    int64_t tblock_id_in_segment_17454;
    int64_t block_base_offset_17455;
    int32_t old_counter_17469;
    bool is_last_block_17473;
    
    local_tid_17440 = get_local_id(0);
    tblock_sizze_17443 = get_local_size(0);
    wave_sizze_17442 = LOCKSTEP_WIDTH;
    block_id_17441 = get_tblock_id(0);
    global_tid_17439 = block_id_17441 * tblock_sizze_17443 + local_tid_17440;
    phys_tid_12749 = sext_i32_i64(global_tid_17439);
    red_arr_f16_mem_17444 = (__local unsigned char *) red_arr_f16_mem_17444_backing_0;
    sync_arr_mem_17446 = (__local unsigned char *) sync_arr_mem_17446_backing_1;
    dummy_12747 = (int64_t) 0;
    gtid_12748 = (int64_t) 0;
    q_17448 = sdiv_up64(m_12166, sext_i32_i64(sext_i64_i32(segred_tblock_sizze_12743 * num_tblocks_12744)) * chunk_sizze_17413);
    // ne-initialise the outer (per-block) accumulator(s)
    {
        for (int64_t nest_i_17449 = 0; nest_i_17449 < d_9096; nest_i_17449++) {
            for (int64_t nest_i_17450 = 0; nest_i_17450 < d_9096; nest_i_17450++) {
                ((__global uint16_t *) segred_tmp_mem_17436)[sext_i32_i64(local_tid_17440) + sext_i32_i64(block_id_17441) * (segred_tblock_sizze_12743 * d_9096 * d_9096) + nest_i_17449 * (segred_tblock_sizze_12743 * d_9096) + nest_i_17450 * segred_tblock_sizze_12743] = futrts_to_bits16((f16) 0.0F);
            }
        }
    }
    tblock_id_in_segment_17454 = squot64(phys_tid_12749, segred_tblock_sizze_12743);
    block_base_offset_17455 = tblock_id_in_segment_17454 * q_17448 * segred_tblock_sizze_12743;
    for (int64_t i_17456 = 0; i_17456 < q_17448; i_17456++) {
        int64_t block_offset_17457 = block_base_offset_17455 + i_17456 * segred_tblock_sizze_12743;
        
        gtid_12748 = phys_tid_12749 + num_threads_17438 * i_17456;
        if (slt64(gtid_12748, m_12166)) {
            // apply map function(s)
            {
                // apply map function
                {
                    int64_t zp_rhs_12755 = mul64(d_9096, gtid_12748);
                    int64_t binop_x_16430 = gtid_12748 * one_intra_par_min_13130;
                    
                    for (int64_t i_16313 = 0; i_16313 < d_9096; i_16313++) {
                        for (int64_t i_16317 = 0; i_16317 < d_9096; i_16317++) {
                            int64_t tmp_12764 = add64(zp_rhs_12755, i_16317);
                            bool x_12765 = sle64((int64_t) 0, tmp_12764);
                            bool y_12766 = slt64(tmp_12764, md_9095);
                            bool bounds_check_12767 = x_12765 && y_12766;
                            bool index_certs_12768;
                            
                            if (!bounds_check_12767) {
                                {
                                    if (atomic_cmpxchg_i32_global(global_failure, -1, 9) == -1) {
                                        global_failure_args[0] = (int64_t) tmp_12764;
                                        global_failure_args[1] = (int64_t) md_9095;
                                        ;
                                    }
                                    local_failure = 1;
                                    goto error_0;
                                }
                            }
                            for (int64_t i_0 = 0; i_0 < (int64_t) 1; i_0++) {
                                ((__global uint16_t *) color_17239)[phys_tid_12749 + num_threads_17296 * i_16317 + i_0 * num_threads_17296] = futrts_to_bits16(futrts_from_bits16(((__global uint16_t *) A_mem_16531)[i_16313 * md_9095 + tmp_12764 + i_0]));
                            }
                        }
                        
                        int64_t binop_y_17313 = d_9096 * i_16313;
                        int64_t binop_y_17314 = num_threads_17296 * binop_y_17313;
                        int64_t ctx_17315 = phys_tid_12749 + binop_y_17314;
                        
                        for (int64_t i_16321 = 0; i_16321 < d_9096; i_16321++) {
                            f16 defunc_0_f_res_12772;
                            f16 redout_16323 = (f16) 0.0F;
                            
                            for (int64_t i_16324 = 0; i_16324 < d_9096; i_16324++) {
                                f16 eta_p_12776 = futrts_from_bits16(((__global uint16_t *) color_17239)[phys_tid_12749 + i_16324 * num_threads_17296]);
                                int64_t binop_y_16431 = d_9096 * i_16324;
                                int64_t binop_x_16432 = binop_x_16430 + binop_y_16431;
                                int64_t binop_x_16433 = i_16321 + binop_x_16432;
                                int64_t new_index_16434 = squot64(binop_x_16433, d_9096);
                                int64_t binop_y_16446 = d_9096 * new_index_16434;
                                int64_t new_index_16447 = binop_x_16433 - binop_y_16446;
                                f16 eta_p_12777 = futrts_from_bits16(((__global uint16_t *) B_mem_16532)[new_index_16434 * d_9096 + new_index_16447]);
                                f16 defunc_0_f_res_12778 = eta_p_12776 * eta_p_12777;
                                f16 defunc_0_op_res_12775 = defunc_0_f_res_12778 + redout_16323;
                                f16 redout_tmp_17461 = defunc_0_op_res_12775;
                                
                                redout_16323 = redout_tmp_17461;
                            }
                            defunc_0_f_res_12772 = redout_16323;
                            ((__global uint16_t *) color_17240)[ctx_17315 + i_16321 * num_threads_17296] = futrts_to_bits16(defunc_0_f_res_12772);
                        }
                        if (!((phys_tid_12749 + i_16313 * ctx_17303) == ctx_17315)) {
                            for (int64_t i_0 = 0; i_0 < d_9096; i_0++) {
                                ((__global uint16_t *) color_17240)[phys_tid_12749 + i_16313 * ctx_17303 + i_0 * num_threads_17296] = futrts_to_bits16(futrts_from_bits16(((__global uint16_t *) color_17240)[ctx_17315 + i_0 * num_threads_17296]));
                            }
                        }
                    }
                    for (int64_t nest_i_17462 = 0; nest_i_17462 < d_9096; nest_i_17462++) {
                        for (int64_t nest_i_17463 = 0; nest_i_17463 < d_9096; nest_i_17463++) {
                            // load accumulator(s)
                            {
                                eta_p_12750 = futrts_from_bits16(((__global uint16_t *) segred_tmp_mem_17436)[sext_i32_i64(local_tid_17440) + sext_i32_i64(block_id_17441) * (segred_tblock_sizze_12743 * d_9096 * d_9096) + nest_i_17462 * (segred_tblock_sizze_12743 * d_9096) + nest_i_17463 * segred_tblock_sizze_12743]);
                            }
                            // load next value(s)
                            {
                                eta_p_12751 = futrts_from_bits16(((__global uint16_t *) color_17240)[phys_tid_12749 + (nest_i_17462 * ctx_17303 + nest_i_17463 * num_threads_17296)]);
                            }
                            // apply reduction operator(s)
                            {
                                f16 defunc_0_f_res_12752 = eta_p_12750 + eta_p_12751;
                                
                                // store in accumulator(s)
                                {
                                    ((__global uint16_t *) segred_tmp_mem_17436)[sext_i32_i64(local_tid_17440) + sext_i32_i64(block_id_17441) * (segred_tblock_sizze_12743 * d_9096 * d_9096) + nest_i_17462 * (segred_tblock_sizze_12743 * d_9096) + nest_i_17463 * segred_tblock_sizze_12743] = futrts_to_bits16(defunc_0_f_res_12752);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    
  error_0:
    barrier(CLK_LOCAL_MEM_FENCE);
    if (local_failure)
        return;
    barrier(CLK_LOCAL_MEM_FENCE);
    for (int64_t nest_i_17464 = 0; nest_i_17464 < d_9096; nest_i_17464++) {
        for (int64_t nest_i_17465 = 0; nest_i_17465 < d_9096; nest_i_17465++) {
            int32_t offset_17467;
            int32_t skip_waves_17468;
            f16 eta_p_17451;
            f16 eta_p_17452;
            
            // store accs. prims go in lmem; non-prims in params (in global mem)
            {
                f16 tmp_17466 = futrts_from_bits16(((__global uint16_t *) segred_tmp_mem_17436)[sext_i32_i64(local_tid_17440) + sext_i32_i64(block_id_17441) * (segred_tblock_sizze_12743 * d_9096 * d_9096) + nest_i_17464 * (segred_tblock_sizze_12743 * d_9096) + nest_i_17465 * segred_tblock_sizze_12743]);
                
                ((__local uint16_t *) red_arr_f16_mem_17444)[sext_i32_i64(local_tid_17440)] = futrts_to_bits16(tmp_17466);
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            skip_waves_17468 = 1;
            offset_17467 = 0;
            // participating threads read initial accumulator
            {
                if (slt32(local_tid_17440, sext_i64_i32(segred_tblock_sizze_12743))) {
                    eta_p_17451 = futrts_from_bits16(((__local uint16_t *) red_arr_f16_mem_17444)[sext_i32_i64(local_tid_17440 + offset_17467)]);
                }
            }
            offset_17467 = 1;
            while (slt32(offset_17467, wave_sizze_17442)) {
                if (slt32(local_tid_17440 + offset_17467, sext_i64_i32(segred_tblock_sizze_12743)) && ((local_tid_17440 - squot32(local_tid_17440, wave_sizze_17442) * wave_sizze_17442) & (2 * offset_17467 - 1)) == 0) {
                    // read array element
                    {
                        eta_p_17452 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_f16_mem_17444)[sext_i32_i64(local_tid_17440 + offset_17467)]);
                    }
                    // apply reduction operation
                    {
                        f16 defunc_0_f_res_17453 = eta_p_17451 + eta_p_17452;
                        
                        eta_p_17451 = defunc_0_f_res_17453;
                    }
                    // write result of operation
                    {
                        ((volatile __local uint16_t *) red_arr_f16_mem_17444)[sext_i32_i64(local_tid_17440)] = futrts_to_bits16(eta_p_17451);
                    }
                }
                offset_17467 *= 2;
            }
            while (slt32(skip_waves_17468, squot32(sext_i64_i32(segred_tblock_sizze_12743) + wave_sizze_17442 - 1, wave_sizze_17442))) {
                barrier(CLK_LOCAL_MEM_FENCE);
                offset_17467 = skip_waves_17468 * wave_sizze_17442;
                if (slt32(local_tid_17440 + offset_17467, sext_i64_i32(segred_tblock_sizze_12743)) && ((local_tid_17440 - squot32(local_tid_17440, wave_sizze_17442) * wave_sizze_17442) == 0 && (squot32(local_tid_17440, wave_sizze_17442) & (2 * skip_waves_17468 - 1)) == 0)) {
                    // read array element
                    {
                        eta_p_17452 = futrts_from_bits16(((__local uint16_t *) red_arr_f16_mem_17444)[sext_i32_i64(local_tid_17440 + offset_17467)]);
                    }
                    // apply reduction operation
                    {
                        f16 defunc_0_f_res_17453 = eta_p_17451 + eta_p_17452;
                        
                        eta_p_17451 = defunc_0_f_res_17453;
                    }
                    // write result of operation
                    {
                        ((__local uint16_t *) red_arr_f16_mem_17444)[sext_i32_i64(local_tid_17440)] = futrts_to_bits16(eta_p_17451);
                    }
                }
                skip_waves_17468 *= 2;
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            barrier(CLK_LOCAL_MEM_FENCE);
            // thread 0 updates per-block acc(s); rest reset to ne
            {
                if (sext_i32_i64(local_tid_17440) == (int64_t) 0) {
                    ((__global uint16_t *) segred_tmp_mem_17436)[sext_i32_i64(local_tid_17440) + sext_i32_i64(block_id_17441) * (segred_tblock_sizze_12743 * d_9096 * d_9096) + nest_i_17464 * (segred_tblock_sizze_12743 * d_9096) + nest_i_17465 * segred_tblock_sizze_12743] = futrts_to_bits16(eta_p_17451);
                } else {
                    ((__global uint16_t *) segred_tmp_mem_17436)[sext_i32_i64(local_tid_17440) + sext_i32_i64(block_id_17441) * (segred_tblock_sizze_12743 * d_9096 * d_9096) + nest_i_17464 * (segred_tblock_sizze_12743 * d_9096) + nest_i_17465 * segred_tblock_sizze_12743] = futrts_to_bits16((f16) 0.0F);
                }
            }
        }
    }
    // first thread in block saves block result to global memory
    {
        if (local_tid_17440 == 0) {
            for (int64_t nest_i_17470 = 0; nest_i_17470 < d_9096; nest_i_17470++) {
                for (int64_t nest_i_17471 = 0; nest_i_17471 < d_9096; nest_i_17471++) {
                    f16 tmp_17472 = futrts_from_bits16(((__global uint16_t *) segred_tmp_mem_17436)[sext_i32_i64(local_tid_17440) + sext_i32_i64(block_id_17441) * (segred_tblock_sizze_12743 * d_9096 * d_9096) + nest_i_17470 * (segred_tblock_sizze_12743 * d_9096) + nest_i_17471 * segred_tblock_sizze_12743]);
                    
                    ((__global uint16_t *) segred_tmp_mem_17436)[sext_i32_i64(block_id_17441) * (segred_tblock_sizze_12743 * d_9096 * d_9096) + nest_i_17470 * (segred_tblock_sizze_12743 * d_9096) + nest_i_17471 * segred_tblock_sizze_12743] = futrts_to_bits16(tmp_17472);
                    mem_fence_global();
                }
            }
            old_counter_17469 = atomic_add_i32_global(&((volatile __global int *) counters_mem_17414)[(int64_t) 0], (int) 1);
            ((__local bool *) sync_arr_mem_17446)[(int64_t) 0] = old_counter_17469 == sext_i64_i32(num_tblocks_12744 - (int64_t) 1);
        }
    }
    barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    is_last_block_17473 = ((__local bool *) sync_arr_mem_17446)[(int64_t) 0];
    if (is_last_block_17473) {
        if (local_tid_17440 == 0) {
            old_counter_17469 = atomic_add_i32_global(&((volatile __global int *) counters_mem_17414)[(int64_t) 0], (int) sext_i64_i32((int64_t) 0 - num_tblocks_12744));
        }
        for (int64_t nest_i_17474 = 0; nest_i_17474 < d_9096; nest_i_17474++) {
            for (int64_t nest_i_17475 = 0; nest_i_17475 < d_9096; nest_i_17475++) {
                barrier(CLK_LOCAL_MEM_FENCE);
                // read in the per-block-results
                {
                    int64_t read_per_thread_17476 = sdiv_up64(num_tblocks_12744, segred_tblock_sizze_12743);
                    
                    eta_p_12750 = (f16) 0.0F;
                    for (int64_t i_17477 = 0; i_17477 < read_per_thread_17476; i_17477++) {
                        int64_t block_res_id_17478 = sext_i32_i64(local_tid_17440) * read_per_thread_17476 + i_17477;
                        int64_t index_of_block_res_17479 = block_res_id_17478;
                        
                        if (slt64(block_res_id_17478, num_tblocks_12744)) {
                            eta_p_12751 = futrts_from_bits16(((__global uint16_t *) segred_tmp_mem_17436)[index_of_block_res_17479 * (segred_tblock_sizze_12743 * d_9096 * d_9096) + nest_i_17474 * (segred_tblock_sizze_12743 * d_9096) + nest_i_17475 * segred_tblock_sizze_12743]);
                            
                            f16 defunc_0_f_res_12752 = eta_p_12750 + eta_p_12751;
                            
                            eta_p_12750 = defunc_0_f_res_12752;
                        }
                    }
                }
                ((__local uint16_t *) red_arr_f16_mem_17444)[sext_i32_i64(local_tid_17440)] = futrts_to_bits16(eta_p_12750);
                barrier(CLK_LOCAL_MEM_FENCE);
                // reduce the per-block results
                {
                    int32_t offset_17480;
                    int32_t skip_waves_17481 = 1;
                    f16 eta_p_17451;
                    f16 eta_p_17452;
                    
                    offset_17480 = 0;
                    // participating threads read initial accumulator
                    {
                        if (slt32(local_tid_17440, sext_i64_i32(segred_tblock_sizze_12743))) {
                            eta_p_17451 = futrts_from_bits16(((__local uint16_t *) red_arr_f16_mem_17444)[sext_i32_i64(local_tid_17440 + offset_17480)]);
                        }
                    }
                    offset_17480 = 1;
                    while (slt32(offset_17480, wave_sizze_17442)) {
                        if (slt32(local_tid_17440 + offset_17480, sext_i64_i32(segred_tblock_sizze_12743)) && ((local_tid_17440 - squot32(local_tid_17440, wave_sizze_17442) * wave_sizze_17442) & (2 * offset_17480 - 1)) == 0) {
                            // read array element
                            {
                                eta_p_17452 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_f16_mem_17444)[sext_i32_i64(local_tid_17440 + offset_17480)]);
                            }
                            // apply reduction operation
                            {
                                f16 defunc_0_f_res_17453 = eta_p_17451 + eta_p_17452;
                                
                                eta_p_17451 = defunc_0_f_res_17453;
                            }
                            // write result of operation
                            {
                                ((volatile __local uint16_t *) red_arr_f16_mem_17444)[sext_i32_i64(local_tid_17440)] = futrts_to_bits16(eta_p_17451);
                            }
                        }
                        offset_17480 *= 2;
                    }
                    while (slt32(skip_waves_17481, squot32(sext_i64_i32(segred_tblock_sizze_12743) + wave_sizze_17442 - 1, wave_sizze_17442))) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                        offset_17480 = skip_waves_17481 * wave_sizze_17442;
                        if (slt32(local_tid_17440 + offset_17480, sext_i64_i32(segred_tblock_sizze_12743)) && ((local_tid_17440 - squot32(local_tid_17440, wave_sizze_17442) * wave_sizze_17442) == 0 && (squot32(local_tid_17440, wave_sizze_17442) & (2 * skip_waves_17481 - 1)) == 0)) {
                            // read array element
                            {
                                eta_p_17452 = futrts_from_bits16(((__local uint16_t *) red_arr_f16_mem_17444)[sext_i32_i64(local_tid_17440 + offset_17480)]);
                            }
                            // apply reduction operation
                            {
                                f16 defunc_0_f_res_17453 = eta_p_17451 + eta_p_17452;
                                
                                eta_p_17451 = defunc_0_f_res_17453;
                            }
                            // write result of operation
                            {
                                ((__local uint16_t *) red_arr_f16_mem_17444)[sext_i32_i64(local_tid_17440)] = futrts_to_bits16(eta_p_17451);
                            }
                        }
                        skip_waves_17481 *= 2;
                    }
                    barrier(CLK_LOCAL_MEM_FENCE);
                    // and back to memory with the final result
                    {
                        if (local_tid_17440 == 0) {
                            ((__global uint16_t *) mem_16613)[nest_i_17474 * d_9096 + nest_i_17475] = futrts_to_bits16(eta_p_17451);
                        }
                    }
                }
            }
        }
    }
    
  error_5:
    return;
    #undef segred_tblock_sizze_12743
    #undef chunk_sizze_17413
}
FUTHARK_KERNEL_SIZED(matmul_tiledzisegred_small_13274_dim1, 1, 1)
void matmul_tiledzisegred_small_13274(__global int *global_failure, int64_t d_9096, int64_t m_12166, int64_t num_tblocks_13268, int64_t segment_sizze_nonzzero_17586, __global unsigned char *mem_16573, __global unsigned char *mem_16577)
{
    #define segred_tblock_sizze_13267 (matmul_tiledzisegred_small_13274zisegred_tblock_sizze_13267)
    
    volatile __local unsigned char *red_arr_f16_mem_17593_backing_0 = &shared_mem[0];
    const int64_t red_arr_f16_mem_17593_backing_0_offset = 0 + ((int64_t) 2 * segred_tblock_sizze_13267 + srem64((int64_t) 8 - srem64((int64_t) 2 * segred_tblock_sizze_13267, (int64_t) 8), (int64_t) 8));
    
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_17589;
    int32_t tblock_sizze_17592;
    int32_t wave_sizze_17591;
    int32_t block_id_17590;
    int32_t global_tid_17588;
    int64_t phys_tid_13274;
    __local unsigned char *red_arr_f16_mem_17593;
    int32_t phys_tblock_id_17595;
    int32_t iterations_17596;
    
    local_tid_17589 = get_local_id(0);
    tblock_sizze_17592 = get_local_size(0);
    wave_sizze_17591 = LOCKSTEP_WIDTH;
    block_id_17590 = get_tblock_id(0);
    global_tid_17588 = block_id_17590 * tblock_sizze_17592 + local_tid_17589;
    phys_tid_13274 = sext_i32_i64(global_tid_17588);
    red_arr_f16_mem_17593 = (__local unsigned char *) red_arr_f16_mem_17593_backing_0;
    phys_tblock_id_17595 = get_tblock_id(0);
    iterations_17596 = sdiv_up32(sext_i64_i32(sdiv_up64(d_9096 * d_9096, squot64(segred_tblock_sizze_13267, segment_sizze_nonzzero_17586))) - phys_tblock_id_17595, sext_i64_i32(num_tblocks_13268));
    for (int32_t i_17597 = 0; i_17597 < iterations_17596; i_17597++) {
        int32_t virt_tblock_id_17598;
        int64_t slice_17599;
        int64_t slice_17600;
        int64_t gtid_13271;
        int64_t remnant_17601;
        int64_t gtid_13272;
        int64_t remnant_17602;
        int64_t gtid_13273;
        
        virt_tblock_id_17598 = phys_tblock_id_17595 + i_17597 * sext_i64_i32(num_tblocks_13268);
        slice_17599 = d_9096;
        slice_17600 = d_9096 * slice_17599;
        gtid_13271 = squot64(squot64(sext_i32_i64(local_tid_17589), segment_sizze_nonzzero_17586) + sext_i32_i64(virt_tblock_id_17598) * squot64(segred_tblock_sizze_13267, segment_sizze_nonzzero_17586), slice_17599);
        remnant_17601 = squot64(sext_i32_i64(local_tid_17589), segment_sizze_nonzzero_17586) + sext_i32_i64(virt_tblock_id_17598) * squot64(segred_tblock_sizze_13267, segment_sizze_nonzzero_17586) - gtid_13271 * slice_17599;
        gtid_13272 = remnant_17601;
        remnant_17602 = remnant_17601 - gtid_13272;
        gtid_13273 = srem64(sext_i32_i64(local_tid_17589), m_12166);
        // apply map function if in bounds
        {
            if (slt64((int64_t) 0, m_12166) && ((slt64(gtid_13271, d_9096) && slt64(gtid_13272, d_9096)) && slt64(sext_i32_i64(local_tid_17589), m_12166 * squot64(segred_tblock_sizze_13267, segment_sizze_nonzzero_17586)))) {
                // apply map function
                {
                    f16 x_13280 = futrts_from_bits16(((__global uint16_t *) mem_16573)[gtid_13273 + gtid_13271 * (m_12166 * d_9096) + gtid_13272 * m_12166]);
                    
                    // save results to be reduced
                    {
                        ((__local uint16_t *) red_arr_f16_mem_17593)[sext_i32_i64(local_tid_17589)] = futrts_to_bits16(x_13280);
                    }
                }
            } else {
                ((__local uint16_t *) red_arr_f16_mem_17593)[sext_i32_i64(local_tid_17589)] = futrts_to_bits16((f16) 0.0F);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        if (slt64((int64_t) 0, m_12166)) {
            // perform segmented scan to imitate reduction
            {
                f16 eta_p_13275;
                f16 eta_p_13276;
                f16 eta_p_17603;
                f16 eta_p_17604;
                bool ltid_in_bounds_17606 = slt64(sext_i32_i64(local_tid_17589), m_12166 * squot64(segred_tblock_sizze_13267, segment_sizze_nonzzero_17586));
                int32_t skip_threads_17607;
                
                // read input for in-block scan
                {
                    if (ltid_in_bounds_17606) {
                        eta_p_13276 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_f16_mem_17593)[sext_i32_i64(local_tid_17589)]);
                        if ((local_tid_17589 - squot32(local_tid_17589, 32) * 32) == 0) {
                            eta_p_13275 = eta_p_13276;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_17607 = 1;
                    while (slt32(skip_threads_17607, 32)) {
                        bool thread_active_17608 = sle32(skip_threads_17607, local_tid_17589 - squot32(local_tid_17589, 32) * 32) && ltid_in_bounds_17606;
                        
                        if (thread_active_17608) {
                            // read operands
                            {
                                eta_p_13275 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_f16_mem_17593)[sext_i32_i64(local_tid_17589) - sext_i32_i64(skip_threads_17607)]);
                            }
                        }
                        // perform operation
                        {
                            bool inactive_17609 = slt64(srem64(sext_i32_i64(local_tid_17589), m_12166), sext_i32_i64(local_tid_17589) - sext_i32_i64(local_tid_17589 - skip_threads_17607));
                            
                            if (thread_active_17608 && inactive_17609) {
                                eta_p_13275 = eta_p_13276;
                            }
                            if (thread_active_17608) {
                                if (!inactive_17609) {
                                    f16 defunc_0_f_res_13277 = eta_p_13275 + eta_p_13276;
                                    
                                    eta_p_13275 = defunc_0_f_res_13277;
                                }
                            }
                        }
                        if (sle32(wave_sizze_17591, skip_threads_17607)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (thread_active_17608) {
                            // write result
                            {
                                ((volatile __local uint16_t *) red_arr_f16_mem_17593)[sext_i32_i64(local_tid_17589)] = futrts_to_bits16(eta_p_13275);
                                eta_p_13276 = eta_p_13275;
                            }
                        }
                        if (sle32(wave_sizze_17591, skip_threads_17607)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_17607 *= 2;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // last thread of block 'i' writes its result to offset 'i'
                {
                    if ((local_tid_17589 - squot32(local_tid_17589, 32) * 32) == 31 && ltid_in_bounds_17606) {
                        ((volatile __local uint16_t *) red_arr_f16_mem_17593)[sext_i32_i64(squot32(local_tid_17589, 32))] = futrts_to_bits16(eta_p_13275);
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
                {
                    int32_t skip_threads_17610;
                    
                    // read input for in-block scan
                    {
                        if (squot32(local_tid_17589, 32) == 0 && ltid_in_bounds_17606) {
                            eta_p_17604 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_f16_mem_17593)[sext_i32_i64(local_tid_17589)]);
                            if ((local_tid_17589 - squot32(local_tid_17589, 32) * 32) == 0) {
                                eta_p_17603 = eta_p_17604;
                            }
                        }
                    }
                    // in-block scan (hopefully no barriers needed)
                    {
                        skip_threads_17610 = 1;
                        while (slt32(skip_threads_17610, 32)) {
                            bool thread_active_17611 = sle32(skip_threads_17610, local_tid_17589 - squot32(local_tid_17589, 32) * 32) && (squot32(local_tid_17589, 32) == 0 && ltid_in_bounds_17606);
                            
                            if (thread_active_17611) {
                                // read operands
                                {
                                    eta_p_17603 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_f16_mem_17593)[sext_i32_i64(local_tid_17589) - sext_i32_i64(skip_threads_17610)]);
                                }
                            }
                            // perform operation
                            {
                                bool inactive_17612 = slt64(srem64(sext_i32_i64(local_tid_17589 * 32 + 32 - 1), m_12166), sext_i32_i64(local_tid_17589 * 32 + 32 - 1) - sext_i32_i64((local_tid_17589 - skip_threads_17610) * 32 + 32 - 1));
                                
                                if (thread_active_17611 && inactive_17612) {
                                    eta_p_17603 = eta_p_17604;
                                }
                                if (thread_active_17611) {
                                    if (!inactive_17612) {
                                        f16 defunc_0_f_res_17605 = eta_p_17603 + eta_p_17604;
                                        
                                        eta_p_17603 = defunc_0_f_res_17605;
                                    }
                                }
                            }
                            if (sle32(wave_sizze_17591, skip_threads_17610)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            if (thread_active_17611) {
                                // write result
                                {
                                    ((volatile __local uint16_t *) red_arr_f16_mem_17593)[sext_i32_i64(local_tid_17589)] = futrts_to_bits16(eta_p_17603);
                                    eta_p_17604 = eta_p_17603;
                                }
                            }
                            if (sle32(wave_sizze_17591, skip_threads_17610)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            skip_threads_17610 *= 2;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                
                bool no_carry_in_17613 = squot32(local_tid_17589, 32) == 0 || !ltid_in_bounds_17606;
                
                // carry-in for every block except the first
                {
                    // read operands
                    {
                        if (!no_carry_in_17613) {
                            eta_p_13276 = eta_p_13275;
                            eta_p_13275 = futrts_from_bits16(((__local uint16_t *) red_arr_f16_mem_17593)[sext_i32_i64(squot32(local_tid_17589, 32)) - (int64_t) 1]);
                        }
                    }
                    // perform operation
                    {
                        bool inactive_17614 = slt64(srem64(sext_i32_i64(local_tid_17589), m_12166), sext_i32_i64(local_tid_17589) - sext_i32_i64(squot32(local_tid_17589, 32) * 32 - 1));
                        
                        if (!no_carry_in_17613) {
                            if (inactive_17614) {
                                eta_p_13275 = eta_p_13276;
                            }
                        }
                        if (!no_carry_in_17613) {
                            if (!inactive_17614) {
                                f16 defunc_0_f_res_13277 = eta_p_13275 + eta_p_13276;
                                
                                eta_p_13275 = defunc_0_f_res_13277;
                            }
                        }
                    }
                    // write final result
                    {
                        if (!no_carry_in_17613) {
                            ((__local uint16_t *) red_arr_f16_mem_17593)[sext_i32_i64(local_tid_17589)] = futrts_to_bits16(eta_p_13275);
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // restore correct values for first block
                {
                    if (squot32(local_tid_17589, 32) == 0 && ltid_in_bounds_17606) {
                        ((__local uint16_t *) red_arr_f16_mem_17593)[sext_i32_i64(local_tid_17589)] = futrts_to_bits16(eta_p_13276);
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // save final values of segments
        {
            if (slt64(sext_i32_i64(virt_tblock_id_17598) * squot64(segred_tblock_sizze_13267, segment_sizze_nonzzero_17586) + sext_i32_i64(local_tid_17589), d_9096 * d_9096) && slt64(sext_i32_i64(local_tid_17589), squot64(segred_tblock_sizze_13267, segment_sizze_nonzzero_17586))) {
                f16 tmp_17615 = futrts_from_bits16(((__local uint16_t *) red_arr_f16_mem_17593)[(sext_i32_i64(local_tid_17589) + (int64_t) 1) * segment_sizze_nonzzero_17586 - (int64_t) 1]);
                
                ((__global uint16_t *) mem_16577)[squot64(sext_i32_i64(virt_tblock_id_17598) * squot64(segred_tblock_sizze_13267, segment_sizze_nonzzero_17586) + sext_i32_i64(local_tid_17589), d_9096) * d_9096 + (sext_i32_i64(virt_tblock_id_17598) * squot64(segred_tblock_sizze_13267, segment_sizze_nonzzero_17586) + sext_i32_i64(local_tid_17589) - squot64(sext_i32_i64(virt_tblock_id_17598) * squot64(segred_tblock_sizze_13267, segment_sizze_nonzzero_17586) + sext_i32_i64(local_tid_17589), d_9096) * d_9096)] = futrts_to_bits16(tmp_17615);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_3:
    return;
    #undef segred_tblock_sizze_13267
}
