#define FUTHARK_CUDA
#define FUTHARK_CUDATC
// start of prelude.cu
#define SCALAR_FUN_ATTR __device__ static inline
#define FUTHARK_FUN_ATTR __device__ static
#define FUTHARK_F64_ENABLED

#ifdef FUTHARK_CUDATC
#include <cute/tensor.hpp>
#else
typedef char int8_t;
typedef short int16_t;
typedef int int32_t;
typedef long long int64_t;
typedef unsigned char uint8_t;
typedef unsigned short uint16_t;
typedef unsigned int uint32_t;
typedef unsigned long long uint64_t;
#endif

#define __global
#define __local
#define __private
#define __constant
#define __write_only
#define __read_only

static inline __device__ int get_tblock_id(int d) {
  switch (d) {
  case 0: return blockIdx.x;
  case 1: return blockIdx.y;
  case 2: return blockIdx.z;
  default: return 0;
  }
}

static inline __device__ int get_num_tblocks(int d) {
  switch(d) {
  case 0: return gridDim.x;
  case 1: return gridDim.y;
  case 2: return gridDim.z;
  default: return 0;
  }
}

static inline __device__ int get_global_id(int d) {
  switch (d) {
    case 0: return threadIdx.x + blockIdx.x * blockDim.x;
    case 1: return threadIdx.y + blockIdx.y * blockDim.y;
    case 2: return threadIdx.z + blockIdx.z * blockDim.z;
    default: return 0;
  }
}

static inline __device__ int get_local_id(int d) {
  switch (d) {
    case 0: return threadIdx.x;
    case 1: return threadIdx.y;
    case 2: return threadIdx.z;
    default: return 0;
  }
}

static inline __device__ int get_local_size(int d) {
  switch (d) {
    case 0: return blockDim.x;
    case 1: return blockDim.y;
    case 2: return blockDim.z;
    default: return 0;
  }
}

static inline __device__ int get_global_size(int d) {
  switch (d) {
    case 0: return gridDim.x * blockDim.x;
    case 1: return gridDim.y * blockDim.y;
    case 2: return gridDim.z * blockDim.z;
    default: return 0;
  }
}


#define CLK_LOCAL_MEM_FENCE 1
#define CLK_GLOBAL_MEM_FENCE 2
static inline __device__ void barrier(int x) {
  __syncthreads();
}
static inline __device__ void mem_fence_local() {
  __threadfence_block();
}
static inline __device__ void mem_fence_global() {
  __threadfence();
}

static inline __device__ void barrier_local() {
  __syncthreads();
}

#define NAN (0.0/0.0)
#define INFINITY (1.0/0.0)
extern volatile __shared__ unsigned char shared_mem[];

#define SHARED_MEM_PARAM
#define FUTHARK_KERNEL extern "C" __global__ __launch_bounds__(MAX_THREADS_PER_BLOCK)
#define FUTHARK_KERNEL_SIZED(a,b,c) extern "C" __global__ __launch_bounds__(a*b*c)


// End of prelude.cu
// Start of half.h.

// Conversion functions are from http://half.sourceforge.net/, but
// translated to C.
//
// Copyright (c) 2012-2021 Christian Rau
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

#ifndef __OPENCL_VERSION__
#define __constant
#endif

__constant static const uint16_t base_table[512] = {
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0001, 0x0002, 0x0004, 0x0008, 0x0010, 0x0020, 0x0040, 0x0080, 0x0100,
  0x0200, 0x0400, 0x0800, 0x0C00, 0x1000, 0x1400, 0x1800, 0x1C00, 0x2000, 0x2400, 0x2800, 0x2C00, 0x3000, 0x3400, 0x3800, 0x3C00,
  0x4000, 0x4400, 0x4800, 0x4C00, 0x5000, 0x5400, 0x5800, 0x5C00, 0x6000, 0x6400, 0x6800, 0x6C00, 0x7000, 0x7400, 0x7800, 0x7C00,
  0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00,
  0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00,
  0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00,
  0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00,
  0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00,
  0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00,
  0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00, 0x7C00,
  0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000,
  0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000,
  0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000,
  0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000,
  0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000,
  0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000,
  0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8001, 0x8002, 0x8004, 0x8008, 0x8010, 0x8020, 0x8040, 0x8080, 0x8100,
  0x8200, 0x8400, 0x8800, 0x8C00, 0x9000, 0x9400, 0x9800, 0x9C00, 0xA000, 0xA400, 0xA800, 0xAC00, 0xB000, 0xB400, 0xB800, 0xBC00,
  0xC000, 0xC400, 0xC800, 0xCC00, 0xD000, 0xD400, 0xD800, 0xDC00, 0xE000, 0xE400, 0xE800, 0xEC00, 0xF000, 0xF400, 0xF800, 0xFC00,
  0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00,
  0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00,
  0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00,
  0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00,
  0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00,
  0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00,
  0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00, 0xFC00 };

__constant static const unsigned char shift_table[512] = {
  24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
  24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
  24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
  24, 24, 24, 24, 24, 24, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
  13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
  24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
  24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
  24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 13,
  24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
  24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
  24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
  24, 24, 24, 24, 24, 24, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
  13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
  24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
  24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
  24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 13 };

__constant static const uint32_t mantissa_table[2048] = {
  0x00000000, 0x33800000, 0x34000000, 0x34400000, 0x34800000, 0x34A00000, 0x34C00000, 0x34E00000, 0x35000000, 0x35100000, 0x35200000, 0x35300000, 0x35400000, 0x35500000, 0x35600000, 0x35700000,
  0x35800000, 0x35880000, 0x35900000, 0x35980000, 0x35A00000, 0x35A80000, 0x35B00000, 0x35B80000, 0x35C00000, 0x35C80000, 0x35D00000, 0x35D80000, 0x35E00000, 0x35E80000, 0x35F00000, 0x35F80000,
  0x36000000, 0x36040000, 0x36080000, 0x360C0000, 0x36100000, 0x36140000, 0x36180000, 0x361C0000, 0x36200000, 0x36240000, 0x36280000, 0x362C0000, 0x36300000, 0x36340000, 0x36380000, 0x363C0000,
  0x36400000, 0x36440000, 0x36480000, 0x364C0000, 0x36500000, 0x36540000, 0x36580000, 0x365C0000, 0x36600000, 0x36640000, 0x36680000, 0x366C0000, 0x36700000, 0x36740000, 0x36780000, 0x367C0000,
  0x36800000, 0x36820000, 0x36840000, 0x36860000, 0x36880000, 0x368A0000, 0x368C0000, 0x368E0000, 0x36900000, 0x36920000, 0x36940000, 0x36960000, 0x36980000, 0x369A0000, 0x369C0000, 0x369E0000,
  0x36A00000, 0x36A20000, 0x36A40000, 0x36A60000, 0x36A80000, 0x36AA0000, 0x36AC0000, 0x36AE0000, 0x36B00000, 0x36B20000, 0x36B40000, 0x36B60000, 0x36B80000, 0x36BA0000, 0x36BC0000, 0x36BE0000,
  0x36C00000, 0x36C20000, 0x36C40000, 0x36C60000, 0x36C80000, 0x36CA0000, 0x36CC0000, 0x36CE0000, 0x36D00000, 0x36D20000, 0x36D40000, 0x36D60000, 0x36D80000, 0x36DA0000, 0x36DC0000, 0x36DE0000,
  0x36E00000, 0x36E20000, 0x36E40000, 0x36E60000, 0x36E80000, 0x36EA0000, 0x36EC0000, 0x36EE0000, 0x36F00000, 0x36F20000, 0x36F40000, 0x36F60000, 0x36F80000, 0x36FA0000, 0x36FC0000, 0x36FE0000,
  0x37000000, 0x37010000, 0x37020000, 0x37030000, 0x37040000, 0x37050000, 0x37060000, 0x37070000, 0x37080000, 0x37090000, 0x370A0000, 0x370B0000, 0x370C0000, 0x370D0000, 0x370E0000, 0x370F0000,
  0x37100000, 0x37110000, 0x37120000, 0x37130000, 0x37140000, 0x37150000, 0x37160000, 0x37170000, 0x37180000, 0x37190000, 0x371A0000, 0x371B0000, 0x371C0000, 0x371D0000, 0x371E0000, 0x371F0000,
  0x37200000, 0x37210000, 0x37220000, 0x37230000, 0x37240000, 0x37250000, 0x37260000, 0x37270000, 0x37280000, 0x37290000, 0x372A0000, 0x372B0000, 0x372C0000, 0x372D0000, 0x372E0000, 0x372F0000,
  0x37300000, 0x37310000, 0x37320000, 0x37330000, 0x37340000, 0x37350000, 0x37360000, 0x37370000, 0x37380000, 0x37390000, 0x373A0000, 0x373B0000, 0x373C0000, 0x373D0000, 0x373E0000, 0x373F0000,
  0x37400000, 0x37410000, 0x37420000, 0x37430000, 0x37440000, 0x37450000, 0x37460000, 0x37470000, 0x37480000, 0x37490000, 0x374A0000, 0x374B0000, 0x374C0000, 0x374D0000, 0x374E0000, 0x374F0000,
  0x37500000, 0x37510000, 0x37520000, 0x37530000, 0x37540000, 0x37550000, 0x37560000, 0x37570000, 0x37580000, 0x37590000, 0x375A0000, 0x375B0000, 0x375C0000, 0x375D0000, 0x375E0000, 0x375F0000,
  0x37600000, 0x37610000, 0x37620000, 0x37630000, 0x37640000, 0x37650000, 0x37660000, 0x37670000, 0x37680000, 0x37690000, 0x376A0000, 0x376B0000, 0x376C0000, 0x376D0000, 0x376E0000, 0x376F0000,
  0x37700000, 0x37710000, 0x37720000, 0x37730000, 0x37740000, 0x37750000, 0x37760000, 0x37770000, 0x37780000, 0x37790000, 0x377A0000, 0x377B0000, 0x377C0000, 0x377D0000, 0x377E0000, 0x377F0000,
  0x37800000, 0x37808000, 0x37810000, 0x37818000, 0x37820000, 0x37828000, 0x37830000, 0x37838000, 0x37840000, 0x37848000, 0x37850000, 0x37858000, 0x37860000, 0x37868000, 0x37870000, 0x37878000,
  0x37880000, 0x37888000, 0x37890000, 0x37898000, 0x378A0000, 0x378A8000, 0x378B0000, 0x378B8000, 0x378C0000, 0x378C8000, 0x378D0000, 0x378D8000, 0x378E0000, 0x378E8000, 0x378F0000, 0x378F8000,
  0x37900000, 0x37908000, 0x37910000, 0x37918000, 0x37920000, 0x37928000, 0x37930000, 0x37938000, 0x37940000, 0x37948000, 0x37950000, 0x37958000, 0x37960000, 0x37968000, 0x37970000, 0x37978000,
  0x37980000, 0x37988000, 0x37990000, 0x37998000, 0x379A0000, 0x379A8000, 0x379B0000, 0x379B8000, 0x379C0000, 0x379C8000, 0x379D0000, 0x379D8000, 0x379E0000, 0x379E8000, 0x379F0000, 0x379F8000,
  0x37A00000, 0x37A08000, 0x37A10000, 0x37A18000, 0x37A20000, 0x37A28000, 0x37A30000, 0x37A38000, 0x37A40000, 0x37A48000, 0x37A50000, 0x37A58000, 0x37A60000, 0x37A68000, 0x37A70000, 0x37A78000,
  0x37A80000, 0x37A88000, 0x37A90000, 0x37A98000, 0x37AA0000, 0x37AA8000, 0x37AB0000, 0x37AB8000, 0x37AC0000, 0x37AC8000, 0x37AD0000, 0x37AD8000, 0x37AE0000, 0x37AE8000, 0x37AF0000, 0x37AF8000,
  0x37B00000, 0x37B08000, 0x37B10000, 0x37B18000, 0x37B20000, 0x37B28000, 0x37B30000, 0x37B38000, 0x37B40000, 0x37B48000, 0x37B50000, 0x37B58000, 0x37B60000, 0x37B68000, 0x37B70000, 0x37B78000,
  0x37B80000, 0x37B88000, 0x37B90000, 0x37B98000, 0x37BA0000, 0x37BA8000, 0x37BB0000, 0x37BB8000, 0x37BC0000, 0x37BC8000, 0x37BD0000, 0x37BD8000, 0x37BE0000, 0x37BE8000, 0x37BF0000, 0x37BF8000,
  0x37C00000, 0x37C08000, 0x37C10000, 0x37C18000, 0x37C20000, 0x37C28000, 0x37C30000, 0x37C38000, 0x37C40000, 0x37C48000, 0x37C50000, 0x37C58000, 0x37C60000, 0x37C68000, 0x37C70000, 0x37C78000,
  0x37C80000, 0x37C88000, 0x37C90000, 0x37C98000, 0x37CA0000, 0x37CA8000, 0x37CB0000, 0x37CB8000, 0x37CC0000, 0x37CC8000, 0x37CD0000, 0x37CD8000, 0x37CE0000, 0x37CE8000, 0x37CF0000, 0x37CF8000,
  0x37D00000, 0x37D08000, 0x37D10000, 0x37D18000, 0x37D20000, 0x37D28000, 0x37D30000, 0x37D38000, 0x37D40000, 0x37D48000, 0x37D50000, 0x37D58000, 0x37D60000, 0x37D68000, 0x37D70000, 0x37D78000,
  0x37D80000, 0x37D88000, 0x37D90000, 0x37D98000, 0x37DA0000, 0x37DA8000, 0x37DB0000, 0x37DB8000, 0x37DC0000, 0x37DC8000, 0x37DD0000, 0x37DD8000, 0x37DE0000, 0x37DE8000, 0x37DF0000, 0x37DF8000,
  0x37E00000, 0x37E08000, 0x37E10000, 0x37E18000, 0x37E20000, 0x37E28000, 0x37E30000, 0x37E38000, 0x37E40000, 0x37E48000, 0x37E50000, 0x37E58000, 0x37E60000, 0x37E68000, 0x37E70000, 0x37E78000,
  0x37E80000, 0x37E88000, 0x37E90000, 0x37E98000, 0x37EA0000, 0x37EA8000, 0x37EB0000, 0x37EB8000, 0x37EC0000, 0x37EC8000, 0x37ED0000, 0x37ED8000, 0x37EE0000, 0x37EE8000, 0x37EF0000, 0x37EF8000,
  0x37F00000, 0x37F08000, 0x37F10000, 0x37F18000, 0x37F20000, 0x37F28000, 0x37F30000, 0x37F38000, 0x37F40000, 0x37F48000, 0x37F50000, 0x37F58000, 0x37F60000, 0x37F68000, 0x37F70000, 0x37F78000,
  0x37F80000, 0x37F88000, 0x37F90000, 0x37F98000, 0x37FA0000, 0x37FA8000, 0x37FB0000, 0x37FB8000, 0x37FC0000, 0x37FC8000, 0x37FD0000, 0x37FD8000, 0x37FE0000, 0x37FE8000, 0x37FF0000, 0x37FF8000,
  0x38000000, 0x38004000, 0x38008000, 0x3800C000, 0x38010000, 0x38014000, 0x38018000, 0x3801C000, 0x38020000, 0x38024000, 0x38028000, 0x3802C000, 0x38030000, 0x38034000, 0x38038000, 0x3803C000,
  0x38040000, 0x38044000, 0x38048000, 0x3804C000, 0x38050000, 0x38054000, 0x38058000, 0x3805C000, 0x38060000, 0x38064000, 0x38068000, 0x3806C000, 0x38070000, 0x38074000, 0x38078000, 0x3807C000,
  0x38080000, 0x38084000, 0x38088000, 0x3808C000, 0x38090000, 0x38094000, 0x38098000, 0x3809C000, 0x380A0000, 0x380A4000, 0x380A8000, 0x380AC000, 0x380B0000, 0x380B4000, 0x380B8000, 0x380BC000,
  0x380C0000, 0x380C4000, 0x380C8000, 0x380CC000, 0x380D0000, 0x380D4000, 0x380D8000, 0x380DC000, 0x380E0000, 0x380E4000, 0x380E8000, 0x380EC000, 0x380F0000, 0x380F4000, 0x380F8000, 0x380FC000,
  0x38100000, 0x38104000, 0x38108000, 0x3810C000, 0x38110000, 0x38114000, 0x38118000, 0x3811C000, 0x38120000, 0x38124000, 0x38128000, 0x3812C000, 0x38130000, 0x38134000, 0x38138000, 0x3813C000,
  0x38140000, 0x38144000, 0x38148000, 0x3814C000, 0x38150000, 0x38154000, 0x38158000, 0x3815C000, 0x38160000, 0x38164000, 0x38168000, 0x3816C000, 0x38170000, 0x38174000, 0x38178000, 0x3817C000,
  0x38180000, 0x38184000, 0x38188000, 0x3818C000, 0x38190000, 0x38194000, 0x38198000, 0x3819C000, 0x381A0000, 0x381A4000, 0x381A8000, 0x381AC000, 0x381B0000, 0x381B4000, 0x381B8000, 0x381BC000,
  0x381C0000, 0x381C4000, 0x381C8000, 0x381CC000, 0x381D0000, 0x381D4000, 0x381D8000, 0x381DC000, 0x381E0000, 0x381E4000, 0x381E8000, 0x381EC000, 0x381F0000, 0x381F4000, 0x381F8000, 0x381FC000,
  0x38200000, 0x38204000, 0x38208000, 0x3820C000, 0x38210000, 0x38214000, 0x38218000, 0x3821C000, 0x38220000, 0x38224000, 0x38228000, 0x3822C000, 0x38230000, 0x38234000, 0x38238000, 0x3823C000,
  0x38240000, 0x38244000, 0x38248000, 0x3824C000, 0x38250000, 0x38254000, 0x38258000, 0x3825C000, 0x38260000, 0x38264000, 0x38268000, 0x3826C000, 0x38270000, 0x38274000, 0x38278000, 0x3827C000,
  0x38280000, 0x38284000, 0x38288000, 0x3828C000, 0x38290000, 0x38294000, 0x38298000, 0x3829C000, 0x382A0000, 0x382A4000, 0x382A8000, 0x382AC000, 0x382B0000, 0x382B4000, 0x382B8000, 0x382BC000,
  0x382C0000, 0x382C4000, 0x382C8000, 0x382CC000, 0x382D0000, 0x382D4000, 0x382D8000, 0x382DC000, 0x382E0000, 0x382E4000, 0x382E8000, 0x382EC000, 0x382F0000, 0x382F4000, 0x382F8000, 0x382FC000,
  0x38300000, 0x38304000, 0x38308000, 0x3830C000, 0x38310000, 0x38314000, 0x38318000, 0x3831C000, 0x38320000, 0x38324000, 0x38328000, 0x3832C000, 0x38330000, 0x38334000, 0x38338000, 0x3833C000,
  0x38340000, 0x38344000, 0x38348000, 0x3834C000, 0x38350000, 0x38354000, 0x38358000, 0x3835C000, 0x38360000, 0x38364000, 0x38368000, 0x3836C000, 0x38370000, 0x38374000, 0x38378000, 0x3837C000,
  0x38380000, 0x38384000, 0x38388000, 0x3838C000, 0x38390000, 0x38394000, 0x38398000, 0x3839C000, 0x383A0000, 0x383A4000, 0x383A8000, 0x383AC000, 0x383B0000, 0x383B4000, 0x383B8000, 0x383BC000,
  0x383C0000, 0x383C4000, 0x383C8000, 0x383CC000, 0x383D0000, 0x383D4000, 0x383D8000, 0x383DC000, 0x383E0000, 0x383E4000, 0x383E8000, 0x383EC000, 0x383F0000, 0x383F4000, 0x383F8000, 0x383FC000,
  0x38400000, 0x38404000, 0x38408000, 0x3840C000, 0x38410000, 0x38414000, 0x38418000, 0x3841C000, 0x38420000, 0x38424000, 0x38428000, 0x3842C000, 0x38430000, 0x38434000, 0x38438000, 0x3843C000,
  0x38440000, 0x38444000, 0x38448000, 0x3844C000, 0x38450000, 0x38454000, 0x38458000, 0x3845C000, 0x38460000, 0x38464000, 0x38468000, 0x3846C000, 0x38470000, 0x38474000, 0x38478000, 0x3847C000,
  0x38480000, 0x38484000, 0x38488000, 0x3848C000, 0x38490000, 0x38494000, 0x38498000, 0x3849C000, 0x384A0000, 0x384A4000, 0x384A8000, 0x384AC000, 0x384B0000, 0x384B4000, 0x384B8000, 0x384BC000,
  0x384C0000, 0x384C4000, 0x384C8000, 0x384CC000, 0x384D0000, 0x384D4000, 0x384D8000, 0x384DC000, 0x384E0000, 0x384E4000, 0x384E8000, 0x384EC000, 0x384F0000, 0x384F4000, 0x384F8000, 0x384FC000,
  0x38500000, 0x38504000, 0x38508000, 0x3850C000, 0x38510000, 0x38514000, 0x38518000, 0x3851C000, 0x38520000, 0x38524000, 0x38528000, 0x3852C000, 0x38530000, 0x38534000, 0x38538000, 0x3853C000,
  0x38540000, 0x38544000, 0x38548000, 0x3854C000, 0x38550000, 0x38554000, 0x38558000, 0x3855C000, 0x38560000, 0x38564000, 0x38568000, 0x3856C000, 0x38570000, 0x38574000, 0x38578000, 0x3857C000,
  0x38580000, 0x38584000, 0x38588000, 0x3858C000, 0x38590000, 0x38594000, 0x38598000, 0x3859C000, 0x385A0000, 0x385A4000, 0x385A8000, 0x385AC000, 0x385B0000, 0x385B4000, 0x385B8000, 0x385BC000,
  0x385C0000, 0x385C4000, 0x385C8000, 0x385CC000, 0x385D0000, 0x385D4000, 0x385D8000, 0x385DC000, 0x385E0000, 0x385E4000, 0x385E8000, 0x385EC000, 0x385F0000, 0x385F4000, 0x385F8000, 0x385FC000,
  0x38600000, 0x38604000, 0x38608000, 0x3860C000, 0x38610000, 0x38614000, 0x38618000, 0x3861C000, 0x38620000, 0x38624000, 0x38628000, 0x3862C000, 0x38630000, 0x38634000, 0x38638000, 0x3863C000,
  0x38640000, 0x38644000, 0x38648000, 0x3864C000, 0x38650000, 0x38654000, 0x38658000, 0x3865C000, 0x38660000, 0x38664000, 0x38668000, 0x3866C000, 0x38670000, 0x38674000, 0x38678000, 0x3867C000,
  0x38680000, 0x38684000, 0x38688000, 0x3868C000, 0x38690000, 0x38694000, 0x38698000, 0x3869C000, 0x386A0000, 0x386A4000, 0x386A8000, 0x386AC000, 0x386B0000, 0x386B4000, 0x386B8000, 0x386BC000,
  0x386C0000, 0x386C4000, 0x386C8000, 0x386CC000, 0x386D0000, 0x386D4000, 0x386D8000, 0x386DC000, 0x386E0000, 0x386E4000, 0x386E8000, 0x386EC000, 0x386F0000, 0x386F4000, 0x386F8000, 0x386FC000,
  0x38700000, 0x38704000, 0x38708000, 0x3870C000, 0x38710000, 0x38714000, 0x38718000, 0x3871C000, 0x38720000, 0x38724000, 0x38728000, 0x3872C000, 0x38730000, 0x38734000, 0x38738000, 0x3873C000,
  0x38740000, 0x38744000, 0x38748000, 0x3874C000, 0x38750000, 0x38754000, 0x38758000, 0x3875C000, 0x38760000, 0x38764000, 0x38768000, 0x3876C000, 0x38770000, 0x38774000, 0x38778000, 0x3877C000,
  0x38780000, 0x38784000, 0x38788000, 0x3878C000, 0x38790000, 0x38794000, 0x38798000, 0x3879C000, 0x387A0000, 0x387A4000, 0x387A8000, 0x387AC000, 0x387B0000, 0x387B4000, 0x387B8000, 0x387BC000,
  0x387C0000, 0x387C4000, 0x387C8000, 0x387CC000, 0x387D0000, 0x387D4000, 0x387D8000, 0x387DC000, 0x387E0000, 0x387E4000, 0x387E8000, 0x387EC000, 0x387F0000, 0x387F4000, 0x387F8000, 0x387FC000,
  0x38000000, 0x38002000, 0x38004000, 0x38006000, 0x38008000, 0x3800A000, 0x3800C000, 0x3800E000, 0x38010000, 0x38012000, 0x38014000, 0x38016000, 0x38018000, 0x3801A000, 0x3801C000, 0x3801E000,
  0x38020000, 0x38022000, 0x38024000, 0x38026000, 0x38028000, 0x3802A000, 0x3802C000, 0x3802E000, 0x38030000, 0x38032000, 0x38034000, 0x38036000, 0x38038000, 0x3803A000, 0x3803C000, 0x3803E000,
  0x38040000, 0x38042000, 0x38044000, 0x38046000, 0x38048000, 0x3804A000, 0x3804C000, 0x3804E000, 0x38050000, 0x38052000, 0x38054000, 0x38056000, 0x38058000, 0x3805A000, 0x3805C000, 0x3805E000,
  0x38060000, 0x38062000, 0x38064000, 0x38066000, 0x38068000, 0x3806A000, 0x3806C000, 0x3806E000, 0x38070000, 0x38072000, 0x38074000, 0x38076000, 0x38078000, 0x3807A000, 0x3807C000, 0x3807E000,
  0x38080000, 0x38082000, 0x38084000, 0x38086000, 0x38088000, 0x3808A000, 0x3808C000, 0x3808E000, 0x38090000, 0x38092000, 0x38094000, 0x38096000, 0x38098000, 0x3809A000, 0x3809C000, 0x3809E000,
  0x380A0000, 0x380A2000, 0x380A4000, 0x380A6000, 0x380A8000, 0x380AA000, 0x380AC000, 0x380AE000, 0x380B0000, 0x380B2000, 0x380B4000, 0x380B6000, 0x380B8000, 0x380BA000, 0x380BC000, 0x380BE000,
  0x380C0000, 0x380C2000, 0x380C4000, 0x380C6000, 0x380C8000, 0x380CA000, 0x380CC000, 0x380CE000, 0x380D0000, 0x380D2000, 0x380D4000, 0x380D6000, 0x380D8000, 0x380DA000, 0x380DC000, 0x380DE000,
  0x380E0000, 0x380E2000, 0x380E4000, 0x380E6000, 0x380E8000, 0x380EA000, 0x380EC000, 0x380EE000, 0x380F0000, 0x380F2000, 0x380F4000, 0x380F6000, 0x380F8000, 0x380FA000, 0x380FC000, 0x380FE000,
  0x38100000, 0x38102000, 0x38104000, 0x38106000, 0x38108000, 0x3810A000, 0x3810C000, 0x3810E000, 0x38110000, 0x38112000, 0x38114000, 0x38116000, 0x38118000, 0x3811A000, 0x3811C000, 0x3811E000,
  0x38120000, 0x38122000, 0x38124000, 0x38126000, 0x38128000, 0x3812A000, 0x3812C000, 0x3812E000, 0x38130000, 0x38132000, 0x38134000, 0x38136000, 0x38138000, 0x3813A000, 0x3813C000, 0x3813E000,
  0x38140000, 0x38142000, 0x38144000, 0x38146000, 0x38148000, 0x3814A000, 0x3814C000, 0x3814E000, 0x38150000, 0x38152000, 0x38154000, 0x38156000, 0x38158000, 0x3815A000, 0x3815C000, 0x3815E000,
  0x38160000, 0x38162000, 0x38164000, 0x38166000, 0x38168000, 0x3816A000, 0x3816C000, 0x3816E000, 0x38170000, 0x38172000, 0x38174000, 0x38176000, 0x38178000, 0x3817A000, 0x3817C000, 0x3817E000,
  0x38180000, 0x38182000, 0x38184000, 0x38186000, 0x38188000, 0x3818A000, 0x3818C000, 0x3818E000, 0x38190000, 0x38192000, 0x38194000, 0x38196000, 0x38198000, 0x3819A000, 0x3819C000, 0x3819E000,
  0x381A0000, 0x381A2000, 0x381A4000, 0x381A6000, 0x381A8000, 0x381AA000, 0x381AC000, 0x381AE000, 0x381B0000, 0x381B2000, 0x381B4000, 0x381B6000, 0x381B8000, 0x381BA000, 0x381BC000, 0x381BE000,
  0x381C0000, 0x381C2000, 0x381C4000, 0x381C6000, 0x381C8000, 0x381CA000, 0x381CC000, 0x381CE000, 0x381D0000, 0x381D2000, 0x381D4000, 0x381D6000, 0x381D8000, 0x381DA000, 0x381DC000, 0x381DE000,
  0x381E0000, 0x381E2000, 0x381E4000, 0x381E6000, 0x381E8000, 0x381EA000, 0x381EC000, 0x381EE000, 0x381F0000, 0x381F2000, 0x381F4000, 0x381F6000, 0x381F8000, 0x381FA000, 0x381FC000, 0x381FE000,
  0x38200000, 0x38202000, 0x38204000, 0x38206000, 0x38208000, 0x3820A000, 0x3820C000, 0x3820E000, 0x38210000, 0x38212000, 0x38214000, 0x38216000, 0x38218000, 0x3821A000, 0x3821C000, 0x3821E000,
  0x38220000, 0x38222000, 0x38224000, 0x38226000, 0x38228000, 0x3822A000, 0x3822C000, 0x3822E000, 0x38230000, 0x38232000, 0x38234000, 0x38236000, 0x38238000, 0x3823A000, 0x3823C000, 0x3823E000,
  0x38240000, 0x38242000, 0x38244000, 0x38246000, 0x38248000, 0x3824A000, 0x3824C000, 0x3824E000, 0x38250000, 0x38252000, 0x38254000, 0x38256000, 0x38258000, 0x3825A000, 0x3825C000, 0x3825E000,
  0x38260000, 0x38262000, 0x38264000, 0x38266000, 0x38268000, 0x3826A000, 0x3826C000, 0x3826E000, 0x38270000, 0x38272000, 0x38274000, 0x38276000, 0x38278000, 0x3827A000, 0x3827C000, 0x3827E000,
  0x38280000, 0x38282000, 0x38284000, 0x38286000, 0x38288000, 0x3828A000, 0x3828C000, 0x3828E000, 0x38290000, 0x38292000, 0x38294000, 0x38296000, 0x38298000, 0x3829A000, 0x3829C000, 0x3829E000,
  0x382A0000, 0x382A2000, 0x382A4000, 0x382A6000, 0x382A8000, 0x382AA000, 0x382AC000, 0x382AE000, 0x382B0000, 0x382B2000, 0x382B4000, 0x382B6000, 0x382B8000, 0x382BA000, 0x382BC000, 0x382BE000,
  0x382C0000, 0x382C2000, 0x382C4000, 0x382C6000, 0x382C8000, 0x382CA000, 0x382CC000, 0x382CE000, 0x382D0000, 0x382D2000, 0x382D4000, 0x382D6000, 0x382D8000, 0x382DA000, 0x382DC000, 0x382DE000,
  0x382E0000, 0x382E2000, 0x382E4000, 0x382E6000, 0x382E8000, 0x382EA000, 0x382EC000, 0x382EE000, 0x382F0000, 0x382F2000, 0x382F4000, 0x382F6000, 0x382F8000, 0x382FA000, 0x382FC000, 0x382FE000,
  0x38300000, 0x38302000, 0x38304000, 0x38306000, 0x38308000, 0x3830A000, 0x3830C000, 0x3830E000, 0x38310000, 0x38312000, 0x38314000, 0x38316000, 0x38318000, 0x3831A000, 0x3831C000, 0x3831E000,
  0x38320000, 0x38322000, 0x38324000, 0x38326000, 0x38328000, 0x3832A000, 0x3832C000, 0x3832E000, 0x38330000, 0x38332000, 0x38334000, 0x38336000, 0x38338000, 0x3833A000, 0x3833C000, 0x3833E000,
  0x38340000, 0x38342000, 0x38344000, 0x38346000, 0x38348000, 0x3834A000, 0x3834C000, 0x3834E000, 0x38350000, 0x38352000, 0x38354000, 0x38356000, 0x38358000, 0x3835A000, 0x3835C000, 0x3835E000,
  0x38360000, 0x38362000, 0x38364000, 0x38366000, 0x38368000, 0x3836A000, 0x3836C000, 0x3836E000, 0x38370000, 0x38372000, 0x38374000, 0x38376000, 0x38378000, 0x3837A000, 0x3837C000, 0x3837E000,
  0x38380000, 0x38382000, 0x38384000, 0x38386000, 0x38388000, 0x3838A000, 0x3838C000, 0x3838E000, 0x38390000, 0x38392000, 0x38394000, 0x38396000, 0x38398000, 0x3839A000, 0x3839C000, 0x3839E000,
  0x383A0000, 0x383A2000, 0x383A4000, 0x383A6000, 0x383A8000, 0x383AA000, 0x383AC000, 0x383AE000, 0x383B0000, 0x383B2000, 0x383B4000, 0x383B6000, 0x383B8000, 0x383BA000, 0x383BC000, 0x383BE000,
  0x383C0000, 0x383C2000, 0x383C4000, 0x383C6000, 0x383C8000, 0x383CA000, 0x383CC000, 0x383CE000, 0x383D0000, 0x383D2000, 0x383D4000, 0x383D6000, 0x383D8000, 0x383DA000, 0x383DC000, 0x383DE000,
  0x383E0000, 0x383E2000, 0x383E4000, 0x383E6000, 0x383E8000, 0x383EA000, 0x383EC000, 0x383EE000, 0x383F0000, 0x383F2000, 0x383F4000, 0x383F6000, 0x383F8000, 0x383FA000, 0x383FC000, 0x383FE000,
  0x38400000, 0x38402000, 0x38404000, 0x38406000, 0x38408000, 0x3840A000, 0x3840C000, 0x3840E000, 0x38410000, 0x38412000, 0x38414000, 0x38416000, 0x38418000, 0x3841A000, 0x3841C000, 0x3841E000,
  0x38420000, 0x38422000, 0x38424000, 0x38426000, 0x38428000, 0x3842A000, 0x3842C000, 0x3842E000, 0x38430000, 0x38432000, 0x38434000, 0x38436000, 0x38438000, 0x3843A000, 0x3843C000, 0x3843E000,
  0x38440000, 0x38442000, 0x38444000, 0x38446000, 0x38448000, 0x3844A000, 0x3844C000, 0x3844E000, 0x38450000, 0x38452000, 0x38454000, 0x38456000, 0x38458000, 0x3845A000, 0x3845C000, 0x3845E000,
  0x38460000, 0x38462000, 0x38464000, 0x38466000, 0x38468000, 0x3846A000, 0x3846C000, 0x3846E000, 0x38470000, 0x38472000, 0x38474000, 0x38476000, 0x38478000, 0x3847A000, 0x3847C000, 0x3847E000,
  0x38480000, 0x38482000, 0x38484000, 0x38486000, 0x38488000, 0x3848A000, 0x3848C000, 0x3848E000, 0x38490000, 0x38492000, 0x38494000, 0x38496000, 0x38498000, 0x3849A000, 0x3849C000, 0x3849E000,
  0x384A0000, 0x384A2000, 0x384A4000, 0x384A6000, 0x384A8000, 0x384AA000, 0x384AC000, 0x384AE000, 0x384B0000, 0x384B2000, 0x384B4000, 0x384B6000, 0x384B8000, 0x384BA000, 0x384BC000, 0x384BE000,
  0x384C0000, 0x384C2000, 0x384C4000, 0x384C6000, 0x384C8000, 0x384CA000, 0x384CC000, 0x384CE000, 0x384D0000, 0x384D2000, 0x384D4000, 0x384D6000, 0x384D8000, 0x384DA000, 0x384DC000, 0x384DE000,
  0x384E0000, 0x384E2000, 0x384E4000, 0x384E6000, 0x384E8000, 0x384EA000, 0x384EC000, 0x384EE000, 0x384F0000, 0x384F2000, 0x384F4000, 0x384F6000, 0x384F8000, 0x384FA000, 0x384FC000, 0x384FE000,
  0x38500000, 0x38502000, 0x38504000, 0x38506000, 0x38508000, 0x3850A000, 0x3850C000, 0x3850E000, 0x38510000, 0x38512000, 0x38514000, 0x38516000, 0x38518000, 0x3851A000, 0x3851C000, 0x3851E000,
  0x38520000, 0x38522000, 0x38524000, 0x38526000, 0x38528000, 0x3852A000, 0x3852C000, 0x3852E000, 0x38530000, 0x38532000, 0x38534000, 0x38536000, 0x38538000, 0x3853A000, 0x3853C000, 0x3853E000,
  0x38540000, 0x38542000, 0x38544000, 0x38546000, 0x38548000, 0x3854A000, 0x3854C000, 0x3854E000, 0x38550000, 0x38552000, 0x38554000, 0x38556000, 0x38558000, 0x3855A000, 0x3855C000, 0x3855E000,
  0x38560000, 0x38562000, 0x38564000, 0x38566000, 0x38568000, 0x3856A000, 0x3856C000, 0x3856E000, 0x38570000, 0x38572000, 0x38574000, 0x38576000, 0x38578000, 0x3857A000, 0x3857C000, 0x3857E000,
  0x38580000, 0x38582000, 0x38584000, 0x38586000, 0x38588000, 0x3858A000, 0x3858C000, 0x3858E000, 0x38590000, 0x38592000, 0x38594000, 0x38596000, 0x38598000, 0x3859A000, 0x3859C000, 0x3859E000,
  0x385A0000, 0x385A2000, 0x385A4000, 0x385A6000, 0x385A8000, 0x385AA000, 0x385AC000, 0x385AE000, 0x385B0000, 0x385B2000, 0x385B4000, 0x385B6000, 0x385B8000, 0x385BA000, 0x385BC000, 0x385BE000,
  0x385C0000, 0x385C2000, 0x385C4000, 0x385C6000, 0x385C8000, 0x385CA000, 0x385CC000, 0x385CE000, 0x385D0000, 0x385D2000, 0x385D4000, 0x385D6000, 0x385D8000, 0x385DA000, 0x385DC000, 0x385DE000,
  0x385E0000, 0x385E2000, 0x385E4000, 0x385E6000, 0x385E8000, 0x385EA000, 0x385EC000, 0x385EE000, 0x385F0000, 0x385F2000, 0x385F4000, 0x385F6000, 0x385F8000, 0x385FA000, 0x385FC000, 0x385FE000,
  0x38600000, 0x38602000, 0x38604000, 0x38606000, 0x38608000, 0x3860A000, 0x3860C000, 0x3860E000, 0x38610000, 0x38612000, 0x38614000, 0x38616000, 0x38618000, 0x3861A000, 0x3861C000, 0x3861E000,
  0x38620000, 0x38622000, 0x38624000, 0x38626000, 0x38628000, 0x3862A000, 0x3862C000, 0x3862E000, 0x38630000, 0x38632000, 0x38634000, 0x38636000, 0x38638000, 0x3863A000, 0x3863C000, 0x3863E000,
  0x38640000, 0x38642000, 0x38644000, 0x38646000, 0x38648000, 0x3864A000, 0x3864C000, 0x3864E000, 0x38650000, 0x38652000, 0x38654000, 0x38656000, 0x38658000, 0x3865A000, 0x3865C000, 0x3865E000,
  0x38660000, 0x38662000, 0x38664000, 0x38666000, 0x38668000, 0x3866A000, 0x3866C000, 0x3866E000, 0x38670000, 0x38672000, 0x38674000, 0x38676000, 0x38678000, 0x3867A000, 0x3867C000, 0x3867E000,
  0x38680000, 0x38682000, 0x38684000, 0x38686000, 0x38688000, 0x3868A000, 0x3868C000, 0x3868E000, 0x38690000, 0x38692000, 0x38694000, 0x38696000, 0x38698000, 0x3869A000, 0x3869C000, 0x3869E000,
  0x386A0000, 0x386A2000, 0x386A4000, 0x386A6000, 0x386A8000, 0x386AA000, 0x386AC000, 0x386AE000, 0x386B0000, 0x386B2000, 0x386B4000, 0x386B6000, 0x386B8000, 0x386BA000, 0x386BC000, 0x386BE000,
  0x386C0000, 0x386C2000, 0x386C4000, 0x386C6000, 0x386C8000, 0x386CA000, 0x386CC000, 0x386CE000, 0x386D0000, 0x386D2000, 0x386D4000, 0x386D6000, 0x386D8000, 0x386DA000, 0x386DC000, 0x386DE000,
  0x386E0000, 0x386E2000, 0x386E4000, 0x386E6000, 0x386E8000, 0x386EA000, 0x386EC000, 0x386EE000, 0x386F0000, 0x386F2000, 0x386F4000, 0x386F6000, 0x386F8000, 0x386FA000, 0x386FC000, 0x386FE000,
  0x38700000, 0x38702000, 0x38704000, 0x38706000, 0x38708000, 0x3870A000, 0x3870C000, 0x3870E000, 0x38710000, 0x38712000, 0x38714000, 0x38716000, 0x38718000, 0x3871A000, 0x3871C000, 0x3871E000,
  0x38720000, 0x38722000, 0x38724000, 0x38726000, 0x38728000, 0x3872A000, 0x3872C000, 0x3872E000, 0x38730000, 0x38732000, 0x38734000, 0x38736000, 0x38738000, 0x3873A000, 0x3873C000, 0x3873E000,
  0x38740000, 0x38742000, 0x38744000, 0x38746000, 0x38748000, 0x3874A000, 0x3874C000, 0x3874E000, 0x38750000, 0x38752000, 0x38754000, 0x38756000, 0x38758000, 0x3875A000, 0x3875C000, 0x3875E000,
  0x38760000, 0x38762000, 0x38764000, 0x38766000, 0x38768000, 0x3876A000, 0x3876C000, 0x3876E000, 0x38770000, 0x38772000, 0x38774000, 0x38776000, 0x38778000, 0x3877A000, 0x3877C000, 0x3877E000,
  0x38780000, 0x38782000, 0x38784000, 0x38786000, 0x38788000, 0x3878A000, 0x3878C000, 0x3878E000, 0x38790000, 0x38792000, 0x38794000, 0x38796000, 0x38798000, 0x3879A000, 0x3879C000, 0x3879E000,
  0x387A0000, 0x387A2000, 0x387A4000, 0x387A6000, 0x387A8000, 0x387AA000, 0x387AC000, 0x387AE000, 0x387B0000, 0x387B2000, 0x387B4000, 0x387B6000, 0x387B8000, 0x387BA000, 0x387BC000, 0x387BE000,
  0x387C0000, 0x387C2000, 0x387C4000, 0x387C6000, 0x387C8000, 0x387CA000, 0x387CC000, 0x387CE000, 0x387D0000, 0x387D2000, 0x387D4000, 0x387D6000, 0x387D8000, 0x387DA000, 0x387DC000, 0x387DE000,
  0x387E0000, 0x387E2000, 0x387E4000, 0x387E6000, 0x387E8000, 0x387EA000, 0x387EC000, 0x387EE000, 0x387F0000, 0x387F2000, 0x387F4000, 0x387F6000, 0x387F8000, 0x387FA000, 0x387FC000, 0x387FE000 };
__constant static const uint32_t exponent_table[64] = {
  0x00000000, 0x00800000, 0x01000000, 0x01800000, 0x02000000, 0x02800000, 0x03000000, 0x03800000, 0x04000000, 0x04800000, 0x05000000, 0x05800000, 0x06000000, 0x06800000, 0x07000000, 0x07800000,
  0x08000000, 0x08800000, 0x09000000, 0x09800000, 0x0A000000, 0x0A800000, 0x0B000000, 0x0B800000, 0x0C000000, 0x0C800000, 0x0D000000, 0x0D800000, 0x0E000000, 0x0E800000, 0x0F000000, 0x47800000,
  0x80000000, 0x80800000, 0x81000000, 0x81800000, 0x82000000, 0x82800000, 0x83000000, 0x83800000, 0x84000000, 0x84800000, 0x85000000, 0x85800000, 0x86000000, 0x86800000, 0x87000000, 0x87800000,
  0x88000000, 0x88800000, 0x89000000, 0x89800000, 0x8A000000, 0x8A800000, 0x8B000000, 0x8B800000, 0x8C000000, 0x8C800000, 0x8D000000, 0x8D800000, 0x8E000000, 0x8E800000, 0x8F000000, 0xC7800000 };
__constant static const unsigned short offset_table[64] = {
  0, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
  0, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024 };

SCALAR_FUN_ATTR uint16_t float2halfbits(float value) {
  union { float x; uint32_t y; } u;
  u.x = value;
  uint32_t bits = u.y;

  uint16_t hbits = base_table[bits>>23] + (uint16_t)((bits&0x7FFFFF)>>shift_table[bits>>23]);;

  return hbits;
}

SCALAR_FUN_ATTR float halfbits2float(uint16_t value) {
  uint32_t bits = mantissa_table[offset_table[value>>10]+(value&0x3FF)] + exponent_table[value>>10];

  union { uint32_t x; float y; } u;
  u.x = bits;
  return u.y;
}

SCALAR_FUN_ATTR uint16_t halfbitsnextafter(uint16_t from, uint16_t to) {
  int fabs = from & 0x7FFF, tabs = to & 0x7FFF;
  if(fabs > 0x7C00 || tabs > 0x7C00) {
    return ((from&0x7FFF)>0x7C00) ? (from|0x200) : (to|0x200);
  }
  if(from == to || !(fabs|tabs)) {
    return to;
  }
  if(!fabs) {
    return (to&0x8000)+1;
  }
  unsigned int out =
    from +
    (((from>>15)^(unsigned int)((from^(0x8000|(0x8000-(from>>15))))<(to^(0x8000|(0x8000-(to>>15))))))<<1)
    - 1;
  return out;
}

// End of half.h.
// Start of scalar.h.

// Implementation of the primitive scalar operations.  Very
// repetitive.  This code is inserted directly into both CUDA and
// OpenCL programs, as well as the CPU code, so it has some #ifdefs to
// work everywhere.  Some operations are defined as macros because
// this allows us to use them as constant expressions in things like
// array sizes and static initialisers.

// Some of the #ifdefs are because OpenCL uses type-generic functions
// for some operations (e.g. sqrt), while C and CUDA sensibly use
// distinct functions for different precisions (e.g. sqrtf() and
// sqrt()).  This is quite annoying.  Due to C's unfortunate casting
// rules, it is also really easy to accidentally implement
// floating-point functions in the wrong precision, so be careful.

// Double-precision definitions are only included if the preprocessor
// macro FUTHARK_F64_ENABLED is set.

SCALAR_FUN_ATTR int32_t futrts_to_bits32(float x);
SCALAR_FUN_ATTR float futrts_from_bits32(int32_t x);

SCALAR_FUN_ATTR uint8_t add8(uint8_t x, uint8_t y) {
  return x + y;
}

SCALAR_FUN_ATTR uint16_t add16(uint16_t x, uint16_t y) {
  return x + y;
}

SCALAR_FUN_ATTR uint32_t add32(uint32_t x, uint32_t y) {
  return x + y;
}

SCALAR_FUN_ATTR uint64_t add64(uint64_t x, uint64_t y) {
  return x + y;
}

SCALAR_FUN_ATTR uint8_t sub8(uint8_t x, uint8_t y) {
  return x - y;
}

SCALAR_FUN_ATTR uint16_t sub16(uint16_t x, uint16_t y) {
  return x - y;
}

SCALAR_FUN_ATTR uint32_t sub32(uint32_t x, uint32_t y) {
  return x - y;
}

SCALAR_FUN_ATTR uint64_t sub64(uint64_t x, uint64_t y) {
  return x - y;
}

SCALAR_FUN_ATTR uint8_t mul8(uint8_t x, uint8_t y) {
  return x * y;
}

SCALAR_FUN_ATTR uint16_t mul16(uint16_t x, uint16_t y) {
  return x * y;
}

SCALAR_FUN_ATTR uint32_t mul32(uint32_t x, uint32_t y) {
  return x * y;
}

SCALAR_FUN_ATTR uint64_t mul64(uint64_t x, uint64_t y) {
  return x * y;
}

#if ISPC

SCALAR_FUN_ATTR uint8_t udiv8(uint8_t x, uint8_t y) {
  // This strange pattern is used to prevent the ISPC compiler from
  // causing SIGFPEs and bogus results on divisions where inactive lanes
  // have 0-valued divisors. It ensures that any inactive lane instead
  // has a divisor of 1. https://github.com/ispc/ispc/issues/2292
  uint8_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return x / ys;
}

SCALAR_FUN_ATTR uint16_t udiv16(uint16_t x, uint16_t y) {
  uint16_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return x / ys;
}

SCALAR_FUN_ATTR uint32_t udiv32(uint32_t x, uint32_t y) {
  uint32_t ys = 1;
  foreach_active(i){
    ys = y;
  }


  return x / ys;
}

SCALAR_FUN_ATTR uint64_t udiv64(uint64_t x, uint64_t y) {
  uint64_t ys = 1;
  foreach_active(i){
    ys = y;
  }


  return x / ys;
}

SCALAR_FUN_ATTR uint8_t udiv_up8(uint8_t x, uint8_t y) {
  uint8_t ys = 1;
  foreach_active(i){
    ys = y;
  }


  return (x + y - 1) / ys;
}

SCALAR_FUN_ATTR uint16_t udiv_up16(uint16_t x, uint16_t y) {
  uint16_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return (x + y - 1) / ys;
}

SCALAR_FUN_ATTR uint32_t udiv_up32(uint32_t x, uint32_t y) {
  uint32_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return (x + y - 1) / ys;
}

SCALAR_FUN_ATTR uint64_t udiv_up64(uint64_t x, uint64_t y) {
  uint64_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return (x + y - 1) / ys;
}

SCALAR_FUN_ATTR uint8_t umod8(uint8_t x, uint8_t y) {
  uint8_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return x % ys;
}

SCALAR_FUN_ATTR uint16_t umod16(uint16_t x, uint16_t y) {
  uint16_t ys = 1;
  foreach_active(i){
    ys = y;
  }


  return x % ys;
}

SCALAR_FUN_ATTR uint32_t umod32(uint32_t x, uint32_t y) {
  uint32_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return x % ys;
}

SCALAR_FUN_ATTR uint64_t umod64(uint64_t x, uint64_t y) {
  uint64_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return x % ys;
}

SCALAR_FUN_ATTR uint8_t udiv_safe8(uint8_t x, uint8_t y) {
  uint8_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return y == 0 ? 0 : x / ys;
}

SCALAR_FUN_ATTR uint16_t udiv_safe16(uint16_t x, uint16_t y) {
  uint16_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return y == 0 ? 0 : x / ys;
}

SCALAR_FUN_ATTR uint32_t udiv_safe32(uint32_t x, uint32_t y) {
  uint32_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return y == 0 ? 0 : x / ys;
}

SCALAR_FUN_ATTR uint64_t udiv_safe64(uint64_t x, uint64_t y) {
  uint64_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return y == 0 ? 0 : x / ys;
}

SCALAR_FUN_ATTR uint8_t udiv_up_safe8(uint8_t x, uint8_t y) {
  uint8_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return y == 0 ? 0 : (x + y - 1) / ys;
}

SCALAR_FUN_ATTR uint16_t udiv_up_safe16(uint16_t x, uint16_t y) {
  uint16_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return y == 0 ? 0 : (x + y - 1) / ys;
}

SCALAR_FUN_ATTR uint32_t udiv_up_safe32(uint32_t x, uint32_t y) {
  uint32_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return y == 0 ? 0 : (x + y - 1) / ys;
}

SCALAR_FUN_ATTR uint64_t udiv_up_safe64(uint64_t x, uint64_t y) {
  uint64_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return y == 0 ? 0 : (x + y - 1) / ys;
}

SCALAR_FUN_ATTR uint8_t umod_safe8(uint8_t x, uint8_t y) {
  uint8_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return y == 0 ? 0 : x % ys;
}

SCALAR_FUN_ATTR uint16_t umod_safe16(uint16_t x, uint16_t y) {
  uint16_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return y == 0 ? 0 : x % ys;
}

SCALAR_FUN_ATTR uint32_t umod_safe32(uint32_t x, uint32_t y) {
  uint32_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return y == 0 ? 0 : x % ys;
}

SCALAR_FUN_ATTR uint64_t umod_safe64(uint64_t x, uint64_t y) {
  uint64_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return y == 0 ? 0 : x % ys;
}

SCALAR_FUN_ATTR int8_t sdiv8(int8_t x, int8_t y) {
  int8_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  int8_t q = x / ys;
  int8_t r = x % ys;

  return q - ((r != 0 && r < 0 != y < 0) ? 1 : 0);
}

SCALAR_FUN_ATTR int16_t sdiv16(int16_t x, int16_t y) {
  int16_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  int16_t q = x / ys;
  int16_t r = x % ys;

  return q - ((r != 0 && r < 0 != y < 0) ? 1 : 0);
}

SCALAR_FUN_ATTR int32_t sdiv32(int32_t x, int32_t y) {
  int32_t ys = 1;
  foreach_active(i){
    ys = y;
  }
  int32_t q = x / ys;
  int32_t r = x % ys;

  return q - ((r != 0 && r < 0 != y < 0) ? 1 : 0);
}

SCALAR_FUN_ATTR int64_t sdiv64(int64_t x, int64_t y) {
  int64_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  int64_t q = x / ys;
  int64_t r = x % ys;

  return q - ((r != 0 && r < 0 != y < 0) ? 1 : 0);
}

SCALAR_FUN_ATTR int8_t sdiv_up8(int8_t x, int8_t y) {
  return sdiv8(x + y - 1, y);
}

SCALAR_FUN_ATTR int16_t sdiv_up16(int16_t x, int16_t y) {
  return sdiv16(x + y - 1, y);
}

SCALAR_FUN_ATTR int32_t sdiv_up32(int32_t x, int32_t y) {
  return sdiv32(x + y - 1, y);
}

SCALAR_FUN_ATTR int64_t sdiv_up64(int64_t x, int64_t y) {
  return sdiv64(x + y - 1, y);
}

SCALAR_FUN_ATTR int8_t smod8(int8_t x, int8_t y) {
  int8_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  int8_t r = x % ys;

  return r + (r == 0 || (x > 0 && y > 0) || (x < 0 && y < 0) ? 0 : y);
}

SCALAR_FUN_ATTR int16_t smod16(int16_t x, int16_t y) {
  int16_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  int16_t r = x % ys;

  return r + (r == 0 || (x > 0 && y > 0) || (x < 0 && y < 0) ? 0 : y);
}

SCALAR_FUN_ATTR int32_t smod32(int32_t x, int32_t y) {
  int32_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  int32_t r = x % ys;

  return r + (r == 0 || (x > 0 && y > 0) || (x < 0 && y < 0) ? 0 : y);
}

SCALAR_FUN_ATTR int64_t smod64(int64_t x, int64_t y) {
  int64_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  int64_t r = x % ys;

  return r + (r == 0 || (x > 0 && y > 0) || (x < 0 && y < 0) ? 0 : y);
}

SCALAR_FUN_ATTR int8_t sdiv_safe8(int8_t x, int8_t y) {
  return y == 0 ? 0 : sdiv8(x, y);
}

SCALAR_FUN_ATTR int16_t sdiv_safe16(int16_t x, int16_t y) {
  return y == 0 ? 0 : sdiv16(x, y);
}

SCALAR_FUN_ATTR int32_t sdiv_safe32(int32_t x, int32_t y) {
  return y == 0 ? 0 : sdiv32(x, y);
}

SCALAR_FUN_ATTR int64_t sdiv_safe64(int64_t x, int64_t y) {
  return y == 0 ? 0 : sdiv64(x, y);
}

SCALAR_FUN_ATTR int8_t sdiv_up_safe8(int8_t x, int8_t y) {
  return sdiv_safe8(x + y - 1, y);
}

SCALAR_FUN_ATTR int16_t sdiv_up_safe16(int16_t x, int16_t y) {
  return sdiv_safe16(x + y - 1, y);
}

SCALAR_FUN_ATTR int32_t sdiv_up_safe32(int32_t x, int32_t y) {
  return sdiv_safe32(x + y - 1, y);
}

SCALAR_FUN_ATTR int64_t sdiv_up_safe64(int64_t x, int64_t y) {
  return sdiv_safe64(x + y - 1, y);
}

SCALAR_FUN_ATTR int8_t smod_safe8(int8_t x, int8_t y) {
  return y == 0 ? 0 : smod8(x, y);
}

SCALAR_FUN_ATTR int16_t smod_safe16(int16_t x, int16_t y) {
  return y == 0 ? 0 : smod16(x, y);
}

SCALAR_FUN_ATTR int32_t smod_safe32(int32_t x, int32_t y) {
  return y == 0 ? 0 : smod32(x, y);
}

SCALAR_FUN_ATTR int64_t smod_safe64(int64_t x, int64_t y) {
  return y == 0 ? 0 : smod64(x, y);
}

SCALAR_FUN_ATTR int8_t squot8(int8_t x, int8_t y) {
  int8_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return x / ys;
}

SCALAR_FUN_ATTR int16_t squot16(int16_t x, int16_t y) {
  int16_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return x / ys;
}

SCALAR_FUN_ATTR int32_t squot32(int32_t x, int32_t y) {
  int32_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return x / ys;
}

SCALAR_FUN_ATTR int64_t squot64(int64_t x, int64_t y) {
  int64_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return x / ys;
}

SCALAR_FUN_ATTR int8_t srem8(int8_t x, int8_t y) {
  int8_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return x % ys;
}

SCALAR_FUN_ATTR int16_t srem16(int16_t x, int16_t y) {
  int16_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return x % ys;
}

SCALAR_FUN_ATTR int32_t srem32(int32_t x, int32_t y) {
  int32_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return x % ys;
}

SCALAR_FUN_ATTR int64_t srem64(int64_t x, int64_t y) {
  int8_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return x % ys;
}

SCALAR_FUN_ATTR int8_t squot_safe8(int8_t x, int8_t y) {
  int8_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return y == 0 ? 0 : x / ys;
}

SCALAR_FUN_ATTR int16_t squot_safe16(int16_t x, int16_t y) {
  int16_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return y == 0 ? 0 : x / ys;
}

SCALAR_FUN_ATTR int32_t squot_safe32(int32_t x, int32_t y) {
  int32_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return y == 0 ? 0 : x / ys;
}

SCALAR_FUN_ATTR int64_t squot_safe64(int64_t x, int64_t y) {
  int64_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return y == 0 ? 0 : x / ys;
}

SCALAR_FUN_ATTR int8_t srem_safe8(int8_t x, int8_t y) {
  int8_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return y == 0 ? 0 : x % ys;
}

SCALAR_FUN_ATTR int16_t srem_safe16(int16_t x, int16_t y) {
  int16_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return y == 0 ? 0 : x % ys;
}

SCALAR_FUN_ATTR int32_t srem_safe32(int32_t x, int32_t y) {
  int32_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return y == 0 ? 0 : x % ys;
}

SCALAR_FUN_ATTR int64_t srem_safe64(int64_t x, int64_t y) {
  int64_t ys = 1;
  foreach_active(i){
    ys = y;
  }

  return y == 0 ? 0 : x % ys;
}

#else

SCALAR_FUN_ATTR uint8_t udiv8(uint8_t x, uint8_t y) {
  return x / y;
}

SCALAR_FUN_ATTR uint16_t udiv16(uint16_t x, uint16_t y) {
  return x / y;
}

SCALAR_FUN_ATTR uint32_t udiv32(uint32_t x, uint32_t y) {
  return x / y;
}

SCALAR_FUN_ATTR uint64_t udiv64(uint64_t x, uint64_t y) {
  return x / y;
}

SCALAR_FUN_ATTR uint8_t udiv_up8(uint8_t x, uint8_t y) {
  return (x + y - 1) / y;
}

SCALAR_FUN_ATTR uint16_t udiv_up16(uint16_t x, uint16_t y) {
  return (x + y - 1) / y;
}

SCALAR_FUN_ATTR uint32_t udiv_up32(uint32_t x, uint32_t y) {
  return (x + y - 1) / y;
}

SCALAR_FUN_ATTR uint64_t udiv_up64(uint64_t x, uint64_t y) {
  return (x + y - 1) / y;
}

SCALAR_FUN_ATTR uint8_t umod8(uint8_t x, uint8_t y) {
  return x % y;
}

SCALAR_FUN_ATTR uint16_t umod16(uint16_t x, uint16_t y) {
  return x % y;
}

SCALAR_FUN_ATTR uint32_t umod32(uint32_t x, uint32_t y) {
  return x % y;
}

SCALAR_FUN_ATTR uint64_t umod64(uint64_t x, uint64_t y) {
  return x % y;
}

SCALAR_FUN_ATTR uint8_t udiv_safe8(uint8_t x, uint8_t y) {
  return y == 0 ? 0 : x / y;
}

SCALAR_FUN_ATTR uint16_t udiv_safe16(uint16_t x, uint16_t y) {
  return y == 0 ? 0 : x / y;
}

SCALAR_FUN_ATTR uint32_t udiv_safe32(uint32_t x, uint32_t y) {
  return y == 0 ? 0 : x / y;
}

SCALAR_FUN_ATTR uint64_t udiv_safe64(uint64_t x, uint64_t y) {
  return y == 0 ? 0 : x / y;
}

SCALAR_FUN_ATTR uint8_t udiv_up_safe8(uint8_t x, uint8_t y) {
  return y == 0 ? 0 : (x + y - 1) / y;
}

SCALAR_FUN_ATTR uint16_t udiv_up_safe16(uint16_t x, uint16_t y) {
  return y == 0 ? 0 : (x + y - 1) / y;
}

SCALAR_FUN_ATTR uint32_t udiv_up_safe32(uint32_t x, uint32_t y) {
  return y == 0 ? 0 : (x + y - 1) / y;
}

SCALAR_FUN_ATTR uint64_t udiv_up_safe64(uint64_t x, uint64_t y) {
  return y == 0 ? 0 : (x + y - 1) / y;
}

SCALAR_FUN_ATTR uint8_t umod_safe8(uint8_t x, uint8_t y) {
  return y == 0 ? 0 : x % y;
}

SCALAR_FUN_ATTR uint16_t umod_safe16(uint16_t x, uint16_t y) {
  return y == 0 ? 0 : x % y;
}

SCALAR_FUN_ATTR uint32_t umod_safe32(uint32_t x, uint32_t y) {
  return y == 0 ? 0 : x % y;
}

SCALAR_FUN_ATTR uint64_t umod_safe64(uint64_t x, uint64_t y) {
  return y == 0 ? 0 : x % y;
}

SCALAR_FUN_ATTR int8_t sdiv8(int8_t x, int8_t y) {
  int8_t q = x / y;
  int8_t r = x % y;

  return q - ((r != 0 && r < 0 != y < 0) ? 1 : 0);
}

SCALAR_FUN_ATTR int16_t sdiv16(int16_t x, int16_t y) {
  int16_t q = x / y;
  int16_t r = x % y;

  return q - ((r != 0 && r < 0 != y < 0) ? 1 : 0);
}

SCALAR_FUN_ATTR int32_t sdiv32(int32_t x, int32_t y) {
  int32_t q = x / y;
  int32_t r = x % y;

  return q - ((r != 0 && r < 0 != y < 0) ? 1 : 0);
}

SCALAR_FUN_ATTR int64_t sdiv64(int64_t x, int64_t y) {
  int64_t q = x / y;
  int64_t r = x % y;

  return q - ((r != 0 && r < 0 != y < 0) ? 1 : 0);
}

SCALAR_FUN_ATTR int8_t sdiv_up8(int8_t x, int8_t y) {
  return sdiv8(x + y - 1, y);
}

SCALAR_FUN_ATTR int16_t sdiv_up16(int16_t x, int16_t y) {
  return sdiv16(x + y - 1, y);
}

SCALAR_FUN_ATTR int32_t sdiv_up32(int32_t x, int32_t y) {
  return sdiv32(x + y - 1, y);
}

SCALAR_FUN_ATTR int64_t sdiv_up64(int64_t x, int64_t y) {
  return sdiv64(x + y - 1, y);
}

SCALAR_FUN_ATTR int8_t smod8(int8_t x, int8_t y) {
  int8_t r = x % y;

  return r + (r == 0 || (x > 0 && y > 0) || (x < 0 && y < 0) ? 0 : y);
}

SCALAR_FUN_ATTR int16_t smod16(int16_t x, int16_t y) {
  int16_t r = x % y;

  return r + (r == 0 || (x > 0 && y > 0) || (x < 0 && y < 0) ? 0 : y);
}

SCALAR_FUN_ATTR int32_t smod32(int32_t x, int32_t y) {
  int32_t r = x % y;

  return r + (r == 0 || (x > 0 && y > 0) || (x < 0 && y < 0) ? 0 : y);
}

SCALAR_FUN_ATTR int64_t smod64(int64_t x, int64_t y) {
  int64_t r = x % y;

  return r + (r == 0 || (x > 0 && y > 0) || (x < 0 && y < 0) ? 0 : y);
}

SCALAR_FUN_ATTR int8_t sdiv_safe8(int8_t x, int8_t y) {
  return y == 0 ? 0 : sdiv8(x, y);
}

SCALAR_FUN_ATTR int16_t sdiv_safe16(int16_t x, int16_t y) {
  return y == 0 ? 0 : sdiv16(x, y);
}

SCALAR_FUN_ATTR int32_t sdiv_safe32(int32_t x, int32_t y) {
  return y == 0 ? 0 : sdiv32(x, y);
}

SCALAR_FUN_ATTR int64_t sdiv_safe64(int64_t x, int64_t y) {
  return y == 0 ? 0 : sdiv64(x, y);
}

SCALAR_FUN_ATTR int8_t sdiv_up_safe8(int8_t x, int8_t y) {
  return sdiv_safe8(x + y - 1, y);
}

SCALAR_FUN_ATTR int16_t sdiv_up_safe16(int16_t x, int16_t y) {
  return sdiv_safe16(x + y - 1, y);
}

SCALAR_FUN_ATTR int32_t sdiv_up_safe32(int32_t x, int32_t y) {
  return sdiv_safe32(x + y - 1, y);
}

SCALAR_FUN_ATTR int64_t sdiv_up_safe64(int64_t x, int64_t y) {
  return sdiv_safe64(x + y - 1, y);
}

SCALAR_FUN_ATTR int8_t smod_safe8(int8_t x, int8_t y) {
  return y == 0 ? 0 : smod8(x, y);
}

SCALAR_FUN_ATTR int16_t smod_safe16(int16_t x, int16_t y) {
  return y == 0 ? 0 : smod16(x, y);
}

SCALAR_FUN_ATTR int32_t smod_safe32(int32_t x, int32_t y) {
  return y == 0 ? 0 : smod32(x, y);
}

SCALAR_FUN_ATTR int64_t smod_safe64(int64_t x, int64_t y) {
  return y == 0 ? 0 : smod64(x, y);
}

SCALAR_FUN_ATTR int8_t squot8(int8_t x, int8_t y) {
  return x / y;
}

SCALAR_FUN_ATTR int16_t squot16(int16_t x, int16_t y) {
  return x / y;
}

SCALAR_FUN_ATTR int32_t squot32(int32_t x, int32_t y) {
  return x / y;
}

SCALAR_FUN_ATTR int64_t squot64(int64_t x, int64_t y) {
  return x / y;
}

SCALAR_FUN_ATTR int8_t srem8(int8_t x, int8_t y) {
  return x % y;
}

SCALAR_FUN_ATTR int16_t srem16(int16_t x, int16_t y) {
  return x % y;
}

SCALAR_FUN_ATTR int32_t srem32(int32_t x, int32_t y) {
  return x % y;
}

SCALAR_FUN_ATTR int64_t srem64(int64_t x, int64_t y) {
  return x % y;
}

SCALAR_FUN_ATTR int8_t squot_safe8(int8_t x, int8_t y) {
  return y == 0 ? 0 : x / y;
}

SCALAR_FUN_ATTR int16_t squot_safe16(int16_t x, int16_t y) {
  return y == 0 ? 0 : x / y;
}

SCALAR_FUN_ATTR int32_t squot_safe32(int32_t x, int32_t y) {
  return y == 0 ? 0 : x / y;
}

SCALAR_FUN_ATTR int64_t squot_safe64(int64_t x, int64_t y) {
  return y == 0 ? 0 : x / y;
}

SCALAR_FUN_ATTR int8_t srem_safe8(int8_t x, int8_t y) {
  return y == 0 ? 0 : x % y;
}

SCALAR_FUN_ATTR int16_t srem_safe16(int16_t x, int16_t y) {
  return y == 0 ? 0 : x % y;
}

SCALAR_FUN_ATTR int32_t srem_safe32(int32_t x, int32_t y) {
  return y == 0 ? 0 : x % y;
}

SCALAR_FUN_ATTR int64_t srem_safe64(int64_t x, int64_t y) {
  return y == 0 ? 0 : x % y;
}

#endif

SCALAR_FUN_ATTR int8_t smin8(int8_t x, int8_t y) {
  return x < y ? x : y;
}

SCALAR_FUN_ATTR int16_t smin16(int16_t x, int16_t y) {
  return x < y ? x : y;
}

SCALAR_FUN_ATTR int32_t smin32(int32_t x, int32_t y) {
  return x < y ? x : y;
}

SCALAR_FUN_ATTR int64_t smin64(int64_t x, int64_t y) {
  return x < y ? x : y;
}

SCALAR_FUN_ATTR uint8_t umin8(uint8_t x, uint8_t y) {
  return x < y ? x : y;
}

SCALAR_FUN_ATTR uint16_t umin16(uint16_t x, uint16_t y) {
  return x < y ? x : y;
}

SCALAR_FUN_ATTR uint32_t umin32(uint32_t x, uint32_t y) {
  return x < y ? x : y;
}

SCALAR_FUN_ATTR uint64_t umin64(uint64_t x, uint64_t y) {
  return x < y ? x : y;
}

SCALAR_FUN_ATTR int8_t smax8(int8_t x, int8_t y) {
  return x < y ? y : x;
}

SCALAR_FUN_ATTR int16_t smax16(int16_t x, int16_t y) {
  return x < y ? y : x;
}

SCALAR_FUN_ATTR int32_t smax32(int32_t x, int32_t y) {
  return x < y ? y : x;
}

SCALAR_FUN_ATTR int64_t smax64(int64_t x, int64_t y) {
  return x < y ? y : x;
}

SCALAR_FUN_ATTR uint8_t umax8(uint8_t x, uint8_t y) {
  return x < y ? y : x;
}

SCALAR_FUN_ATTR uint16_t umax16(uint16_t x, uint16_t y) {
  return x < y ? y : x;
}

SCALAR_FUN_ATTR uint32_t umax32(uint32_t x, uint32_t y) {
  return x < y ? y : x;
}

SCALAR_FUN_ATTR uint64_t umax64(uint64_t x, uint64_t y) {
  return x < y ? y : x;
}

SCALAR_FUN_ATTR uint8_t shl8(uint8_t x, uint8_t y) {
  return (uint8_t)(x << y);
}

SCALAR_FUN_ATTR uint16_t shl16(uint16_t x, uint16_t y) {
  return (uint16_t)(x << y);
}

SCALAR_FUN_ATTR uint32_t shl32(uint32_t x, uint32_t y) {
  return x << y;
}

SCALAR_FUN_ATTR uint64_t shl64(uint64_t x, uint64_t y) {
  return x << y;
}

SCALAR_FUN_ATTR uint8_t lshr8(uint8_t x, uint8_t y) {
  return x >> y;
}

SCALAR_FUN_ATTR uint16_t lshr16(uint16_t x, uint16_t y) {
  return x >> y;
}

SCALAR_FUN_ATTR uint32_t lshr32(uint32_t x, uint32_t y) {
  return x >> y;
}

SCALAR_FUN_ATTR uint64_t lshr64(uint64_t x, uint64_t y) {
  return x >> y;
}

SCALAR_FUN_ATTR int8_t ashr8(int8_t x, int8_t y) {
  return x >> y;
}

SCALAR_FUN_ATTR int16_t ashr16(int16_t x, int16_t y) {
  return x >> y;
}

SCALAR_FUN_ATTR int32_t ashr32(int32_t x, int32_t y) {
  return x >> y;
}

SCALAR_FUN_ATTR int64_t ashr64(int64_t x, int64_t y) {
  return x >> y;
}

SCALAR_FUN_ATTR uint8_t and8(uint8_t x, uint8_t y) {
  return x & y;
}

SCALAR_FUN_ATTR uint16_t and16(uint16_t x, uint16_t y) {
  return x & y;
}

SCALAR_FUN_ATTR uint32_t and32(uint32_t x, uint32_t y) {
  return x & y;
}

SCALAR_FUN_ATTR uint64_t and64(uint64_t x, uint64_t y) {
  return x & y;
}

SCALAR_FUN_ATTR uint8_t or8(uint8_t x, uint8_t y) {
  return x | y;
}

SCALAR_FUN_ATTR uint16_t or16(uint16_t x, uint16_t y) {
  return x | y;
}

SCALAR_FUN_ATTR uint32_t or32(uint32_t x, uint32_t y) {
  return x | y;
}

SCALAR_FUN_ATTR uint64_t or64(uint64_t x, uint64_t y) {
  return x | y;
}

SCALAR_FUN_ATTR uint8_t xor8(uint8_t x, uint8_t y) {
  return x ^ y;
}

SCALAR_FUN_ATTR uint16_t xor16(uint16_t x, uint16_t y) {
  return x ^ y;
}

SCALAR_FUN_ATTR uint32_t xor32(uint32_t x, uint32_t y) {
  return x ^ y;
}

SCALAR_FUN_ATTR uint64_t xor64(uint64_t x, uint64_t y) {
  return x ^ y;
}

SCALAR_FUN_ATTR bool ult8(uint8_t x, uint8_t y) {
  return x < y;
}

SCALAR_FUN_ATTR bool ult16(uint16_t x, uint16_t y) {
  return x < y;
}

SCALAR_FUN_ATTR bool ult32(uint32_t x, uint32_t y) {
  return x < y;
}

SCALAR_FUN_ATTR bool ult64(uint64_t x, uint64_t y) {
  return x < y;
}

SCALAR_FUN_ATTR bool ule8(uint8_t x, uint8_t y) {
  return x <= y;
}

SCALAR_FUN_ATTR bool ule16(uint16_t x, uint16_t y) {
  return x <= y;
}

SCALAR_FUN_ATTR bool ule32(uint32_t x, uint32_t y) {
  return x <= y;
}

SCALAR_FUN_ATTR bool ule64(uint64_t x, uint64_t y) {
  return x <= y;
}

SCALAR_FUN_ATTR bool slt8(int8_t x, int8_t y) {
  return x < y;
}

SCALAR_FUN_ATTR bool slt16(int16_t x, int16_t y) {
  return x < y;
}

SCALAR_FUN_ATTR bool slt32(int32_t x, int32_t y) {
  return x < y;
}

SCALAR_FUN_ATTR bool slt64(int64_t x, int64_t y) {
  return x < y;
}

SCALAR_FUN_ATTR bool sle8(int8_t x, int8_t y) {
  return x <= y;
}

SCALAR_FUN_ATTR bool sle16(int16_t x, int16_t y) {
  return x <= y;
}

SCALAR_FUN_ATTR bool sle32(int32_t x, int32_t y) {
  return x <= y;
}

SCALAR_FUN_ATTR bool sle64(int64_t x, int64_t y) {
  return x <= y;
}

SCALAR_FUN_ATTR uint8_t pow8(uint8_t x, uint8_t y) {
  uint8_t res = 1, rem = y;

  while (rem != 0) {
    if (rem & 1)
      res *= x;
    rem >>= 1;
    x *= x;
  }
  return res;
}

SCALAR_FUN_ATTR uint16_t pow16(uint16_t x, uint16_t y) {
  uint16_t res = 1, rem = y;

  while (rem != 0) {
    if (rem & 1)
      res *= x;
    rem >>= 1;
    x *= x;
  }
  return res;
}

SCALAR_FUN_ATTR uint32_t pow32(uint32_t x, uint32_t y) {
  uint32_t res = 1, rem = y;

  while (rem != 0) {
    if (rem & 1)
      res *= x;
    rem >>= 1;
    x *= x;
  }
  return res;
}

SCALAR_FUN_ATTR uint64_t pow64(uint64_t x, uint64_t y) {
  uint64_t res = 1, rem = y;

  while (rem != 0) {
    if (rem & 1)
      res *= x;
    rem >>= 1;
    x *= x;
  }
  return res;
}

SCALAR_FUN_ATTR bool itob_i8_bool(int8_t x) {
  return x != 0;
}

SCALAR_FUN_ATTR bool itob_i16_bool(int16_t x) {
  return x != 0;
}

SCALAR_FUN_ATTR bool itob_i32_bool(int32_t x) {
  return x != 0;
}

SCALAR_FUN_ATTR bool itob_i64_bool(int64_t x) {
  return x != 0;
}

SCALAR_FUN_ATTR int8_t btoi_bool_i8(bool x) {
  return x;
}

SCALAR_FUN_ATTR int16_t btoi_bool_i16(bool x) {
  return x;
}

SCALAR_FUN_ATTR int32_t btoi_bool_i32(bool x) {
  return x;
}

SCALAR_FUN_ATTR int64_t btoi_bool_i64(bool x) {
  return x;
}

#define sext_i8_i8(x) ((int8_t) (int8_t) (x))
#define sext_i8_i16(x) ((int16_t) (int8_t) (x))
#define sext_i8_i32(x) ((int32_t) (int8_t) (x))
#define sext_i8_i64(x) ((int64_t) (int8_t) (x))
#define sext_i16_i8(x) ((int8_t) (int16_t) (x))
#define sext_i16_i16(x) ((int16_t) (int16_t) (x))
#define sext_i16_i32(x) ((int32_t) (int16_t) (x))
#define sext_i16_i64(x) ((int64_t) (int16_t) (x))
#define sext_i32_i8(x) ((int8_t) (int32_t) (x))
#define sext_i32_i16(x) ((int16_t) (int32_t) (x))
#define sext_i32_i32(x) ((int32_t) (int32_t) (x))
#define sext_i32_i64(x) ((int64_t) (int32_t) (x))
#define sext_i64_i8(x) ((int8_t) (int64_t) (x))
#define sext_i64_i16(x) ((int16_t) (int64_t) (x))
#define sext_i64_i32(x) ((int32_t) (int64_t) (x))
#define sext_i64_i64(x) ((int64_t) (int64_t) (x))
#define zext_i8_i8(x) ((int8_t) (uint8_t) (x))
#define zext_i8_i16(x) ((int16_t) (uint8_t) (x))
#define zext_i8_i32(x) ((int32_t) (uint8_t) (x))
#define zext_i8_i64(x) ((int64_t) (uint8_t) (x))
#define zext_i16_i8(x) ((int8_t) (uint16_t) (x))
#define zext_i16_i16(x) ((int16_t) (uint16_t) (x))
#define zext_i16_i32(x) ((int32_t) (uint16_t) (x))
#define zext_i16_i64(x) ((int64_t) (uint16_t) (x))
#define zext_i32_i8(x) ((int8_t) (uint32_t) (x))
#define zext_i32_i16(x) ((int16_t) (uint32_t) (x))
#define zext_i32_i32(x) ((int32_t) (uint32_t) (x))
#define zext_i32_i64(x) ((int64_t) (uint32_t) (x))
#define zext_i64_i8(x) ((int8_t) (uint64_t) (x))
#define zext_i64_i16(x) ((int16_t) (uint64_t) (x))
#define zext_i64_i32(x) ((int32_t) (uint64_t) (x))
#define zext_i64_i64(x) ((int64_t) (uint64_t) (x))

SCALAR_FUN_ATTR int8_t abs8(int8_t x) {
  return (int8_t)abs(x);
}

SCALAR_FUN_ATTR int16_t abs16(int16_t x) {
  return (int16_t)abs(x);
}

SCALAR_FUN_ATTR int32_t abs32(int32_t x) {
  return abs(x);
}

SCALAR_FUN_ATTR int64_t abs64(int64_t x) {
#if defined(__OPENCL_VERSION__) || defined(ISPC)
  return abs(x);
#else
  return llabs(x);
#endif
}

#if defined(__OPENCL_VERSION__)
SCALAR_FUN_ATTR int32_t futrts_popc8(int8_t x) {
  return popcount(x);
}

SCALAR_FUN_ATTR int32_t futrts_popc16(int16_t x) {
  return popcount(x);
}

SCALAR_FUN_ATTR int32_t futrts_popc32(int32_t x) {
  return popcount(x);
}

SCALAR_FUN_ATTR int32_t futrts_popc64(int64_t x) {
  return popcount(x);
}
#elif defined(__CUDA_ARCH__)

SCALAR_FUN_ATTR int32_t futrts_popc8(int8_t x) {
  return __popc(zext_i8_i32(x));
}

SCALAR_FUN_ATTR int32_t futrts_popc16(int16_t x) {
  return __popc(zext_i16_i32(x));
}

SCALAR_FUN_ATTR int32_t futrts_popc32(int32_t x) {
  return __popc(x);
}

SCALAR_FUN_ATTR int32_t futrts_popc64(int64_t x) {
  return __popcll(x);
}

#else // Not OpenCL or CUDA, but plain C.

SCALAR_FUN_ATTR int32_t futrts_popc8(uint8_t x) {
  int c = 0;
  for (; x; ++c) { x &= x - 1; }
  return c;
}

SCALAR_FUN_ATTR int32_t futrts_popc16(uint16_t x) {
  int c = 0;
  for (; x; ++c) { x &= x - 1; }
  return c;
}

SCALAR_FUN_ATTR int32_t futrts_popc32(uint32_t x) {
  int c = 0;
  for (; x; ++c) { x &= x - 1; }
  return c;
}

SCALAR_FUN_ATTR int32_t futrts_popc64(uint64_t x) {
  int c = 0;
  for (; x; ++c) { x &= x - 1; }
  return c;
}
#endif

#if defined(__OPENCL_VERSION__)
SCALAR_FUN_ATTR uint8_t  futrts_umul_hi8 ( uint8_t a,  uint8_t b) { return mul_hi(a, b); }
SCALAR_FUN_ATTR uint16_t futrts_umul_hi16(uint16_t a, uint16_t b) { return mul_hi(a, b); }
SCALAR_FUN_ATTR uint32_t futrts_umul_hi32(uint32_t a, uint32_t b) { return mul_hi(a, b); }
SCALAR_FUN_ATTR uint64_t futrts_umul_hi64(uint64_t a, uint64_t b) { return mul_hi(a, b); }
SCALAR_FUN_ATTR uint8_t  futrts_smul_hi8 ( int8_t a,  int8_t b) { return mul_hi(a, b); }
SCALAR_FUN_ATTR uint16_t futrts_smul_hi16(int16_t a, int16_t b) { return mul_hi(a, b); }
SCALAR_FUN_ATTR uint32_t futrts_smul_hi32(int32_t a, int32_t b) { return mul_hi(a, b); }
SCALAR_FUN_ATTR uint64_t futrts_smul_hi64(int64_t a, int64_t b) { return mul_hi(a, b); }
#elif defined(__CUDA_ARCH__)
SCALAR_FUN_ATTR  uint8_t futrts_umul_hi8(uint8_t a, uint8_t b) { return ((uint16_t)a) * ((uint16_t)b) >> 8; }
SCALAR_FUN_ATTR uint16_t futrts_umul_hi16(uint16_t a, uint16_t b) { return ((uint32_t)a) * ((uint32_t)b) >> 16; }
SCALAR_FUN_ATTR uint32_t futrts_umul_hi32(uint32_t a, uint32_t b) { return __umulhi(a, b); }
SCALAR_FUN_ATTR uint64_t futrts_umul_hi64(uint64_t a, uint64_t b) { return __umul64hi(a, b); }
SCALAR_FUN_ATTR  uint8_t futrts_smul_hi8 ( int8_t a, int8_t b) { return ((int16_t)a) * ((int16_t)b) >> 8; }
SCALAR_FUN_ATTR uint16_t futrts_smul_hi16(int16_t a, int16_t b) { return ((int32_t)a) * ((int32_t)b) >> 16; }
SCALAR_FUN_ATTR uint32_t futrts_smul_hi32(int32_t a, int32_t b) { return __mulhi(a, b); }
SCALAR_FUN_ATTR uint64_t futrts_smul_hi64(int64_t a, int64_t b) { return __mul64hi(a, b); }
#elif ISPC
SCALAR_FUN_ATTR uint8_t futrts_umul_hi8(uint8_t a, uint8_t b) { return ((uint16_t)a) * ((uint16_t)b) >> 8; }
SCALAR_FUN_ATTR uint16_t futrts_umul_hi16(uint16_t a, uint16_t b) { return ((uint32_t)a) * ((uint32_t)b) >> 16; }
SCALAR_FUN_ATTR uint32_t futrts_umul_hi32(uint32_t a, uint32_t b) { return ((uint64_t)a) * ((uint64_t)b) >> 32; }
SCALAR_FUN_ATTR uint64_t futrts_umul_hi64(uint64_t a, uint64_t b) {
  uint64_t ah = a >> 32;
  uint64_t al = a & 0xffffffff;
  uint64_t bh = b >> 32;
  uint64_t bl = b & 0xffffffff;

  uint64_t p1 = al * bl;
  uint64_t p2 = al * bh;
  uint64_t p3 = ah * bl;
  uint64_t p4 = ah * bh;

  uint64_t p1h = p1 >> 32;
  uint64_t p2h = p2 >> 32;
  uint64_t p3h = p3 >> 32;
  uint64_t p2l = p2 & 0xffffffff;
  uint64_t p3l = p3 & 0xffffffff;

  uint64_t l = p1h + p2l + p3l;
  uint64_t m = (p2 >> 32) + (p3 >> 32);
  uint64_t h = (l >> 32) + m + p4;

  return h;
}
SCALAR_FUN_ATTR  int8_t futrts_smul_hi8 ( int8_t a,  int8_t b) { return ((uint16_t)a) * ((uint16_t)b) >> 8; }
SCALAR_FUN_ATTR int16_t futrts_smul_hi16(int16_t a, int16_t b) { return ((uint32_t)a) * ((uint32_t)b) >> 16; }
SCALAR_FUN_ATTR int32_t futrts_smul_hi32(int32_t a, int32_t b) { return ((uint64_t)a) * ((uint64_t)b) >> 32; }
SCALAR_FUN_ATTR int64_t futrts_smul_hi64(int64_t a, int64_t b) {
  uint64_t ah = a >> 32;
  uint64_t al = a & 0xffffffff;
  uint64_t bh = b >> 32;
  uint64_t bl = b & 0xffffffff;

  uint64_t p1 =  al * bl;
  int64_t  p2 = al * bh;
  int64_t  p3 = ah * bl;
  uint64_t p4 =  ah * bh;

  uint64_t p1h = p1 >> 32;
  uint64_t p2h = p2 >> 32;
  uint64_t p3h = p3 >> 32;
  uint64_t p2l = p2 & 0xffffffff;
  uint64_t p3l = p3 & 0xffffffff;

  uint64_t l = p1h + p2l + p3l;
  uint64_t m = (p2 >> 32) + (p3 >> 32);
  uint64_t h = (l >> 32) + m + p4;

  return h;
}

#else // Not OpenCL, ISPC, or CUDA, but plain C.
SCALAR_FUN_ATTR uint8_t futrts_umul_hi8(uint8_t a, uint8_t b) { return ((uint16_t)a) * ((uint16_t)b) >> 8; }
SCALAR_FUN_ATTR uint16_t futrts_umul_hi16(uint16_t a, uint16_t b) { return ((uint32_t)a) * ((uint32_t)b) >> 16; }
SCALAR_FUN_ATTR uint32_t futrts_umul_hi32(uint32_t a, uint32_t b) { return ((uint64_t)a) * ((uint64_t)b) >> 32; }
SCALAR_FUN_ATTR uint64_t futrts_umul_hi64(uint64_t a, uint64_t b) { return ((__uint128_t)a) * ((__uint128_t)b) >> 64; }
SCALAR_FUN_ATTR int8_t futrts_smul_hi8(int8_t a, int8_t b) { return ((int16_t)a) * ((int16_t)b) >> 8; }
SCALAR_FUN_ATTR int16_t futrts_smul_hi16(int16_t a, int16_t b) { return ((int32_t)a) * ((int32_t)b) >> 16; }
SCALAR_FUN_ATTR int32_t futrts_smul_hi32(int32_t a, int32_t b) { return ((int64_t)a) * ((int64_t)b) >> 32; }
SCALAR_FUN_ATTR int64_t futrts_smul_hi64(int64_t a, int64_t b) { return ((__int128_t)a) * ((__int128_t)b) >> 64; }
#endif

#if defined(__OPENCL_VERSION__)
SCALAR_FUN_ATTR  uint8_t futrts_umad_hi8 ( uint8_t a,  uint8_t b,  uint8_t c) { return mad_hi(a, b, c); }
SCALAR_FUN_ATTR uint16_t futrts_umad_hi16(uint16_t a, uint16_t b, uint16_t c) { return mad_hi(a, b, c); }
SCALAR_FUN_ATTR uint32_t futrts_umad_hi32(uint32_t a, uint32_t b, uint32_t c) { return mad_hi(a, b, c); }
SCALAR_FUN_ATTR uint64_t futrts_umad_hi64(uint64_t a, uint64_t b, uint64_t c) { return mad_hi(a, b, c); }
SCALAR_FUN_ATTR  uint8_t futrts_smad_hi8( int8_t a,  int8_t b,   int8_t c) { return mad_hi(a, b, c); }
SCALAR_FUN_ATTR uint16_t futrts_smad_hi16(int16_t a, int16_t b, int16_t c) { return mad_hi(a, b, c); }
SCALAR_FUN_ATTR uint32_t futrts_smad_hi32(int32_t a, int32_t b, int32_t c) { return mad_hi(a, b, c); }
SCALAR_FUN_ATTR uint64_t futrts_smad_hi64(int64_t a, int64_t b, int64_t c) { return mad_hi(a, b, c); }
#else // Not OpenCL

SCALAR_FUN_ATTR  uint8_t futrts_umad_hi8( uint8_t a,  uint8_t b,  uint8_t c) { return futrts_umul_hi8(a, b) + c; }
SCALAR_FUN_ATTR uint16_t futrts_umad_hi16(uint16_t a, uint16_t b, uint16_t c) { return futrts_umul_hi16(a, b) + c; }
SCALAR_FUN_ATTR uint32_t futrts_umad_hi32(uint32_t a, uint32_t b, uint32_t c) { return futrts_umul_hi32(a, b) + c; }
SCALAR_FUN_ATTR uint64_t futrts_umad_hi64(uint64_t a, uint64_t b, uint64_t c) { return futrts_umul_hi64(a, b) + c; }
SCALAR_FUN_ATTR  uint8_t futrts_smad_hi8 ( int8_t a,  int8_t b,  int8_t c) { return futrts_smul_hi8(a, b) + c; }
SCALAR_FUN_ATTR uint16_t futrts_smad_hi16(int16_t a, int16_t b, int16_t c) { return futrts_smul_hi16(a, b) + c; }
SCALAR_FUN_ATTR uint32_t futrts_smad_hi32(int32_t a, int32_t b, int32_t c) { return futrts_smul_hi32(a, b) + c; }
SCALAR_FUN_ATTR uint64_t futrts_smad_hi64(int64_t a, int64_t b, int64_t c) { return futrts_smul_hi64(a, b) + c; }
#endif

#if defined(__OPENCL_VERSION__)
SCALAR_FUN_ATTR int32_t futrts_clzz8(int8_t x) {
  return clz(x);
}

SCALAR_FUN_ATTR int32_t futrts_clzz16(int16_t x) {
  return clz(x);
}

SCALAR_FUN_ATTR int32_t futrts_clzz32(int32_t x) {
  return clz(x);
}

SCALAR_FUN_ATTR int32_t futrts_clzz64(int64_t x) {
  return clz(x);
}

#elif defined(__CUDA_ARCH__)

SCALAR_FUN_ATTR int32_t futrts_clzz8(int8_t x) {
  return __clz(zext_i8_i32(x)) - 24;
}

SCALAR_FUN_ATTR int32_t futrts_clzz16(int16_t x) {
  return __clz(zext_i16_i32(x)) - 16;
}

SCALAR_FUN_ATTR int32_t futrts_clzz32(int32_t x) {
  return __clz(x);
}

SCALAR_FUN_ATTR int32_t futrts_clzz64(int64_t x) {
  return __clzll(x);
}

#elif ISPC

SCALAR_FUN_ATTR int32_t futrts_clzz8(int8_t x) {
  return count_leading_zeros((int32_t)(uint8_t)x)-24;
}

SCALAR_FUN_ATTR int32_t futrts_clzz16(int16_t x) {
  return count_leading_zeros((int32_t)(uint16_t)x)-16;
}

SCALAR_FUN_ATTR int32_t futrts_clzz32(int32_t x) {
  return count_leading_zeros(x);
}

SCALAR_FUN_ATTR int32_t futrts_clzz64(int64_t x) {
  return count_leading_zeros(x);
}

#else // Not OpenCL, ISPC or CUDA, but plain C.

SCALAR_FUN_ATTR int32_t futrts_clzz8(int8_t x) {
  return x == 0 ? 8 : __builtin_clz((uint32_t)zext_i8_i32(x)) - 24;
}

SCALAR_FUN_ATTR int32_t futrts_clzz16(int16_t x) {
  return x == 0 ? 16 : __builtin_clz((uint32_t)zext_i16_i32(x)) - 16;
}

SCALAR_FUN_ATTR int32_t futrts_clzz32(int32_t x) {
  return x == 0 ? 32 : __builtin_clz((uint32_t)x);
}

SCALAR_FUN_ATTR int32_t futrts_clzz64(int64_t x) {
  return x == 0 ? 64 : __builtin_clzll((uint64_t)x);
}
#endif

#if defined(__OPENCL_VERSION__)
SCALAR_FUN_ATTR int32_t futrts_ctzz8(int8_t x) {
  int i = 0;
  for (; i < 8 && (x & 1) == 0; i++, x >>= 1)
    ;
  return i;
}

SCALAR_FUN_ATTR int32_t futrts_ctzz16(int16_t x) {
  int i = 0;
  for (; i < 16 && (x & 1) == 0; i++, x >>= 1)
    ;
  return i;
}

SCALAR_FUN_ATTR int32_t futrts_ctzz32(int32_t x) {
  int i = 0;
  for (; i < 32 && (x & 1) == 0; i++, x >>= 1)
    ;
  return i;
}

SCALAR_FUN_ATTR int32_t futrts_ctzz64(int64_t x) {
  int i = 0;
  for (; i < 64 && (x & 1) == 0; i++, x >>= 1)
    ;
  return i;
}

#elif defined(__CUDA_ARCH__)

SCALAR_FUN_ATTR int32_t futrts_ctzz8(int8_t x) {
  int y = __ffs(x);
  return y == 0 ? 8 : y - 1;
}

SCALAR_FUN_ATTR int32_t futrts_ctzz16(int16_t x) {
  int y = __ffs(x);
  return y == 0 ? 16 : y - 1;
}

SCALAR_FUN_ATTR int32_t futrts_ctzz32(int32_t x) {
  int y = __ffs(x);
  return y == 0 ? 32 : y - 1;
}

SCALAR_FUN_ATTR int32_t futrts_ctzz64(int64_t x) {
  int y = __ffsll(x);
  return y == 0 ? 64 : y - 1;
}

#elif ISPC

SCALAR_FUN_ATTR int32_t futrts_ctzz8(int8_t x) {
  return x == 0 ? 8 : count_trailing_zeros((int32_t)x);
}

SCALAR_FUN_ATTR int32_t futrts_ctzz16(int16_t x) {
  return x == 0 ? 16 : count_trailing_zeros((int32_t)x);
}

SCALAR_FUN_ATTR int32_t futrts_ctzz32(int32_t x) {
  return count_trailing_zeros(x);
}

SCALAR_FUN_ATTR int32_t futrts_ctzz64(int64_t x) {
  return count_trailing_zeros(x);
}

#else // Not OpenCL or CUDA, but plain C.

SCALAR_FUN_ATTR int32_t futrts_ctzz8(int8_t x) {
  return x == 0 ? 8 : __builtin_ctz((uint32_t)x);
}

SCALAR_FUN_ATTR int32_t futrts_ctzz16(int16_t x) {
  return x == 0 ? 16 : __builtin_ctz((uint32_t)x);
}

SCALAR_FUN_ATTR int32_t futrts_ctzz32(int32_t x) {
  return x == 0 ? 32 : __builtin_ctz((uint32_t)x);
}

SCALAR_FUN_ATTR int32_t futrts_ctzz64(int64_t x) {
  return x == 0 ? 64 : __builtin_ctzll((uint64_t)x);
}
#endif

SCALAR_FUN_ATTR float fdiv32(float x, float y) {
  return x / y;
}

SCALAR_FUN_ATTR float fadd32(float x, float y) {
  return x + y;
}

SCALAR_FUN_ATTR float fsub32(float x, float y) {
  return x - y;
}

SCALAR_FUN_ATTR float fmul32(float x, float y) {
  return x * y;
}

SCALAR_FUN_ATTR bool cmplt32(float x, float y) {
  return x < y;
}

SCALAR_FUN_ATTR bool cmple32(float x, float y) {
  return x <= y;
}

SCALAR_FUN_ATTR float sitofp_i8_f32(int8_t x) {
  return (float) x;
}

SCALAR_FUN_ATTR float sitofp_i16_f32(int16_t x) {
  return (float) x;
}

SCALAR_FUN_ATTR float sitofp_i32_f32(int32_t x) {
  return (float) x;
}

SCALAR_FUN_ATTR float sitofp_i64_f32(int64_t x) {
  return (float) x;
}

SCALAR_FUN_ATTR float uitofp_i8_f32(uint8_t x) {
  return (float) x;
}

SCALAR_FUN_ATTR float uitofp_i16_f32(uint16_t x) {
  return (float) x;
}

SCALAR_FUN_ATTR float uitofp_i32_f32(uint32_t x) {
  return (float) x;
}

SCALAR_FUN_ATTR float uitofp_i64_f32(uint64_t x) {
  return (float) x;
}

#ifdef __OPENCL_VERSION__
SCALAR_FUN_ATTR float fabs32(float x) {
  return fabs(x);
}

SCALAR_FUN_ATTR float fmax32(float x, float y) {
  return fmax(x, y);
}

SCALAR_FUN_ATTR float fmin32(float x, float y) {
  return fmin(x, y);
}

SCALAR_FUN_ATTR float fpow32(float x, float y) {
  return pow(x, y);
}

#elif ISPC

SCALAR_FUN_ATTR float fabs32(float x) {
  return abs(x);
}

SCALAR_FUN_ATTR float fmax32(float x, float y) {
  return isnan(x) ? y : isnan(y) ? x : max(x, y);
}

SCALAR_FUN_ATTR float fmin32(float x, float y) {
  return isnan(x) ? y : isnan(y) ? x : min(x, y);
}

SCALAR_FUN_ATTR float fpow32(float a, float b) {
  float ret;
  foreach_active (i) {
      uniform float r = __stdlib_powf(extract(a, i), extract(b, i));
      ret = insert(ret, i, r);
  }
  return ret;
}

#else // Not OpenCL, but CUDA or plain C.

SCALAR_FUN_ATTR float fabs32(float x) {
  return fabsf(x);
}

SCALAR_FUN_ATTR float fmax32(float x, float y) {
  return fmaxf(x, y);
}

SCALAR_FUN_ATTR float fmin32(float x, float y) {
  return fminf(x, y);
}

SCALAR_FUN_ATTR float fpow32(float x, float y) {
  return powf(x, y);
}
#endif

SCALAR_FUN_ATTR bool futrts_isnan32(float x) {
  return isnan(x);
}

#if ISPC

SCALAR_FUN_ATTR bool futrts_isinf32(float x) {
  return !isnan(x) && isnan(x - x);
}

SCALAR_FUN_ATTR bool futrts_isfinite32(float x) {
  return !isnan(x) && !futrts_isinf32(x);
}

#else

SCALAR_FUN_ATTR bool futrts_isinf32(float x) {
  return isinf(x);
}

#endif

SCALAR_FUN_ATTR int8_t fptosi_f32_i8(float x) {
  if (futrts_isnan32(x) || futrts_isinf32(x)) {
    return 0;
  } else {
    return (int8_t) x;
  }
}

SCALAR_FUN_ATTR int16_t fptosi_f32_i16(float x) {
  if (futrts_isnan32(x) || futrts_isinf32(x)) {
    return 0;
  } else {
    return (int16_t) x;
  }
}

SCALAR_FUN_ATTR int32_t fptosi_f32_i32(float x) {
  if (futrts_isnan32(x) || futrts_isinf32(x)) {
    return 0;
  } else {
    return (int32_t) x;
  }
}

SCALAR_FUN_ATTR int64_t fptosi_f32_i64(float x) {
  if (futrts_isnan32(x) || futrts_isinf32(x)) {
    return 0;
  } else {
    return (int64_t) x;
  };
}

SCALAR_FUN_ATTR uint8_t fptoui_f32_i8(float x) {
  if (futrts_isnan32(x) || futrts_isinf32(x)) {
    return 0;
  } else {
    return (uint8_t) (int8_t) x;
  }
}

SCALAR_FUN_ATTR uint16_t fptoui_f32_i16(float x) {
  if (futrts_isnan32(x) || futrts_isinf32(x)) {
    return 0;
  } else {
    return (uint16_t) (int16_t) x;
  }
}

SCALAR_FUN_ATTR uint32_t fptoui_f32_i32(float x) {
  if (futrts_isnan32(x) || futrts_isinf32(x)) {
    return 0;
  } else {
    return (uint32_t) (int32_t) x;
  }
}

SCALAR_FUN_ATTR uint64_t fptoui_f32_i64(float x) {
  if (futrts_isnan32(x) || futrts_isinf32(x)) {
    return 0;
  } else {
    return (uint64_t) (int64_t) x;
  }
}

SCALAR_FUN_ATTR bool ftob_f32_bool(float x) {
  return x != 0;
}

SCALAR_FUN_ATTR float btof_bool_f32(bool x) {
  return x ? 1 : 0;
}

#ifdef __OPENCL_VERSION__
SCALAR_FUN_ATTR float futrts_log32(float x) {
  return log(x);
}

SCALAR_FUN_ATTR float futrts_log2_32(float x) {
  return log2(x);
}

SCALAR_FUN_ATTR float futrts_log10_32(float x) {
  return log10(x);
}

SCALAR_FUN_ATTR float futrts_log1p_32(float x) {
  return log1p(x);
}

SCALAR_FUN_ATTR float futrts_sqrt32(float x) {
  return sqrt(x);
}

SCALAR_FUN_ATTR float futrts_cbrt32(float x) {
  return cbrt(x);
}

SCALAR_FUN_ATTR float futrts_exp32(float x) {
  return exp(x);
}

SCALAR_FUN_ATTR float futrts_cos32(float x) {
  return cos(x);
}

SCALAR_FUN_ATTR float futrts_sin32(float x) {
  return sin(x);
}

SCALAR_FUN_ATTR float futrts_tan32(float x) {
  return tan(x);
}

SCALAR_FUN_ATTR float futrts_acos32(float x) {
  return acos(x);
}

SCALAR_FUN_ATTR float futrts_asin32(float x) {
  return asin(x);
}

SCALAR_FUN_ATTR float futrts_atan32(float x) {
  return atan(x);
}

SCALAR_FUN_ATTR float futrts_cosh32(float x) {
  return cosh(x);
}

SCALAR_FUN_ATTR float futrts_sinh32(float x) {
  return sinh(x);
}

SCALAR_FUN_ATTR float futrts_tanh32(float x) {
  return tanh(x);
}

SCALAR_FUN_ATTR float futrts_acosh32(float x) {
  return acosh(x);
}

SCALAR_FUN_ATTR float futrts_asinh32(float x) {
  return asinh(x);
}

SCALAR_FUN_ATTR float futrts_atanh32(float x) {
  return atanh(x);
}

SCALAR_FUN_ATTR float futrts_atan2_32(float x, float y) {
  return atan2(x, y);
}

SCALAR_FUN_ATTR float futrts_hypot32(float x, float y) {
  return hypot(x, y);
}

SCALAR_FUN_ATTR float futrts_gamma32(float x) {
  return tgamma(x);
}

SCALAR_FUN_ATTR float futrts_lgamma32(float x) {
  return lgamma(x);
}

SCALAR_FUN_ATTR float futrts_erf32(float x) {
  return erf(x);
}

SCALAR_FUN_ATTR float futrts_erfc32(float x) {
  return erfc(x);
}

SCALAR_FUN_ATTR float fmod32(float x, float y) {
  return fmod(x, y);
}

SCALAR_FUN_ATTR float futrts_round32(float x) {
  return rint(x);
}

SCALAR_FUN_ATTR float futrts_floor32(float x) {
  return floor(x);
}

SCALAR_FUN_ATTR float futrts_ceil32(float x) {
  return ceil(x);
}

SCALAR_FUN_ATTR float futrts_nextafter32(float x, float y) {
  return nextafter(x, y);
}

SCALAR_FUN_ATTR float futrts_lerp32(float v0, float v1, float t) {
  return mix(v0, v1, t);
}

SCALAR_FUN_ATTR float futrts_ldexp32(float x, int32_t y) {
  return ldexp(x, y);
}

SCALAR_FUN_ATTR float futrts_copysign32(float x, float y) {
  return copysign(x, y);
}

SCALAR_FUN_ATTR float futrts_mad32(float a, float b, float c) {
  return mad(a, b, c);
}

SCALAR_FUN_ATTR float futrts_fma32(float a, float b, float c) {
  return fma(a, b, c);
}

#elif ISPC

SCALAR_FUN_ATTR float futrts_log32(float x) {
  return futrts_isfinite32(x) || (futrts_isinf32(x) && x < 0)? log(x) : x;
}

SCALAR_FUN_ATTR float futrts_log2_32(float x) {
  return futrts_log32(x) / log(2.0f);
}

SCALAR_FUN_ATTR float futrts_log10_32(float x) {
  return futrts_log32(x) / log(10.0f);
}

SCALAR_FUN_ATTR float futrts_log1p_32(float x) {
  if(x == -1.0f || (futrts_isinf32(x) && x > 0.0f)) return x / 0.0f;
  float y = 1.0f + x;
  float z = y - 1.0f;
  return log(y) - (z-x)/y;
}

SCALAR_FUN_ATTR float futrts_sqrt32(float x) {
  return sqrt(x);
}

extern "C" unmasked uniform float cbrtf(uniform float);
SCALAR_FUN_ATTR float futrts_cbrt32(float x) {
  float res;
  foreach_active (i) {
    uniform float r = cbrtf(extract(x, i));
    res = insert(res, i, r);
  }
  return res;
}

SCALAR_FUN_ATTR float futrts_exp32(float x) {
  return exp(x);
}

SCALAR_FUN_ATTR float futrts_cos32(float x) {
  return cos(x);
}

SCALAR_FUN_ATTR float futrts_sin32(float x) {
  return sin(x);
}

SCALAR_FUN_ATTR float futrts_tan32(float x) {
  return tan(x);
}

SCALAR_FUN_ATTR float futrts_acos32(float x) {
  return acos(x);
}

SCALAR_FUN_ATTR float futrts_asin32(float x) {
  return asin(x);
}

SCALAR_FUN_ATTR float futrts_atan32(float x) {
  return atan(x);
}

SCALAR_FUN_ATTR float futrts_cosh32(float x) {
  return (exp(x)+exp(-x)) / 2.0f;
}

SCALAR_FUN_ATTR float futrts_sinh32(float x) {
  return (exp(x)-exp(-x)) / 2.0f;
}

SCALAR_FUN_ATTR float futrts_tanh32(float x) {
  return futrts_sinh32(x)/futrts_cosh32(x);
}

SCALAR_FUN_ATTR float futrts_acosh32(float x) {
  float f = x+sqrt(x*x-1);
  if(futrts_isfinite32(f)) return log(f);
  return f;
}

SCALAR_FUN_ATTR float futrts_asinh32(float x) {
  float f = x+sqrt(x*x+1);
  if(futrts_isfinite32(f)) return log(f);
  return f;

}

SCALAR_FUN_ATTR float futrts_atanh32(float x) {
  float f = (1+x)/(1-x);
  if(futrts_isfinite32(f)) return log(f)/2.0f;
  return f;

}

SCALAR_FUN_ATTR float futrts_atan2_32(float x, float y) {
  return (x == 0.0f && y == 0.0f) ? 0.0f : atan2(x, y);
}

SCALAR_FUN_ATTR float futrts_hypot32(float x, float y) {
  if (futrts_isfinite32(x) && futrts_isfinite32(y)) {
    x = abs(x);
    y = abs(y);
    float a;
    float b;
    if (x >= y){
        a = x;
        b = y;
    } else {
        a = y;
        b = x;
    }
    if(b == 0){
      return a;
    }

    int e;
    float an;
    float bn;
    an = frexp (a, &e);
    bn = ldexp (b, - e);
    float cn;
    cn = sqrt (an * an + bn * bn);
    return ldexp (cn, e);
  } else {
    if (futrts_isinf32(x) || futrts_isinf32(y)) return INFINITY;
    else return x + y;
  }

}

extern "C" unmasked uniform float tgammaf(uniform float x);
SCALAR_FUN_ATTR float futrts_gamma32(float x) {
  float res;
  foreach_active (i) {
    uniform float r = tgammaf(extract(x, i));
    res = insert(res, i, r);
  }
  return res;
}

extern "C" unmasked uniform float lgammaf(uniform float x);
SCALAR_FUN_ATTR float futrts_lgamma32(float x) {
  float res;
  foreach_active (i) {
    uniform float r = lgammaf(extract(x, i));
    res = insert(res, i, r);
  }
  return res;
}

extern "C" unmasked uniform float erff(uniform float x);
SCALAR_FUN_ATTR float futrts_erf32(float x) {
  float res;
  foreach_active (i) {
    uniform float r = erff(extract(x, i));
    res = insert(res, i, r);
  }
  return res;
}

extern "C" unmasked uniform float erfcf(uniform float x);
SCALAR_FUN_ATTR float futrts_erfc32(float x) {
  float res;
  foreach_active (i) {
    uniform float r = erfcf(extract(x, i));
    res = insert(res, i, r);
  }
  return res;
}

SCALAR_FUN_ATTR float fmod32(float x, float y) {
  return x - y * trunc(x/y);
}

SCALAR_FUN_ATTR float futrts_round32(float x) {
  return round(x);
}

SCALAR_FUN_ATTR float futrts_floor32(float x) {
  return floor(x);
}

SCALAR_FUN_ATTR float futrts_ceil32(float x) {
  return ceil(x);
}

extern "C" unmasked uniform float nextafterf(uniform float x, uniform float y);
SCALAR_FUN_ATTR float futrts_nextafter32(float x, float y) {
  float res;
  foreach_active (i) {
    uniform float r = nextafterf(extract(x, i), extract(y, i));
    res = insert(res, i, r);
  }
  return res;
}

SCALAR_FUN_ATTR float futrts_lerp32(float v0, float v1, float t) {
  return v0 + (v1 - v0) * t;
}

SCALAR_FUN_ATTR float futrts_ldexp32(float x, int32_t y) {
  return x * pow((double)2.0, (double)y);
}

SCALAR_FUN_ATTR float futrts_copysign32(float x, float y) {
  int32_t xb = futrts_to_bits32(x);
  int32_t yb = futrts_to_bits32(y);
  return futrts_from_bits32((xb & ~(1<<31)) | (yb & (1<<31)));
}

SCALAR_FUN_ATTR float futrts_mad32(float a, float b, float c) {
  return a * b + c;
}

SCALAR_FUN_ATTR float futrts_fma32(float a, float b, float c) {
  return a * b + c;
}

#else // Not OpenCL or ISPC, but CUDA or plain C.

SCALAR_FUN_ATTR float futrts_log32(float x) {
  return logf(x);
}

SCALAR_FUN_ATTR float futrts_log2_32(float x) {
  return log2f(x);
}

SCALAR_FUN_ATTR float futrts_log10_32(float x) {
  return log10f(x);
}

SCALAR_FUN_ATTR float futrts_log1p_32(float x) {
  return log1pf(x);
}

SCALAR_FUN_ATTR float futrts_sqrt32(float x) {
  return sqrtf(x);
}

SCALAR_FUN_ATTR float futrts_cbrt32(float x) {
  return cbrtf(x);
}

SCALAR_FUN_ATTR float futrts_exp32(float x) {
  return expf(x);
}

SCALAR_FUN_ATTR float futrts_cos32(float x) {
  return cosf(x);
}

SCALAR_FUN_ATTR float futrts_sin32(float x) {
  return sinf(x);
}

SCALAR_FUN_ATTR float futrts_tan32(float x) {
  return tanf(x);
}

SCALAR_FUN_ATTR float futrts_acos32(float x) {
  return acosf(x);
}

SCALAR_FUN_ATTR float futrts_asin32(float x) {
  return asinf(x);
}

SCALAR_FUN_ATTR float futrts_atan32(float x) {
  return atanf(x);
}

SCALAR_FUN_ATTR float futrts_cosh32(float x) {
  return coshf(x);
}

SCALAR_FUN_ATTR float futrts_sinh32(float x) {
  return sinhf(x);
}

SCALAR_FUN_ATTR float futrts_tanh32(float x) {
  return tanhf(x);
}

SCALAR_FUN_ATTR float futrts_acosh32(float x) {
  return acoshf(x);
}

SCALAR_FUN_ATTR float futrts_asinh32(float x) {
  return asinhf(x);
}

SCALAR_FUN_ATTR float futrts_atanh32(float x) {
  return atanhf(x);
}

SCALAR_FUN_ATTR float futrts_atan2_32(float x, float y) {
  return atan2f(x, y);
}

SCALAR_FUN_ATTR float futrts_hypot32(float x, float y) {
  return hypotf(x, y);
}

SCALAR_FUN_ATTR float futrts_gamma32(float x) {
  return tgammaf(x);
}

SCALAR_FUN_ATTR float futrts_lgamma32(float x) {
  return lgammaf(x);
}

SCALAR_FUN_ATTR float futrts_erf32(float x) {
  return erff(x);
}

SCALAR_FUN_ATTR float futrts_erfc32(float x) {
  return erfcf(x);
}

SCALAR_FUN_ATTR float fmod32(float x, float y) {
  return fmodf(x, y);
}

SCALAR_FUN_ATTR float futrts_round32(float x) {
  return rintf(x);
}

SCALAR_FUN_ATTR float futrts_floor32(float x) {
  return floorf(x);
}

SCALAR_FUN_ATTR float futrts_ceil32(float x) {
  return ceilf(x);
}

SCALAR_FUN_ATTR float futrts_nextafter32(float x, float y) {
  return nextafterf(x, y);
}

SCALAR_FUN_ATTR float futrts_lerp32(float v0, float v1, float t) {
  return v0 + (v1 - v0) * t;
}

SCALAR_FUN_ATTR float futrts_ldexp32(float x, int32_t y) {
  return ldexpf(x, y);
}

SCALAR_FUN_ATTR float futrts_copysign32(float x, float y) {
  return copysignf(x, y);
}

SCALAR_FUN_ATTR float futrts_mad32(float a, float b, float c) {
  return a * b + c;
}

SCALAR_FUN_ATTR float futrts_fma32(float a, float b, float c) {
  return fmaf(a, b, c);
}
#endif

#if ISPC
SCALAR_FUN_ATTR int32_t futrts_to_bits32(float x) {
  return intbits(x);
}

SCALAR_FUN_ATTR float futrts_from_bits32(int32_t x) {
  return floatbits(x);
}
#else
SCALAR_FUN_ATTR int32_t futrts_to_bits32(float x) {
  union {
    float f;
    int32_t t;
  } p;

  p.f = x;
  return p.t;
}

SCALAR_FUN_ATTR float futrts_from_bits32(int32_t x) {
  union {
    int32_t f;
    float t;
  } p;

  p.f = x;
  return p.t;
}
#endif

SCALAR_FUN_ATTR float fsignum32(float x) {
  return futrts_isnan32(x) ? x : (x > 0 ? 1 : 0) - (x < 0 ? 1 : 0);
}

#ifdef FUTHARK_F64_ENABLED

SCALAR_FUN_ATTR double futrts_from_bits64(int64_t x);
SCALAR_FUN_ATTR int64_t futrts_to_bits64(double x);

#if ISPC
SCALAR_FUN_ATTR bool futrts_isinf64(float x) {
  return !isnan(x) && isnan(x - x);
}

SCALAR_FUN_ATTR bool futrts_isfinite64(float x) {
  return !isnan(x) && !futrts_isinf64(x);
}

SCALAR_FUN_ATTR double fdiv64(double x, double y) {
  return x / y;
}

SCALAR_FUN_ATTR double fadd64(double x, double y) {
  return x + y;
}

SCALAR_FUN_ATTR double fsub64(double x, double y) {
  return x - y;
}

SCALAR_FUN_ATTR double fmul64(double x, double y) {
  return x * y;
}

SCALAR_FUN_ATTR bool cmplt64(double x, double y) {
  return x < y;
}

SCALAR_FUN_ATTR bool cmple64(double x, double y) {
  return x <= y;
}

SCALAR_FUN_ATTR double sitofp_i8_f64(int8_t x) {
  return (double) x;
}

SCALAR_FUN_ATTR double sitofp_i16_f64(int16_t x) {
  return (double) x;
}

SCALAR_FUN_ATTR double sitofp_i32_f64(int32_t x) {
  return (double) x;
}

SCALAR_FUN_ATTR double sitofp_i64_f64(int64_t x) {
  return (double) x;
}

SCALAR_FUN_ATTR double uitofp_i8_f64(uint8_t x) {
  return (double) x;
}

SCALAR_FUN_ATTR double uitofp_i16_f64(uint16_t x) {
  return (double) x;
}

SCALAR_FUN_ATTR double uitofp_i32_f64(uint32_t x) {
  return (double) x;
}

SCALAR_FUN_ATTR double uitofp_i64_f64(uint64_t x) {
  return (double) x;
}

SCALAR_FUN_ATTR double fabs64(double x) {
  return abs(x);
}

SCALAR_FUN_ATTR double fmax64(double x, double y) {
  return isnan(x) ? y : isnan(y) ? x : max(x, y);
}

SCALAR_FUN_ATTR double fmin64(double x, double y) {
  return isnan(x) ? y : isnan(y) ? x : min(x, y);
}

SCALAR_FUN_ATTR double fpow64(double a, double b) {
  float ret;
  foreach_active (i) {
      uniform float r = __stdlib_powf(extract(a, i), extract(b, i));
      ret = insert(ret, i, r);
  }
  return ret;
}

SCALAR_FUN_ATTR double futrts_log64(double x) {
  return futrts_isfinite64(x) || (futrts_isinf64(x) && x < 0)? log(x) : x;
}

SCALAR_FUN_ATTR double futrts_log2_64(double x) {
  return futrts_log64(x)/log(2.0d);
}

SCALAR_FUN_ATTR double futrts_log10_64(double x) {
  return futrts_log64(x)/log(10.0d);
}

SCALAR_FUN_ATTR double futrts_log1p_64(double x) {
  if(x == -1.0d || (futrts_isinf64(x) && x > 0.0d)) return x / 0.0d;
  double y = 1.0d + x;
  double z = y - 1.0d;
  return log(y) - (z-x)/y;
}

SCALAR_FUN_ATTR double futrts_sqrt64(double x) {
  return sqrt(x);
}

extern "C" unmasked uniform double cbrt(uniform double);
SCALAR_FUN_ATTR double futrts_cbrt64(double x) {
  double res;
  foreach_active (i) {
    uniform double r = cbrtf(extract(x, i));
    res = insert(res, i, r);
  }
  return res;
}

SCALAR_FUN_ATTR double futrts_exp64(double x) {
  return exp(x);
}

SCALAR_FUN_ATTR double futrts_cos64(double x) {
  return cos(x);
}

SCALAR_FUN_ATTR double futrts_sin64(double x) {
  return sin(x);
}

SCALAR_FUN_ATTR double futrts_tan64(double x) {
  return tan(x);
}

SCALAR_FUN_ATTR double futrts_acos64(double x) {
  return acos(x);
}

SCALAR_FUN_ATTR double futrts_asin64(double x) {
  return asin(x);
}

SCALAR_FUN_ATTR double futrts_atan64(double x) {
  return atan(x);
}

SCALAR_FUN_ATTR double futrts_cosh64(double x) {
  return (exp(x)+exp(-x)) / 2.0d;
}

SCALAR_FUN_ATTR double futrts_sinh64(double x) {
  return (exp(x)-exp(-x)) / 2.0d;
}

SCALAR_FUN_ATTR double futrts_tanh64(double x) {
  return futrts_sinh64(x)/futrts_cosh64(x);
}

SCALAR_FUN_ATTR double futrts_acosh64(double x) {
  double f = x+sqrt(x*x-1.0d);
  if(futrts_isfinite64(f)) return log(f);
  return f;
}

SCALAR_FUN_ATTR double futrts_asinh64(double x) {
  double f = x+sqrt(x*x+1.0d);
  if(futrts_isfinite64(f)) return log(f);
  return f;
}

SCALAR_FUN_ATTR double futrts_atanh64(double x) {
  double f = (1.0d+x)/(1.0d-x);
  if(futrts_isfinite64(f)) return log(f)/2.0d;
  return f;

}

SCALAR_FUN_ATTR double futrts_atan2_64(double x, double y) {
  return atan2(x, y);
}

extern "C" unmasked uniform double hypot(uniform double x, uniform double y);
SCALAR_FUN_ATTR double futrts_hypot64(double x, double y) {
  double res;
  foreach_active (i) {
    uniform double r = hypot(extract(x, i), extract(y, i));
    res = insert(res, i, r);
  }
  return res;
}

extern "C" unmasked uniform double tgamma(uniform double x);
SCALAR_FUN_ATTR double futrts_gamma64(double x) {
  double res;
  foreach_active (i) {
    uniform double r = tgamma(extract(x, i));
    res = insert(res, i, r);
  }
  return res;
}

extern "C" unmasked uniform double lgamma(uniform double x);
SCALAR_FUN_ATTR double futrts_lgamma64(double x) {
  double res;
  foreach_active (i) {
    uniform double r = lgamma(extract(x, i));
    res = insert(res, i, r);
  }
  return res;
}

extern "C" unmasked uniform double erf(uniform double x);
SCALAR_FUN_ATTR double futrts_erf64(double x) {
  double res;
  foreach_active (i) {
    uniform double r = erf(extract(x, i));
    res = insert(res, i, r);
  }
  return res;
}

extern "C" unmasked uniform double erfc(uniform double x);
SCALAR_FUN_ATTR double futrts_erfc64(double x) {
  double res;
  foreach_active (i) {
    uniform double r = erfc(extract(x, i));
    res = insert(res, i, r);
  }
  return res;
}

SCALAR_FUN_ATTR double futrts_fma64(double a, double b, double c) {
  return a * b + c;
}

SCALAR_FUN_ATTR double futrts_round64(double x) {
  return round(x);
}

SCALAR_FUN_ATTR double futrts_ceil64(double x) {
  return ceil(x);
}

extern "C" unmasked uniform double nextafter(uniform float x, uniform double y);
SCALAR_FUN_ATTR float futrts_nextafter64(double x, double y) {
  double res;
  foreach_active (i) {
    uniform double r = nextafter(extract(x, i), extract(y, i));
    res = insert(res, i, r);
  }
  return res;
}

SCALAR_FUN_ATTR double futrts_floor64(double x) {
  return floor(x);
}

SCALAR_FUN_ATTR bool futrts_isnan64(double x) {
  return isnan(x);
}

SCALAR_FUN_ATTR int8_t fptosi_f64_i8(double x) {
  if (futrts_isnan64(x) || futrts_isinf64(x)) {
    return 0;
  } else {
    return (int8_t) x;
  }
}

SCALAR_FUN_ATTR int16_t fptosi_f64_i16(double x) {
  if (futrts_isnan64(x) || futrts_isinf64(x)) {
    return 0;
  } else {
    return (int16_t) x;
  }
}

SCALAR_FUN_ATTR int32_t fptosi_f64_i32(double x) {
  if (futrts_isnan64(x) || futrts_isinf64(x)) {
    return 0;
  } else {
    return (int32_t) x;
  }
}

SCALAR_FUN_ATTR int64_t fptosi_f64_i64(double x) {
  if (futrts_isnan64(x) || futrts_isinf64(x)) {
    return 0;
  } else {
    return (int64_t) x;
  }
}

SCALAR_FUN_ATTR uint8_t fptoui_f64_i8(double x) {
  if (futrts_isnan64(x) || futrts_isinf64(x)) {
    return 0;
  } else {
    return (uint8_t) (int8_t) x;
  }
}

SCALAR_FUN_ATTR uint16_t fptoui_f64_i16(double x) {
  if (futrts_isnan64(x) || futrts_isinf64(x)) {
    return 0;
  } else {
    return (uint16_t) (int16_t) x;
  }
}

SCALAR_FUN_ATTR uint32_t fptoui_f64_i32(double x) {
  if (futrts_isnan64(x) || futrts_isinf64(x)) {
    return 0;
  } else {
    return (uint32_t) (int32_t) x;
  }
}

SCALAR_FUN_ATTR uint64_t fptoui_f64_i64(double x) {
  if (futrts_isnan64(x) || futrts_isinf64(x)) {
    return 0;
  } else {
    return (uint64_t) (int64_t) x;
  }
}

SCALAR_FUN_ATTR bool ftob_f64_bool(double x) {
  return x != 0.0;
}

SCALAR_FUN_ATTR double btof_bool_f64(bool x) {
  return x ? 1.0 : 0.0;
}

SCALAR_FUN_ATTR int64_t futrts_to_bits64(double x) {
  int64_t res;
  foreach_active (i) {
    uniform double tmp = extract(x, i);
    uniform int64_t r = *((uniform int64_t* uniform)&tmp);
    res = insert(res, i, r);
  }
  return res;
}

SCALAR_FUN_ATTR double futrts_from_bits64(int64_t x) {
  double res;
  foreach_active (i) {
    uniform int64_t tmp = extract(x, i);
    uniform double r = *((uniform double* uniform)&tmp);
    res = insert(res, i, r);
  }
  return res;
}

SCALAR_FUN_ATTR double fmod64(double x, double y) {
  return x - y * trunc(x/y);
}

SCALAR_FUN_ATTR double fsignum64(double x) {
  return futrts_isnan64(x) ? x : (x > 0 ? 1.0d : 0.0d) - (x < 0 ? 1.0d : 0.0d);
}

SCALAR_FUN_ATTR double futrts_lerp64(double v0, double v1, double t) {
  return v0 + (v1 - v0) * t;
}

SCALAR_FUN_ATTR double futrts_ldexp64(double x, int32_t y) {
  return x * pow((double)2.0, (double)y);
}

SCALAR_FUN_ATTR double futrts_copysign64(double x, double y) {
  int64_t xb = futrts_to_bits64(x);
  int64_t yb = futrts_to_bits64(y);
  return futrts_from_bits64((xb & ~(((int64_t)1)<<63)) | (yb & (((int64_t)1)<<63)));
}

SCALAR_FUN_ATTR double futrts_mad64(double a, double b, double c) {
  return a * b + c;
}

SCALAR_FUN_ATTR float fpconv_f32_f32(float x) {
  return (float) x;
}

SCALAR_FUN_ATTR double fpconv_f32_f64(float x) {
  return (double) x;
}

SCALAR_FUN_ATTR float fpconv_f64_f32(double x) {
  return (float) x;
}

SCALAR_FUN_ATTR double fpconv_f64_f64(double x) {
  return (double) x;
}

#else

SCALAR_FUN_ATTR double fdiv64(double x, double y) {
  return x / y;
}

SCALAR_FUN_ATTR double fadd64(double x, double y) {
  return x + y;
}

SCALAR_FUN_ATTR double fsub64(double x, double y) {
  return x - y;
}

SCALAR_FUN_ATTR double fmul64(double x, double y) {
  return x * y;
}

SCALAR_FUN_ATTR bool cmplt64(double x, double y) {
  return x < y;
}

SCALAR_FUN_ATTR bool cmple64(double x, double y) {
  return x <= y;
}

SCALAR_FUN_ATTR double sitofp_i8_f64(int8_t x) {
  return (double) x;
}

SCALAR_FUN_ATTR double sitofp_i16_f64(int16_t x) {
  return (double) x;
}

SCALAR_FUN_ATTR double sitofp_i32_f64(int32_t x) {
  return (double) x;
}

SCALAR_FUN_ATTR double sitofp_i64_f64(int64_t x) {
  return (double) x;
}

SCALAR_FUN_ATTR double uitofp_i8_f64(uint8_t x) {
  return (double) x;
}

SCALAR_FUN_ATTR double uitofp_i16_f64(uint16_t x) {
  return (double) x;
}

SCALAR_FUN_ATTR double uitofp_i32_f64(uint32_t x) {
  return (double) x;
}

SCALAR_FUN_ATTR double uitofp_i64_f64(uint64_t x) {
  return (double) x;
}

SCALAR_FUN_ATTR double fabs64(double x) {
  return fabs(x);
}

SCALAR_FUN_ATTR double fmax64(double x, double y) {
  return fmax(x, y);
}

SCALAR_FUN_ATTR double fmin64(double x, double y) {
  return fmin(x, y);
}

SCALAR_FUN_ATTR double fpow64(double x, double y) {
  return pow(x, y);
}

SCALAR_FUN_ATTR double futrts_log64(double x) {
  return log(x);
}

SCALAR_FUN_ATTR double futrts_log2_64(double x) {
  return log2(x);
}

SCALAR_FUN_ATTR double futrts_log10_64(double x) {
  return log10(x);
}

SCALAR_FUN_ATTR double futrts_log1p_64(double x) {
  return log1p(x);
}

SCALAR_FUN_ATTR double futrts_sqrt64(double x) {
  return sqrt(x);
}

SCALAR_FUN_ATTR double futrts_cbrt64(double x) {
  return cbrt(x);
}

SCALAR_FUN_ATTR double futrts_exp64(double x) {
  return exp(x);
}

SCALAR_FUN_ATTR double futrts_cos64(double x) {
  return cos(x);
}

SCALAR_FUN_ATTR double futrts_sin64(double x) {
  return sin(x);
}

SCALAR_FUN_ATTR double futrts_tan64(double x) {
  return tan(x);
}

SCALAR_FUN_ATTR double futrts_acos64(double x) {
  return acos(x);
}

SCALAR_FUN_ATTR double futrts_asin64(double x) {
  return asin(x);
}

SCALAR_FUN_ATTR double futrts_atan64(double x) {
  return atan(x);
}

SCALAR_FUN_ATTR double futrts_cosh64(double x) {
  return cosh(x);
}

SCALAR_FUN_ATTR double futrts_sinh64(double x) {
  return sinh(x);
}

SCALAR_FUN_ATTR double futrts_tanh64(double x) {
  return tanh(x);
}

SCALAR_FUN_ATTR double futrts_acosh64(double x) {
  return acosh(x);
}

SCALAR_FUN_ATTR double futrts_asinh64(double x) {
  return asinh(x);
}

SCALAR_FUN_ATTR double futrts_atanh64(double x) {
  return atanh(x);
}

SCALAR_FUN_ATTR double futrts_atan2_64(double x, double y) {
  return atan2(x, y);
}

SCALAR_FUN_ATTR double futrts_hypot64(double x, double y) {
  return hypot(x, y);
}

SCALAR_FUN_ATTR double futrts_gamma64(double x) {
  return tgamma(x);
}

SCALAR_FUN_ATTR double futrts_lgamma64(double x) {
  return lgamma(x);
}

SCALAR_FUN_ATTR double futrts_erf64(double x) {
  return erf(x);
}

SCALAR_FUN_ATTR double futrts_erfc64(double x) {
  return erfc(x);
}

SCALAR_FUN_ATTR double futrts_fma64(double a, double b, double c) {
  return fma(a, b, c);
}

SCALAR_FUN_ATTR double futrts_round64(double x) {
  return rint(x);
}

SCALAR_FUN_ATTR double futrts_ceil64(double x) {
  return ceil(x);
}

SCALAR_FUN_ATTR float futrts_nextafter64(float x, float y) {
  return nextafter(x, y);
}

SCALAR_FUN_ATTR double futrts_floor64(double x) {
  return floor(x);
}

SCALAR_FUN_ATTR bool futrts_isnan64(double x) {
  return isnan(x);
}

SCALAR_FUN_ATTR bool futrts_isinf64(double x) {
  return isinf(x);
}

SCALAR_FUN_ATTR int8_t fptosi_f64_i8(double x) {
  if (futrts_isnan64(x) || futrts_isinf64(x)) {
    return 0;
  } else {
    return (int8_t) x;
  }
}

SCALAR_FUN_ATTR int16_t fptosi_f64_i16(double x) {
  if (futrts_isnan64(x) || futrts_isinf64(x)) {
    return 0;
  } else {
    return (int16_t) x;
  }
}

SCALAR_FUN_ATTR int32_t fptosi_f64_i32(double x) {
  if (futrts_isnan64(x) || futrts_isinf64(x)) {
    return 0;
  } else {
    return (int32_t) x;
  }
}

SCALAR_FUN_ATTR int64_t fptosi_f64_i64(double x) {
  if (futrts_isnan64(x) || futrts_isinf64(x)) {
    return 0;
  } else {
    return (int64_t) x;
  }
}

SCALAR_FUN_ATTR uint8_t fptoui_f64_i8(double x) {
  if (futrts_isnan64(x) || futrts_isinf64(x)) {
    return 0;
  } else {
    return (uint8_t) (int8_t) x;
  }
}

SCALAR_FUN_ATTR uint16_t fptoui_f64_i16(double x) {
  if (futrts_isnan64(x) || futrts_isinf64(x)) {
    return 0;
  } else {
    return (uint16_t) (int16_t) x;
  }
}

SCALAR_FUN_ATTR uint32_t fptoui_f64_i32(double x) {
  if (futrts_isnan64(x) || futrts_isinf64(x)) {
    return 0;
  } else {
    return (uint32_t) (int32_t) x;
  }
}

SCALAR_FUN_ATTR uint64_t fptoui_f64_i64(double x) {
  if (futrts_isnan64(x) || futrts_isinf64(x)) {
    return 0;
  } else {
    return (uint64_t) (int64_t) x;
  }
}

SCALAR_FUN_ATTR bool ftob_f64_bool(double x) {
  return x != 0;
}

SCALAR_FUN_ATTR double btof_bool_f64(bool x) {
  return x ? 1 : 0;
}

SCALAR_FUN_ATTR int64_t futrts_to_bits64(double x) {
  union {
    double f;
    int64_t t;
  } p;

  p.f = x;
  return p.t;
}

SCALAR_FUN_ATTR double futrts_from_bits64(int64_t x) {
  union {
    int64_t f;
    double t;
  } p;

  p.f = x;
  return p.t;
}

SCALAR_FUN_ATTR double fmod64(double x, double y) {
  return fmod(x, y);
}

SCALAR_FUN_ATTR double fsignum64(double x) {
  return futrts_isnan64(x) ? x : (x > 0) - (x < 0);
}

SCALAR_FUN_ATTR double futrts_lerp64(double v0, double v1, double t) {
#ifdef __OPENCL_VERSION__
  return mix(v0, v1, t);
#else
  return v0 + (v1 - v0) * t;
#endif
}

SCALAR_FUN_ATTR double futrts_ldexp64(double x, int32_t y) {
  return ldexp(x, y);
}

SCALAR_FUN_ATTR float futrts_copysign64(double x, double y) {
  return copysign(x, y);
}

SCALAR_FUN_ATTR double futrts_mad64(double a, double b, double c) {
#ifdef __OPENCL_VERSION__
  return mad(a, b, c);
#else
  return a * b + c;
#endif
}

SCALAR_FUN_ATTR float fpconv_f32_f32(float x) {
  return (float) x;
}

SCALAR_FUN_ATTR double fpconv_f32_f64(float x) {
  return (double) x;
}

SCALAR_FUN_ATTR float fpconv_f64_f32(double x) {
  return (float) x;
}

SCALAR_FUN_ATTR double fpconv_f64_f64(double x) {
  return (double) x;
}

#endif

#endif

// End of scalar.h.
// Start of scalar_f16.h.

// Half-precision is emulated if needed (e.g. in straight C) with the
// native type used if possible.  The emulation works by typedef'ing
// 'float' to 'f16', and then implementing all operations on single
// precision.  To cut down on duplication, we use the same code for
// those Futhark functions that require just operators or casts.  The
// in-memory representation for arrays will still be 16 bits even
// under emulation, so the compiler will have to be careful when
// generating reads or writes.

#if !defined(cl_khr_fp16) && !(defined(__CUDA_ARCH__) && __CUDA_ARCH__ >= 600) && !(defined(ISPC))
#define EMULATE_F16
#endif

#if !defined(EMULATE_F16) && defined(__OPENCL_VERSION__)
#pragma OPENCL EXTENSION cl_khr_fp16 : enable
#endif

#ifdef EMULATE_F16

// Note that the half-precision storage format is still 16 bits - the
// compiler will have to be real careful!
typedef float f16;

#elif ISPC
typedef float16 f16;

#else

#ifdef __CUDA_ARCH__
#include <cuda_fp16.h>
#endif

typedef half f16;

#endif

// Some of these functions convert to single precision because half
// precision versions are not available.

SCALAR_FUN_ATTR f16 fadd16(f16 x, f16 y) {
  return x + y;
}

SCALAR_FUN_ATTR f16 fsub16(f16 x, f16 y) {
  return x - y;
}

SCALAR_FUN_ATTR f16 fmul16(f16 x, f16 y) {
  return x * y;
}

SCALAR_FUN_ATTR bool cmplt16(f16 x, f16 y) {
  return x < y;
}

SCALAR_FUN_ATTR bool cmple16(f16 x, f16 y) {
  return x <= y;
}

SCALAR_FUN_ATTR f16 sitofp_i8_f16(int8_t x) {
  return (f16) x;
}

SCALAR_FUN_ATTR f16 sitofp_i16_f16(int16_t x) {
  return (f16) x;
}

SCALAR_FUN_ATTR f16 sitofp_i32_f16(int32_t x) {
  return (f16) x;
}

SCALAR_FUN_ATTR f16 sitofp_i64_f16(int64_t x) {
  return (f16) x;
}

SCALAR_FUN_ATTR f16 uitofp_i8_f16(uint8_t x) {
  return (f16) x;
}

SCALAR_FUN_ATTR f16 uitofp_i16_f16(uint16_t x) {
  return (f16) x;
}

SCALAR_FUN_ATTR f16 uitofp_i32_f16(uint32_t x) {
  return (f16) x;
}

SCALAR_FUN_ATTR f16 uitofp_i64_f16(uint64_t x) {
  return (f16) x;
}

SCALAR_FUN_ATTR int8_t fptosi_f16_i8(f16 x) {
  return (int8_t) (float) x;
}

SCALAR_FUN_ATTR int16_t fptosi_f16_i16(f16 x) {
  return (int16_t) x;
}

SCALAR_FUN_ATTR int32_t fptosi_f16_i32(f16 x) {
  return (int32_t) x;
}

SCALAR_FUN_ATTR int64_t fptosi_f16_i64(f16 x) {
  return (int64_t) x;
}

SCALAR_FUN_ATTR uint8_t fptoui_f16_i8(f16 x) {
  return (uint8_t) (float) x;
}

SCALAR_FUN_ATTR uint16_t fptoui_f16_i16(f16 x) {
  return (uint16_t) x;
}

SCALAR_FUN_ATTR uint32_t fptoui_f16_i32(f16 x) {
  return (uint32_t) x;
}

SCALAR_FUN_ATTR uint64_t fptoui_f16_i64(f16 x) {
  return (uint64_t) x;
}

SCALAR_FUN_ATTR bool ftob_f16_bool(f16 x) {
  return x != (f16)0;
}

SCALAR_FUN_ATTR f16 btof_bool_f16(bool x) {
  return x ? 1 : 0;
}

#ifndef EMULATE_F16
SCALAR_FUN_ATTR bool futrts_isnan16(f16 x) {
  return isnan((float)x);
}

#ifdef __OPENCL_VERSION__

SCALAR_FUN_ATTR f16 fabs16(f16 x) {
  return fabs(x);
}

SCALAR_FUN_ATTR f16 fmax16(f16 x, f16 y) {
  return fmax(x, y);
}

SCALAR_FUN_ATTR f16 fmin16(f16 x, f16 y) {
  return fmin(x, y);
}

SCALAR_FUN_ATTR f16 fpow16(f16 x, f16 y) {
  return pow(x, y);
}

#elif ISPC
SCALAR_FUN_ATTR f16 fabs16(f16 x) {
  return abs(x);
}

SCALAR_FUN_ATTR f16 fmax16(f16 x, f16 y) {
  return futrts_isnan16(x) ? y : futrts_isnan16(y) ? x : max(x, y);
}

SCALAR_FUN_ATTR f16 fmin16(f16 x, f16 y) {
  return futrts_isnan16(x) ? y : futrts_isnan16(y) ? x : min(x, y);
}

SCALAR_FUN_ATTR f16 fpow16(f16 x, f16 y) {
  return pow(x, y);
}

#else // Assuming CUDA.

SCALAR_FUN_ATTR f16 fabs16(f16 x) {
  return fabsf(x);
}

SCALAR_FUN_ATTR f16 fmax16(f16 x, f16 y) {
  return fmaxf(x, y);
}

SCALAR_FUN_ATTR f16 fmin16(f16 x, f16 y) {
  return fminf(x, y);
}

SCALAR_FUN_ATTR f16 fpow16(f16 x, f16 y) {
  return powf(x, y);
}
#endif

#if ISPC
SCALAR_FUN_ATTR bool futrts_isinf16(float x) {
  return !futrts_isnan16(x) && futrts_isnan16(x - x);
}
SCALAR_FUN_ATTR bool futrts_isfinite16(float x) {
  return !futrts_isnan16(x) && !futrts_isinf16(x);
}

#else

SCALAR_FUN_ATTR bool futrts_isinf16(f16 x) {
  return isinf((float)x);
}
#endif

#ifdef __OPENCL_VERSION__
SCALAR_FUN_ATTR f16 futrts_log16(f16 x) {
  return log(x);
}

SCALAR_FUN_ATTR f16 futrts_log2_16(f16 x) {
  return log2(x);
}

SCALAR_FUN_ATTR f16 futrts_log10_16(f16 x) {
  return log10(x);
}

SCALAR_FUN_ATTR f16 futrts_log1p_16(f16 x) {
  return log1p(x);
}

SCALAR_FUN_ATTR f16 futrts_sqrt16(f16 x) {
  return sqrt(x);
}

SCALAR_FUN_ATTR f16 futrts_cbrt16(f16 x) {
  return cbrt(x);
}

SCALAR_FUN_ATTR f16 futrts_exp16(f16 x) {
  return exp(x);
}

SCALAR_FUN_ATTR f16 futrts_cos16(f16 x) {
  return cos(x);
}

SCALAR_FUN_ATTR f16 futrts_sin16(f16 x) {
  return sin(x);
}

SCALAR_FUN_ATTR f16 futrts_tan16(f16 x) {
  return tan(x);
}

SCALAR_FUN_ATTR f16 futrts_acos16(f16 x) {
  return acos(x);
}

SCALAR_FUN_ATTR f16 futrts_asin16(f16 x) {
  return asin(x);
}

SCALAR_FUN_ATTR f16 futrts_atan16(f16 x) {
  return atan(x);
}

SCALAR_FUN_ATTR f16 futrts_cosh16(f16 x) {
  return cosh(x);
}

SCALAR_FUN_ATTR f16 futrts_sinh16(f16 x) {
  return sinh(x);
}

SCALAR_FUN_ATTR f16 futrts_tanh16(f16 x) {
  return tanh(x);
}

SCALAR_FUN_ATTR f16 futrts_acosh16(f16 x) {
  return acosh(x);
}

SCALAR_FUN_ATTR f16 futrts_asinh16(f16 x) {
  return asinh(x);
}

SCALAR_FUN_ATTR f16 futrts_atanh16(f16 x) {
  return atanh(x);
}

SCALAR_FUN_ATTR f16 futrts_atan2_16(f16 x, f16 y) {
  return atan2(x, y);
}

SCALAR_FUN_ATTR f16 futrts_hypot16(f16 x, f16 y) {
  return hypot(x, y);
}

SCALAR_FUN_ATTR f16 futrts_gamma16(f16 x) {
  return tgamma(x);
}

SCALAR_FUN_ATTR f16 futrts_lgamma16(f16 x) {
  return lgamma(x);
}

SCALAR_FUN_ATTR f16 futrts_erf16(f16 x) {
  return erf(x);
}

SCALAR_FUN_ATTR f16 futrts_erfc16(f16 x) {
  return erfc(x);
}

SCALAR_FUN_ATTR f16 fmod16(f16 x, f16 y) {
  return fmod(x, y);
}

SCALAR_FUN_ATTR f16 futrts_round16(f16 x) {
  return rint(x);
}

SCALAR_FUN_ATTR f16 futrts_floor16(f16 x) {
  return floor(x);
}

SCALAR_FUN_ATTR f16 futrts_ceil16(f16 x) {
  return ceil(x);
}

SCALAR_FUN_ATTR f16 futrts_nextafter16(f16 x, f16 y) {
  return nextafter(x, y);
}

SCALAR_FUN_ATTR f16 futrts_lerp16(f16 v0, f16 v1, f16 t) {
  return mix(v0, v1, t);
}

SCALAR_FUN_ATTR f16 futrts_ldexp16(f16 x, int32_t y) {
  return ldexp(x, y);
}

SCALAR_FUN_ATTR f16 futrts_copysign16(f16 x, f16 y) {
  return copysign(x, y);
}

SCALAR_FUN_ATTR f16 futrts_mad16(f16 a, f16 b, f16 c) {
  return mad(a, b, c);
}

SCALAR_FUN_ATTR f16 futrts_fma16(f16 a, f16 b, f16 c) {
  return fma(a, b, c);
}
#elif ISPC

SCALAR_FUN_ATTR f16 futrts_log16(f16 x) {
  return futrts_isfinite16(x) || (futrts_isinf16(x) && x < 0) ? log(x) : x;
}

SCALAR_FUN_ATTR f16 futrts_log2_16(f16 x) {
  return futrts_log16(x) / log(2.0f16);
}

SCALAR_FUN_ATTR f16 futrts_log10_16(f16 x) {
  return futrts_log16(x) / log(10.0f16);
}

SCALAR_FUN_ATTR f16 futrts_log1p_16(f16 x) {
  if(x == -1.0f16 || (futrts_isinf16(x) && x > 0.0f16)) return x / 0.0f16;
  f16 y = 1.0f16 + x;
  f16 z = y - 1.0f16;
  return log(y) - (z-x)/y;
}

SCALAR_FUN_ATTR f16 futrts_sqrt16(f16 x) {
  return (float16)sqrt((float)x);
}

SCALAR_FUN_ATTR f16 futrts_exp16(f16 x) {
  return exp(x);
}

SCALAR_FUN_ATTR f16 futrts_cos16(f16 x) {
  return (float16)cos((float)x);
}

SCALAR_FUN_ATTR f16 futrts_sin16(f16 x) {
  return (float16)sin((float)x);
}

SCALAR_FUN_ATTR f16 futrts_tan16(f16 x) {
  return (float16)tan((float)x);
}

SCALAR_FUN_ATTR f16 futrts_acos16(f16 x) {
  return (float16)acos((float)x);
}

SCALAR_FUN_ATTR f16 futrts_asin16(f16 x) {
  return (float16)asin((float)x);
}

SCALAR_FUN_ATTR f16 futrts_atan16(f16 x) {
  return (float16)atan((float)x);
}

SCALAR_FUN_ATTR f16 futrts_cosh16(f16 x) {
  return (exp(x)+exp(-x)) / 2.0f16;
}

SCALAR_FUN_ATTR f16 futrts_sinh16(f16 x) {
  return (exp(x)-exp(-x)) / 2.0f16;
}

SCALAR_FUN_ATTR f16 futrts_tanh16(f16 x) {
  return futrts_sinh16(x)/futrts_cosh16(x);
}

SCALAR_FUN_ATTR f16 futrts_acosh16(f16 x) {
  float16 f = x+(float16)sqrt((float)(x*x-1));
  if(futrts_isfinite16(f)) return log(f);
  return f;
}

SCALAR_FUN_ATTR f16 futrts_asinh16(f16 x) {
  float16 f = x+(float16)sqrt((float)(x*x+1));
  if(futrts_isfinite16(f)) return log(f);
  return f;
}

SCALAR_FUN_ATTR f16 futrts_atanh16(f16 x) {
  float16 f = (1+x)/(1-x);
  if(futrts_isfinite16(f)) return log(f)/2.0f16;
  return f;
}

SCALAR_FUN_ATTR f16 futrts_atan2_16(f16 x, f16 y) {
  return (float16)atan2((float)x, (float)y);
}

SCALAR_FUN_ATTR f16 futrts_hypot16(f16 x, f16 y) {
  return (float16)futrts_hypot32((float)x, (float)y);
}

extern "C" unmasked uniform float tgammaf(uniform float x);
SCALAR_FUN_ATTR f16 futrts_gamma16(f16 x) {
  f16 res;
  foreach_active (i) {
    uniform f16 r = (f16)tgammaf(extract((float)x, i));
    res = insert(res, i, r);
  }
  return res;
}

extern "C" unmasked uniform float lgammaf(uniform float x);
SCALAR_FUN_ATTR f16 futrts_lgamma16(f16 x) {
  f16 res;
  foreach_active (i) {
    uniform f16 r = (f16)lgammaf(extract((float)x, i));
    res = insert(res, i, r);
  }
  return res;
}

SCALAR_FUN_ATTR f16 futrts_cbrt16(f16 x) {
  f16 res = (f16)futrts_cbrt32((float)x);
  return res;
}

SCALAR_FUN_ATTR f16 futrts_erf16(f16 x) {
  f16 res = (f16)futrts_erf32((float)x);
  return res;
}

SCALAR_FUN_ATTR f16 futrts_erfc16(f16 x) {
  f16 res = (f16)futrts_erfc32((float)x);
  return res;
}

SCALAR_FUN_ATTR f16 fmod16(f16 x, f16 y) {
  return x - y * (float16)trunc((float) (x/y));
}

SCALAR_FUN_ATTR f16 futrts_round16(f16 x) {
  return (float16)round((float)x);
}

SCALAR_FUN_ATTR f16 futrts_floor16(f16 x) {
  return (float16)floor((float)x);
}

SCALAR_FUN_ATTR f16 futrts_ceil16(f16 x) {
  return (float16)ceil((float)x);
}

SCALAR_FUN_ATTR f16 futrts_nextafter16(f16 x, f16 y) {
  return (float16)futrts_nextafter32((float)x, (float) y);
}

SCALAR_FUN_ATTR f16 futrts_lerp16(f16 v0, f16 v1, f16 t) {
  return v0 + (v1 - v0) * t;
}

SCALAR_FUN_ATTR f16 futrts_ldexp16(f16 x, int32_t y) {
  return futrts_ldexp32((float)x, y);
}

SCALAR_FUN_ATTR f16 futrts_copysign16(f16 x, f16 y) {
  return futrts_copysign32((float)x, y);
}

SCALAR_FUN_ATTR f16 futrts_mad16(f16 a, f16 b, f16 c) {
  return a * b + c;
}

SCALAR_FUN_ATTR f16 futrts_fma16(f16 a, f16 b, f16 c) {
  return a * b + c;
}

#else // Assume CUDA.

SCALAR_FUN_ATTR f16 futrts_log16(f16 x) {
  return hlog(x);
}

SCALAR_FUN_ATTR f16 futrts_log2_16(f16 x) {
  return hlog2(x);
}

SCALAR_FUN_ATTR f16 futrts_log10_16(f16 x) {
  return hlog10(x);
}

SCALAR_FUN_ATTR f16 futrts_log1p_16(f16 x) {
  return (f16)log1pf((float)x);
}

SCALAR_FUN_ATTR f16 futrts_sqrt16(f16 x) {
  return hsqrt(x);
}

SCALAR_FUN_ATTR f16 futrts_cbrt16(f16 x) {
  return cbrtf(x);
}

SCALAR_FUN_ATTR f16 futrts_exp16(f16 x) {
  return hexp(x);
}

SCALAR_FUN_ATTR f16 futrts_cos16(f16 x) {
  return hcos(x);
}

SCALAR_FUN_ATTR f16 futrts_sin16(f16 x) {
  return hsin(x);
}

SCALAR_FUN_ATTR f16 futrts_tan16(f16 x) {
  return tanf(x);
}

SCALAR_FUN_ATTR f16 futrts_acos16(f16 x) {
  return acosf(x);
}

SCALAR_FUN_ATTR f16 futrts_asin16(f16 x) {
  return asinf(x);
}

SCALAR_FUN_ATTR f16 futrts_atan16(f16 x) {
  return atanf(x);
}

SCALAR_FUN_ATTR f16 futrts_cosh16(f16 x) {
  return coshf(x);
}

SCALAR_FUN_ATTR f16 futrts_sinh16(f16 x) {
  return sinhf(x);
}

SCALAR_FUN_ATTR f16 futrts_tanh16(f16 x) {
  return tanhf(x);
}

SCALAR_FUN_ATTR f16 futrts_acosh16(f16 x) {
  return acoshf(x);
}

SCALAR_FUN_ATTR f16 futrts_asinh16(f16 x) {
  return asinhf(x);
}

SCALAR_FUN_ATTR f16 futrts_atanh16(f16 x) {
  return atanhf(x);
}

SCALAR_FUN_ATTR f16 futrts_atan2_16(f16 x, f16 y) {
  return atan2f(x, y);
}

SCALAR_FUN_ATTR f16 futrts_hypot16(f16 x, f16 y) {
  return hypotf(x, y);
}

SCALAR_FUN_ATTR f16 futrts_gamma16(f16 x) {
  return tgammaf(x);
}

SCALAR_FUN_ATTR f16 futrts_lgamma16(f16 x) {
  return lgammaf(x);
}

SCALAR_FUN_ATTR f16 futrts_erf16(f16 x) {
  return erff(x);
}

SCALAR_FUN_ATTR f16 futrts_erfc16(f16 x) {
  return erfcf(x);
}

SCALAR_FUN_ATTR f16 fmod16(f16 x, f16 y) {
  return fmodf(x, y);
}

SCALAR_FUN_ATTR f16 futrts_round16(f16 x) {
  return rintf(x);
}

SCALAR_FUN_ATTR f16 futrts_floor16(f16 x) {
  return hfloor(x);
}

SCALAR_FUN_ATTR f16 futrts_ceil16(f16 x) {
  return hceil(x);
}

SCALAR_FUN_ATTR f16 futrts_nextafter16(f16 x, f16 y) {
  return __ushort_as_half(halfbitsnextafter(__half_as_ushort(x), __half_as_ushort(y)));
}

SCALAR_FUN_ATTR f16 futrts_lerp16(f16 v0, f16 v1, f16 t) {
  return v0 + (v1 - v0) * t;
}

SCALAR_FUN_ATTR f16 futrts_ldexp16(f16 x, int32_t y) {
  return futrts_ldexp32((float)x, y);
}

SCALAR_FUN_ATTR f16 futrts_copysign16(f16 x, f16 y) {
  return futrts_copysign32((float)x, y);
}

SCALAR_FUN_ATTR f16 futrts_mad16(f16 a, f16 b, f16 c) {
  return a * b + c;
}

SCALAR_FUN_ATTR f16 futrts_fma16(f16 a, f16 b, f16 c) {
  return fmaf(a, b, c);
}

#endif

// The CUDA __half type cannot be put in unions for some reason, so we
// use bespoke conversion functions instead.
#ifdef __CUDA_ARCH__
SCALAR_FUN_ATTR int16_t futrts_to_bits16(f16 x) {
  return __half_as_ushort(x);
}
SCALAR_FUN_ATTR f16 futrts_from_bits16(int16_t x) {
  return __ushort_as_half(x);
}
#elif ISPC

SCALAR_FUN_ATTR int16_t futrts_to_bits16(f16 x) {
  varying int16_t y = *((varying int16_t * uniform)&x);
  return y;
}

SCALAR_FUN_ATTR f16 futrts_from_bits16(int16_t x) {
  varying f16 y = *((varying f16 * uniform)&x);
  return y;
}
#else
SCALAR_FUN_ATTR int16_t futrts_to_bits16(f16 x) {
  union {
    f16 f;
    int16_t t;
  } p;

  p.f = x;
  return p.t;
}

SCALAR_FUN_ATTR f16 futrts_from_bits16(int16_t x) {
  union {
    int16_t f;
    f16 t;
  } p;

  p.f = x;
  return p.t;
}
#endif

#else // No native f16 - emulate.

SCALAR_FUN_ATTR f16 fabs16(f16 x) {
  return fabs32(x);
}

SCALAR_FUN_ATTR f16 fmax16(f16 x, f16 y) {
  return fmax32(x, y);
}

SCALAR_FUN_ATTR f16 fmin16(f16 x, f16 y) {
  return fmin32(x, y);
}

SCALAR_FUN_ATTR f16 fpow16(f16 x, f16 y) {
  return fpow32(x, y);
}

SCALAR_FUN_ATTR bool futrts_isnan16(f16 x) {
  return futrts_isnan32(x);
}

SCALAR_FUN_ATTR bool futrts_isinf16(f16 x) {
  return futrts_isinf32(x);
}

SCALAR_FUN_ATTR f16 futrts_log16(f16 x) {
  return futrts_log32(x);
}

SCALAR_FUN_ATTR f16 futrts_log2_16(f16 x) {
  return futrts_log2_32(x);
}

SCALAR_FUN_ATTR f16 futrts_log10_16(f16 x) {
  return futrts_log10_32(x);
}

SCALAR_FUN_ATTR f16 futrts_log1p_16(f16 x) {
  return futrts_log1p_32(x);
}

SCALAR_FUN_ATTR f16 futrts_sqrt16(f16 x) {
  return futrts_sqrt32(x);
}

SCALAR_FUN_ATTR f16 futrts_cbrt16(f16 x) {
  return futrts_cbrt32(x);
}

SCALAR_FUN_ATTR f16 futrts_exp16(f16 x) {
  return futrts_exp32(x);
}

SCALAR_FUN_ATTR f16 futrts_cos16(f16 x) {
  return futrts_cos32(x);
}

SCALAR_FUN_ATTR f16 futrts_sin16(f16 x) {
  return futrts_sin32(x);
}

SCALAR_FUN_ATTR f16 futrts_tan16(f16 x) {
  return futrts_tan32(x);
}

SCALAR_FUN_ATTR f16 futrts_acos16(f16 x) {
  return futrts_acos32(x);
}

SCALAR_FUN_ATTR f16 futrts_asin16(f16 x) {
  return futrts_asin32(x);
}

SCALAR_FUN_ATTR f16 futrts_atan16(f16 x) {
  return futrts_atan32(x);
}

SCALAR_FUN_ATTR f16 futrts_cosh16(f16 x) {
  return futrts_cosh32(x);
}

SCALAR_FUN_ATTR f16 futrts_sinh16(f16 x) {
  return futrts_sinh32(x);
}

SCALAR_FUN_ATTR f16 futrts_tanh16(f16 x) {
  return futrts_tanh32(x);
}

SCALAR_FUN_ATTR f16 futrts_acosh16(f16 x) {
  return futrts_acosh32(x);
}

SCALAR_FUN_ATTR f16 futrts_asinh16(f16 x) {
  return futrts_asinh32(x);
}

SCALAR_FUN_ATTR f16 futrts_atanh16(f16 x) {
  return futrts_atanh32(x);
}

SCALAR_FUN_ATTR f16 futrts_atan2_16(f16 x, f16 y) {
  return futrts_atan2_32(x, y);
}

SCALAR_FUN_ATTR f16 futrts_hypot16(f16 x, f16 y) {
  return futrts_hypot32(x, y);
}

SCALAR_FUN_ATTR f16 futrts_gamma16(f16 x) {
  return futrts_gamma32(x);
}

SCALAR_FUN_ATTR f16 futrts_lgamma16(f16 x) {
  return futrts_lgamma32(x);
}

SCALAR_FUN_ATTR f16 futrts_erf16(f16 x) {
  return futrts_erf32(x);
}

SCALAR_FUN_ATTR f16 futrts_erfc16(f16 x) {
  return futrts_erfc32(x);
}

SCALAR_FUN_ATTR f16 fmod16(f16 x, f16 y) {
  return fmod32(x, y);
}

SCALAR_FUN_ATTR f16 futrts_round16(f16 x) {
  return futrts_round32(x);
}

SCALAR_FUN_ATTR f16 futrts_floor16(f16 x) {
  return futrts_floor32(x);
}

SCALAR_FUN_ATTR f16 futrts_ceil16(f16 x) {
  return futrts_ceil32(x);
}

SCALAR_FUN_ATTR f16 futrts_nextafter16(f16 x, f16 y) {
  return halfbits2float(halfbitsnextafter(float2halfbits(x), float2halfbits(y)));
}

SCALAR_FUN_ATTR f16 futrts_lerp16(f16 v0, f16 v1, f16 t) {
  return futrts_lerp32(v0, v1, t);
}

SCALAR_FUN_ATTR f16 futrts_ldexp16(f16 x, int32_t y) {
  return futrts_ldexp32(x, y);
}

SCALAR_FUN_ATTR f16 futrts_copysign16(f16 x, f16 y) {
  return futrts_copysign32((float)x, y);
}

SCALAR_FUN_ATTR f16 futrts_mad16(f16 a, f16 b, f16 c) {
  return futrts_mad32(a, b, c);
}

SCALAR_FUN_ATTR f16 futrts_fma16(f16 a, f16 b, f16 c) {
  return futrts_fma32(a, b, c);
}

// Even when we are using an OpenCL that does not support cl_khr_fp16,
// it must still support vload_half for actually creating a
// half-precision number, which can then be efficiently converted to a
// float.  Similarly for vstore_half.
#ifdef __OPENCL_VERSION__

SCALAR_FUN_ATTR int16_t futrts_to_bits16(f16 x) {
  int16_t y;
  // Violating strict aliasing here.
  vstore_half((float)x, 0, (half*)&y);
  return y;
}

SCALAR_FUN_ATTR f16 futrts_from_bits16(int16_t x) {
  return (f16)vload_half(0, (half*)&x);
}

#else

SCALAR_FUN_ATTR int16_t futrts_to_bits16(f16 x) {
  return (int16_t)float2halfbits(x);
}

SCALAR_FUN_ATTR f16 futrts_from_bits16(int16_t x) {
  return halfbits2float((uint16_t)x);
}

SCALAR_FUN_ATTR f16 fsignum16(f16 x) {
  return futrts_isnan16(x) ? x : (x > 0 ? 1 : 0) - (x < 0 ? 1 : 0);
}

#endif

#endif

SCALAR_FUN_ATTR float fpconv_f16_f16(f16 x) {
  return x;
}

SCALAR_FUN_ATTR float fpconv_f16_f32(f16 x) {
  return x;
}

SCALAR_FUN_ATTR f16 fpconv_f32_f16(float x) {
  return (f16) x;
}

#ifdef FUTHARK_F64_ENABLED

SCALAR_FUN_ATTR double fpconv_f16_f64(f16 x) {
  return (double) x;
}

#if ISPC
SCALAR_FUN_ATTR f16 fpconv_f64_f16(double x) {
  return (f16) ((float)x);
}
#else
SCALAR_FUN_ATTR f16 fpconv_f64_f16(double x) {
  return (f16) x;
}
#endif
#endif


// End of scalar_f16.h.
// Start of atomics.h

SCALAR_FUN_ATTR int32_t atomic_xchg_i32_global(volatile __global int32_t *p, int32_t x);
SCALAR_FUN_ATTR int32_t atomic_xchg_i32_shared(volatile __local int32_t *p, int32_t x);
SCALAR_FUN_ATTR int32_t atomic_cmpxchg_i32_global(volatile __global int32_t *p,
                                                         int32_t cmp, int32_t val);
SCALAR_FUN_ATTR int32_t atomic_cmpxchg_i32_shared(volatile __local int32_t *p,
                                                        int32_t cmp, int32_t val);
SCALAR_FUN_ATTR int32_t atomic_add_i32_global(volatile __global int32_t *p, int32_t x);
SCALAR_FUN_ATTR int32_t atomic_add_i32_shared(volatile __local int32_t *p, int32_t x);
SCALAR_FUN_ATTR float atomic_fadd_f32_global(volatile __global float *p, float x);
SCALAR_FUN_ATTR float atomic_fadd_f32_shared(volatile __local float *p, float x);
SCALAR_FUN_ATTR int32_t atomic_smax_i32_global(volatile __global int32_t *p, int32_t x);
SCALAR_FUN_ATTR int32_t atomic_smax_i32_shared(volatile __local int32_t *p, int32_t x);
SCALAR_FUN_ATTR int32_t atomic_smin_i32_global(volatile __global int32_t *p, int32_t x);
SCALAR_FUN_ATTR int32_t atomic_smin_i32_shared(volatile __local int32_t *p, int32_t x);
SCALAR_FUN_ATTR uint32_t atomic_umax_i32_global(volatile __global uint32_t *p, uint32_t x);
SCALAR_FUN_ATTR uint32_t atomic_umax_i32_shared(volatile __local uint32_t *p, uint32_t x);
SCALAR_FUN_ATTR uint32_t atomic_umin_i32_global(volatile __global uint32_t *p, uint32_t x);
SCALAR_FUN_ATTR uint32_t atomic_umin_i32_shared(volatile __local uint32_t *p, uint32_t x);
SCALAR_FUN_ATTR int32_t atomic_and_i32_global(volatile __global int32_t *p, int32_t x);
SCALAR_FUN_ATTR int32_t atomic_and_i32_shared(volatile __local int32_t *p, int32_t x);
SCALAR_FUN_ATTR int32_t atomic_or_i32_global(volatile __global int32_t *p, int32_t x);
SCALAR_FUN_ATTR int32_t atomic_or_i32_shared(volatile __local int32_t *p, int32_t x);
SCALAR_FUN_ATTR int32_t atomic_xor_i32_global(volatile __global int32_t *p, int32_t x);
SCALAR_FUN_ATTR int32_t atomic_xor_i32_shared(volatile __local int32_t *p, int32_t x);

SCALAR_FUN_ATTR int32_t atomic_xchg_i32_global(volatile __global int32_t *p, int32_t x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicExch((int32_t*)p, x);
#else
  return atomic_xor(p, x);
#endif
}

SCALAR_FUN_ATTR int32_t atomic_xchg_i32_shared(volatile __local int32_t *p, int32_t x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicExch((int32_t*)p, x);
#else
  return atomic_xor(p, x);
#endif
}

SCALAR_FUN_ATTR int32_t atomic_cmpxchg_i32_global(volatile __global int32_t *p,
                                                         int32_t cmp, int32_t val) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicCAS((int32_t*)p, cmp, val);
#else
  return atomic_cmpxchg(p, cmp, val);
#endif
}

SCALAR_FUN_ATTR int32_t atomic_cmpxchg_i32_shared(volatile __local int32_t *p,
                                                        int32_t cmp, int32_t val) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicCAS((int32_t*)p, cmp, val);
#else
  return atomic_cmpxchg(p, cmp, val);
#endif
}

SCALAR_FUN_ATTR int32_t atomic_add_i32_global(volatile __global int32_t *p, int32_t x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicAdd((int32_t*)p, x);
#else
  return atomic_add(p, x);
#endif
}

SCALAR_FUN_ATTR int32_t atomic_add_i32_shared(volatile __local int32_t *p, int32_t x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicAdd((int32_t*)p, x);
#else
  return atomic_add(p, x);
#endif
}

SCALAR_FUN_ATTR float atomic_fadd_f32_global(volatile __global float *p, float x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicAdd((float*)p, x);
#else
  union { int32_t i; float f; } old;
  union { int32_t i; float f; } assumed;
  old.f = *p;
  do {
    assumed.f = old.f;
    old.f = old.f + x;
    old.i = atomic_cmpxchg_i32_global((volatile __global int32_t*)p, assumed.i, old.i);
  } while (assumed.i != old.i);
  return old.f;
#endif
}

SCALAR_FUN_ATTR float atomic_fadd_f32_shared(volatile __local float *p, float x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicAdd((float*)p, x);
#else
  union { int32_t i; float f; } old;
  union { int32_t i; float f; } assumed;
  old.f = *p;
  do {
    assumed.f = old.f;
    old.f = old.f + x;
    old.i = atomic_cmpxchg_i32_shared((volatile __local int32_t*)p, assumed.i, old.i);
  } while (assumed.i != old.i);
  return old.f;
#endif
}

SCALAR_FUN_ATTR int32_t atomic_smax_i32_global(volatile __global int32_t *p, int32_t x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicMax((int32_t*)p, x);
#else
  return atomic_max(p, x);
#endif
}

SCALAR_FUN_ATTR int32_t atomic_smax_i32_shared(volatile __local int32_t *p, int32_t x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicMax((int32_t*)p, x);
#else
  return atomic_max(p, x);
#endif
}

SCALAR_FUN_ATTR int32_t atomic_smin_i32_global(volatile __global int32_t *p, int32_t x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicMin((int32_t*)p, x);
#else
  return atomic_min(p, x);
#endif
}

SCALAR_FUN_ATTR int32_t atomic_smin_i32_shared(volatile __local int32_t *p, int32_t x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicMin((int32_t*)p, x);
#else
  return atomic_min(p, x);
#endif
}

SCALAR_FUN_ATTR uint32_t atomic_umax_i32_global(volatile __global uint32_t *p, uint32_t x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicMax((uint32_t*)p, x);
#else
  return atomic_max(p, x);
#endif
}

SCALAR_FUN_ATTR uint32_t atomic_umax_i32_shared(volatile __local uint32_t *p, uint32_t x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicMax((uint32_t*)p, x);
#else
  return atomic_max(p, x);
#endif
}

SCALAR_FUN_ATTR uint32_t atomic_umin_i32_global(volatile __global uint32_t *p, uint32_t x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicMin((uint32_t*)p, x);
#else
  return atomic_min(p, x);
#endif
}

SCALAR_FUN_ATTR uint32_t atomic_umin_i32_shared(volatile __local uint32_t *p, uint32_t x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicMin((uint32_t*)p, x);
#else
  return atomic_min(p, x);
#endif
}

SCALAR_FUN_ATTR int32_t atomic_and_i32_global(volatile __global int32_t *p, int32_t x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicAnd((int32_t*)p, x);
#else
  return atomic_and(p, x);
#endif
}

SCALAR_FUN_ATTR int32_t atomic_and_i32_shared(volatile __local int32_t *p, int32_t x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicAnd((int32_t*)p, x);
#else
  return atomic_and(p, x);
#endif
}

SCALAR_FUN_ATTR int32_t atomic_or_i32_global(volatile __global int32_t *p, int32_t x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicOr((int32_t*)p, x);
#else
  return atomic_or(p, x);
#endif
}

SCALAR_FUN_ATTR int32_t atomic_or_i32_shared(volatile __local int32_t *p, int32_t x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicOr((int32_t*)p, x);
#else
  return atomic_or(p, x);
#endif
}

SCALAR_FUN_ATTR int32_t atomic_xor_i32_global(volatile __global int32_t *p, int32_t x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicXor((int32_t*)p, x);
#else
  return atomic_xor(p, x);
#endif
}

SCALAR_FUN_ATTR int32_t atomic_xor_i32_shared(volatile __local int32_t *p, int32_t x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicXor((int32_t*)p, x);
#else
  return atomic_xor(p, x);
#endif
}

// Start of 64 bit atomics

#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP) || defined(cl_khr_int64_base_atomics) && defined(cl_khr_int64_extended_atomics)

SCALAR_FUN_ATTR int64_t atomic_xchg_i64_global(volatile __global int64_t *p, int64_t x);
SCALAR_FUN_ATTR int64_t atomic_xchg_i64_shared(volatile __local int64_t *p, int64_t x);
SCALAR_FUN_ATTR int64_t atomic_cmpxchg_i64_global(volatile __global int64_t *p,
                                                         int64_t cmp, int64_t val);
SCALAR_FUN_ATTR int64_t atomic_cmpxchg_i64_shared(volatile __local int64_t *p,
                                                        int64_t cmp, int64_t val);
SCALAR_FUN_ATTR int64_t atomic_add_i64_global(volatile __global int64_t *p, int64_t x);
SCALAR_FUN_ATTR int64_t atomic_add_i64_shared(volatile __local int64_t *p, int64_t x);
SCALAR_FUN_ATTR int64_t atomic_smax_i64_global(volatile __global int64_t *p, int64_t x);
SCALAR_FUN_ATTR int64_t atomic_smax_i64_shared(volatile __local int64_t *p, int64_t x);
SCALAR_FUN_ATTR int64_t atomic_smin_i64_global(volatile __global int64_t *p, int64_t x);
SCALAR_FUN_ATTR int64_t atomic_smin_i64_shared(volatile __local int64_t *p, int64_t x);
SCALAR_FUN_ATTR uint64_t atomic_umax_i64_global(volatile __global uint64_t *p, uint64_t x);
SCALAR_FUN_ATTR uint64_t atomic_umax_i64_shared(volatile __local uint64_t *p, uint64_t x);
SCALAR_FUN_ATTR uint64_t atomic_umin_i64_global(volatile __global uint64_t *p, uint64_t x);
SCALAR_FUN_ATTR uint64_t atomic_umin_i64_shared(volatile __local uint64_t *p, uint64_t x);
SCALAR_FUN_ATTR int64_t atomic_and_i64_global(volatile __global int64_t *p, int64_t x);
SCALAR_FUN_ATTR int64_t atomic_and_i64_shared(volatile __local int64_t *p, int64_t x);
SCALAR_FUN_ATTR int64_t atomic_or_i64_global(volatile __global int64_t *p, int64_t x);
SCALAR_FUN_ATTR int64_t atomic_or_i64_shared(volatile __local int64_t *p, int64_t x);
SCALAR_FUN_ATTR int64_t atomic_xor_i64_global(volatile __global int64_t *p, int64_t x);
SCALAR_FUN_ATTR int64_t atomic_xor_i64_shared(volatile __local int64_t *p, int64_t x);

#ifdef FUTHARK_F64_ENABLED
SCALAR_FUN_ATTR double atomic_fadd_f64_global(volatile __global double *p, double x);
SCALAR_FUN_ATTR double atomic_fadd_f64_shared(volatile __local double *p, double x);
#endif

SCALAR_FUN_ATTR int64_t atomic_xchg_i64_global(volatile __global int64_t *p, int64_t x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicExch((uint64_t*)p, x);
#else
  return atom_xor(p, x);
#endif
}

SCALAR_FUN_ATTR int64_t atomic_xchg_i64_shared(volatile __local int64_t *p, int64_t x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicExch((uint64_t*)p, x);
#else
  return atom_xor(p, x);
#endif
}

SCALAR_FUN_ATTR int64_t atomic_cmpxchg_i64_global(volatile __global int64_t *p,
                                                         int64_t cmp, int64_t val) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicCAS((uint64_t*)p, cmp, val);
#else
  return atom_cmpxchg(p, cmp, val);
#endif
}

SCALAR_FUN_ATTR int64_t atomic_cmpxchg_i64_shared(volatile __local int64_t *p,
                                                        int64_t cmp, int64_t val) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicCAS((uint64_t*)p, cmp, val);
#else
  return atom_cmpxchg(p, cmp, val);
#endif
}

SCALAR_FUN_ATTR int64_t atomic_add_i64_global(volatile __global int64_t *p, int64_t x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicAdd((uint64_t*)p, x);
#else
  return atom_add(p, x);
#endif
}

SCALAR_FUN_ATTR int64_t atomic_add_i64_shared(volatile __local int64_t *p, int64_t x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicAdd((uint64_t*)p, x);
#else
  return atom_add(p, x);
#endif
}

#ifdef FUTHARK_F64_ENABLED

SCALAR_FUN_ATTR double atomic_fadd_f64_global(volatile __global double *p, double x) {
#if defined(FUTHARK_CUDA) && __CUDA_ARCH__ >= 600 || defined(FUTHARK_HIP)
  return atomicAdd((double*)p, x);
#else
  union { int64_t i; double f; } old;
  union { int64_t i; double f; } assumed;
  old.f = *p;
  do {
    assumed.f = old.f;
    old.f = old.f + x;
    old.i = atomic_cmpxchg_i64_global((volatile __global int64_t*)p, assumed.i, old.i);
  } while (assumed.i != old.i);
  return old.f;
#endif
}

SCALAR_FUN_ATTR double atomic_fadd_f64_shared(volatile __local double *p, double x) {
#if defined(FUTHARK_CUDA) && __CUDA_ARCH__ >= 600 || defined(FUTHARK_HIP)
  return atomicAdd((double*)p, x);
#else
  union { int64_t i; double f; } old;
  union { int64_t i; double f; } assumed;
  old.f = *p;
  do {
    assumed.f = old.f;
    old.f = old.f + x;
    old.i = atomic_cmpxchg_i64_shared((volatile __local int64_t*)p, assumed.i, old.i);
  } while (assumed.i != old.i);
  return old.f;
#endif
}

#endif

SCALAR_FUN_ATTR int64_t atomic_smax_i64_global(volatile __global int64_t *p, int64_t x) {
#if defined(FUTHARK_CUDA)
  return atomicMax((int64_t*)p, x);
#elif defined(FUTHARK_HIP)
  // Currentely missing in HIP; probably a temporary oversight.
  int64_t old = *p, assumed;
  do {
    assumed = old;
    old = smax64(old, x);
    old = atomic_cmpxchg_i64_global((volatile __global int64_t*)p, assumed, old);
  } while (assumed != old);
  return old;
#else
  return atom_max(p, x);
#endif
}

SCALAR_FUN_ATTR int64_t atomic_smax_i64_shared(volatile __local int64_t *p, int64_t x) {
#if defined(FUTHARK_CUDA)
  return atomicMax((int64_t*)p, x);
#elif defined(FUTHARK_HIP)
  // Currentely missing in HIP; probably a temporary oversight.
  int64_t old = *p, assumed;
  do {
    assumed = old;
    old = smax64(old, x);
    old = atomic_cmpxchg_i64_shared((volatile __local int64_t*)p, assumed, old);
  } while (assumed != old);
  return old;
#else
  return atom_max(p, x);
#endif
}

SCALAR_FUN_ATTR int64_t atomic_smin_i64_global(volatile __global int64_t *p, int64_t x) {
#if defined(FUTHARK_CUDA)
  return atomicMin((int64_t*)p, x);
#elif defined(FUTHARK_HIP)
  // Currentely missing in HIP; probably a temporary oversight.
  int64_t old = *p, assumed;
  do {
    assumed = old;
    old = smin64(old, x);
    old = atomic_cmpxchg_i64_global((volatile __global int64_t*)p, assumed, old);
  } while (assumed != old);
  return old;
#else
  return atom_min(p, x);
#endif
}

SCALAR_FUN_ATTR int64_t atomic_smin_i64_shared(volatile __local int64_t *p, int64_t x) {
#if defined(FUTHARK_CUDA)
  return atomicMin((int64_t*)p, x);
#elif defined(FUTHARK_HIP)
  // Currentely missing in HIP; probably a temporary oversight.
  int64_t old = *p, assumed;
  do {
    assumed = old;
    old = smin64(old, x);
    old = atomic_cmpxchg_i64_shared((volatile __local int64_t*)p, assumed, old);
  } while (assumed != old);
  return old;
#else
  return atom_min(p, x);
#endif
}

SCALAR_FUN_ATTR uint64_t atomic_umax_i64_global(volatile __global uint64_t *p, uint64_t x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicMax((uint64_t*)p, x);
#else
  return atom_max(p, x);
#endif
}

SCALAR_FUN_ATTR uint64_t atomic_umax_i64_shared(volatile __local uint64_t *p, uint64_t x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicMax((uint64_t*)p, x);
#else
  return atom_max(p, x);
#endif
}

SCALAR_FUN_ATTR uint64_t atomic_umin_i64_global(volatile __global uint64_t *p, uint64_t x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicMin((uint64_t*)p, x);
#else
  return atom_min(p, x);
#endif
}

SCALAR_FUN_ATTR uint64_t atomic_umin_i64_shared(volatile __local uint64_t *p, uint64_t x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicMin((uint64_t*)p, x);
#else
  return atom_min(p, x);
#endif
}

SCALAR_FUN_ATTR int64_t atomic_and_i64_global(volatile __global int64_t *p, int64_t x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicAnd((uint64_t*)p, x);
#else
  return atom_and(p, x);
#endif
}

SCALAR_FUN_ATTR int64_t atomic_and_i64_shared(volatile __local int64_t *p, int64_t x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicAnd((uint64_t*)p, x);
#else
  return atom_and(p, x);
#endif
}

SCALAR_FUN_ATTR int64_t atomic_or_i64_global(volatile __global int64_t *p, int64_t x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicOr((uint64_t*)p, x);
#else
  return atom_or(p, x);
#endif
}

SCALAR_FUN_ATTR int64_t atomic_or_i64_shared(volatile __local int64_t *p, int64_t x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicOr((uint64_t*)p, x);
#else
  return atom_or(p, x);
#endif
}

SCALAR_FUN_ATTR int64_t atomic_xor_i64_global(volatile __global int64_t *p, int64_t x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicXor((uint64_t*)p, x);
#else
  return atom_xor(p, x);
#endif
}

SCALAR_FUN_ATTR int64_t atomic_xor_i64_shared(volatile __local int64_t *p, int64_t x) {
#if defined(FUTHARK_CUDA) || defined(FUTHARK_HIP)
  return atomicXor((uint64_t*)p, x);
#else
  return atom_xor(p, x);
#endif
}

#endif // defined(FUTHARK_CUDA) || defined(FUTHARK_HIP) || defined(cl_khr_int64_base_atomics) && defined(cl_khr_int64_extended_atomics)

// End of atomics.h
// Start of transpose.cl

#define GEN_TRANSPOSE_KERNELS(NAME, ELEM_TYPE)                          \
FUTHARK_KERNEL_SIZED(TR_BLOCK_DIM*2, TR_TILE_DIM/TR_ELEMS_PER_THREAD, 1)\
void map_transpose_##NAME(SHARED_MEM_PARAM                              \
                          __global ELEM_TYPE *dst_mem,                  \
                          int64_t dst_offset,                           \
                          __global ELEM_TYPE *src_mem,                  \
                          int64_t src_offset,                           \
                          int32_t num_arrays,                           \
                          int32_t x_elems,                              \
                          int32_t y_elems,                              \
                          int32_t mulx,                                 \
                          int32_t muly,                                 \
                          int32_t repeat_1,                             \
                          int32_t repeat_2) {                           \
  (void)mulx; (void)muly;                                               \
  __local ELEM_TYPE* block = (__local ELEM_TYPE*)shared_mem;            \
  int tblock_id_0 = get_tblock_id(0);                                   \
  int global_id_0 = get_global_id(0);                                   \
  int tblock_id_1 = get_tblock_id(1);                                   \
  int global_id_1 = get_global_id(1);                                   \
  for (int i1 = 0; i1 <= repeat_1; i1++) {                              \
    int tblock_id_2 = get_tblock_id(2);                                 \
    int global_id_2 = get_global_id(2);                                 \
    for (int i2 = 0; i2 <= repeat_2; i2++) {                            \
      int32_t our_array_offset = tblock_id_2 * x_elems * y_elems;       \
      int32_t odata_offset = dst_offset + our_array_offset;             \
      int32_t idata_offset = src_offset + our_array_offset;             \
      int32_t x_index = global_id_0;                                    \
      int32_t y_index = tblock_id_1 * TR_TILE_DIM + get_local_id(1);    \
      if (x_index < x_elems) {                                          \
        for (int32_t j = 0; j < TR_ELEMS_PER_THREAD; j++) {             \
          int32_t index_i = (y_index + j * (TR_TILE_DIM/TR_ELEMS_PER_THREAD)) * x_elems + x_index; \
          if (y_index + j * (TR_TILE_DIM/TR_ELEMS_PER_THREAD) < y_elems) { \
            block[(get_local_id(1) + j * (TR_TILE_DIM/TR_ELEMS_PER_THREAD)) * (TR_TILE_DIM+1) + \
                  get_local_id(0)] =                                    \
              src_mem[idata_offset + index_i];                          \
          }                                                             \
        }                                                               \
      }                                                                 \
      barrier_local();                                                  \
      x_index = tblock_id_1 * TR_TILE_DIM + get_local_id(0);            \
      y_index = tblock_id_0 * TR_TILE_DIM + get_local_id(1);            \
      if (x_index < y_elems) {                                          \
        for (int32_t j = 0; j < TR_ELEMS_PER_THREAD; j++) {             \
          int32_t index_out = (y_index + j * (TR_TILE_DIM/TR_ELEMS_PER_THREAD)) * y_elems + x_index; \
          if (y_index + j * (TR_TILE_DIM/TR_ELEMS_PER_THREAD) < x_elems) { \
            dst_mem[(odata_offset + index_out)] =                       \
              block[get_local_id(0) * (TR_TILE_DIM+1) +                 \
                    get_local_id(1) + j * (TR_TILE_DIM/TR_ELEMS_PER_THREAD)]; \
          }                                                             \
        }                                                               \
      }                                                                 \
      tblock_id_2 += get_num_tblocks(2);                                \
      global_id_2 += get_global_size(2);                                \
    }                                                                   \
    tblock_id_1 += get_num_tblocks(1);                                  \
    global_id_1 += get_global_size(1);                                  \
  }                                                                     \
}                                                                       \
                                                                        \
FUTHARK_KERNEL_SIZED(TR_BLOCK_DIM, TR_BLOCK_DIM, 1)                     \
void map_transpose_##NAME##_low_height(SHARED_MEM_PARAM                 \
                                                __global ELEM_TYPE *dst_mem, \
                                                int64_t dst_offset,     \
                                                __global ELEM_TYPE *src_mem, \
                                                int64_t src_offset,     \
                                                int32_t num_arrays,     \
                                                int32_t x_elems,        \
                                                int32_t y_elems,        \
                                                int32_t mulx,           \
                                                int32_t muly,           \
                                                int32_t repeat_1,       \
                                                int32_t repeat_2) {     \
  __local ELEM_TYPE* block = (__local ELEM_TYPE*)shared_mem;            \
  int tblock_id_0 = get_tblock_id(0);                                   \
  int global_id_0 = get_global_id(0);                                   \
  int tblock_id_1 = get_tblock_id(1);                                   \
  int global_id_1 = get_global_id(1);                                   \
  for (int i1 = 0; i1 <= repeat_1; i1++) {                              \
    int tblock_id_2 = get_tblock_id(2);                                 \
    int global_id_2 = get_global_id(2);                                 \
    for (int i2 = 0; i2 <= repeat_2; i2++) {                            \
      int32_t our_array_offset = tblock_id_2 * x_elems * y_elems;       \
      int32_t odata_offset = dst_offset + our_array_offset;             \
      int32_t idata_offset = src_offset + our_array_offset;             \
      int32_t x_index =                                                 \
        tblock_id_0 * TR_BLOCK_DIM * mulx +                             \
        get_local_id(0) +                                               \
        get_local_id(1)%mulx * TR_BLOCK_DIM;                            \
      int32_t y_index = tblock_id_1 * TR_BLOCK_DIM + get_local_id(1)/mulx; \
      int32_t index_in = y_index * x_elems + x_index;                   \
      if (x_index < x_elems && y_index < y_elems) {                     \
        block[get_local_id(1) * (TR_BLOCK_DIM+1) + get_local_id(0)] =   \
          src_mem[idata_offset + index_in];                             \
      }                                                                 \
      barrier_local();                                                  \
      x_index = tblock_id_1 * TR_BLOCK_DIM + get_local_id(0)/mulx;      \
      y_index =                                                         \
        tblock_id_0 * TR_BLOCK_DIM * mulx +                             \
        get_local_id(1) +                                               \
        (get_local_id(0)%mulx) * TR_BLOCK_DIM;                          \
      int32_t index_out = y_index * y_elems + x_index;                  \
      if (x_index < y_elems && y_index < x_elems) {                     \
        dst_mem[odata_offset + index_out] =                             \
          block[get_local_id(0) * (TR_BLOCK_DIM+1) + get_local_id(1)];  \
      }                                                                 \
      tblock_id_2 += get_num_tblocks(2);                                \
      global_id_2 += get_global_size(2);                                \
    }                                                                   \
    tblock_id_1 += get_num_tblocks(1);                                  \
    global_id_1 += get_global_size(1);                                  \
  }                                                                     \
}                                                                       \
                                                                        \
FUTHARK_KERNEL_SIZED(TR_BLOCK_DIM, TR_BLOCK_DIM, 1)                     \
void map_transpose_##NAME##_low_width(SHARED_MEM_PARAM                  \
                                      __global ELEM_TYPE *dst_mem,      \
                                      int64_t dst_offset,               \
                                      __global ELEM_TYPE *src_mem,      \
                                      int64_t src_offset,               \
                                      int32_t num_arrays,               \
                                      int32_t x_elems,                  \
                                      int32_t y_elems,                  \
                                      int32_t mulx,                     \
                                      int32_t muly,                     \
                                      int32_t repeat_1,                 \
                                      int32_t repeat_2) {               \
  __local ELEM_TYPE* block = (__local ELEM_TYPE*)shared_mem;            \
  int tblock_id_0 = get_tblock_id(0);                                   \
  int global_id_0 = get_global_id(0);                                   \
  int tblock_id_1 = get_tblock_id(1);                                   \
  int global_id_1 = get_global_id(1);                                   \
  for (int i1 = 0; i1 <= repeat_1; i1++) {                              \
    int tblock_id_2 = get_tblock_id(2);                                 \
    int global_id_2 = get_global_id(2);                                 \
    for (int i2 = 0; i2 <= repeat_2; i2++) {                            \
      int32_t our_array_offset = tblock_id_2 * x_elems * y_elems;       \
      int32_t odata_offset = dst_offset + our_array_offset;             \
      int32_t idata_offset = src_offset + our_array_offset;             \
      int32_t x_index = tblock_id_0 * TR_BLOCK_DIM + get_local_id(0)/muly; \
      int32_t y_index =                                                 \
        tblock_id_1 * TR_BLOCK_DIM * muly +                             \
        get_local_id(1) + (get_local_id(0)%muly) * TR_BLOCK_DIM;        \
      int32_t index_in = y_index * x_elems + x_index;                   \
      if (x_index < x_elems && y_index < y_elems) {                     \
        block[get_local_id(1) * (TR_BLOCK_DIM+1) + get_local_id(0)] =   \
          src_mem[idata_offset + index_in];                             \
      }                                                                 \
      barrier_local();                                                  \
      x_index = tblock_id_1 * TR_BLOCK_DIM * muly +                     \
        get_local_id(0) + (get_local_id(1)%muly) * TR_BLOCK_DIM;        \
      y_index = tblock_id_0 * TR_BLOCK_DIM + get_local_id(1)/muly;      \
      int32_t index_out = y_index * y_elems + x_index;                  \
      if (x_index < y_elems && y_index < x_elems) {                     \
        dst_mem[odata_offset + index_out] =                             \
          block[get_local_id(0) * (TR_BLOCK_DIM+1) + get_local_id(1)];  \
      }                                                                 \
      tblock_id_2 += get_num_tblocks(2);                                \
      global_id_2 += get_num_tblocks(2) * get_local_size(2);            \
    }                                                                   \
    tblock_id_1 += get_num_tblocks(1);                                  \
    global_id_1 += get_num_tblocks(1) * get_local_size(1);              \
  }                                                                     \
}                                                                       \
                                                                        \
FUTHARK_KERNEL_SIZED(TR_BLOCK_DIM*TR_BLOCK_DIM, 1, 1)                   \
void map_transpose_##NAME##_small(SHARED_MEM_PARAM                       \
                                  __global ELEM_TYPE *dst_mem,          \
                                  int64_t dst_offset,                   \
                                  __global ELEM_TYPE *src_mem,          \
                                  int64_t src_offset,                   \
                                  int32_t num_arrays,                   \
                                  int32_t x_elems,                      \
                                  int32_t y_elems,                      \
                                  int32_t mulx,                         \
                                  int32_t muly,                         \
                                  int32_t repeat_1,                     \
                                  int32_t repeat_2) {                   \
  (void)mulx; (void)muly;                                               \
  __local ELEM_TYPE* block = (__local ELEM_TYPE*)shared_mem;            \
  int tblock_id_0 = get_tblock_id(0);                                   \
  int global_id_0 = get_global_id(0);                                   \
  int tblock_id_1 = get_tblock_id(1);                                   \
  int global_id_1 = get_global_id(1);                                   \
  for (int i1 = 0; i1 <= repeat_1; i1++) {                              \
    int tblock_id_2 = get_tblock_id(2);                                 \
    int global_id_2 = get_global_id(2);                                 \
    for (int i2 = 0; i2 <= repeat_2; i2++) {                            \
      int32_t our_array_offset = global_id_0/(y_elems * x_elems) * y_elems * x_elems; \
      int32_t x_index = (global_id_0 % (y_elems * x_elems))/y_elems;    \
      int32_t y_index = global_id_0%y_elems;                            \
      int32_t odata_offset = dst_offset + our_array_offset;             \
      int32_t idata_offset = src_offset + our_array_offset;             \
      int32_t index_in = y_index * x_elems + x_index;                   \
      int32_t index_out = x_index * y_elems + y_index;                  \
      if (global_id_0 < x_elems * y_elems * num_arrays) {               \
        dst_mem[odata_offset + index_out] = src_mem[idata_offset + index_in]; \
      }                                                                 \
      tblock_id_2 += get_num_tblocks(2);                                \
      global_id_2 += get_global_size(2);                                \
    }                                                                   \
    tblock_id_1 += get_num_tblocks(1);                                  \
    global_id_1 += get_global_size(1);                                  \
  }                                                                     \
}                                                                       \
                                                                        \
FUTHARK_KERNEL_SIZED(TR_BLOCK_DIM*2, TR_TILE_DIM/TR_ELEMS_PER_THREAD, 1)\
void map_transpose_##NAME##_large(SHARED_MEM_PARAM                      \
                                  __global ELEM_TYPE *dst_mem,          \
                                  int64_t dst_offset,                   \
                                  __global ELEM_TYPE *src_mem,          \
                                  int64_t src_offset,                   \
                                  int64_t num_arrays,                   \
                                  int64_t x_elems,                      \
                                  int64_t y_elems,                      \
                                  int64_t mulx,                         \
                                  int64_t muly,                         \
                                  int32_t repeat_1,                     \
                                  int32_t repeat_2) {                   \
  (void)mulx; (void)muly;                                               \
  __local ELEM_TYPE* block = (__local ELEM_TYPE*)shared_mem;             \
  int tblock_id_0 = get_tblock_id(0);                                   \
  int global_id_0 = get_global_id(0);                                   \
  int tblock_id_1 = get_tblock_id(1);                                   \
  int global_id_1 = get_global_id(1);                                   \
  for (int i1 = 0; i1 <= repeat_1; i1++) {                              \
    int tblock_id_2 = get_tblock_id(2);                                 \
    int global_id_2 = get_global_id(2);                                 \
    for (int i2 = 0; i2 <= repeat_2; i2++) {                            \
      int64_t our_array_offset = tblock_id_2 * x_elems * y_elems;       \
      int64_t odata_offset = dst_offset + our_array_offset;             \
      int64_t idata_offset = src_offset + our_array_offset;             \
      int64_t x_index = global_id_0;                                    \
      int64_t y_index = tblock_id_1 * TR_TILE_DIM + get_local_id(1);    \
      if (x_index < x_elems) {                                          \
        for (int64_t j = 0; j < TR_ELEMS_PER_THREAD; j++) {             \
          int64_t index_i = (y_index + j * (TR_TILE_DIM/TR_ELEMS_PER_THREAD)) * x_elems + x_index; \
          if (y_index + j * (TR_TILE_DIM/TR_ELEMS_PER_THREAD) < y_elems) { \
            block[(get_local_id(1) + j * (TR_TILE_DIM/TR_ELEMS_PER_THREAD)) * (TR_TILE_DIM+1) + \
                  get_local_id(0)] =                                    \
              src_mem[idata_offset + index_i];                          \
          }                                                             \
        }                                                               \
      }                                                                 \
      barrier_local();                                                  \
      x_index = tblock_id_1 * TR_TILE_DIM + get_local_id(0);            \
      y_index = tblock_id_0 * TR_TILE_DIM + get_local_id(1);            \
      if (x_index < y_elems) {                                          \
        for (int64_t j = 0; j < TR_ELEMS_PER_THREAD; j++) {             \
          int64_t index_out = (y_index + j * (TR_TILE_DIM/TR_ELEMS_PER_THREAD)) * y_elems + x_index; \
          if (y_index + j * (TR_TILE_DIM/TR_ELEMS_PER_THREAD) < x_elems) { \
            dst_mem[(odata_offset + index_out)] =                       \
              block[get_local_id(0) * (TR_TILE_DIM+1) +                 \
                    get_local_id(1) + j * (TR_TILE_DIM/TR_ELEMS_PER_THREAD)]; \
          }                                                             \
        }                                                               \
      }                                                                 \
      tblock_id_2 += get_num_tblocks(2);                                \
      global_id_2 += get_global_size(2);                                \
    }                                                                   \
    tblock_id_1 += get_num_tblocks(1);                                  \
    global_id_1 += get_global_size(1);                                  \
  }                                                                     \
}                                                                       \

GEN_TRANSPOSE_KERNELS(1b, uint8_t)
GEN_TRANSPOSE_KERNELS(2b, uint16_t)
GEN_TRANSPOSE_KERNELS(4b, uint32_t)
GEN_TRANSPOSE_KERNELS(8b, uint64_t)

// End of transpose.cl
// Start of copy.cl

#define GEN_COPY_KERNEL(NAME, ELEM_TYPE) \
FUTHARK_KERNEL void lmad_copy_##NAME(SHARED_MEM_PARAM                   \
                               __global ELEM_TYPE *dst_mem,             \
                               int64_t dst_offset,                      \
                               __global ELEM_TYPE *src_mem,             \
                               int64_t src_offset,                      \
                               int64_t n,                               \
                               int r,                                   \
                               int64_t shape0, int64_t dst_stride0, int64_t src_stride0, \
                               int64_t shape1, int64_t dst_stride1, int64_t src_stride1, \
                               int64_t shape2, int64_t dst_stride2, int64_t src_stride2, \
                               int64_t shape3, int64_t dst_stride3, int64_t src_stride3, \
                               int64_t shape4, int64_t dst_stride4, int64_t src_stride4, \
                               int64_t shape5, int64_t dst_stride5, int64_t src_stride5, \
                               int64_t shape6, int64_t dst_stride6, int64_t src_stride6, \
                               int64_t shape7, int64_t dst_stride7, int64_t src_stride7) { \
  int64_t gtid = get_global_id(0);                                      \
  int64_t remainder = gtid;                                             \
                                                                        \
  if (gtid >= n) {                                                      \
    return;                                                             \
  }                                                                     \
                                                                        \
  if (r > 0) {                                                          \
    int64_t i = remainder % shape0;                                     \
    dst_offset += i * dst_stride0;                                      \
    src_offset += i * src_stride0;                                      \
    remainder /= shape0;                                                \
  }                                                                     \
  if (r > 1) {                                                          \
    int64_t i = remainder % shape1;                                     \
    dst_offset += i * dst_stride1;                                      \
    src_offset += i * src_stride1;                                      \
    remainder /= shape1;                                                \
  }                                                                     \
  if (r > 2) {                                                          \
    int64_t i = remainder % shape2;                                     \
    dst_offset += i * dst_stride2;                                      \
    src_offset += i * src_stride2;                                      \
    remainder /= shape2;                                                \
  }                                                                     \
  if (r > 3) {                                                          \
    int64_t i = remainder % shape3;                                     \
    dst_offset += i * dst_stride3;                                      \
    src_offset += i * src_stride3;                                      \
    remainder /= shape3;                                                \
  }                                                                     \
  if (r > 4) {                                                          \
    int64_t i = remainder % shape4;                                     \
    dst_offset += i * dst_stride4;                                      \
    src_offset += i * src_stride4;                                      \
    remainder /= shape4;                                                \
  }                                                                     \
  if (r > 5) {                                                          \
    int64_t i = remainder % shape5;                                     \
    dst_offset += i * dst_stride5;                                      \
    src_offset += i * src_stride5;                                      \
    remainder /= shape5;                                                \
  }                                                                     \
  if (r > 6) {                                                          \
    int64_t i = remainder % shape6;                                     \
    dst_offset += i * dst_stride6;                                      \
    src_offset += i * src_stride6;                                      \
    remainder /= shape6;                                                \
  }                                                                     \
  if (r > 7) {                                                          \
    int64_t i = remainder % shape7;                                     \
    dst_offset += i * dst_stride7;                                      \
    src_offset += i * src_stride7;                                      \
    remainder /= shape7;                                                \
  }                                                                     \
                                                                        \
  dst_mem[dst_offset] = src_mem[src_offset];                            \
}

GEN_COPY_KERNEL(1b, uint8_t)
GEN_COPY_KERNEL(2b, uint16_t)
GEN_COPY_KERNEL(4b, uint32_t)
GEN_COPY_KERNEL(8b, uint64_t)

// End of copy.cl
using namespace cute;

template<class TypeIn>
struct convert_type {
    using TypeOut = TypeIn;
};

template<>
struct convert_type<f16> {
    using TypeOut = half_t;
};

template<class ElmTypeAIn, class ElmTypeBIn, class ElmTypeCIn, class SizeM, class SizeN, class WarpsM, class WarpsN>
struct get_mma_config {};

// TODO: use FMA when Tensor Cores not available?

template<class SizeM, class SizeN, class WarpsM, class WarpsN>
struct get_mma_config<half_t, half_t, half_t, SizeM, SizeN, WarpsM, WarpsN> {
    // TODO: should depend on architecture available
    using MMATraits = MMA_Traits<SM80_16x8x16_F16F16F16F16_TN>;
    using ACopyOpSharedRegisters = SM75_U32x4_LDSM_N;
    using BCopyOpSharedRegisters = SM75_U16x8_LDSM_T;

    using MMATile = Tile<Int<16 * WarpsM{}>, Int<16 * WarpsN{}>, _16>;
    using TiledMMA = TiledMMA<
        MMA_Atom<MMATraits>,
        Layout<Shape<WarpsM,WarpsN,_1>>,
        MMATile
    >;
};

template<class SizeM, class SizeN, class WarpsM, class WarpsN>
struct get_mma_config<half_t, half_t, float, SizeM, SizeN, WarpsM, WarpsN>{
    // TODO: should depend on architecture available
    using MMATraits = MMA_Traits<SM80_16x8x16_F32F16F16F32_TN>;
    using ACopyOpSharedRegisters = SM75_U32x4_LDSM_N;
    using BCopyOpSharedRegisters = SM75_U16x8_LDSM_T;

    using MMATile = Tile<Int<16 * WarpsM{}>, Int<16 * WarpsN{}>, _16>;
    using TiledMMA = TiledMMA<
        MMA_Atom<MMATraits>,
        Layout<Shape<WarpsM,WarpsN,_1>>,
        MMATile
    >;
};

template<class SizeY, class SizeX, class Swizzle, class Majorness, int shift_len>
struct get_layout_config {};

template<class SizeY, class SizeX, int shift_len>
struct get_layout_config<SizeY, SizeX, _1, LayoutRight, shift_len>{
    using SharedLayout = ComposedLayout<Swizzle<3, 3, shift_len>, _0, Layout<Shape<SizeY, SizeX>, Stride<SizeX, _1>>>;
};

template<class SizeY, class SizeX, int shift_len>
struct get_layout_config<SizeY, SizeX, _0, LayoutRight, shift_len>{
    using SharedLayout = Layout<Shape<SizeY, SizeX>, Stride<SizeX, _1>>;
};

template<class SizeY, class SizeX, int shift_len>
struct get_layout_config<SizeY, SizeX, _1, LayoutLeft, shift_len>{
    using SharedLayout = ComposedLayout<Swizzle<3, 3, shift_len>, _0, Layout<Shape<SizeY, SizeX>, Stride<_1, SizeY>>>;
};

template<class SizeY, class SizeX, int shift_len>
struct get_layout_config<SizeY, SizeX, _0, LayoutLeft, shift_len>{
    using SharedLayout = Layout<Shape<SizeY, SizeX>, Stride<_1, SizeY>>;
};

template<class ElmTypeIn, class SizeY, class SizeX, class WarpsM, class WarpsN>
FUTHARK_FUN_ATTR void futrts_copyGlobalShared(unsigned char **mem_out_p, unsigned char *global_mem, unsigned char *shared_mem, int64_t offset, ElmTypeIn, SizeY, SizeX, WarpsM, WarpsN)
{
    *mem_out_p = shared_mem;

    int flatThreadIdx = threadIdx.z * blockDim.y * blockDim.x + threadIdx.y * blockDim.x + threadIdx.x;

    if (flatThreadIdx < WarpsM{} * WarpsN{} * 32) {
      using ElmType = typename convert_type<ElmTypeIn>::TypeOut;

      using CopyOpGlobalShared = SM80_CP_ASYNC_CACHEGLOBAL<uint128_t>;

      constexpr int elmsPerLoad = 16 / sizeof(ElmType);
      constexpr int threadsX = SizeX{} / elmsPerLoad;
      constexpr int threadsY = (WarpsM{} * WarpsN{} * 32) / threadsX;

      constexpr unsigned int sizeXunsigned = SizeX{};
      constexpr unsigned int shift_len = max(bit_width(sizeXunsigned) - 4, _3{});

      using LayoutConfig = get_layout_config<SizeY, SizeX, _1, LayoutRight, shift_len>;
      typename LayoutConfig::SharedLayout s_layout;

      auto g_layout = make_layout(Shape<SizeY, SizeX>{}, LayoutRight{});

      TiledCopy copy_global_shared = make_tiled_copy(Copy_Atom<CopyOpGlobalShared, ElmType>{},
          make_layout(Shape<Int<threadsY>, Int<threadsX>>{}, LayoutRight{}),
          Layout<Shape<_1,Int<elmsPerLoad>>>{}
      );

      Tensor s = make_tensor(make_smem_ptr(reinterpret_cast<ElmType *>(shared_mem)), s_layout);
      Tensor g = make_tensor(make_gmem_ptr(&reinterpret_cast<ElmType *>(global_mem)[offset]), g_layout);

      ThrCopy thr_copy_global_shared = copy_global_shared.get_slice(flatThreadIdx);
      Tensor tAgA = thr_copy_global_shared.partition_S(g);
      Tensor tAsA = thr_copy_global_shared.partition_D(s);

      copy(copy_global_shared, tAgA, tAsA);

      cp_async_fence();
    }

//     Assuming the copied data is only used in futrts_tensorMMM, we do not need to wait for it here
//     cp_async_wait<0>();
//     __syncthreads();
}

template<class ElmTypeAIn, class ElmTypeBIn, class ElmTypeCIn, class SizeM, class SizeN, class WarpsM, class WarpsN, int numRegs>
FUTHARK_FUN_ATTR void futrts_copyRegistersShared(unsigned char **mem_out_p, ElmTypeCIn (&registers_mem)[numRegs], unsigned char *shared_mem, ElmTypeAIn, ElmTypeBIn, SizeM, SizeN, WarpsM, WarpsN)
{
    *mem_out_p = shared_mem;

    int flatThreadIdx = threadIdx.z * blockDim.y * blockDim.x + threadIdx.y * blockDim.x + threadIdx.x;

    if (flatThreadIdx < WarpsM{} * WarpsN{} * 32) {
        using ElmTypeA = typename convert_type<ElmTypeAIn>::TypeOut;
        using ElmTypeB = typename convert_type<ElmTypeBIn>::TypeOut;
        using ElmTypeC = typename convert_type<ElmTypeCIn>::TypeOut;

        using MMAConfig = get_mma_config<ElmTypeA, ElmTypeB, ElmTypeC, SizeM, SizeN, WarpsM, WarpsN>;
        typename MMAConfig::TiledMMA tiled_mma;

        auto s_layout = make_layout(Shape<SizeM, SizeN>{}, LayoutRight{});

        ThrMMA thr_mma = tiled_mma.get_slice(flatThreadIdx);

        auto r_layout = partition_shape_C(thr_mma, s_layout.shape());
        Tensor tCrC = make_tensor(make_rmem_ptr(reinterpret_cast<ElmTypeC *>(registers_mem)), r_layout);

        Tensor s = make_tensor(make_smem_ptr(reinterpret_cast<ElmTypeC *>(shared_mem)), s_layout);
        Tensor tCsC = thr_mma.partition_C(s);

        copy(AutoVectorizingCopy{}, tCrC, tCsC);
    }
    __syncthreads();
}

template<class ElmTypeAIn, class ElmTypeBIn, class ElmTypeCIn, class SizeM, class SizeN, class SizeK, class WarpsM, class WarpsN, class ASwizzled, class BSwizzled, int numRegs>
FUTHARK_FUN_ATTR void futrts_tensorMMM(ElmTypeCIn (*mem_out_p)[numRegs], unsigned char *A_mem, unsigned char *B_mem, ElmTypeCIn (&C_mem)[numRegs], ElmTypeAIn, ElmTypeBIn, SizeM, SizeN, SizeK, WarpsM, WarpsN, ASwizzled, BSwizzled)
{
    int flatThreadIdx = threadIdx.z * blockDim.y * blockDim.x + threadIdx.y * blockDim.x + threadIdx.x;

    using ElmTypeA = typename convert_type<ElmTypeAIn>::TypeOut;
    using ElmTypeB = typename convert_type<ElmTypeBIn>::TypeOut;
    using ElmTypeC = typename convert_type<ElmTypeCIn>::TypeOut;

    using MMAConfig = get_mma_config<ElmTypeA, ElmTypeB, ElmTypeC, SizeM, SizeN, WarpsM, WarpsN>;
    typename MMAConfig::TiledMMA tiled_mma;

    constexpr unsigned int sizeKunsigned = SizeK{};
    constexpr unsigned int shift_lenK = max(bit_width(sizeKunsigned) - 4, _3{});

    constexpr unsigned int sizeNunsigned = SizeN{};
    constexpr unsigned int shift_lenN = max(bit_width(sizeNunsigned) - 4, _3{});

    using ALayoutConfig = get_layout_config<SizeM, SizeK, ASwizzled, LayoutRight, shift_lenK>;
    using BLayoutConfig = get_layout_config<SizeN, SizeK, BSwizzled, LayoutLeft, shift_lenN>;
    typename ALayoutConfig::SharedLayout sA_layout;
    typename BLayoutConfig::SharedLayout sB_layout;

    auto sC_layout = make_layout(Shape<SizeM, SizeN>{}, LayoutRight{});

    ThrMMA thr_mma = tiled_mma.get_slice(flatThreadIdx);

    auto rC_layout = partition_shape_C(thr_mma, sC_layout.shape());
    Tensor tCrC = make_tensor(make_rmem_ptr(reinterpret_cast<ElmTypeC *>(C_mem)), rC_layout);

    Tensor sA = make_tensor(make_smem_ptr(reinterpret_cast<ElmTypeA *>(A_mem)), sA_layout);
    Tensor sB = make_tensor(make_smem_ptr(reinterpret_cast<ElmTypeB *>(B_mem)), sB_layout);

    TiledCopy copyA_shared_registers = make_tiled_copy_A(Copy_Atom<typename MMAConfig::ACopyOpSharedRegisters, ElmTypeA>{}, tiled_mma);
    TiledCopy copyB_shared_registers = make_tiled_copy_B(Copy_Atom<typename MMAConfig::BCopyOpSharedRegisters, ElmTypeB>{}, tiled_mma);

    Tensor tCrA  = thr_mma.partition_fragment_A(sA);
    Tensor tCrB  = thr_mma.partition_fragment_B(sB);

    auto smem_thr_copy_A   = copyA_shared_registers.get_thread_slice(threadIdx.x);
    Tensor tCsA            = smem_thr_copy_A.partition_S(sA);
    Tensor tCrA_copy_view  = smem_thr_copy_A.retile_D(tCrA);

    auto smem_thr_copy_B   = copyB_shared_registers.get_thread_slice(threadIdx.x);
    Tensor tCsB            = smem_thr_copy_B.partition_S(sB);
    Tensor tCrB_copy_view  = smem_thr_copy_B.retile_D(tCrB);

    // Wait for data copied asynchronously by futrts_copyGlobalShared
    cp_async_wait<0>();
    __syncthreads();

    constexpr int K_BLOCK_MAX = size<2>(tCrA);
    CUTE_UNROLL
    for (int k_block = 0; k_block < K_BLOCK_MAX; ++k_block)
    {
        // Copy shared->registers
        copy(copyA_shared_registers, tCsA(_,_,k_block), tCrA_copy_view(_,_,k_block));
        copy(copyB_shared_registers, tCsB(_,_,k_block), tCrB_copy_view(_,_,k_block));

        // Perform mma on k_block in registers
        gemm(tiled_mma, tCrA(_,_,k_block), tCrB(_,_,k_block), tCrC);
    }

    for (int32_t i = 0; i < numRegs; i++)
        (*mem_out_p)[i] = C_mem[i];
}



FUTHARK_KERNEL_SIZED(FlashAttention_6392zisegmap_25514_dim1, 1, 1)
void FlashAttention_6392zisegmap_25514(__global int *global_failure, int failure_is_an_option, __global int64_t *global_failure_args, int64_t d_13944, int64_t m_13945, __global unsigned char *mem_28383)
{
    #define segmap_tblock_sizze_25509 (FlashAttention_6392zisegmap_25514zisegmap_tblock_sizze_25509)
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_31889;
    int32_t tblock_sizze_31892;
    int32_t wave_sizze_31891;
    int32_t block_id_31890;
    int32_t global_tid_31888;
    int64_t phys_tid_25514;
    int64_t global_tid_31893;
    int64_t slice_31894;
    int64_t slice_31895;
    int64_t gtid_25512;
    int64_t remnant_31896;
    int64_t gtid_25513;
    int64_t remnant_31897;
    
    local_tid_31889 = get_local_id(0);
    tblock_sizze_31892 = get_local_size(0);
    wave_sizze_31891 = LOCKSTEP_WIDTH;
    block_id_31890 = get_tblock_id(0);
    global_tid_31888 = block_id_31890 * tblock_sizze_31892 + local_tid_31889;
    phys_tid_25514 = sext_i32_i64(global_tid_31888);
    global_tid_31893 = sext_i32_i64(block_id_31890) * segmap_tblock_sizze_25509 + sext_i32_i64(local_tid_31889);
    slice_31894 = d_13944;
    slice_31895 = m_13945 * slice_31894;
    gtid_25512 = squot64(global_tid_31893, slice_31894);
    remnant_31896 = global_tid_31893 - gtid_25512 * slice_31894;
    gtid_25513 = remnant_31896;
    remnant_31897 = remnant_31896 - gtid_25513;
    if (slt64(gtid_25512, m_13945) && slt64(gtid_25513, d_13944)) {
        bool y_25517;
        bool index_certs_25519;
        
        y_25517 = slt64(gtid_25513, (int64_t) 128);
        if (!y_25517) {
            {
                if (atomic_cmpxchg_i32_global(global_failure, -1, 13) == -1) {
                    global_failure_args[0] = (int64_t) gtid_25513;
                    global_failure_args[1] = (int64_t) (int64_t) 128;
                    ;
                }
                return;
            }
        }
    }
    
  error_0:
    return;
    #undef segmap_tblock_sizze_25509
}
FUTHARK_KERNEL_SIZED(FlashAttention_6392zisegmap_25534_dim1, 1, 1)
void FlashAttention_6392zisegmap_25534(__global int *global_failure, int failure_is_an_option, __global int64_t *global_failure_args, int64_t d_13944, int64_t m_13945, int64_t dzlz7bUZLztZRz20Umz20UZLZLzpZRz20Udz20UnZRz7dUzg_15976, int64_t dzlz7bUZLztZRz20Unz20Umz7dUzg_16008, int64_t dzlz7bUZLztZRz20Umz20Udz7dUzg_16051, __global unsigned char *mem_28381, __global unsigned char *mem_28383, __global unsigned char *mem_28388)
{
    #define segmap_tblock_sizze_25528 (FlashAttention_6392zisegmap_25534zisegmap_tblock_sizze_25528)
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_31900;
    int32_t tblock_sizze_31903;
    int32_t wave_sizze_31902;
    int32_t block_id_31901;
    int32_t global_tid_31899;
    int64_t phys_tid_25534;
    int64_t global_tid_31904;
    int64_t slice_31905;
    int64_t slice_31906;
    int64_t slice_31907;
    int64_t gtid_25531;
    int64_t remnant_31908;
    int64_t gtid_25532;
    int64_t remnant_31909;
    int64_t gtid_25533;
    int64_t remnant_31910;
    
    local_tid_31900 = get_local_id(0);
    tblock_sizze_31903 = get_local_size(0);
    wave_sizze_31902 = LOCKSTEP_WIDTH;
    block_id_31901 = get_tblock_id(0);
    global_tid_31899 = block_id_31901 * tblock_sizze_31903 + local_tid_31900;
    phys_tid_25534 = sext_i32_i64(global_tid_31899);
    global_tid_31904 = sext_i32_i64(block_id_31901) * segmap_tblock_sizze_25528 + sext_i32_i64(local_tid_31900);
    slice_31905 = dzlz7bUZLztZRz20Umz20Udz7dUzg_16051;
    slice_31906 = d_13944 * slice_31905;
    slice_31907 = m_13945 * slice_31906;
    gtid_25531 = squot64(global_tid_31904, slice_31906);
    remnant_31908 = global_tid_31904 - gtid_25531 * slice_31906;
    gtid_25532 = squot64(remnant_31908, slice_31905);
    remnant_31909 = remnant_31908 - gtid_25532 * slice_31905;
    gtid_25533 = remnant_31909;
    remnant_31910 = remnant_31909 - gtid_25533;
    if ((slt64(gtid_25531, m_13945) && slt64(gtid_25532, d_13944)) && slt64(gtid_25533, dzlz7bUZLztZRz20Umz20Udz7dUzg_16051)) {
        bool y_25540;
        bool index_certs_25542;
        bool index_certs_25537;
        int64_t binop_x_27188;
        int64_t binop_y_27189;
        int64_t binop_x_27190;
        int64_t binop_x_27191;
        int64_t new_index_27194;
        int64_t binop_y_27210;
        int64_t binop_x_27211;
        int64_t new_index_27212;
        int64_t binop_y_27248;
        int64_t binop_x_27249;
        int64_t new_index_27250;
        int64_t binop_y_27326;
        int64_t new_index_27327;
        f16 lifted_lambda_res_25543;
        
        y_25540 = slt64(gtid_25533, dzlz7bUZLztZRz20Umz20UZLZLzpZRz20Udz20UnZRz7dUzg_15976);
        if (!y_25540) {
            {
                if (atomic_cmpxchg_i32_global(global_failure, -1, 14) == -1) {
                    global_failure_args[0] = (int64_t) gtid_25533;
                    global_failure_args[1] = (int64_t) dzlz7bUZLztZRz20Umz20UZLZLzpZRz20Udz20UnZRz7dUzg_15976;
                    ;
                }
                return;
            }
        }
        index_certs_25537 = 0;
        binop_x_27188 = dzlz7bUZLztZRz20Unz20Umz7dUzg_16008 * gtid_25531;
        binop_y_27189 = (int64_t) 128 * gtid_25533;
        binop_x_27190 = binop_x_27188 + binop_y_27189;
        binop_x_27191 = gtid_25532 + binop_x_27190;
        new_index_27194 = squot64(binop_x_27191, dzlz7bUZLztZRz20Unz20Umz7dUzg_16008);
        binop_y_27210 = dzlz7bUZLztZRz20Unz20Umz7dUzg_16008 * new_index_27194;
        binop_x_27211 = binop_x_27191 - binop_y_27210;
        new_index_27212 = squot64(binop_x_27211, (int64_t) 16384);
        binop_y_27248 = (int64_t) 16384 * new_index_27212;
        binop_x_27249 = binop_x_27211 - binop_y_27248;
        new_index_27250 = squot64(binop_x_27249, (int64_t) 128);
        binop_y_27326 = (int64_t) 128 * new_index_27250;
        new_index_27327 = binop_x_27249 - binop_y_27326;
        lifted_lambda_res_25543 = futrts_from_bits16(((__global uint16_t *) mem_28381)[new_index_27194 * ((int64_t) 16384 * m_13945) + new_index_27212 * (int64_t) 16384 + new_index_27250 * (int64_t) 128 + new_index_27327]);
        ((__global uint16_t *) mem_28388)[gtid_25531 * (dzlz7bUZLztZRz20Umz20Udz7dUzg_16051 * d_13944) + gtid_25532 * dzlz7bUZLztZRz20Umz20Udz7dUzg_16051 + gtid_25533] = futrts_to_bits16(lifted_lambda_res_25543);
    }
    
  error_0:
    return;
    #undef segmap_tblock_sizze_25528
}
FUTHARK_KERNEL_SIZED(FlashAttention_6392zisegmap_25684_dim1, 1, 1)
void FlashAttention_6392zisegmap_25684(__global int *global_failure, int64_t d_13944, int64_t m_13945, int64_t dzlz7bUZLztZRz20Umz20Udz7dUzg_13946, int64_t ext_28419, int64_t ext_28420, __global unsigned char *ext_mem_28421, __global unsigned char *mem_28426, __global unsigned char *mem_28429, __global unsigned char *mem_28434)
{
    #define segmap_tblock_sizze_25678 (FlashAttention_6392zisegmap_25684zisegmap_tblock_sizze_25678)
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_31996;
    int32_t tblock_sizze_31999;
    int32_t wave_sizze_31998;
    int32_t block_id_31997;
    int32_t global_tid_31995;
    int64_t phys_tid_25684;
    int64_t global_tid_32000;
    int64_t slice_32001;
    int64_t slice_32002;
    int64_t slice_32003;
    int64_t gtid_25681;
    int64_t remnant_32004;
    int64_t gtid_25682;
    int64_t remnant_32005;
    int64_t gtid_25683;
    int64_t remnant_32006;
    
    local_tid_31996 = get_local_id(0);
    tblock_sizze_31999 = get_local_size(0);
    wave_sizze_31998 = LOCKSTEP_WIDTH;
    block_id_31997 = get_tblock_id(0);
    global_tid_31995 = block_id_31997 * tblock_sizze_31999 + local_tid_31996;
    phys_tid_25684 = sext_i32_i64(global_tid_31995);
    global_tid_32000 = sext_i32_i64(block_id_31997) * segmap_tblock_sizze_25678 + sext_i32_i64(local_tid_31996);
    slice_32001 = dzlz7bUZLztZRz20Umz20Udz7dUzg_13946;
    slice_32002 = d_13944 * slice_32001;
    slice_32003 = m_13945 * slice_32002;
    gtid_25681 = squot64(global_tid_32000, slice_32002);
    remnant_32004 = global_tid_32000 - gtid_25681 * slice_32002;
    gtid_25682 = squot64(remnant_32004, slice_32001);
    remnant_32005 = remnant_32004 - gtid_25682 * slice_32001;
    gtid_25683 = remnant_32005;
    remnant_32006 = remnant_32005 - gtid_25683;
    if ((slt64(gtid_25681, m_13945) && slt64(gtid_25682, d_13944)) && slt64(gtid_25683, dzlz7bUZLztZRz20Umz20Udz7dUzg_13946)) {
        f16 eta_p_25685;
        f16 eta_p_25686;
        f16 eta_p_25687;
        f16 real_exp_arg0_25688;
        f16 exp_res_25689;
        f16 lifted_lambda_res_25690;
        
        eta_p_25685 = futrts_from_bits16(((__global uint16_t *) mem_28426)[gtid_25681 * d_13944 + gtid_25682]);
        eta_p_25686 = futrts_from_bits16(((__global uint16_t *) mem_28429)[gtid_25681 * d_13944 + gtid_25682]);
        eta_p_25687 = futrts_from_bits16(((__global uint16_t *) ext_mem_28421)[gtid_25681 * ext_28420 + gtid_25682 * ext_28419 + gtid_25683]);
        real_exp_arg0_25688 = eta_p_25687 - eta_p_25685;
        exp_res_25689 = futrts_exp16(real_exp_arg0_25688);
        lifted_lambda_res_25690 = exp_res_25689 / eta_p_25686;
        ((__global uint16_t *) mem_28434)[gtid_25681 * (dzlz7bUZLztZRz20Umz20Udz7dUzg_13946 * d_13944) + gtid_25682 * dzlz7bUZLztZRz20Umz20Udz7dUzg_13946 + gtid_25683] = futrts_to_bits16(lifted_lambda_res_25690);
    }
    
  error_0:
    return;
    #undef segmap_tblock_sizze_25678
}
FUTHARK_KERNEL_SIZED(FlashAttention_6392zisegmap_25758_dim1, 1, 1)
void FlashAttention_6392zisegmap_25758(__global int *global_failure, int64_t d_13944, int64_t m_13945, __global unsigned char *mem_29053, __global unsigned char *mem_29058)
{
    #define segmap_tblock_sizze_25752 (FlashAttention_6392zisegmap_25758zisegmap_tblock_sizze_25752)
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_32166;
    int32_t tblock_sizze_32169;
    int32_t wave_sizze_32168;
    int32_t block_id_32167;
    int32_t global_tid_32165;
    int64_t phys_tid_25758;
    int64_t global_tid_32170;
    int64_t slice_32171;
    int64_t slice_32172;
    int64_t slice_32173;
    int64_t gtid_25755;
    int64_t remnant_32174;
    int64_t gtid_25756;
    int64_t remnant_32175;
    int64_t gtid_25757;
    int64_t remnant_32176;
    
    local_tid_32166 = get_local_id(0);
    tblock_sizze_32169 = get_local_size(0);
    wave_sizze_32168 = LOCKSTEP_WIDTH;
    block_id_32167 = get_tblock_id(0);
    global_tid_32165 = block_id_32167 * tblock_sizze_32169 + local_tid_32166;
    phys_tid_25758 = sext_i32_i64(global_tid_32165);
    global_tid_32170 = sext_i32_i64(block_id_32167) * segmap_tblock_sizze_25752 + sext_i32_i64(local_tid_32166);
    slice_32171 = d_13944;
    slice_32172 = d_13944 * slice_32171;
    slice_32173 = m_13945 * slice_32172;
    gtid_25755 = squot64(global_tid_32170, slice_32172);
    remnant_32174 = global_tid_32170 - gtid_25755 * slice_32172;
    gtid_25756 = squot64(remnant_32174, slice_32171);
    remnant_32175 = remnant_32174 - gtid_25756 * slice_32171;
    gtid_25757 = remnant_32175;
    remnant_32176 = remnant_32175 - gtid_25757;
    if ((slt64(gtid_25755, m_13945) && slt64(gtid_25756, d_13944)) && slt64(gtid_25757, d_13944)) {
        float defunc_0_f_res_25759;
        f16 f32_res_25760;
        
        defunc_0_f_res_25759 = ((__global float *) mem_29053)[gtid_25755 * (d_13944 * d_13944) + gtid_25756 * d_13944 + gtid_25757];
        f32_res_25760 = fpconv_f32_f16(defunc_0_f_res_25759);
        ((__global uint16_t *) mem_29058)[gtid_25755 * (d_13944 * d_13944) + gtid_25756 * d_13944 + gtid_25757] = futrts_to_bits16(f32_res_25760);
    }
    
  error_0:
    return;
    #undef segmap_tblock_sizze_25752
}
FUTHARK_KERNEL_SIZED(FlashAttention_6392zisegmap_26083_dim1, 1, 1)
void FlashAttention_6392zisegmap_26083(__global int *global_failure, int failure_is_an_option, __global int64_t *global_failure_args, int64_t dzlz7bUZLztZRz20Umz20Udz7dUzg_13946, int64_t dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396, __global unsigned char *mem_28645)
{
    #define segmap_tblock_sizze_26076 (FlashAttention_6392zisegmap_26083zisegmap_tblock_sizze_26076)
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_32341;
    int32_t tblock_sizze_32344;
    int32_t wave_sizze_32343;
    int32_t block_id_32342;
    int32_t global_tid_32340;
    int64_t phys_tid_26083;
    int64_t global_tid_32345;
    int64_t slice_32346;
    int64_t slice_32347;
    int64_t slice_32348;
    int64_t gtid_26080;
    int64_t remnant_32349;
    int64_t gtid_26081;
    int64_t remnant_32350;
    int64_t gtid_26082;
    int64_t remnant_32351;
    
    local_tid_32341 = get_local_id(0);
    tblock_sizze_32344 = get_local_size(0);
    wave_sizze_32343 = LOCKSTEP_WIDTH;
    block_id_32342 = get_tblock_id(0);
    global_tid_32340 = block_id_32342 * tblock_sizze_32344 + local_tid_32341;
    phys_tid_26083 = sext_i32_i64(global_tid_32340);
    global_tid_32345 = sext_i32_i64(block_id_32342) * segmap_tblock_sizze_26076 + sext_i32_i64(local_tid_32341);
    slice_32346 = dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396;
    slice_32347 = (int64_t) 2 * slice_32346;
    slice_32348 = (int64_t) 2 * slice_32347;
    gtid_26080 = squot64(global_tid_32345, slice_32347);
    remnant_32349 = global_tid_32345 - gtid_26080 * slice_32347;
    gtid_26081 = squot64(remnant_32349, slice_32346);
    remnant_32350 = remnant_32349 - gtid_26081 * slice_32346;
    gtid_26082 = remnant_32350;
    remnant_32351 = remnant_32350 - gtid_26082;
    if ((slt64(gtid_26080, (int64_t) 2) && slt64(gtid_26081, (int64_t) 2)) && slt64(gtid_26082, dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396)) {
        int64_t index_primexp_27123;
        int64_t tmp_26086;
        bool x_26087;
        bool y_26088;
        bool bounds_check_26089;
        bool index_certs_26090;
        
        index_primexp_27123 = mul64(dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396, gtid_26080);
        tmp_26086 = add64(gtid_26082, index_primexp_27123);
        x_26087 = sle64((int64_t) 0, tmp_26086);
        y_26088 = slt64(tmp_26086, dzlz7bUZLztZRz20Umz20Udz7dUzg_13946);
        bounds_check_26089 = x_26087 && y_26088;
        if (!bounds_check_26089) {
            {
                if (atomic_cmpxchg_i32_global(global_failure, -1, 24) == -1) {
                    global_failure_args[0] = (int64_t) tmp_26086;
                    global_failure_args[1] = (int64_t) dzlz7bUZLztZRz20Umz20Udz7dUzg_13946;
                    ;
                }
                return;
            }
        }
    }
    
  error_0:
    return;
    #undef segmap_tblock_sizze_26076
}
FUTHARK_KERNEL_SIZED(FlashAttention_6392zisegmap_26108_dim1, 1, 1)
void FlashAttention_6392zisegmap_26108(__global int *global_failure, int failure_is_an_option, __global int64_t *global_failure_args, int64_t d_13944, int64_t dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396, int64_t dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400, __global unsigned char *V_mem_28341, __global unsigned char *mem_28645, __global unsigned char *mem_28649)
{
    #define segmap_tblock_sizze_26101 (FlashAttention_6392zisegmap_26108zisegmap_tblock_sizze_26101)
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_32354;
    int32_t tblock_sizze_32357;
    int32_t wave_sizze_32356;
    int32_t block_id_32355;
    int32_t global_tid_32353;
    int64_t phys_tid_26108;
    int64_t global_tid_32358;
    int64_t slice_32359;
    int64_t slice_32360;
    int64_t slice_32361;
    int64_t slice_32362;
    int64_t gtid_26104;
    int64_t remnant_32363;
    int64_t gtid_26105;
    int64_t remnant_32364;
    int64_t gtid_26106;
    int64_t remnant_32365;
    int64_t gtid_26107;
    int64_t remnant_32366;
    
    local_tid_32354 = get_local_id(0);
    tblock_sizze_32357 = get_local_size(0);
    wave_sizze_32356 = LOCKSTEP_WIDTH;
    block_id_32355 = get_tblock_id(0);
    global_tid_32353 = block_id_32355 * tblock_sizze_32357 + local_tid_32354;
    phys_tid_26108 = sext_i32_i64(global_tid_32353);
    global_tid_32358 = sext_i32_i64(block_id_32355) * segmap_tblock_sizze_26101 + sext_i32_i64(local_tid_32354);
    slice_32359 = dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400;
    slice_32360 = dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396 * slice_32359;
    slice_32361 = (int64_t) 2 * slice_32360;
    slice_32362 = (int64_t) 2 * slice_32361;
    gtid_26104 = squot64(global_tid_32358, slice_32361);
    remnant_32363 = global_tid_32358 - gtid_26104 * slice_32361;
    gtid_26105 = squot64(remnant_32363, slice_32360);
    remnant_32364 = remnant_32363 - gtid_26105 * slice_32360;
    gtid_26106 = squot64(remnant_32364, slice_32359);
    remnant_32365 = remnant_32364 - gtid_26106 * slice_32359;
    gtid_26107 = remnant_32365;
    remnant_32366 = remnant_32365 - gtid_26107;
    if (((slt64(gtid_26104, (int64_t) 2) && slt64(gtid_26105, (int64_t) 2)) && slt64(gtid_26106, dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396)) && slt64(gtid_26107, dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) {
        int64_t index_primexp_27120;
        int64_t tmp_26113;
        bool x_26114;
        bool y_26115;
        bool bounds_check_26116;
        bool index_certs_26117;
        int64_t binop_y_27395;
        int64_t index_primexp_27396;
        bool index_certs_26111;
        f16 lifted_lambda_res_26118;
        
        index_primexp_27120 = mul64(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400, gtid_26105);
        tmp_26113 = add64(gtid_26107, index_primexp_27120);
        x_26114 = sle64((int64_t) 0, tmp_26113);
        y_26115 = slt64(tmp_26113, d_13944);
        bounds_check_26116 = x_26114 && y_26115;
        if (!bounds_check_26116) {
            {
                if (atomic_cmpxchg_i32_global(global_failure, -1, 25) == -1) {
                    global_failure_args[0] = (int64_t) tmp_26113;
                    global_failure_args[1] = (int64_t) d_13944;
                    ;
                }
                return;
            }
        }
        binop_y_27395 = mul64(dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396, gtid_26104);
        index_primexp_27396 = add64(gtid_26106, binop_y_27395);
        index_certs_26111 = 0;
        lifted_lambda_res_26118 = futrts_from_bits16(((__global uint16_t *) V_mem_28341)[index_primexp_27396 * d_13944 + tmp_26113]);
        ((__global uint16_t *) mem_28649)[gtid_26104 * (dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396 * (int64_t) 2) + gtid_26105 * (dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396) + gtid_26106 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 + gtid_26107] = futrts_to_bits16(lifted_lambda_res_26118);
    }
    
  error_0:
    return;
    #undef segmap_tblock_sizze_26101
}
FUTHARK_KERNEL_SIZED(FlashAttention_6392zisegmap_26174_dim1, 1, 1)
void FlashAttention_6392zisegmap_26174(__global int *global_failure, int failure_is_an_option, __global int64_t *global_failure_args, int64_t d_13944, int64_t m_13945, int64_t dzlz7bUZLztZRz20Umz20Udz7dUzg_13946, unsigned char ok_or_empty_16195_bits, int64_t dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396, int64_t dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400, int64_t y_18870, int64_t num_tblocks_26170, int64_t binop_x_28711, int64_t lmad_arg_28712, int64_t num_threads_30957, int64_t ctx_30969, int64_t ctx_30971, int64_t ctx_30972, int64_t ctx_30979, int64_t ctx_30980, int64_t ctx_30988, int64_t ctx_31017, int64_t ctx_31018, int64_t ctx_31028, int64_t ctx_31033, int64_t ctx_31087, int64_t binop_y_31091, int32_t virt_num_tblocks_32367, __global unsigned char *mem_28649, __global unsigned char *mem_28765, __global unsigned char *mem_28913, __global unsigned char *color_30686, __global unsigned char *color_30687, __global unsigned char *color_30688)
{
    bool ok_or_empty_16195 = ok_or_empty_16195_bits;
    
    #define segmap_tblock_sizze_26169 (FlashAttention_6392zisegmap_26174zisegmap_tblock_sizze_26169)
    
    volatile __local int local_failure;
    
    if (failure_is_an_option) {
        int failed = *global_failure >= 0;
        
        if (failed)
            return;
    }
    local_failure = 0;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t local_tid_32369;
    int32_t tblock_sizze_32372;
    int32_t wave_sizze_32371;
    int32_t block_id_32370;
    int32_t global_tid_32368;
    int64_t phys_tid_26174;
    int32_t phys_tblock_id_32373;
    int32_t iterations_32374;
    
    local_tid_32369 = get_local_id(0);
    tblock_sizze_32372 = get_local_size(0);
    wave_sizze_32371 = LOCKSTEP_WIDTH;
    block_id_32370 = get_tblock_id(0);
    global_tid_32368 = block_id_32370 * tblock_sizze_32372 + local_tid_32369;
    phys_tid_26174 = sext_i32_i64(global_tid_32368);
    phys_tblock_id_32373 = get_tblock_id(0);
    iterations_32374 = sdiv_up32(virt_num_tblocks_32367 - phys_tblock_id_32373, sext_i64_i32(num_tblocks_26170));
    for (int32_t i_32375 = 0; i_32375 < iterations_32374; i_32375++) {
        int32_t virt_tblock_id_32376;
        int64_t global_tid_32377;
        int64_t slice_32378;
        int64_t gtid_26173;
        int64_t remnant_32379;
        
        virt_tblock_id_32376 = phys_tblock_id_32373 + i_32375 * sext_i64_i32(num_tblocks_26170);
        global_tid_32377 = sext_i32_i64(virt_tblock_id_32376) * segmap_tblock_sizze_26169 + sext_i32_i64(local_tid_32369);
        slice_32378 = m_13945;
        gtid_26173 = global_tid_32377;
        remnant_32379 = global_tid_32377 - gtid_26173;
        if (slt64(gtid_26173, m_13945)) {
            for (int64_t i_28027 = 0; i_28027 < (int64_t) 2; i_28027++) {
                int64_t zp_lhs_26178;
                int64_t binop_y_31014;
                int64_t binop_y_31015;
                int64_t ctx_31016;
                int64_t binop_x_31023;
                int64_t binop_x_31054;
                
                zp_lhs_26178 = mul64(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400, i_28027);
                for (int64_t i_28031 = 0; i_28031 < (int64_t) 2; i_28031++) {
                    int64_t zp_lhs_26181;
                    int64_t binop_y_30985;
                    int64_t binop_y_30986;
                    int64_t ctx_30987;
                    int64_t binop_x_30992;
                    
                    zp_lhs_26181 = mul64(dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396, i_28031);
                    binop_y_30985 = y_18870 * i_28031;
                    binop_y_30986 = num_threads_30957 * binop_y_30985;
                    ctx_30987 = phys_tid_26174 + binop_y_30986;
                    binop_x_30992 = y_18870 * i_28031;
                    for (int64_t i_28035 = 0; i_28035 < dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400; i_28035++) {
                        int64_t tmp_26184;
                        bool x_26185;
                        bool y_26186;
                        bool bounds_check_26187;
                        bool index_certs_26188;
                        int64_t binop_y_30993;
                        int64_t binop_y_30994;
                        int64_t binop_y_30995;
                        int64_t ctx_30996;
                        
                        tmp_26184 = add64(zp_lhs_26178, i_28035);
                        x_26185 = sle64((int64_t) 0, tmp_26184);
                        y_26186 = slt64(tmp_26184, d_13944);
                        bounds_check_26187 = x_26185 && y_26186;
                        if (!bounds_check_26187) {
                            {
                                if (atomic_cmpxchg_i32_global(global_failure, -1, 26) == -1) {
                                    global_failure_args[0] = (int64_t) tmp_26184;
                                    global_failure_args[1] = (int64_t) d_13944;
                                    ;
                                }
                                local_failure = 1;
                                goto error_0;
                            }
                        }
                        binop_y_30993 = dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396 * i_28035;
                        binop_y_30994 = binop_x_30992 + binop_y_30993;
                        binop_y_30995 = num_threads_30957 * binop_y_30994;
                        ctx_30996 = phys_tid_26174 + binop_y_30995;
                        for (int64_t i_28039 = 0; i_28039 < dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396; i_28039++) {
                            int64_t tmp_26191;
                            bool x_26192;
                            bool y_26193;
                            bool bounds_check_26194;
                            bool index_certs_26195;
                            
                            tmp_26191 = add64(zp_lhs_26181, i_28039);
                            x_26192 = sle64((int64_t) 0, tmp_26191);
                            y_26193 = slt64(tmp_26191, dzlz7bUZLztZRz20Umz20Udz7dUzg_13946);
                            bounds_check_26194 = x_26192 && y_26193;
                            if (!bounds_check_26194) {
                                {
                                    if (atomic_cmpxchg_i32_global(global_failure, -1, 27) == -1) {
                                        global_failure_args[0] = (int64_t) tmp_26191;
                                        global_failure_args[1] = (int64_t) dzlz7bUZLztZRz20Umz20Udz7dUzg_13946;
                                        ;
                                    }
                                    local_failure = 1;
                                    goto error_0;
                                }
                            }
                            for (int64_t i_0 = 0; i_0 < (int64_t) 1; i_0++) {
                                ((__global uint16_t *) color_30687)[ctx_30996 + num_threads_30957 * i_28039 + i_0 * num_threads_30957] = futrts_to_bits16(futrts_from_bits16(((__global uint16_t *) mem_28765)[gtid_26173 + tmp_26184 * (m_13945 * dzlz7bUZLztZRz20Umz20Udz7dUzg_13946) + m_13945 * tmp_26191 + i_0 * m_13945]));
                            }
                        }
                        if (!((ctx_30987 + i_28035 * ctx_30988) == ctx_30996)) {
                            for (int64_t i_0 = 0; i_0 < dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396; i_0++) {
                                ((__global uint16_t *) color_30687)[ctx_30987 + i_28035 * ctx_30988 + i_0 * num_threads_30957] = futrts_to_bits16(futrts_from_bits16(((__global uint16_t *) color_30687)[ctx_30996 + i_0 * num_threads_30957]));
                            }
                        }
                    }
                    if (!((phys_tid_26174 + i_28031 * ctx_30979) == ctx_30987 && ctx_30980 == ctx_30988)) {
                        for (int64_t i_0 = 0; i_0 < dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400; i_0++) {
                            for (int64_t i_1 = 0; i_1 < dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396; i_1++) {
                                ((__global uint16_t *) color_30687)[phys_tid_26174 + i_28031 * ctx_30979 + (i_0 * ctx_30980 + i_1 * num_threads_30957)] = futrts_to_bits16(futrts_from_bits16(((__global uint16_t *) color_30687)[ctx_30987 + (i_0 * ctx_30988 + i_1 * num_threads_30957)]));
                            }
                        }
                    }
                }
                binop_y_31014 = i_28027 * lmad_arg_28712;
                binop_y_31015 = num_threads_30957 * binop_y_31014;
                ctx_31016 = phys_tid_26174 + binop_y_31015;
                binop_x_31023 = i_28027 * lmad_arg_28712;
                binop_x_31054 = i_28027 * lmad_arg_28712;
                for (int64_t i_28043 = 0; i_28043 < (int64_t) 2; i_28043++) {
                    int64_t binop_y_31024;
                    int64_t binop_y_31025;
                    int64_t binop_y_31026;
                    int64_t ctx_31027;
                    int64_t binop_y_31055;
                    int64_t binop_x_31056;
                    
                    for (int64_t nest_i_32385 = 0; nest_i_32385 < dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400; nest_i_32385++) {
                        for (int64_t nest_i_32386 = 0; nest_i_32386 < dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400; nest_i_32386++) {
                            ((__global uint16_t *) color_30688)[phys_tid_26174 + num_threads_30957 * (i_28027 * lmad_arg_28712 + i_28043 * binop_x_28711) + (nest_i_32385 * (num_threads_30957 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) + nest_i_32386 * num_threads_30957)] = futrts_to_bits16((f16) 0.0F);
                        }
                    }
                    binop_y_31024 = i_28043 * binop_x_28711;
                    binop_y_31025 = binop_x_31023 + binop_y_31024;
                    binop_y_31026 = num_threads_30957 * binop_y_31025;
                    ctx_31027 = phys_tid_26174 + binop_y_31026;
                    binop_y_31055 = i_28043 * binop_x_28711;
                    binop_x_31056 = binop_x_31054 + binop_y_31055;
                    for (int64_t K_i_26201 = 0; K_i_26201 < (int64_t) 2; K_i_26201++) {
                        for (int64_t i_28047 = 0; i_28047 < dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400; i_28047++) {
                            int64_t binop_y_31037;
                            int64_t binop_y_31038;
                            int64_t ctx_31039;
                            
                            binop_y_31037 = dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * i_28047;
                            binop_y_31038 = num_threads_30957 * binop_y_31037;
                            ctx_31039 = phys_tid_26174 + binop_y_31038;
                            for (int64_t i_28051 = 0; i_28051 < dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400; i_28051++) {
                                f16 defunc_0_f_res_26210;
                                f16 redout_28053 = (f16) 0.0F;
                                
                                for (int64_t i_28054 = 0; i_28054 < dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396; i_28054++) {
                                    f16 eta_p_26214;
                                    f16 eta_p_26215;
                                    f16 defunc_0_f_res_26216;
                                    f16 defunc_0_op_res_26213;
                                    f16 redout_tmp_32390;
                                    
                                    eta_p_26214 = futrts_from_bits16(((__global uint16_t *) color_30687)[phys_tid_26174 + (K_i_26201 * ctx_30979 + i_28047 * ctx_30980 + i_28054 * num_threads_30957)]);
                                    eta_p_26215 = futrts_from_bits16(((__global uint16_t *) mem_28649)[K_i_26201 * (dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396 * (int64_t) 2) + i_28043 * (dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396) + i_28054 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 + i_28051]);
                                    defunc_0_f_res_26216 = eta_p_26214 * eta_p_26215;
                                    defunc_0_op_res_26213 = defunc_0_f_res_26216 + redout_28053;
                                    redout_tmp_32390 = defunc_0_op_res_26213;
                                    redout_28053 = redout_tmp_32390;
                                }
                                defunc_0_f_res_26210 = redout_28053;
                                ((__global uint16_t *) color_30686)[ctx_31039 + i_28051 * num_threads_30957] = futrts_to_bits16(defunc_0_f_res_26210);
                            }
                            if (!((phys_tid_26174 + i_28047 * ctx_31033) == ctx_31039)) {
                                for (int64_t i_0 = 0; i_0 < dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400; i_0++) {
                                    ((__global uint16_t *) color_30686)[phys_tid_26174 + i_28047 * ctx_31033 + i_0 * num_threads_30957] = futrts_to_bits16(futrts_from_bits16(((__global uint16_t *) color_30686)[ctx_31039 + i_0 * num_threads_30957]));
                                }
                            }
                        }
                        for (int64_t i_26218 = 0; i_26218 < dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400; i_26218++) {
                            bool index_certs_26227;
                            int64_t binop_y_31057;
                            int64_t binop_y_31058;
                            int64_t binop_y_31059;
                            int64_t ctx_31060;
                            
                            if (!ok_or_empty_16195) {
                                {
                                    if (atomic_cmpxchg_i32_global(global_failure, -1, 28) == -1) {
                                        global_failure_args[0] = (int64_t) i_26218;
                                        global_failure_args[1] = (int64_t) (int64_t) 0;
                                        global_failure_args[2] = (int64_t) dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400;
                                        global_failure_args[3] = (int64_t) dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400;
                                        ;
                                    }
                                    local_failure = 1;
                                    goto error_0;
                                }
                            }
                            binop_y_31057 = dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * i_26218;
                            binop_y_31058 = binop_x_31056 + binop_y_31057;
                            binop_y_31059 = num_threads_30957 * binop_y_31058;
                            ctx_31060 = phys_tid_26174 + binop_y_31059;
                            for (int64_t i_28057 = 0; i_28057 < dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400; i_28057++) {
                                f16 eta_p_26224;
                                f16 eta_p_26225;
                                f16 defunc_0_f_res_26226;
                                
                                eta_p_26224 = futrts_from_bits16(((__global uint16_t *) color_30686)[phys_tid_26174 + (i_26218 * ctx_31033 + i_28057 * num_threads_30957)]);
                                eta_p_26225 = futrts_from_bits16(((__global uint16_t *) color_30688)[ctx_31027 + (i_26218 * ctx_31028 + i_28057 * num_threads_30957)]);
                                defunc_0_f_res_26226 = eta_p_26224 + eta_p_26225;
                                ((__global uint16_t *) color_30688)[ctx_31060 + i_28057 * num_threads_30957] = futrts_to_bits16(defunc_0_f_res_26226);
                            }
                            if (!((ctx_31027 + i_26218 * ctx_31028) == ctx_31060)) {
                                for (int64_t i_0 = 0; i_0 < dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400; i_0++) {
                                    ((__global uint16_t *) color_30688)[ctx_31027 + i_26218 * ctx_31028 + i_0 * num_threads_30957] = futrts_to_bits16(futrts_from_bits16(((__global uint16_t *) color_30688)[ctx_31060 + i_0 * num_threads_30957]));
                                }
                            }
                        }
                    }
                    if (!((ctx_31016 + i_28043 * ctx_31017) == ctx_31027 && ctx_31018 == ctx_31028)) {
                        for (int64_t i_0 = 0; i_0 < dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400; i_0++) {
                            for (int64_t i_1 = 0; i_1 < dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400; i_1++) {
                                ((__global uint16_t *) color_30688)[ctx_31016 + i_28043 * ctx_31017 + (i_0 * ctx_31018 + i_1 * num_threads_30957)] = futrts_to_bits16(futrts_from_bits16(((__global uint16_t *) color_30688)[ctx_31027 + (i_0 * ctx_31028 + i_1 * num_threads_30957)]));
                            }
                        }
                    }
                }
                if (!((phys_tid_26174 + i_28027 * ctx_30969) == ctx_31016 && (ctx_30971 == ctx_31017 && ctx_30972 == ctx_31018))) {
                    for (int64_t i_0 = 0; i_0 < (int64_t) 2; i_0++) {
                        for (int64_t i_1 = 0; i_1 < dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400; i_1++) {
                            for (int64_t i_2 = 0; i_2 < dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400; i_2++) {
                                ((__global uint16_t *) color_30688)[phys_tid_26174 + i_28027 * ctx_30969 + (i_0 * ctx_30971 + i_1 * ctx_30972 + i_2 * num_threads_30957)] = futrts_to_bits16(futrts_from_bits16(((__global uint16_t *) color_30688)[ctx_31016 + (i_0 * ctx_31017 + i_1 * ctx_31018 + i_2 * num_threads_30957)]));
                            }
                        }
                    }
                }
            }
            for (int64_t i_28061 = 0; i_28061 < d_13944; i_28061++) {
                int64_t tmp_26231;
                bool x_26232;
                bool y_26233;
                bool bounds_check_26234;
                bool index_certs_26235;
                int64_t binop_y_31092;
                int64_t ctx_31093;
                
                tmp_26231 = sdiv64(i_28061, dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400);
                x_26232 = sle64((int64_t) 0, tmp_26231);
                y_26233 = slt64(tmp_26231, (int64_t) 2);
                bounds_check_26234 = x_26232 && y_26233;
                if (!bounds_check_26234) {
                    {
                        if (atomic_cmpxchg_i32_global(global_failure, -1, 29) == -1) {
                            global_failure_args[0] = (int64_t) tmp_26231;
                            global_failure_args[1] = (int64_t) (int64_t) 2;
                            ;
                        }
                        local_failure = 1;
                        goto error_0;
                    }
                }
                binop_y_31092 = i_28061 * binop_y_31091;
                ctx_31093 = gtid_26173 + binop_y_31092;
                for (int64_t i_28065 = 0; i_28065 < d_13944; i_28065++) {
                    int64_t tmp_26238;
                    bool x_26239;
                    bool y_26240;
                    bool bounds_check_26241;
                    bool index_certs_26242;
                    int64_t tmp_26243;
                    bool x_26244;
                    bool y_26245;
                    bool bounds_check_26246;
                    bool index_certs_26247;
                    
                    tmp_26238 = sdiv64(i_28065, dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400);
                    x_26239 = sle64((int64_t) 0, tmp_26238);
                    y_26240 = slt64(tmp_26238, dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400);
                    bounds_check_26241 = x_26239 && y_26240;
                    if (!bounds_check_26241) {
                        {
                            if (atomic_cmpxchg_i32_global(global_failure, -1, 30) == -1) {
                                global_failure_args[0] = (int64_t) tmp_26238;
                                global_failure_args[1] = (int64_t) dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400;
                                ;
                            }
                            local_failure = 1;
                            goto error_0;
                        }
                    }
                    tmp_26243 = smod64(i_28065, dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400);
                    x_26244 = sle64((int64_t) 0, tmp_26243);
                    y_26245 = slt64(tmp_26243, dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400);
                    bounds_check_26246 = x_26244 && y_26245;
                    if (!bounds_check_26246) {
                        {
                            if (atomic_cmpxchg_i32_global(global_failure, -1, 31) == -1) {
                                global_failure_args[0] = (int64_t) tmp_26243;
                                global_failure_args[1] = (int64_t) dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400;
                                ;
                            }
                            local_failure = 1;
                            goto error_0;
                        }
                    }
                    for (int64_t i_0 = 0; i_0 < (int64_t) 1; i_0++) {
                        ((__global uint16_t *) mem_28913)[ctx_31093 + m_13945 * i_28065 + i_0 * m_13945] = futrts_to_bits16(futrts_from_bits16(((__global uint16_t *) color_30688)[phys_tid_26174 + tmp_26231 * ctx_30969 + tmp_26238 * ctx_30972 + num_threads_30957 * tmp_26243 + i_0 * num_threads_30957]));
                    }
                }
                if (!((gtid_26173 + i_28061 * ctx_31087) == ctx_31093)) {
                    for (int64_t i_0 = 0; i_0 < d_13944; i_0++) {
                        ((__global uint16_t *) mem_28913)[gtid_26173 + i_28061 * ctx_31087 + i_0 * m_13945] = futrts_to_bits16(futrts_from_bits16(((__global uint16_t *) mem_28913)[ctx_31093 + i_0 * m_13945]));
                    }
                }
            }
            if (!(m_13945 * d_13944 == ctx_31087)) {
                for (int64_t i_0 = 0; i_0 < d_13944; i_0++) {
                    for (int64_t i_1 = 0; i_1 < d_13944; i_1++) {
                        ((__global uint16_t *) mem_28913)[gtid_26173 + (i_0 * (m_13945 * d_13944) + i_1 * m_13945)] = futrts_to_bits16(futrts_from_bits16(((__global uint16_t *) mem_28913)[gtid_26173 + (i_0 * ctx_31087 + i_1 * m_13945)]));
                    }
                }
            }
        }
        
      error_0:
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
        if (local_failure)
            return;
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segmap_tblock_sizze_26169
}
FUTHARK_KERNEL_SIZED(FlashAttention_6392zisegmap_26432_dim1, 1, 1)
void FlashAttention_6392zisegmap_26432(__global int *global_failure, int failure_is_an_option, __global int64_t *global_failure_args, int64_t d_13944, int64_t m_13945, int64_t dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400, __global unsigned char *mem_28651)
{
    #define segmap_tblock_sizze_26424 (FlashAttention_6392zisegmap_26432zisegmap_tblock_sizze_26424)
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_32507;
    int32_t tblock_sizze_32510;
    int32_t wave_sizze_32509;
    int32_t block_id_32508;
    int32_t global_tid_32506;
    int64_t phys_tid_26432;
    int64_t global_tid_32511;
    int64_t slice_32512;
    int64_t slice_32513;
    int64_t slice_32514;
    int64_t slice_32515;
    int64_t gtid_26428;
    int64_t remnant_32516;
    int64_t gtid_26429;
    int64_t remnant_32517;
    int64_t gtid_26430;
    int64_t remnant_32518;
    int64_t gtid_26431;
    int64_t remnant_32519;
    
    local_tid_32507 = get_local_id(0);
    tblock_sizze_32510 = get_local_size(0);
    wave_sizze_32509 = LOCKSTEP_WIDTH;
    block_id_32508 = get_tblock_id(0);
    global_tid_32506 = block_id_32508 * tblock_sizze_32510 + local_tid_32507;
    phys_tid_26432 = sext_i32_i64(global_tid_32506);
    global_tid_32511 = sext_i32_i64(block_id_32508) * segmap_tblock_sizze_26424 + sext_i32_i64(local_tid_32507);
    slice_32512 = dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400;
    slice_32513 = (int64_t) 2 * slice_32512;
    slice_32514 = (int64_t) 2 * slice_32513;
    slice_32515 = m_13945 * slice_32514;
    gtid_26428 = squot64(global_tid_32511, slice_32514);
    remnant_32516 = global_tid_32511 - gtid_26428 * slice_32514;
    gtid_26429 = squot64(remnant_32516, slice_32513);
    remnant_32517 = remnant_32516 - gtid_26429 * slice_32513;
    gtid_26430 = squot64(remnant_32517, slice_32512);
    remnant_32518 = remnant_32517 - gtid_26430 * slice_32512;
    gtid_26431 = remnant_32518;
    remnant_32519 = remnant_32518 - gtid_26431;
    if (((slt64(gtid_26428, m_13945) && slt64(gtid_26429, (int64_t) 2)) && slt64(gtid_26430, (int64_t) 2)) && slt64(gtid_26431, dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) {
        int64_t index_primexp_27117;
        int64_t tmp_26435;
        bool x_26436;
        bool y_26437;
        bool bounds_check_26438;
        bool index_certs_26439;
        
        index_primexp_27117 = mul64(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400, gtid_26429);
        tmp_26435 = add64(gtid_26431, index_primexp_27117);
        x_26436 = sle64((int64_t) 0, tmp_26435);
        y_26437 = slt64(tmp_26435, d_13944);
        bounds_check_26438 = x_26436 && y_26437;
        if (!bounds_check_26438) {
            {
                if (atomic_cmpxchg_i32_global(global_failure, -1, 38) == -1) {
                    global_failure_args[0] = (int64_t) tmp_26435;
                    global_failure_args[1] = (int64_t) d_13944;
                    ;
                }
                return;
            }
        }
    }
    
  error_0:
    return;
    #undef segmap_tblock_sizze_26424
}
FUTHARK_KERNEL_SIZED(FlashAttention_6392zisegmap_26460_dim1, 1, 1)
void FlashAttention_6392zisegmap_26460(__global int *global_failure, int failure_is_an_option, __global int64_t *global_failure_args, int64_t d_13944, int64_t m_13945, int64_t dzlz7bUZLztZRz20Umz20Udz7dUzg_13946, int64_t dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396, int64_t dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400, __global unsigned char *mem_28434, __global unsigned char *mem_28651, __global unsigned char *mem_28658)
{
    #define segmap_tblock_sizze_26452 (FlashAttention_6392zisegmap_26460zisegmap_tblock_sizze_26452)
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_32522;
    int32_t tblock_sizze_32525;
    int32_t wave_sizze_32524;
    int32_t block_id_32523;
    int32_t global_tid_32521;
    int64_t phys_tid_26460;
    int64_t global_tid_32526;
    int64_t slice_32527;
    int64_t slice_32528;
    int64_t slice_32529;
    int64_t slice_32530;
    int64_t slice_32531;
    int64_t gtid_26455;
    int64_t remnant_32532;
    int64_t gtid_26456;
    int64_t remnant_32533;
    int64_t gtid_26457;
    int64_t remnant_32534;
    int64_t gtid_26458;
    int64_t remnant_32535;
    int64_t gtid_26459;
    int64_t remnant_32536;
    
    local_tid_32522 = get_local_id(0);
    tblock_sizze_32525 = get_local_size(0);
    wave_sizze_32524 = LOCKSTEP_WIDTH;
    block_id_32523 = get_tblock_id(0);
    global_tid_32521 = block_id_32523 * tblock_sizze_32525 + local_tid_32522;
    phys_tid_26460 = sext_i32_i64(global_tid_32521);
    global_tid_32526 = sext_i32_i64(block_id_32523) * segmap_tblock_sizze_26452 + sext_i32_i64(local_tid_32522);
    slice_32527 = dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396;
    slice_32528 = dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * slice_32527;
    slice_32529 = (int64_t) 2 * slice_32528;
    slice_32530 = (int64_t) 2 * slice_32529;
    slice_32531 = m_13945 * slice_32530;
    gtid_26455 = squot64(global_tid_32526, slice_32530);
    remnant_32532 = global_tid_32526 - gtid_26455 * slice_32530;
    gtid_26456 = squot64(remnant_32532, slice_32529);
    remnant_32533 = remnant_32532 - gtid_26456 * slice_32529;
    gtid_26457 = squot64(remnant_32533, slice_32528);
    remnant_32534 = remnant_32533 - gtid_26457 * slice_32528;
    gtid_26458 = squot64(remnant_32534, slice_32527);
    remnant_32535 = remnant_32534 - gtid_26458 * slice_32527;
    gtid_26459 = remnant_32535;
    remnant_32536 = remnant_32535 - gtid_26459;
    if ((((slt64(gtid_26455, m_13945) && slt64(gtid_26456, (int64_t) 2)) && slt64(gtid_26457, (int64_t) 2)) && slt64(gtid_26458, dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) && slt64(gtid_26459, dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396)) {
        int64_t index_primexp_27114;
        int64_t tmp_26466;
        bool x_26467;
        bool y_26468;
        bool bounds_check_26469;
        bool index_certs_26470;
        int64_t binop_y_27391;
        int64_t index_primexp_27392;
        bool index_certs_26464;
        f16 lifted_lambda_res_26471;
        
        index_primexp_27114 = mul64(dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396, gtid_26457);
        tmp_26466 = add64(gtid_26459, index_primexp_27114);
        x_26467 = sle64((int64_t) 0, tmp_26466);
        y_26468 = slt64(tmp_26466, dzlz7bUZLztZRz20Umz20Udz7dUzg_13946);
        bounds_check_26469 = x_26467 && y_26468;
        if (!bounds_check_26469) {
            {
                if (atomic_cmpxchg_i32_global(global_failure, -1, 39) == -1) {
                    global_failure_args[0] = (int64_t) tmp_26466;
                    global_failure_args[1] = (int64_t) dzlz7bUZLztZRz20Umz20Udz7dUzg_13946;
                    ;
                }
                return;
            }
        }
        binop_y_27391 = mul64(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400, gtid_26456);
        index_primexp_27392 = add64(gtid_26458, binop_y_27391);
        index_certs_26464 = 0;
        lifted_lambda_res_26471 = futrts_from_bits16(((__global uint16_t *) mem_28434)[gtid_26455 * (dzlz7bUZLztZRz20Umz20Udz7dUzg_13946 * d_13944) + index_primexp_27392 * dzlz7bUZLztZRz20Umz20Udz7dUzg_13946 + tmp_26466]);
        ((__global uint16_t *) mem_28658)[gtid_26455 * (dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * (int64_t) 2 * (int64_t) 2) + gtid_26456 * (dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * (int64_t) 2) + gtid_26457 * (dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) + gtid_26458 * dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396 + gtid_26459] = futrts_to_bits16(lifted_lambda_res_26471);
    }
    
  error_0:
    return;
    #undef segmap_tblock_sizze_26452
}
FUTHARK_KERNEL_SIZED(FlashAttention_6392zisegmap_26548_dim1, 1, 1)
void FlashAttention_6392zisegmap_26548(__global int *global_failure, int failure_is_an_option, __global int64_t *global_failure_args, int64_t d_13944, int64_t m_13945, int64_t dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400, __global unsigned char *mem_28691)
{
    #define segmap_tblock_sizze_26542 (FlashAttention_6392zisegmap_26548zisegmap_tblock_sizze_26542)
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_32605;
    int32_t tblock_sizze_32608;
    int32_t wave_sizze_32607;
    int32_t block_id_32606;
    int32_t global_tid_32604;
    int64_t phys_tid_26548;
    int64_t global_tid_32609;
    int64_t slice_32610;
    int64_t slice_32611;
    int64_t gtid_26546;
    int64_t remnant_32612;
    int64_t gtid_26547;
    int64_t remnant_32613;
    
    local_tid_32605 = get_local_id(0);
    tblock_sizze_32608 = get_local_size(0);
    wave_sizze_32607 = LOCKSTEP_WIDTH;
    block_id_32606 = get_tblock_id(0);
    global_tid_32604 = block_id_32606 * tblock_sizze_32608 + local_tid_32605;
    phys_tid_26548 = sext_i32_i64(global_tid_32604);
    global_tid_32609 = sext_i32_i64(block_id_32606) * segmap_tblock_sizze_26542 + sext_i32_i64(local_tid_32605);
    slice_32610 = d_13944;
    slice_32611 = m_13945 * slice_32610;
    gtid_26546 = squot64(global_tid_32609, slice_32610);
    remnant_32612 = global_tid_32609 - gtid_26546 * slice_32610;
    gtid_26547 = remnant_32612;
    remnant_32613 = remnant_32612 - gtid_26547;
    if (slt64(gtid_26546, m_13945) && slt64(gtid_26547, d_13944)) {
        int64_t tmp_26550;
        bool x_26551;
        bool y_26552;
        bool bounds_check_26553;
        bool index_certs_26554;
        
        tmp_26550 = sdiv64(gtid_26547, dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400);
        x_26551 = sle64((int64_t) 0, tmp_26550);
        y_26552 = slt64(tmp_26550, (int64_t) 2);
        bounds_check_26553 = x_26551 && y_26552;
        if (!bounds_check_26553) {
            {
                if (atomic_cmpxchg_i32_global(global_failure, -1, 41) == -1) {
                    global_failure_args[0] = (int64_t) tmp_26550;
                    global_failure_args[1] = (int64_t) (int64_t) 2;
                    ;
                }
                return;
            }
        }
    }
    
  error_0:
    return;
    #undef segmap_tblock_sizze_26542
}
FUTHARK_KERNEL_SIZED(FlashAttention_6392zisegmap_26569_dim1, 1, 1)
void FlashAttention_6392zisegmap_26569(__global int *global_failure, int failure_is_an_option, __global int64_t *global_failure_args, int64_t d_13944, int64_t m_13945, int64_t dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400, __global unsigned char *mem_28689, __global unsigned char *mem_28691, __global unsigned char *mem_28696)
{
    #define segmap_tblock_sizze_26563 (FlashAttention_6392zisegmap_26569zisegmap_tblock_sizze_26563)
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_32616;
    int32_t tblock_sizze_32619;
    int32_t wave_sizze_32618;
    int32_t block_id_32617;
    int32_t global_tid_32615;
    int64_t phys_tid_26569;
    int64_t global_tid_32620;
    int64_t slice_32621;
    int64_t slice_32622;
    int64_t slice_32623;
    int64_t gtid_26566;
    int64_t remnant_32624;
    int64_t gtid_26567;
    int64_t remnant_32625;
    int64_t gtid_26568;
    int64_t remnant_32626;
    
    local_tid_32616 = get_local_id(0);
    tblock_sizze_32619 = get_local_size(0);
    wave_sizze_32618 = LOCKSTEP_WIDTH;
    block_id_32617 = get_tblock_id(0);
    global_tid_32615 = block_id_32617 * tblock_sizze_32619 + local_tid_32616;
    phys_tid_26569 = sext_i32_i64(global_tid_32615);
    global_tid_32620 = sext_i32_i64(block_id_32617) * segmap_tblock_sizze_26563 + sext_i32_i64(local_tid_32616);
    slice_32621 = d_13944;
    slice_32622 = d_13944 * slice_32621;
    slice_32623 = m_13945 * slice_32622;
    gtid_26566 = squot64(global_tid_32620, slice_32622);
    remnant_32624 = global_tid_32620 - gtid_26566 * slice_32622;
    gtid_26567 = squot64(remnant_32624, slice_32621);
    remnant_32625 = remnant_32624 - gtid_26567 * slice_32621;
    gtid_26568 = remnant_32625;
    remnant_32626 = remnant_32625 - gtid_26568;
    if ((slt64(gtid_26566, m_13945) && slt64(gtid_26567, d_13944)) && slt64(gtid_26568, d_13944)) {
        int64_t tmp_26574;
        bool x_26575;
        bool y_26576;
        bool bounds_check_26577;
        bool index_certs_26578;
        int64_t tmp_26579;
        bool x_26580;
        bool y_26581;
        bool bounds_check_26582;
        bool index_certs_26583;
        int64_t index_primexp_27111;
        bool index_certs_26572;
        f16 lifted_lambda_res_26584;
        
        tmp_26574 = sdiv64(gtid_26568, dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400);
        x_26575 = sle64((int64_t) 0, tmp_26574);
        y_26576 = slt64(tmp_26574, dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400);
        bounds_check_26577 = x_26575 && y_26576;
        if (!bounds_check_26577) {
            {
                if (atomic_cmpxchg_i32_global(global_failure, -1, 42) == -1) {
                    global_failure_args[0] = (int64_t) tmp_26574;
                    global_failure_args[1] = (int64_t) dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400;
                    ;
                }
                return;
            }
        }
        tmp_26579 = smod64(gtid_26568, dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400);
        x_26580 = sle64((int64_t) 0, tmp_26579);
        y_26581 = slt64(tmp_26579, dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400);
        bounds_check_26582 = x_26580 && y_26581;
        if (!bounds_check_26582) {
            {
                if (atomic_cmpxchg_i32_global(global_failure, -1, 43) == -1) {
                    global_failure_args[0] = (int64_t) tmp_26579;
                    global_failure_args[1] = (int64_t) dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400;
                    ;
                }
                return;
            }
        }
        index_primexp_27111 = sdiv64(gtid_26567, dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400);
        index_certs_26572 = 0;
        lifted_lambda_res_26584 = futrts_from_bits16(((__global uint16_t *) mem_28689)[gtid_26566 * (dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * (int64_t) 2 * (int64_t) 2) + index_primexp_27111 * (dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * (int64_t) 2) + tmp_26574 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 + tmp_26579]);
        ((__global uint16_t *) mem_28696)[gtid_26566 * (d_13944 * d_13944) + gtid_26567 * d_13944 + gtid_26568] = futrts_to_bits16(lifted_lambda_res_26584);
    }
    
  error_0:
    return;
    #undef segmap_tblock_sizze_26563
}
FUTHARK_KERNEL_SIZED(FlashAttention_6392zisegmap_26607_dim1, 1, 1)
void FlashAttention_6392zisegmap_26607(__global int *global_failure, int failure_is_an_option, __global int64_t *global_failure_args, int64_t d_13944, int64_t m_13945, int64_t dzlz7bUZLztZRz20Umz20Udz7dUzg_13946, int64_t m_16509, int64_t one_intra_par_min_18858, int64_t num_tblocks_26603, int64_t num_threads_31101, int64_t ctx_31110, int64_t ctx_31115, int64_t ctx_31139, int32_t virt_num_tblocks_32629, __global unsigned char *V_mem_28341, __global unsigned char *mem_28566, __global unsigned char *mem_28638, __global unsigned char *color_30698, __global unsigned char *color_30699, __global unsigned char *color_30700, __global unsigned char *color_30701)
{
    #define segmap_tblock_sizze_26602 (FlashAttention_6392zisegmap_26607zisegmap_tblock_sizze_26602)
    
    volatile __local int local_failure;
    
    if (failure_is_an_option) {
        int failed = *global_failure >= 0;
        
        if (failed)
            return;
    }
    local_failure = 0;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t local_tid_32631;
    int32_t tblock_sizze_32634;
    int32_t wave_sizze_32633;
    int32_t block_id_32632;
    int32_t global_tid_32630;
    int64_t phys_tid_26607;
    int32_t phys_tblock_id_32635;
    int32_t iterations_32636;
    
    local_tid_32631 = get_local_id(0);
    tblock_sizze_32634 = get_local_size(0);
    wave_sizze_32633 = LOCKSTEP_WIDTH;
    block_id_32632 = get_tblock_id(0);
    global_tid_32630 = block_id_32632 * tblock_sizze_32634 + local_tid_32631;
    phys_tid_26607 = sext_i32_i64(global_tid_32630);
    phys_tblock_id_32635 = get_tblock_id(0);
    iterations_32636 = sdiv_up32(virt_num_tblocks_32629 - phys_tblock_id_32635, sext_i64_i32(num_tblocks_26603));
    for (int32_t i_32637 = 0; i_32637 < iterations_32636; i_32637++) {
        int32_t virt_tblock_id_32638;
        int64_t global_tid_32639;
        int64_t slice_32640;
        int64_t gtid_26606;
        int64_t remnant_32641;
        
        virt_tblock_id_32638 = phys_tblock_id_32635 + i_32637 * sext_i64_i32(num_tblocks_26603);
        global_tid_32639 = sext_i32_i64(virt_tblock_id_32638) * segmap_tblock_sizze_26602 + sext_i32_i64(local_tid_32631);
        slice_32640 = m_13945;
        gtid_26606 = global_tid_32639;
        remnant_32641 = global_tid_32639 - gtid_26606;
        if (slt64(gtid_26606, m_13945)) {
            __global unsigned char *ext_mem_28621;
            __global unsigned char *ext_mem_unused_30474;
            __global unsigned char *ext_mem_ext_31153;
            int64_t ext_31155;
            __global unsigned char *mem_param_28571;
            __global unsigned char *mem_param_out_30475;
            __global unsigned char *mem_param_ext_31106;
            int64_t ext_31108;
            
            for (int64_t nest_i_32642 = 0; nest_i_32642 < d_13944; nest_i_32642++) {
                for (int64_t nest_i_32643 = 0; nest_i_32643 < d_13944; nest_i_32643++) {
                    ((__global uint16_t *) color_30698)[phys_tid_26607 + (nest_i_32642 * (num_threads_31101 * d_13944) + nest_i_32643 * num_threads_31101)] = futrts_to_bits16((f16) 0.0F);
                }
            }
            mem_param_28571 = color_30698;
            mem_param_out_30475 = color_30699;
            mem_param_ext_31106 = color_30698;
            ext_31108 = ctx_31110;
            for (int64_t i_28068 = 0; i_28068 < m_16509; i_28068++) {
                int64_t zp_rhs_26621;
                int64_t binop_x_28297;
                __global unsigned char *mem_param_tmp_32644;
                __global unsigned char *mem_param_out_tmp_32645;
                __global unsigned char *mem_param_ext_tmp_32647;
                int64_t ext_tmp_32648;
                
                zp_rhs_26621 = mul64(d_13944, i_28068);
                binop_x_28297 = one_intra_par_min_18858 * i_28068;
                for (int64_t i_28071 = 0; i_28071 < d_13944; i_28071++) {
                    int64_t binop_y_31125;
                    int64_t binop_y_31126;
                    int64_t ctx_31127;
                    
                    for (int64_t i_28075 = 0; i_28075 < d_13944; i_28075++) {
                        int64_t tmp_26630;
                        bool x_26631;
                        bool y_26632;
                        bool bounds_check_26633;
                        bool index_certs_26634;
                        
                        tmp_26630 = add64(zp_rhs_26621, i_28075);
                        x_26631 = sle64((int64_t) 0, tmp_26630);
                        y_26632 = slt64(tmp_26630, dzlz7bUZLztZRz20Umz20Udz7dUzg_13946);
                        bounds_check_26633 = x_26631 && y_26632;
                        if (!bounds_check_26633) {
                            {
                                if (atomic_cmpxchg_i32_global(global_failure, -1, 44) == -1) {
                                    global_failure_args[0] = (int64_t) tmp_26630;
                                    global_failure_args[1] = (int64_t) dzlz7bUZLztZRz20Umz20Udz7dUzg_13946;
                                    ;
                                }
                                local_failure = 1;
                                goto error_0;
                            }
                        }
                        for (int64_t i_0 = 0; i_0 < (int64_t) 1; i_0++) {
                            ((__global uint16_t *) color_30700)[phys_tid_26607 + num_threads_31101 * i_28075 + i_0 * num_threads_31101] = futrts_to_bits16(futrts_from_bits16(((__global uint16_t *) mem_28566)[gtid_26606 + i_28071 * (m_13945 * dzlz7bUZLztZRz20Umz20Udz7dUzg_13946) + m_13945 * tmp_26630 + i_0 * m_13945]));
                        }
                    }
                    binop_y_31125 = d_13944 * i_28071;
                    binop_y_31126 = num_threads_31101 * binop_y_31125;
                    ctx_31127 = phys_tid_26607 + binop_y_31126;
                    for (int64_t i_28079 = 0; i_28079 < d_13944; i_28079++) {
                        float defunc_0_f_res_26638;
                        float redout_28081;
                        f16 f32_res_26646;
                        
                        redout_28081 = 0.0F;
                        for (int64_t i_28082 = 0; i_28082 < d_13944; i_28082++) {
                            f16 eta_p_26642;
                            int64_t binop_y_28298;
                            int64_t binop_x_28299;
                            int64_t binop_x_28300;
                            int64_t new_index_28301;
                            int64_t binop_y_28313;
                            int64_t new_index_28314;
                            f16 eta_p_26643;
                            f16 defunc_0_f_res_26644;
                            float f16_res_26645;
                            float defunc_0_op_res_26641;
                            float redout_tmp_32652;
                            
                            eta_p_26642 = futrts_from_bits16(((__global uint16_t *) color_30700)[phys_tid_26607 + i_28082 * num_threads_31101]);
                            binop_y_28298 = d_13944 * i_28082;
                            binop_x_28299 = binop_x_28297 + binop_y_28298;
                            binop_x_28300 = i_28079 + binop_x_28299;
                            new_index_28301 = squot64(binop_x_28300, d_13944);
                            binop_y_28313 = d_13944 * new_index_28301;
                            new_index_28314 = binop_x_28300 - binop_y_28313;
                            eta_p_26643 = futrts_from_bits16(((__global uint16_t *) V_mem_28341)[new_index_28301 * d_13944 + new_index_28314]);
                            defunc_0_f_res_26644 = eta_p_26642 * eta_p_26643;
                            f16_res_26645 = fpconv_f16_f32(defunc_0_f_res_26644);
                            defunc_0_op_res_26641 = f16_res_26645 + redout_28081;
                            redout_tmp_32652 = defunc_0_op_res_26641;
                            redout_28081 = redout_tmp_32652;
                        }
                        defunc_0_f_res_26638 = redout_28081;
                        f32_res_26646 = fpconv_f32_f16(defunc_0_f_res_26638);
                        ((__global uint16_t *) color_30701)[ctx_31127 + i_28079 * num_threads_31101] = futrts_to_bits16(f32_res_26646);
                    }
                    if (!((phys_tid_26607 + i_28071 * ctx_31115) == ctx_31127)) {
                        for (int64_t i_0 = 0; i_0 < d_13944; i_0++) {
                            ((__global uint16_t *) color_30701)[phys_tid_26607 + i_28071 * ctx_31115 + i_0 * num_threads_31101] = futrts_to_bits16(futrts_from_bits16(((__global uint16_t *) color_30701)[ctx_31127 + i_0 * num_threads_31101]));
                        }
                    }
                }
                for (int64_t i_28085 = 0; i_28085 < d_13944; i_28085++) {
                    int64_t binop_y_31143;
                    int64_t binop_y_31144;
                    int64_t ctx_31145;
                    
                    binop_y_31143 = d_13944 * i_28085;
                    binop_y_31144 = num_threads_31101 * binop_y_31143;
                    ctx_31145 = phys_tid_26607 + binop_y_31144;
                    for (int64_t i_28089 = 0; i_28089 < d_13944; i_28089++) {
                        f16 eta_p_26616;
                        f16 eta_p_26617;
                        f16 defunc_0_f_res_26618;
                        
                        eta_p_26616 = futrts_from_bits16(((__global uint16_t *) mem_param_ext_31106)[phys_tid_26607 + (i_28085 * ext_31108 + i_28089 * num_threads_31101)]);
                        eta_p_26617 = futrts_from_bits16(((__global uint16_t *) color_30701)[phys_tid_26607 + (i_28085 * ctx_31115 + i_28089 * num_threads_31101)]);
                        defunc_0_f_res_26618 = eta_p_26616 + eta_p_26617;
                        ((__global uint16_t *) mem_param_out_30475)[ctx_31145 + i_28089 * num_threads_31101] = futrts_to_bits16(defunc_0_f_res_26618);
                    }
                    if (!((phys_tid_26607 + i_28085 * ctx_31139) == ctx_31145)) {
                        for (int64_t i_0 = 0; i_0 < d_13944; i_0++) {
                            ((__global uint16_t *) mem_param_out_30475)[phys_tid_26607 + i_28085 * ctx_31139 + i_0 * num_threads_31101] = futrts_to_bits16(futrts_from_bits16(((__global uint16_t *) mem_param_out_30475)[ctx_31145 + i_0 * num_threads_31101]));
                        }
                    }
                }
                mem_param_tmp_32644 = mem_param_out_30475;
                mem_param_out_tmp_32645 = mem_param_28571;
                mem_param_ext_tmp_32647 = mem_param_out_30475;
                ext_tmp_32648 = ctx_31139;
                mem_param_28571 = mem_param_tmp_32644;
                mem_param_out_30475 = mem_param_out_tmp_32645;
                mem_param_ext_31106 = mem_param_ext_tmp_32647;
                ext_31108 = ext_tmp_32648;
            }
            ext_mem_28621 = mem_param_28571;
            ext_mem_unused_30474 = mem_param_out_30475;
            ext_mem_ext_31153 = mem_param_ext_31106;
            ext_31155 = ext_31108;
            for (int64_t i_0 = 0; i_0 < d_13944; i_0++) {
                for (int64_t i_1 = 0; i_1 < d_13944; i_1++) {
                    ((__global uint16_t *) mem_28638)[gtid_26606 + (i_0 * (m_13945 * d_13944) + i_1 * m_13945)] = futrts_to_bits16(futrts_from_bits16(((__global uint16_t *) ext_mem_ext_31153)[phys_tid_26607 + (i_0 * ext_31155 + i_1 * num_threads_31101)]));
                }
            }
        }
        
      error_0:
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
        if (local_failure)
            return;
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
    #undef segmap_tblock_sizze_26602
}
FUTHARK_KERNEL_SIZED(FlashAttention_6392zisegmap_26876_dim1, 1, 1)
void FlashAttention_6392zisegmap_26876(__global int *global_failure, int64_t d_13944, int64_t m_13945, int64_t m_16509, int64_t one_intra_par_min_18858, int64_t lmad_ext_28466, __global unsigned char *ext_mem_28473, __global unsigned char *mem_28483)
{
    #define segmap_tblock_sizze_26865 (FlashAttention_6392zisegmap_26876zisegmap_tblock_sizze_26865)
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_32782;
    int32_t tblock_sizze_32785;
    int32_t wave_sizze_32784;
    int32_t block_id_32783;
    int32_t global_tid_32781;
    int64_t phys_tid_26876;
    int64_t global_tid_32786;
    int64_t slice_32787;
    int64_t slice_32788;
    int64_t slice_32789;
    int64_t gtid_26873;
    int64_t remnant_32790;
    int64_t gtid_26874;
    int64_t remnant_32791;
    int64_t gtid_26875;
    int64_t remnant_32792;
    
    local_tid_32782 = get_local_id(0);
    tblock_sizze_32785 = get_local_size(0);
    wave_sizze_32784 = LOCKSTEP_WIDTH;
    block_id_32783 = get_tblock_id(0);
    global_tid_32781 = block_id_32783 * tblock_sizze_32785 + local_tid_32782;
    phys_tid_26876 = sext_i32_i64(global_tid_32781);
    global_tid_32786 = sext_i32_i64(block_id_32783) * segmap_tblock_sizze_26865 + sext_i32_i64(local_tid_32782);
    slice_32787 = d_13944;
    slice_32788 = d_13944 * slice_32787;
    slice_32789 = m_13945 * slice_32788;
    gtid_26873 = squot64(global_tid_32786, slice_32788);
    remnant_32790 = global_tid_32786 - gtid_26873 * slice_32788;
    gtid_26874 = squot64(remnant_32790, slice_32787);
    remnant_32791 = remnant_32790 - gtid_26874 * slice_32787;
    gtid_26875 = remnant_32791;
    remnant_32792 = remnant_32791 - gtid_26875;
    if ((slt64(gtid_26873, m_13945) && slt64(gtid_26874, d_13944)) && slt64(gtid_26875, d_13944)) {
        f16 defunc_0_map_res_26879;
        f16 redout_28113 = (f16) 0.0F;
        
        for (int64_t i_28114 = 0; i_28114 < m_16509; i_28114++) {
            f16 x_26883;
            f16 defunc_0_f_res_26882;
            f16 redout_tmp_32793;
            
            x_26883 = futrts_from_bits16(((__global uint16_t *) ext_mem_28473)[gtid_26873 * lmad_ext_28466 + i_28114 * one_intra_par_min_18858 + gtid_26874 * d_13944 + gtid_26875]);
            defunc_0_f_res_26882 = x_26883 + redout_28113;
            redout_tmp_32793 = defunc_0_f_res_26882;
            redout_28113 = redout_tmp_32793;
        }
        defunc_0_map_res_26879 = redout_28113;
        ((__global uint16_t *) mem_28483)[gtid_26873 * (d_13944 * d_13944) + gtid_26874 * d_13944 + gtid_26875] = futrts_to_bits16(defunc_0_map_res_26879);
    }
    
  error_0:
    return;
    #undef segmap_tblock_sizze_26865
}
FUTHARK_KERNEL_SIZED(FlashAttention_6392zisegmap_26893_dim1, 1, 1)
void FlashAttention_6392zisegmap_26893(__global int *global_failure, int64_t d_13944, int64_t m_13945, int64_t m_16509, int64_t one_intra_par_min_18858, int64_t lmad_ext_28466, __global unsigned char *ext_mem_28473, __global unsigned char *mem_28478)
{
    #define segmap_tblock_sizze_26887 (FlashAttention_6392zisegmap_26893zisegmap_tblock_sizze_26887)
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_32796;
    int32_t tblock_sizze_32799;
    int32_t wave_sizze_32798;
    int32_t block_id_32797;
    int32_t global_tid_32795;
    int64_t phys_tid_26893;
    int64_t global_tid_32800;
    int64_t slice_32801;
    int64_t slice_32802;
    int64_t slice_32803;
    int64_t gtid_26890;
    int64_t remnant_32804;
    int64_t gtid_26891;
    int64_t remnant_32805;
    int64_t gtid_26892;
    int64_t remnant_32806;
    
    local_tid_32796 = get_local_id(0);
    tblock_sizze_32799 = get_local_size(0);
    wave_sizze_32798 = LOCKSTEP_WIDTH;
    block_id_32797 = get_tblock_id(0);
    global_tid_32795 = block_id_32797 * tblock_sizze_32799 + local_tid_32796;
    phys_tid_26893 = sext_i32_i64(global_tid_32795);
    global_tid_32800 = sext_i32_i64(block_id_32797) * segmap_tblock_sizze_26887 + sext_i32_i64(local_tid_32796);
    slice_32801 = d_13944;
    slice_32802 = d_13944 * slice_32801;
    slice_32803 = m_13945 * slice_32802;
    gtid_26890 = squot64(global_tid_32800, slice_32802);
    remnant_32804 = global_tid_32800 - gtid_26890 * slice_32802;
    gtid_26891 = squot64(remnant_32804, slice_32801);
    remnant_32805 = remnant_32804 - gtid_26891 * slice_32801;
    gtid_26892 = remnant_32805;
    remnant_32806 = remnant_32805 - gtid_26892;
    if ((slt64(gtid_26890, m_13945) && slt64(gtid_26891, d_13944)) && slt64(gtid_26892, d_13944)) {
        f16 defunc_0_map_res_26896;
        f16 redout_28115 = (f16) 0.0F;
        
        for (int64_t i_28116 = 0; i_28116 < m_16509; i_28116++) {
            f16 x_26900;
            f16 defunc_0_f_res_26899;
            f16 redout_tmp_32807;
            
            x_26900 = futrts_from_bits16(((__global uint16_t *) ext_mem_28473)[gtid_26890 * lmad_ext_28466 + i_28116 * one_intra_par_min_18858 + gtid_26891 * d_13944 + gtid_26892]);
            defunc_0_f_res_26899 = x_26900 + redout_28115;
            redout_tmp_32807 = defunc_0_f_res_26899;
            redout_28115 = redout_tmp_32807;
        }
        defunc_0_map_res_26896 = redout_28115;
        ((__global uint16_t *) mem_28478)[gtid_26890 * (d_13944 * d_13944) + gtid_26891 * d_13944 + gtid_26892] = futrts_to_bits16(defunc_0_map_res_26896);
    }
    
  error_0:
    return;
    #undef segmap_tblock_sizze_26887
}
FUTHARK_KERNEL
void FlashAttention_6392zisegmap_intrablock_19532(__global int *global_failure, int failure_is_an_option, __global int64_t *global_failure_args, int64_t d_13944, int64_t m_13945, int64_t dzlz7bUZLztZRz20Umz20Udz7dUzg_13946, unsigned char cond_15974_bits, int64_t n_15975, int64_t dzlz7bUZLztZRz20Umz20UZLZLzpZRz20Udz20UnZRz7dUzg_15976, int64_t add_both_arg0_15977, int64_t dzlz7bUZLztZRz20Umz20Udz7dUzg_16051, int64_t q_16078, unsigned char opaque_res_16082_bits, unsigned char cond_16148_bits, unsigned char cond_16173_bits, unsigned char ok_or_empty_16195_bits, int64_t dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396, int64_t dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400, int64_t m_16509, int64_t computed_tblock_sizze_18392, int64_t one_intra_par_min_18858, int64_t bytes_28407, int64_t bytes_28477, int64_t bytes_29274, int64_t maxSubHelper_30633, int64_t maxSubHelper_30639, int64_t maxSubHelper_30641, int64_t maxSubHelper_30642, int64_t maxSubHelper_30644, int64_t maxSubHelper_30645, int64_t maxSubHelper_30646, int64_t maxSubHelper_30647, int64_t ext_30749, int64_t ext_30750, int64_t ctx_30774, int64_t ctx_30775, int64_t ctx_30801, int64_t ctx_30802, int64_t ctx_30808, int64_t ctx_30823, int64_t ctx_30824, int64_t ctx_30830, int64_t binop_x_30839, int64_t ctx_30843, int32_t num_chunks_31246, int32_t num_chunks_31248, int32_t num_chunks_31251, int32_t num_chunks_31254, int32_t num_chunks_31260, int32_t num_chunks_31261, int32_t num_chunks_31262, __global unsigned char *Q_mem_28339, __global unsigned char *K_mem_28340, __global unsigned char *V_mem_28341, __global unsigned char *mem_29286, __global unsigned char *mem_29292, __global unsigned char *mem_29391, __global unsigned char *color_30628, __global unsigned char *color_30629, __global unsigned char *color_30656)
{
    bool cond_15974 = cond_15974_bits;
    bool opaque_res_16082 = opaque_res_16082_bits;
    bool cond_16148 = cond_16148_bits;
    bool cond_16173 = cond_16173_bits;
    bool ok_or_empty_16195 = ok_or_empty_16195_bits;
    volatile __local unsigned char *red_arr_mem_31684_backing_17 = &shared_mem[0];
    const int64_t red_arr_mem_31684_backing_17_offset = 0 + ((int64_t) 2 * (m_16509 * d_13944 * d_13944) + srem64((int64_t) 8 - srem64((int64_t) 2 * (m_16509 * d_13944 * d_13944), (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *red_arr_mem_31655_backing_16 = &shared_mem[red_arr_mem_31684_backing_17_offset];
    const int64_t red_arr_mem_31655_backing_16_offset = red_arr_mem_31684_backing_17_offset + ((int64_t) 2 * ((int64_t) 4 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396) + srem64((int64_t) 8 - srem64((int64_t) 2 * ((int64_t) 4 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396), (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *red_arr_mem_31620_backing_15 = &shared_mem[red_arr_mem_31655_backing_16_offset];
    const int64_t red_arr_mem_31620_backing_15_offset = red_arr_mem_31655_backing_16_offset + ((int64_t) 4 * (d_13944 * d_13944 * dzlz7bUZLztZRz20Umz20Udz7dUzg_13946) + srem64((int64_t) 8 - srem64((int64_t) 4 * (d_13944 * d_13944 * dzlz7bUZLztZRz20Umz20Udz7dUzg_13946), (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *red_arr_mem_31600_backing_14 = &shared_mem[red_arr_mem_31620_backing_15_offset];
    const int64_t red_arr_mem_31600_backing_14_offset = red_arr_mem_31620_backing_15_offset + ((int64_t) 2 * (d_13944 * (int64_t) 32) + srem64((int64_t) 8 - srem64((int64_t) 2 * (d_13944 * (int64_t) 32), (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *red_arr_mem_31580_backing_13 = &shared_mem[red_arr_mem_31600_backing_14_offset];
    const int64_t red_arr_mem_31580_backing_13_offset = red_arr_mem_31600_backing_14_offset + ((int64_t) 2 * (d_13944 * (int64_t) 32) + srem64((int64_t) 8 - srem64((int64_t) 2 * (d_13944 * (int64_t) 32), (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *red_arr_mem_31535_backing_12 = &shared_mem[red_arr_mem_31580_backing_13_offset];
    const int64_t red_arr_mem_31535_backing_12_offset = red_arr_mem_31580_backing_13_offset + ((int64_t) 4 * (m_13945 * d_13944 * d_13944 * d_13944) + srem64((int64_t) 8 - srem64((int64_t) 4 * (m_13945 * d_13944 * d_13944 * d_13944), (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *red_arr_mem_31516_backing_11 = &shared_mem[red_arr_mem_31535_backing_12_offset];
    const int64_t red_arr_mem_31516_backing_11_offset = red_arr_mem_31535_backing_12_offset + ((int64_t) 4 * (m_13945 * (int64_t) 128 * (int64_t) 128 * (int64_t) 128) + srem64((int64_t) 8 - srem64((int64_t) 4 * (m_13945 * (int64_t) 128 * (int64_t) 128 * (int64_t) 128), (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_30659_backing_10 = &shared_mem[red_arr_mem_31516_backing_11_offset];
    const int64_t color_30659_backing_10_offset = red_arr_mem_31516_backing_11_offset + (bytes_28477 + srem64((int64_t) 8 - srem64(bytes_28477, (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_30658_backing_9 = &shared_mem[color_30659_backing_10_offset];
    const int64_t color_30658_backing_9_offset = color_30659_backing_10_offset + (bytes_28407 + srem64((int64_t) 8 - srem64(bytes_28407, (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_30657_backing_8 = &shared_mem[color_30658_backing_9_offset];
    const int64_t color_30657_backing_8_offset = color_30658_backing_9_offset + (bytes_29274 + srem64((int64_t) 8 - srem64(bytes_29274, (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_30655_backing_7 = &shared_mem[color_30657_backing_8_offset];
    const int64_t color_30655_backing_7_offset = color_30657_backing_8_offset + (maxSubHelper_30647 + srem64((int64_t) 8 - srem64(maxSubHelper_30647, (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_30654_backing_6 = &shared_mem[color_30655_backing_7_offset];
    const int64_t color_30654_backing_6_offset = color_30655_backing_7_offset + (maxSubHelper_30646 + srem64((int64_t) 8 - srem64(maxSubHelper_30646, (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_30653_backing_5 = &shared_mem[color_30654_backing_6_offset];
    const int64_t color_30653_backing_5_offset = color_30654_backing_6_offset + (maxSubHelper_30645 + srem64((int64_t) 8 - srem64(maxSubHelper_30645, (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_30652_backing_4 = &shared_mem[color_30653_backing_5_offset];
    const int64_t color_30652_backing_4_offset = color_30653_backing_5_offset + (maxSubHelper_30644 + srem64((int64_t) 8 - srem64(maxSubHelper_30644, (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_30651_backing_3 = &shared_mem[color_30652_backing_4_offset];
    const int64_t color_30651_backing_3_offset = color_30652_backing_4_offset + (maxSubHelper_30642 + srem64((int64_t) 8 - srem64(maxSubHelper_30642, (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_30650_backing_2 = &shared_mem[color_30651_backing_3_offset];
    const int64_t color_30650_backing_2_offset = color_30651_backing_3_offset + (maxSubHelper_30641 + srem64((int64_t) 8 - srem64(maxSubHelper_30641, (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_30649_backing_1 = &shared_mem[color_30650_backing_2_offset];
    const int64_t color_30649_backing_1_offset = color_30650_backing_2_offset + (maxSubHelper_30639 + srem64((int64_t) 8 - srem64(maxSubHelper_30639, (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_30648_backing_0 = &shared_mem[color_30649_backing_1_offset];
    const int64_t color_30648_backing_0_offset = color_30649_backing_1_offset + (maxSubHelper_30633 + srem64((int64_t) 8 - srem64(maxSubHelper_30633, (int64_t) 8), (int64_t) 8));
    volatile __local int local_failure;
    
    if (failure_is_an_option) {
        int failed = *global_failure >= 0;
        
        if (failed)
            return;
    }
    local_failure = 0;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t local_tid_31266;
    int32_t tblock_sizze_31269;
    int32_t wave_sizze_31268;
    int32_t block_id_31267;
    int32_t global_tid_31265;
    int64_t phys_tblock_id_19532;
    int64_t slice_31273;
    int64_t slice_31274;
    int64_t slice_31275;
    int64_t ltid_pre_31270;
    int64_t remnant_31276;
    int64_t ltid_pre_31271;
    int64_t remnant_31277;
    int64_t ltid_pre_31272;
    int64_t remnant_31278;
    int64_t slice_31283;
    int64_t slice_31284;
    int64_t slice_31285;
    int64_t slice_31286;
    int64_t ltid_pre_31279;
    int64_t remnant_31287;
    int64_t ltid_pre_31280;
    int64_t remnant_31288;
    int64_t ltid_pre_31281;
    int64_t remnant_31289;
    int64_t ltid_pre_31282;
    int64_t remnant_31290;
    int64_t slice_31294;
    int64_t slice_31295;
    int64_t slice_31296;
    int64_t ltid_pre_31291;
    int64_t remnant_31297;
    int64_t ltid_pre_31292;
    int64_t remnant_31298;
    int64_t ltid_pre_31293;
    int64_t remnant_31299;
    int64_t slice_31304;
    int64_t slice_31305;
    int64_t slice_31306;
    int64_t slice_31307;
    int64_t ltid_pre_31300;
    int64_t remnant_31308;
    int64_t ltid_pre_31301;
    int64_t remnant_31309;
    int64_t ltid_pre_31302;
    int64_t remnant_31310;
    int64_t ltid_pre_31303;
    int64_t remnant_31311;
    int64_t slice_31316;
    int64_t slice_31317;
    int64_t slice_31318;
    int64_t slice_31319;
    int64_t ltid_pre_31312;
    int64_t remnant_31320;
    int64_t ltid_pre_31313;
    int64_t remnant_31321;
    int64_t ltid_pre_31314;
    int64_t remnant_31322;
    int64_t ltid_pre_31315;
    int64_t remnant_31323;
    int64_t slice_31329;
    int64_t slice_31330;
    int64_t slice_31331;
    int64_t slice_31332;
    int64_t slice_31333;
    int64_t ltid_pre_31324;
    int64_t remnant_31334;
    int64_t ltid_pre_31325;
    int64_t remnant_31335;
    int64_t ltid_pre_31326;
    int64_t remnant_31336;
    int64_t ltid_pre_31327;
    int64_t remnant_31337;
    int64_t ltid_pre_31328;
    int64_t remnant_31338;
    int64_t slice_31340;
    int64_t ltid_pre_31339;
    int64_t remnant_31341;
    int64_t slice_31344;
    int64_t slice_31345;
    int64_t ltid_pre_31342;
    int64_t remnant_31346;
    int64_t ltid_pre_31343;
    int64_t remnant_31347;
    int64_t slice_31350;
    int64_t slice_31351;
    int64_t ltid_pre_31348;
    int64_t remnant_31352;
    int64_t ltid_pre_31349;
    int64_t remnant_31353;
    int64_t slice_31356;
    int64_t slice_31357;
    int64_t ltid_pre_31354;
    int64_t remnant_31358;
    int64_t ltid_pre_31355;
    int64_t remnant_31359;
    int64_t slice_31363;
    int64_t slice_31364;
    int64_t slice_31365;
    int64_t ltid_pre_31360;
    int64_t remnant_31366;
    int64_t ltid_pre_31361;
    int64_t remnant_31367;
    int64_t ltid_pre_31362;
    int64_t remnant_31368;
    int64_t slice_31371;
    int64_t slice_31372;
    int64_t ltid_pre_31369;
    int64_t remnant_31373;
    int64_t ltid_pre_31370;
    int64_t remnant_31374;
    int64_t slice_31377;
    int64_t slice_31378;
    int64_t ltid_pre_31375;
    int64_t remnant_31379;
    int64_t ltid_pre_31376;
    int64_t remnant_31380;
    int64_t slice_31383;
    int64_t slice_31384;
    int64_t ltid_pre_31381;
    int64_t remnant_31385;
    int64_t ltid_pre_31382;
    int64_t remnant_31386;
    int64_t slice_31390;
    int64_t slice_31391;
    int64_t slice_31392;
    int64_t ltid_pre_31387;
    int64_t remnant_31393;
    int64_t ltid_pre_31388;
    int64_t remnant_31394;
    int64_t ltid_pre_31389;
    int64_t remnant_31395;
    int64_t slice_31400;
    int64_t slice_31401;
    int64_t slice_31402;
    int64_t slice_31403;
    int64_t ltid_pre_31396;
    int64_t remnant_31404;
    int64_t ltid_pre_31397;
    int64_t remnant_31405;
    int64_t ltid_pre_31398;
    int64_t remnant_31406;
    int64_t ltid_pre_31399;
    int64_t remnant_31407;
    int64_t slice_31411;
    int64_t slice_31412;
    int64_t slice_31413;
    int64_t ltid_pre_31408;
    int64_t remnant_31414;
    int64_t ltid_pre_31409;
    int64_t remnant_31415;
    int64_t ltid_pre_31410;
    int64_t remnant_31416;
    int64_t slice_31421;
    int64_t slice_31422;
    int64_t slice_31423;
    int64_t slice_31424;
    int64_t ltid_pre_31417;
    int64_t remnant_31425;
    int64_t ltid_pre_31418;
    int64_t remnant_31426;
    int64_t ltid_pre_31419;
    int64_t remnant_31427;
    int64_t ltid_pre_31420;
    int64_t remnant_31428;
    int64_t slice_31431;
    int64_t slice_31432;
    int64_t ltid_pre_31429;
    int64_t remnant_31433;
    int64_t ltid_pre_31430;
    int64_t remnant_31434;
    int64_t slice_31437;
    int64_t slice_31438;
    int64_t ltid_pre_31435;
    int64_t remnant_31439;
    int64_t ltid_pre_31436;
    int64_t remnant_31440;
    int64_t slice_31443;
    int64_t slice_31444;
    int64_t ltid_pre_31441;
    int64_t remnant_31445;
    int64_t ltid_pre_31442;
    int64_t remnant_31446;
    int64_t slice_31448;
    int64_t ltid_pre_31447;
    int64_t remnant_31449;
    int64_t slice_31450;
    int64_t gtid_19531;
    int64_t remnant_31451;
    __local unsigned char *color_30648;
    __local unsigned char *color_30649;
    __local unsigned char *color_30650;
    __local unsigned char *color_30651;
    __local unsigned char *color_30652;
    __local unsigned char *color_30653;
    __local unsigned char *color_30654;
    __local unsigned char *color_30655;
    __local unsigned char *color_30657;
    __local unsigned char *color_30658;
    __local unsigned char *color_30659;
    __local unsigned char *ext_mem_ext_30747;
    __local unsigned char *ext_mem_29272;
    __local unsigned char *ext_mem_unused_30451;
    __local unsigned char *ext_mem_29271;
    __local unsigned char *ext_mem_unused_30460;
    __local unsigned char *ext_mem_ext_30761;
    __local unsigned char *ext_mem_ext_30764;
    __local unsigned char *mem_param_29245;
    __local unsigned char *mem_param_29248;
    __local unsigned char *mem_param_out_30452;
    __local unsigned char *mem_param_out_30461;
    __local unsigned char *mem_param_ext_30751;
    __local unsigned char *mem_param_ext_30754;
    int64_t phys_tid_19697;
    int64_t gtid_19695;
    int64_t gtid_19696;
    int64_t binop_x_30798;
    int64_t binop_x_30806;
    int64_t binop_x_30820;
    int64_t binop_x_30828;
    int64_t binop_x_30837;
    __local unsigned char *ext_mem_ext_30855;
    int32_t num_chunks_31699;
    
    local_tid_31266 = get_local_id(0);
    tblock_sizze_31269 = get_local_size(0);
    wave_sizze_31268 = LOCKSTEP_WIDTH;
    block_id_31267 = get_tblock_id(0);
    global_tid_31265 = block_id_31267 * tblock_sizze_31269 + local_tid_31266;
    phys_tblock_id_19532 = sext_i32_i64(block_id_31267);
    slice_31273 = dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396;
    slice_31274 = (int64_t) 2 * slice_31273;
    slice_31275 = (int64_t) 2 * slice_31274;
    ltid_pre_31270 = squot64(sext_i32_i64(local_tid_31266), slice_31274);
    remnant_31276 = sext_i32_i64(local_tid_31266) - ltid_pre_31270 * slice_31274;
    ltid_pre_31271 = squot64(remnant_31276, slice_31273);
    remnant_31277 = remnant_31276 - ltid_pre_31271 * slice_31273;
    ltid_pre_31272 = remnant_31277;
    remnant_31278 = remnant_31277 - ltid_pre_31272;
    slice_31283 = dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400;
    slice_31284 = dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396 * slice_31283;
    slice_31285 = (int64_t) 2 * slice_31284;
    slice_31286 = (int64_t) 2 * slice_31285;
    ltid_pre_31279 = squot64(sext_i32_i64(local_tid_31266), slice_31285);
    remnant_31287 = sext_i32_i64(local_tid_31266) - ltid_pre_31279 * slice_31285;
    ltid_pre_31280 = squot64(remnant_31287, slice_31284);
    remnant_31288 = remnant_31287 - ltid_pre_31280 * slice_31284;
    ltid_pre_31281 = squot64(remnant_31288, slice_31283);
    remnant_31289 = remnant_31288 - ltid_pre_31281 * slice_31283;
    ltid_pre_31282 = remnant_31289;
    remnant_31290 = remnant_31289 - ltid_pre_31282;
    slice_31294 = dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400;
    slice_31295 = (int64_t) 2 * slice_31294;
    slice_31296 = (int64_t) 2 * slice_31295;
    ltid_pre_31291 = squot64(sext_i32_i64(local_tid_31266), slice_31295);
    remnant_31297 = sext_i32_i64(local_tid_31266) - ltid_pre_31291 * slice_31295;
    ltid_pre_31292 = squot64(remnant_31297, slice_31294);
    remnant_31298 = remnant_31297 - ltid_pre_31292 * slice_31294;
    ltid_pre_31293 = remnant_31298;
    remnant_31299 = remnant_31298 - ltid_pre_31293;
    slice_31304 = dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396;
    slice_31305 = dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * slice_31304;
    slice_31306 = (int64_t) 2 * slice_31305;
    slice_31307 = (int64_t) 2 * slice_31306;
    ltid_pre_31300 = squot64(sext_i32_i64(local_tid_31266), slice_31306);
    remnant_31308 = sext_i32_i64(local_tid_31266) - ltid_pre_31300 * slice_31306;
    ltid_pre_31301 = squot64(remnant_31308, slice_31305);
    remnant_31309 = remnant_31308 - ltid_pre_31301 * slice_31305;
    ltid_pre_31302 = squot64(remnant_31309, slice_31304);
    remnant_31310 = remnant_31309 - ltid_pre_31302 * slice_31304;
    ltid_pre_31303 = remnant_31310;
    remnant_31311 = remnant_31310 - ltid_pre_31303;
    slice_31316 = dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400;
    slice_31317 = dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * slice_31316;
    slice_31318 = (int64_t) 2 * slice_31317;
    slice_31319 = (int64_t) 2 * slice_31318;
    ltid_pre_31312 = squot64(sext_i32_i64(local_tid_31266), slice_31318);
    remnant_31320 = sext_i32_i64(local_tid_31266) - ltid_pre_31312 * slice_31318;
    ltid_pre_31313 = squot64(remnant_31320, slice_31317);
    remnant_31321 = remnant_31320 - ltid_pre_31313 * slice_31317;
    ltid_pre_31314 = squot64(remnant_31321, slice_31316);
    remnant_31322 = remnant_31321 - ltid_pre_31314 * slice_31316;
    ltid_pre_31315 = remnant_31322;
    remnant_31323 = remnant_31322 - ltid_pre_31315;
    slice_31329 = dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396;
    slice_31330 = dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * slice_31329;
    slice_31331 = dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * slice_31330;
    slice_31332 = (int64_t) 2 * slice_31331;
    slice_31333 = (int64_t) 2 * slice_31332;
    ltid_pre_31324 = squot64(sext_i32_i64(local_tid_31266), slice_31332);
    remnant_31334 = sext_i32_i64(local_tid_31266) - ltid_pre_31324 * slice_31332;
    ltid_pre_31325 = squot64(remnant_31334, slice_31331);
    remnant_31335 = remnant_31334 - ltid_pre_31325 * slice_31331;
    ltid_pre_31326 = squot64(remnant_31335, slice_31330);
    remnant_31336 = remnant_31335 - ltid_pre_31326 * slice_31330;
    ltid_pre_31327 = squot64(remnant_31336, slice_31329);
    remnant_31337 = remnant_31336 - ltid_pre_31327 * slice_31329;
    ltid_pre_31328 = remnant_31337;
    remnant_31338 = remnant_31337 - ltid_pre_31328;
    slice_31340 = d_13944;
    ltid_pre_31339 = sext_i32_i64(local_tid_31266);
    remnant_31341 = sext_i32_i64(local_tid_31266) - ltid_pre_31339;
    slice_31344 = (int64_t) 32;
    slice_31345 = d_13944 * slice_31344;
    ltid_pre_31342 = squot64(sext_i32_i64(local_tid_31266), slice_31344);
    remnant_31346 = sext_i32_i64(local_tid_31266) - ltid_pre_31342 * slice_31344;
    ltid_pre_31343 = remnant_31346;
    remnant_31347 = remnant_31346 - ltid_pre_31343;
    slice_31350 = (int64_t) 1024;
    slice_31351 = d_13944 * slice_31350;
    ltid_pre_31348 = squot64(sext_i32_i64(local_tid_31266), slice_31350);
    remnant_31352 = sext_i32_i64(local_tid_31266) - ltid_pre_31348 * slice_31350;
    ltid_pre_31349 = remnant_31352;
    remnant_31353 = remnant_31352 - ltid_pre_31349;
    slice_31356 = d_13944;
    slice_31357 = d_13944 * slice_31356;
    ltid_pre_31354 = squot64(sext_i32_i64(local_tid_31266), slice_31356);
    remnant_31358 = sext_i32_i64(local_tid_31266) - ltid_pre_31354 * slice_31356;
    ltid_pre_31355 = remnant_31358;
    remnant_31359 = remnant_31358 - ltid_pre_31355;
    slice_31363 = dzlz7bUZLztZRz20Umz20Udz7dUzg_13946;
    slice_31364 = d_13944 * slice_31363;
    slice_31365 = d_13944 * slice_31364;
    ltid_pre_31360 = squot64(sext_i32_i64(local_tid_31266), slice_31364);
    remnant_31366 = sext_i32_i64(local_tid_31266) - ltid_pre_31360 * slice_31364;
    ltid_pre_31361 = squot64(remnant_31366, slice_31363);
    remnant_31367 = remnant_31366 - ltid_pre_31361 * slice_31363;
    ltid_pre_31362 = remnant_31367;
    remnant_31368 = remnant_31367 - ltid_pre_31362;
    slice_31371 = dzlz7bUZLztZRz20Umz20Udz7dUzg_13946;
    slice_31372 = d_13944 * slice_31371;
    ltid_pre_31369 = squot64(sext_i32_i64(local_tid_31266), slice_31371);
    remnant_31373 = sext_i32_i64(local_tid_31266) - ltid_pre_31369 * slice_31371;
    ltid_pre_31370 = remnant_31373;
    remnant_31374 = remnant_31373 - ltid_pre_31370;
    slice_31377 = n_15975;
    slice_31378 = d_13944 * slice_31377;
    ltid_pre_31375 = squot64(sext_i32_i64(local_tid_31266), slice_31377);
    remnant_31379 = sext_i32_i64(local_tid_31266) - ltid_pre_31375 * slice_31377;
    ltid_pre_31376 = remnant_31379;
    remnant_31380 = remnant_31379 - ltid_pre_31376;
    slice_31383 = dzlz7bUZLztZRz20Umz20Udz7dUzg_16051;
    slice_31384 = d_13944 * slice_31383;
    ltid_pre_31381 = squot64(sext_i32_i64(local_tid_31266), slice_31383);
    remnant_31385 = sext_i32_i64(local_tid_31266) - ltid_pre_31381 * slice_31383;
    ltid_pre_31382 = remnant_31385;
    remnant_31386 = remnant_31385 - ltid_pre_31382;
    slice_31390 = (int64_t) 128;
    slice_31391 = (int64_t) 128 * slice_31390;
    slice_31392 = m_13945 * slice_31391;
    ltid_pre_31387 = squot64(sext_i32_i64(local_tid_31266), slice_31391);
    remnant_31393 = sext_i32_i64(local_tid_31266) - ltid_pre_31387 * slice_31391;
    ltid_pre_31388 = squot64(remnant_31393, slice_31390);
    remnant_31394 = remnant_31393 - ltid_pre_31388 * slice_31390;
    ltid_pre_31389 = remnant_31394;
    remnant_31395 = remnant_31394 - ltid_pre_31389;
    slice_31400 = (int64_t) 128;
    slice_31401 = (int64_t) 128 * slice_31400;
    slice_31402 = (int64_t) 128 * slice_31401;
    slice_31403 = m_13945 * slice_31402;
    ltid_pre_31396 = squot64(sext_i32_i64(local_tid_31266), slice_31402);
    remnant_31404 = sext_i32_i64(local_tid_31266) - ltid_pre_31396 * slice_31402;
    ltid_pre_31397 = squot64(remnant_31404, slice_31401);
    remnant_31405 = remnant_31404 - ltid_pre_31397 * slice_31401;
    ltid_pre_31398 = squot64(remnant_31405, slice_31400);
    remnant_31406 = remnant_31405 - ltid_pre_31398 * slice_31400;
    ltid_pre_31399 = remnant_31406;
    remnant_31407 = remnant_31406 - ltid_pre_31399;
    slice_31411 = d_13944;
    slice_31412 = d_13944 * slice_31411;
    slice_31413 = m_13945 * slice_31412;
    ltid_pre_31408 = squot64(sext_i32_i64(local_tid_31266), slice_31412);
    remnant_31414 = sext_i32_i64(local_tid_31266) - ltid_pre_31408 * slice_31412;
    ltid_pre_31409 = squot64(remnant_31414, slice_31411);
    remnant_31415 = remnant_31414 - ltid_pre_31409 * slice_31411;
    ltid_pre_31410 = remnant_31415;
    remnant_31416 = remnant_31415 - ltid_pre_31410;
    slice_31421 = d_13944;
    slice_31422 = d_13944 * slice_31421;
    slice_31423 = d_13944 * slice_31422;
    slice_31424 = m_13945 * slice_31423;
    ltid_pre_31417 = squot64(sext_i32_i64(local_tid_31266), slice_31423);
    remnant_31425 = sext_i32_i64(local_tid_31266) - ltid_pre_31417 * slice_31423;
    ltid_pre_31418 = squot64(remnant_31425, slice_31422);
    remnant_31426 = remnant_31425 - ltid_pre_31418 * slice_31422;
    ltid_pre_31419 = squot64(remnant_31426, slice_31421);
    remnant_31427 = remnant_31426 - ltid_pre_31419 * slice_31421;
    ltid_pre_31420 = remnant_31427;
    remnant_31428 = remnant_31427 - ltid_pre_31420;
    slice_31431 = n_15975;
    slice_31432 = dzlz7bUZLztZRz20Umz20Udz7dUzg_13946 * slice_31431;
    ltid_pre_31429 = squot64(sext_i32_i64(local_tid_31266), slice_31431);
    remnant_31433 = sext_i32_i64(local_tid_31266) - ltid_pre_31429 * slice_31431;
    ltid_pre_31430 = remnant_31433;
    remnant_31434 = remnant_31433 - ltid_pre_31430;
    slice_31437 = (int64_t) 128;
    slice_31438 = n_15975 * slice_31437;
    ltid_pre_31435 = squot64(sext_i32_i64(local_tid_31266), slice_31437);
    remnant_31439 = sext_i32_i64(local_tid_31266) - ltid_pre_31435 * slice_31437;
    ltid_pre_31436 = remnant_31439;
    remnant_31440 = remnant_31439 - ltid_pre_31436;
    slice_31443 = (int64_t) 128;
    slice_31444 = add_both_arg0_15977 * slice_31443;
    ltid_pre_31441 = squot64(sext_i32_i64(local_tid_31266), slice_31443);
    remnant_31445 = sext_i32_i64(local_tid_31266) - ltid_pre_31441 * slice_31443;
    ltid_pre_31442 = remnant_31445;
    remnant_31446 = remnant_31445 - ltid_pre_31442;
    slice_31448 = m_16509;
    ltid_pre_31447 = sext_i32_i64(local_tid_31266);
    remnant_31449 = sext_i32_i64(local_tid_31266) - ltid_pre_31447;
    slice_31450 = m_13945;
    gtid_19531 = sext_i32_i64(block_id_31267);
    remnant_31451 = sext_i32_i64(block_id_31267) - gtid_19531;
    color_30648 = (__local unsigned char *) color_30648_backing_0;
    color_30649 = (__local unsigned char *) color_30649_backing_1;
    color_30650 = (__local unsigned char *) color_30650_backing_2;
    color_30651 = (__local unsigned char *) color_30651_backing_3;
    color_30652 = (__local unsigned char *) color_30652_backing_4;
    color_30653 = (__local unsigned char *) color_30653_backing_5;
    color_30654 = (__local unsigned char *) color_30654_backing_6;
    color_30655 = (__local unsigned char *) color_30655_backing_7;
    color_30657 = (__local unsigned char *) color_30657_backing_8;
    color_30658 = (__local unsigned char *) color_30658_backing_9;
    color_30659 = (__local unsigned char *) color_30659_backing_10;
    barrier(CLK_LOCAL_MEM_FENCE);
    if (cond_15974) {
        int64_t tmp_offs_31461;
        int32_t num_chunks_31462;
        int64_t tmp_offs_31477;
        int64_t tmp_offs_31493;
        int32_t num_chunks_31494;
        int64_t tmp_offs_31509;
        int64_t phys_tid_19552;
        __local unsigned char *red_arr_mem_31516;
        int64_t gtid_19548;
        int64_t gtid_19549;
        int64_t gtid_19550;
        int64_t gtid_19551;
        int64_t dims_flat_31518;
        float eta_p_19553;
        float eta_p_19554;
        float eta_p_31520;
        float eta_p_31521;
        bool ltid_in_bounds_31523;
        int32_t skip_threads_31524;
        bool no_carry_in_31530;
        int64_t phys_tid_19567;
        int64_t gtid_19564;
        int64_t gtid_19565;
        int64_t gtid_19566;
        int64_t phys_tid_19577;
        int64_t gtid_19576;
        int64_t phys_tid_19586;
        int64_t gtid_19584;
        int64_t gtid_19585;
        
        for (int32_t chunk_i_31455 = 0; chunk_i_31455 < num_chunks_31260; chunk_i_31455++) {
            int32_t i_31456;
            int64_t slice_31457;
            int64_t slice_31458;
            int64_t rep_i_31453;
            int64_t remnant_31459;
            int64_t rep_i_31454;
            int64_t remnant_31460;
            
            i_31456 = chunk_i_31455 * sext_i64_i32(computed_tblock_sizze_18392) + local_tid_31266;
            slice_31457 = n_15975;
            slice_31458 = dzlz7bUZLztZRz20Umz20Udz7dUzg_13946 * slice_31457;
            rep_i_31453 = squot64(sext_i32_i64(i_31456), slice_31457);
            remnant_31459 = sext_i32_i64(i_31456) - rep_i_31453 * slice_31457;
            rep_i_31454 = remnant_31459;
            remnant_31460 = remnant_31459 - rep_i_31454;
            if ((sle64((int64_t) 0, rep_i_31453) && slt64(rep_i_31453, dzlz7bUZLztZRz20Umz20Udz7dUzg_13946)) && (sle64((int64_t) 0, rep_i_31454) && slt64(rep_i_31454, n_15975))) {
                ((__local uint16_t *) color_30650)[d_13944 + (rep_i_31453 * (int64_t) 128 + rep_i_31454)] = futrts_to_bits16((f16) 0.0F);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        tmp_offs_31461 = (int64_t) 0;
        num_chunks_31462 = sdiv_up32(sext_i64_i32(dzlz7bUZLztZRz20Umz20Udz7dUzg_13946) * sext_i64_i32(d_13944), sext_i64_i32(computed_tblock_sizze_18392));
        for (int32_t chunk_i_31463 = 0; chunk_i_31463 < num_chunks_31462; chunk_i_31463++) {
            int32_t i_31464 = chunk_i_31463 * sext_i64_i32(computed_tblock_sizze_18392) + local_tid_31266;
            
            if (slt32(i_31464, sext_i64_i32(dzlz7bUZLztZRz20Umz20Udz7dUzg_13946) * sext_i64_i32(d_13944))) {
                ((__local uint16_t *) color_30650)[tmp_offs_31461 + sext_i32_i64(squot32(i_31464, sext_i64_i32(d_13944))) * (int64_t) 128 + sext_i32_i64(i_31464 - squot32(i_31464, sext_i64_i32(d_13944)) * sext_i64_i32(d_13944))] = futrts_to_bits16(futrts_from_bits16(((__global uint16_t *) K_mem_28340)[sext_i32_i64(squot32(i_31464, sext_i64_i32(d_13944))) * d_13944 + sext_i32_i64(i_31464 - squot32(i_31464, sext_i64_i32(d_13944)) * sext_i64_i32(d_13944))]));
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        tmp_offs_31461 += d_13944;
        if (!(tmp_offs_31461 == d_13944)) {
            int32_t num_chunks_31465 = sdiv_up32(sext_i64_i32(dzlz7bUZLztZRz20Umz20Udz7dUzg_13946) * sext_i64_i32(n_15975), sext_i64_i32(computed_tblock_sizze_18392));
            
            for (int32_t chunk_i_31466 = 0; chunk_i_31466 < num_chunks_31465; chunk_i_31466++) {
                int32_t i_31467 = chunk_i_31466 * sext_i64_i32(computed_tblock_sizze_18392) + local_tid_31266;
                
                if (slt32(i_31467, sext_i64_i32(dzlz7bUZLztZRz20Umz20Udz7dUzg_13946) * sext_i64_i32(n_15975))) {
                    ((__local uint16_t *) color_30650)[tmp_offs_31461 + sext_i32_i64(squot32(i_31467, sext_i64_i32(n_15975))) * (int64_t) 128 + sext_i32_i64(i_31467 - squot32(i_31467, sext_i64_i32(n_15975)) * sext_i64_i32(n_15975))] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) color_30650)[d_13944 + sext_i32_i64(squot32(i_31467, sext_i64_i32(n_15975))) * (int64_t) 128 + sext_i32_i64(i_31467 - squot32(i_31467, sext_i64_i32(n_15975)) * sext_i64_i32(n_15975))]));
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }
        tmp_offs_31461 += n_15975;
        for (int32_t chunk_i_31471 = 0; chunk_i_31471 < num_chunks_31262; chunk_i_31471++) {
            int32_t i_31472;
            int64_t slice_31473;
            int64_t slice_31474;
            int64_t rep_i_31469;
            int64_t remnant_31475;
            int64_t rep_i_31470;
            int64_t remnant_31476;
            
            i_31472 = chunk_i_31471 * sext_i64_i32(computed_tblock_sizze_18392) + local_tid_31266;
            slice_31473 = (int64_t) 128;
            slice_31474 = add_both_arg0_15977 * slice_31473;
            rep_i_31469 = squot64(sext_i32_i64(i_31472), slice_31473);
            remnant_31475 = sext_i32_i64(i_31472) - rep_i_31469 * slice_31473;
            rep_i_31470 = remnant_31475;
            remnant_31476 = remnant_31475 - rep_i_31470;
            if ((sle64((int64_t) 0, rep_i_31469) && slt64(rep_i_31469, add_both_arg0_15977)) && (sle64((int64_t) 0, rep_i_31470) && slt64(rep_i_31470, (int64_t) 128))) {
                ((__local uint16_t *) color_30650)[(int64_t) 128 * dzlz7bUZLztZRz20Umz20Udz7dUzg_13946 + (rep_i_31469 * (int64_t) 128 + rep_i_31470)] = futrts_to_bits16((f16) 0.0F);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        tmp_offs_31477 = (int64_t) 0;
        if (!((int64_t) 128 * tmp_offs_31477 == (int64_t) 0)) {
            int32_t num_chunks_31478 = sdiv_up32(sext_i64_i32(dzlz7bUZLztZRz20Umz20Udz7dUzg_13946) * 128, sext_i64_i32(computed_tblock_sizze_18392));
            
            for (int32_t chunk_i_31479 = 0; chunk_i_31479 < num_chunks_31478; chunk_i_31479++) {
                int32_t i_31480 = chunk_i_31479 * sext_i64_i32(computed_tblock_sizze_18392) + local_tid_31266;
                
                if (slt32(i_31480, sext_i64_i32(dzlz7bUZLztZRz20Umz20Udz7dUzg_13946) * 128)) {
                    ((__local uint16_t *) color_30650)[(int64_t) 128 * tmp_offs_31477 + sext_i32_i64(squot32(i_31480, 128)) * (int64_t) 128 + sext_i32_i64(i_31480 - squot32(i_31480, 128) * 128)] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) color_30650)[sext_i32_i64(squot32(i_31480, 128)) * (int64_t) 128 + sext_i32_i64(i_31480 - squot32(i_31480, 128) * 128)]));
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }
        tmp_offs_31477 += dzlz7bUZLztZRz20Umz20Udz7dUzg_13946;
        if (!((int64_t) 128 * tmp_offs_31477 == (int64_t) 128 * dzlz7bUZLztZRz20Umz20Udz7dUzg_13946)) {
            int32_t num_chunks_31481 = sdiv_up32(sext_i64_i32(add_both_arg0_15977) * 128, sext_i64_i32(computed_tblock_sizze_18392));
            
            for (int32_t chunk_i_31482 = 0; chunk_i_31482 < num_chunks_31481; chunk_i_31482++) {
                int32_t i_31483 = chunk_i_31482 * sext_i64_i32(computed_tblock_sizze_18392) + local_tid_31266;
                
                if (slt32(i_31483, sext_i64_i32(add_both_arg0_15977) * 128)) {
                    ((__local uint16_t *) color_30650)[(int64_t) 128 * tmp_offs_31477 + sext_i32_i64(squot32(i_31483, 128)) * (int64_t) 128 + sext_i32_i64(i_31483 - squot32(i_31483, 128) * 128)] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) color_30650)[(int64_t) 128 * dzlz7bUZLztZRz20Umz20Udz7dUzg_13946 + sext_i32_i64(squot32(i_31483, 128)) * (int64_t) 128 + sext_i32_i64(i_31483 - squot32(i_31483, 128) * 128)]));
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }
        tmp_offs_31477 += add_both_arg0_15977;
        for (int32_t chunk_i_31487 = 0; chunk_i_31487 < num_chunks_31254; chunk_i_31487++) {
            int32_t i_31488;
            int64_t slice_31489;
            int64_t slice_31490;
            int64_t rep_i_31485;
            int64_t remnant_31491;
            int64_t rep_i_31486;
            int64_t remnant_31492;
            
            i_31488 = chunk_i_31487 * sext_i64_i32(computed_tblock_sizze_18392) + local_tid_31266;
            slice_31489 = n_15975;
            slice_31490 = d_13944 * slice_31489;
            rep_i_31485 = squot64(sext_i32_i64(i_31488), slice_31489);
            remnant_31491 = sext_i32_i64(i_31488) - rep_i_31485 * slice_31489;
            rep_i_31486 = remnant_31491;
            remnant_31492 = remnant_31491 - rep_i_31486;
            if ((sle64((int64_t) 0, rep_i_31485) && slt64(rep_i_31485, d_13944)) && (sle64((int64_t) 0, rep_i_31486) && slt64(rep_i_31486, n_15975))) {
                ((__local uint16_t *) color_30649)[d_13944 + (rep_i_31485 * (int64_t) 128 + rep_i_31486)] = futrts_to_bits16((f16) 0.0F);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        tmp_offs_31493 = (int64_t) 0;
        num_chunks_31494 = sdiv_up32(sext_i64_i32(d_13944) * sext_i64_i32(d_13944), sext_i64_i32(computed_tblock_sizze_18392));
        for (int32_t chunk_i_31495 = 0; chunk_i_31495 < num_chunks_31494; chunk_i_31495++) {
            int32_t i_31496 = chunk_i_31495 * sext_i64_i32(computed_tblock_sizze_18392) + local_tid_31266;
            
            if (slt32(i_31496, sext_i64_i32(d_13944) * sext_i64_i32(d_13944))) {
                ((__local uint16_t *) color_30649)[tmp_offs_31493 + sext_i32_i64(squot32(i_31496, sext_i64_i32(d_13944))) * (int64_t) 128 + sext_i32_i64(i_31496 - squot32(i_31496, sext_i64_i32(d_13944)) * sext_i64_i32(d_13944))] = futrts_to_bits16(futrts_from_bits16(((__global uint16_t *) Q_mem_28339)[gtid_19531 * (d_13944 * d_13944) + sext_i32_i64(squot32(i_31496, sext_i64_i32(d_13944))) * d_13944 + sext_i32_i64(i_31496 - squot32(i_31496, sext_i64_i32(d_13944)) * sext_i64_i32(d_13944))]));
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        tmp_offs_31493 += d_13944;
        if (!(tmp_offs_31493 == d_13944)) {
            int32_t num_chunks_31497 = sdiv_up32(sext_i64_i32(d_13944) * sext_i64_i32(n_15975), sext_i64_i32(computed_tblock_sizze_18392));
            
            for (int32_t chunk_i_31498 = 0; chunk_i_31498 < num_chunks_31497; chunk_i_31498++) {
                int32_t i_31499 = chunk_i_31498 * sext_i64_i32(computed_tblock_sizze_18392) + local_tid_31266;
                
                if (slt32(i_31499, sext_i64_i32(d_13944) * sext_i64_i32(n_15975))) {
                    ((__local uint16_t *) color_30649)[tmp_offs_31493 + sext_i32_i64(squot32(i_31499, sext_i64_i32(n_15975))) * (int64_t) 128 + sext_i32_i64(i_31499 - squot32(i_31499, sext_i64_i32(n_15975)) * sext_i64_i32(n_15975))] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) color_30649)[d_13944 + sext_i32_i64(squot32(i_31499, sext_i64_i32(n_15975))) * (int64_t) 128 + sext_i32_i64(i_31499 - squot32(i_31499, sext_i64_i32(n_15975)) * sext_i64_i32(n_15975))]));
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }
        tmp_offs_31493 += n_15975;
        for (int32_t chunk_i_31503 = 0; chunk_i_31503 < num_chunks_31261; chunk_i_31503++) {
            int32_t i_31504;
            int64_t slice_31505;
            int64_t slice_31506;
            int64_t rep_i_31501;
            int64_t remnant_31507;
            int64_t rep_i_31502;
            int64_t remnant_31508;
            
            i_31504 = chunk_i_31503 * sext_i64_i32(computed_tblock_sizze_18392) + local_tid_31266;
            slice_31505 = (int64_t) 128;
            slice_31506 = n_15975 * slice_31505;
            rep_i_31501 = squot64(sext_i32_i64(i_31504), slice_31505);
            remnant_31507 = sext_i32_i64(i_31504) - rep_i_31501 * slice_31505;
            rep_i_31502 = remnant_31507;
            remnant_31508 = remnant_31507 - rep_i_31502;
            if ((sle64((int64_t) 0, rep_i_31501) && slt64(rep_i_31501, n_15975)) && (sle64((int64_t) 0, rep_i_31502) && slt64(rep_i_31502, (int64_t) 128))) {
                ((__local uint16_t *) color_30649)[(int64_t) 128 * d_13944 + (rep_i_31501 * (int64_t) 128 + rep_i_31502)] = futrts_to_bits16((f16) 0.0F);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        tmp_offs_31509 = (int64_t) 0;
        if (!((int64_t) 128 * tmp_offs_31509 == (int64_t) 0)) {
            int32_t num_chunks_31510 = sdiv_up32(sext_i64_i32(d_13944) * 128, sext_i64_i32(computed_tblock_sizze_18392));
            
            for (int32_t chunk_i_31511 = 0; chunk_i_31511 < num_chunks_31510; chunk_i_31511++) {
                int32_t i_31512 = chunk_i_31511 * sext_i64_i32(computed_tblock_sizze_18392) + local_tid_31266;
                
                if (slt32(i_31512, sext_i64_i32(d_13944) * 128)) {
                    ((__local uint16_t *) color_30649)[(int64_t) 128 * tmp_offs_31509 + sext_i32_i64(squot32(i_31512, 128)) * (int64_t) 128 + sext_i32_i64(i_31512 - squot32(i_31512, 128) * 128)] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) color_30649)[sext_i32_i64(squot32(i_31512, 128)) * (int64_t) 128 + sext_i32_i64(i_31512 - squot32(i_31512, 128) * 128)]));
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }
        tmp_offs_31509 += d_13944;
        if (!((int64_t) 128 * tmp_offs_31509 == (int64_t) 128 * d_13944)) {
            int32_t num_chunks_31513 = sdiv_up32(sext_i64_i32(n_15975) * 128, sext_i64_i32(computed_tblock_sizze_18392));
            
            for (int32_t chunk_i_31514 = 0; chunk_i_31514 < num_chunks_31513; chunk_i_31514++) {
                int32_t i_31515 = chunk_i_31514 * sext_i64_i32(computed_tblock_sizze_18392) + local_tid_31266;
                
                if (slt32(i_31515, sext_i64_i32(n_15975) * 128)) {
                    ((__local uint16_t *) color_30649)[(int64_t) 128 * tmp_offs_31509 + sext_i32_i64(squot32(i_31515, 128)) * (int64_t) 128 + sext_i32_i64(i_31515 - squot32(i_31515, 128) * 128)] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) color_30649)[(int64_t) 128 * d_13944 + sext_i32_i64(squot32(i_31515, 128)) * (int64_t) 128 + sext_i32_i64(i_31515 - squot32(i_31515, 128) * 128)]));
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }
        tmp_offs_31509 += n_15975;
        phys_tid_19552 = sext_i32_i64(local_tid_31266);
        red_arr_mem_31516 = (__local unsigned char *) red_arr_mem_31516_backing_11;
        gtid_19548 = sext_i32_i64(sext_i64_i32(ltid_pre_31396));
        gtid_19549 = sext_i32_i64(sext_i64_i32(ltid_pre_31397));
        gtid_19550 = sext_i32_i64(sext_i64_i32(ltid_pre_31398));
        gtid_19551 = sext_i32_i64(sext_i64_i32(ltid_pre_31399));
        if (((slt64(gtid_19548, m_13945) && slt64(gtid_19549, (int64_t) 128)) && slt64(gtid_19550, (int64_t) 128)) && slt64(gtid_19551, (int64_t) 128)) {
            f16 eta_p_19559;
            int64_t binop_x_27050;
            int64_t binop_y_27051;
            int64_t binop_x_27052;
            int64_t binop_x_27053;
            int64_t new_index_27054;
            int64_t binop_y_27064;
            int64_t new_index_27065;
            f16 eta_p_19560;
            f16 defunc_0_f_res_19561;
            float f16_res_19562;
            
            eta_p_19559 = futrts_from_bits16(((__local uint16_t *) color_30649)[gtid_19549 * (int64_t) 128 + gtid_19551]);
            binop_x_27050 = (int64_t) 16384 * gtid_19548;
            binop_y_27051 = (int64_t) 128 * gtid_19551;
            binop_x_27052 = binop_x_27050 + binop_y_27051;
            binop_x_27053 = gtid_19550 + binop_x_27052;
            new_index_27054 = squot64(binop_x_27053, (int64_t) 128);
            binop_y_27064 = (int64_t) 128 * new_index_27054;
            new_index_27065 = binop_x_27053 - binop_y_27064;
            eta_p_19560 = futrts_from_bits16(((__local uint16_t *) color_30650)[new_index_27054 * (int64_t) 128 + new_index_27065]);
            defunc_0_f_res_19561 = eta_p_19559 * eta_p_19560;
            f16_res_19562 = fpconv_f16_f32(defunc_0_f_res_19561);
            ((__local float *) red_arr_mem_31516)[gtid_19548 * (int64_t) 2097152 + gtid_19549 * (int64_t) 16384 + gtid_19550 * (int64_t) 128 + gtid_19551] = f16_res_19562;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        dims_flat_31518 = m_13945 * (int64_t) 128 * (int64_t) 128 * (int64_t) 128;
        ltid_in_bounds_31523 = slt64(sext_i32_i64(local_tid_31266), m_13945 * (int64_t) 128 * (int64_t) 128 * (int64_t) 128);
        // read input for in-block scan
        {
            if (ltid_in_bounds_31523) {
                eta_p_19554 = ((volatile __local float *) red_arr_mem_31516)[sext_i32_i64(local_tid_31266)];
                if ((local_tid_31266 - squot32(local_tid_31266, 32) * 32) == 0) {
                    eta_p_19553 = eta_p_19554;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_31524 = 1;
            while (slt32(skip_threads_31524, 32)) {
                bool thread_active_31525 = sle32(skip_threads_31524, local_tid_31266 - squot32(local_tid_31266, 32) * 32) && ltid_in_bounds_31523;
                
                if (thread_active_31525) {
                    // read operands
                    {
                        eta_p_19553 = ((volatile __local float *) red_arr_mem_31516)[sext_i32_i64(local_tid_31266) - sext_i32_i64(skip_threads_31524)];
                    }
                }
                // perform operation
                {
                    bool inactive_31526 = slt64(srem64(sext_i32_i64(local_tid_31266), (int64_t) 128), sext_i32_i64(local_tid_31266) - sext_i32_i64(local_tid_31266 - skip_threads_31524));
                    
                    if (thread_active_31525 && inactive_31526) {
                        eta_p_19553 = eta_p_19554;
                    }
                    if (thread_active_31525) {
                        if (!inactive_31526) {
                            float defunc_0_op_res_19555 = eta_p_19553 + eta_p_19554;
                            
                            eta_p_19553 = defunc_0_op_res_19555;
                        }
                    }
                }
                if (sle32(wave_sizze_31268, skip_threads_31524)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (thread_active_31525) {
                    // write result
                    {
                        ((volatile __local float *) red_arr_mem_31516)[sext_i32_i64(local_tid_31266)] = eta_p_19553;
                        eta_p_19554 = eta_p_19553;
                    }
                }
                if (sle32(wave_sizze_31268, skip_threads_31524)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_31524 *= 2;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // last thread of block 'i' writes its result to offset 'i'
        {
            if ((local_tid_31266 - squot32(local_tid_31266, 32) * 32) == 31 && ltid_in_bounds_31523) {
                ((volatile __local float *) red_arr_mem_31516)[sext_i32_i64(squot32(local_tid_31266, 32))] = eta_p_19553;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
        {
            int32_t skip_threads_31527;
            
            // read input for in-block scan
            {
                if (squot32(local_tid_31266, 32) == 0 && ltid_in_bounds_31523) {
                    eta_p_31521 = ((volatile __local float *) red_arr_mem_31516)[sext_i32_i64(local_tid_31266)];
                    if ((local_tid_31266 - squot32(local_tid_31266, 32) * 32) == 0) {
                        eta_p_31520 = eta_p_31521;
                    }
                }
            }
            // in-block scan (hopefully no barriers needed)
            {
                skip_threads_31527 = 1;
                while (slt32(skip_threads_31527, 32)) {
                    bool thread_active_31528 = sle32(skip_threads_31527, local_tid_31266 - squot32(local_tid_31266, 32) * 32) && (squot32(local_tid_31266, 32) == 0 && ltid_in_bounds_31523);
                    
                    if (thread_active_31528) {
                        // read operands
                        {
                            eta_p_31520 = ((volatile __local float *) red_arr_mem_31516)[sext_i32_i64(local_tid_31266) - sext_i32_i64(skip_threads_31527)];
                        }
                    }
                    // perform operation
                    {
                        bool inactive_31529 = slt64(srem64(sext_i32_i64(local_tid_31266 * 32 + 32 - 1), (int64_t) 128), sext_i32_i64(local_tid_31266 * 32 + 32 - 1) - sext_i32_i64((local_tid_31266 - skip_threads_31527) * 32 + 32 - 1));
                        
                        if (thread_active_31528 && inactive_31529) {
                            eta_p_31520 = eta_p_31521;
                        }
                        if (thread_active_31528) {
                            if (!inactive_31529) {
                                float defunc_0_op_res_31522 = eta_p_31520 + eta_p_31521;
                                
                                eta_p_31520 = defunc_0_op_res_31522;
                            }
                        }
                    }
                    if (sle32(wave_sizze_31268, skip_threads_31527)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    if (thread_active_31528) {
                        // write result
                        {
                            ((volatile __local float *) red_arr_mem_31516)[sext_i32_i64(local_tid_31266)] = eta_p_31520;
                            eta_p_31521 = eta_p_31520;
                        }
                    }
                    if (sle32(wave_sizze_31268, skip_threads_31527)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    skip_threads_31527 *= 2;
                }
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        no_carry_in_31530 = squot32(local_tid_31266, 32) == 0 || !ltid_in_bounds_31523;
        // carry-in for every block except the first
        {
            // read operands
            {
                if (!no_carry_in_31530) {
                    eta_p_19554 = eta_p_19553;
                    eta_p_19553 = ((__local float *) red_arr_mem_31516)[sext_i32_i64(squot32(local_tid_31266, 32)) - (int64_t) 1];
                }
            }
            // perform operation
            {
                bool inactive_31531 = slt64(srem64(sext_i32_i64(local_tid_31266), (int64_t) 128), sext_i32_i64(local_tid_31266) - sext_i32_i64(squot32(local_tid_31266, 32) * 32 - 1));
                
                if (!no_carry_in_31530) {
                    if (inactive_31531) {
                        eta_p_19553 = eta_p_19554;
                    }
                }
                if (!no_carry_in_31530) {
                    if (!inactive_31531) {
                        float defunc_0_op_res_19555 = eta_p_19553 + eta_p_19554;
                        
                        eta_p_19553 = defunc_0_op_res_19555;
                    }
                }
            }
            // write final result
            {
                if (!no_carry_in_31530) {
                    ((__local float *) red_arr_mem_31516)[sext_i32_i64(local_tid_31266)] = eta_p_19553;
                }
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // restore correct values for first block
        {
            if (squot32(local_tid_31266, 32) == 0 && ltid_in_bounds_31523) {
                ((__local float *) red_arr_mem_31516)[sext_i32_i64(local_tid_31266)] = eta_p_19554;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_LOCAL_MEM_FENCE);
        // Save result of reduction.
        {
            int32_t num_chunks_31532 = sdiv_up32(sext_i64_i32(m_13945) * 128 * 128, sext_i64_i32(computed_tblock_sizze_18392));
            
            for (int32_t chunk_i_31533 = 0; chunk_i_31533 < num_chunks_31532; chunk_i_31533++) {
                int32_t i_31534 = chunk_i_31533 * sext_i64_i32(computed_tblock_sizze_18392) + local_tid_31266;
                
                if (slt32(i_31534, sext_i64_i32(m_13945) * 128 * 128)) {
                    ((__local float *) color_30648)[sext_i32_i64(squot32(i_31534, 16384)) * (int64_t) 16384 + sext_i32_i64(squot32(i_31534 - squot32(i_31534, 16384) * 16384, 128)) * (int64_t) 128 + sext_i32_i64(i_31534 - squot32(i_31534, 16384) * 16384 - squot32(i_31534 - squot32(i_31534, 16384) * 16384, 128) * 128)] = ((__local float *) red_arr_mem_31516)[(int64_t) 127 + sext_i32_i64(squot32(i_31534, 16384)) * (int64_t) 2097152 + sext_i32_i64(squot32(i_31534 - squot32(i_31534, 16384) * 16384, 128)) * (int64_t) 16384 + sext_i32_i64(i_31534 - squot32(i_31534, 16384) * 16384 - squot32(i_31534 - squot32(i_31534, 16384) * 16384, 128) * 128) * (int64_t) 128];
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        phys_tid_19567 = sext_i32_i64(local_tid_31266);
        gtid_19564 = sext_i32_i64(sext_i64_i32(ltid_pre_31387));
        gtid_19565 = sext_i32_i64(sext_i64_i32(ltid_pre_31388));
        gtid_19566 = sext_i32_i64(sext_i64_i32(ltid_pre_31389));
        if ((slt64(gtid_19564, m_13945) && slt64(gtid_19565, (int64_t) 128)) && slt64(gtid_19566, (int64_t) 128)) {
            float defunc_0_f_res_19568;
            f16 f32_res_19569;
            
            defunc_0_f_res_19568 = ((__local float *) color_30648)[gtid_19564 * (int64_t) 16384 + gtid_19565 * (int64_t) 128 + gtid_19566];
            f32_res_19569 = fpconv_f32_f16(defunc_0_f_res_19568);
            ((__local uint16_t *) color_30649)[gtid_19564 * (int64_t) 16384 + gtid_19565 * (int64_t) 128 + gtid_19566] = futrts_to_bits16(f32_res_19569);
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        phys_tid_19577 = sext_i32_i64(local_tid_31266);
        gtid_19576 = sext_i32_i64(sext_i64_i32(ltid_pre_31339));
        if (slt64(gtid_19576, d_13944)) {
            bool y_19580;
            bool index_certs_19582;
            
            y_19580 = slt64(gtid_19576, (int64_t) 128);
            if (!y_19580) {
                {
                    if (atomic_cmpxchg_i32_global(global_failure, -1, 0) == -1) {
                        global_failure_args[0] = (int64_t) gtid_19576;
                        global_failure_args[1] = (int64_t) (int64_t) 128;
                        ;
                    }
                    local_failure = 1;
                    goto error_5;
                }
            }
        }
        
      error_5:
        barrier(CLK_LOCAL_MEM_FENCE);
        if (local_failure)
            return;
        barrier(CLK_LOCAL_MEM_FENCE);
        phys_tid_19586 = sext_i32_i64(local_tid_31266);
        gtid_19584 = sext_i32_i64(sext_i64_i32(ltid_pre_31381));
        gtid_19585 = sext_i32_i64(sext_i64_i32(ltid_pre_31382));
        if (slt64(gtid_19584, d_13944) && slt64(gtid_19585, dzlz7bUZLztZRz20Umz20Udz7dUzg_16051)) {
            bool y_19591;
            bool index_certs_19593;
            bool index_certs_19588;
            f16 lifted_lambda_res_19594;
            
            y_19591 = slt64(gtid_19585, dzlz7bUZLztZRz20Umz20UZLZLzpZRz20Udz20UnZRz7dUzg_15976);
            if (!y_19591) {
                {
                    if (atomic_cmpxchg_i32_global(global_failure, -1, 1) == -1) {
                        global_failure_args[0] = (int64_t) gtid_19585;
                        global_failure_args[1] = (int64_t) dzlz7bUZLztZRz20Umz20UZLZLzpZRz20Udz20UnZRz7dUzg_15976;
                        ;
                    }
                    local_failure = 1;
                    goto error_6;
                }
            }
            index_certs_19588 = 0;
            lifted_lambda_res_19594 = futrts_from_bits16(((__local uint16_t *) color_30649)[gtid_19584 + gtid_19585 * (int64_t) 128]);
            ((__local uint16_t *) color_30658)[gtid_19584 * dzlz7bUZLztZRz20Umz20Udz7dUzg_16051 + gtid_19585] = futrts_to_bits16(lifted_lambda_res_19594);
        }
        
      error_6:
        barrier(CLK_LOCAL_MEM_FENCE);
        if (local_failure)
            return;
        barrier(CLK_LOCAL_MEM_FENCE);
        ext_mem_ext_30747 = color_30658;
    } else {
        int64_t phys_tid_19601;
        __local unsigned char *red_arr_mem_31535;
        int64_t gtid_19597;
        int64_t gtid_19598;
        int64_t gtid_19599;
        int64_t gtid_19600;
        int64_t dims_flat_31537;
        float eta_p_19602;
        float eta_p_19603;
        float eta_p_31539;
        float eta_p_31540;
        bool ltid_in_bounds_31542;
        int32_t skip_threads_31543;
        bool no_carry_in_31549;
        int64_t phys_tid_19616;
        int64_t gtid_19613;
        int64_t gtid_19614;
        int64_t gtid_19615;
        
        phys_tid_19601 = sext_i32_i64(local_tid_31266);
        red_arr_mem_31535 = (__local unsigned char *) red_arr_mem_31535_backing_12;
        gtid_19597 = sext_i32_i64(sext_i64_i32(ltid_pre_31417));
        gtid_19598 = sext_i32_i64(sext_i64_i32(ltid_pre_31418));
        gtid_19599 = sext_i32_i64(sext_i64_i32(ltid_pre_31419));
        gtid_19600 = sext_i32_i64(sext_i64_i32(ltid_pre_31420));
        if (((slt64(gtid_19597, m_13945) && slt64(gtid_19598, d_13944)) && slt64(gtid_19599, d_13944)) && slt64(gtid_19600, d_13944)) {
            f16 eta_p_19608;
            int64_t binop_x_27067;
            int64_t binop_y_27068;
            int64_t binop_x_27069;
            int64_t binop_x_27070;
            int64_t new_index_27071;
            int64_t binop_y_27083;
            int64_t new_index_27084;
            f16 eta_p_19609;
            f16 defunc_0_f_res_19610;
            float f16_res_19611;
            
            eta_p_19608 = futrts_from_bits16(((__global uint16_t *) Q_mem_28339)[gtid_19531 * (d_13944 * d_13944) + gtid_19598 * d_13944 + gtid_19600]);
            binop_x_27067 = one_intra_par_min_18858 * gtid_19597;
            binop_y_27068 = d_13944 * gtid_19600;
            binop_x_27069 = binop_x_27067 + binop_y_27068;
            binop_x_27070 = gtid_19599 + binop_x_27069;
            new_index_27071 = squot64(binop_x_27070, d_13944);
            binop_y_27083 = d_13944 * new_index_27071;
            new_index_27084 = binop_x_27070 - binop_y_27083;
            eta_p_19609 = futrts_from_bits16(((__global uint16_t *) K_mem_28340)[new_index_27071 * d_13944 + new_index_27084]);
            defunc_0_f_res_19610 = eta_p_19608 * eta_p_19609;
            f16_res_19611 = fpconv_f16_f32(defunc_0_f_res_19610);
            ((__local float *) red_arr_mem_31535)[gtid_19597 * (d_13944 * d_13944 * d_13944) + gtid_19598 * (d_13944 * d_13944) + gtid_19599 * d_13944 + gtid_19600] = f16_res_19611;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        dims_flat_31537 = m_13945 * d_13944 * d_13944 * d_13944;
        ltid_in_bounds_31542 = slt64(sext_i32_i64(local_tid_31266), m_13945 * d_13944 * d_13944 * d_13944);
        // read input for in-block scan
        {
            if (ltid_in_bounds_31542) {
                eta_p_19603 = ((volatile __local float *) red_arr_mem_31535)[sext_i32_i64(local_tid_31266)];
                if ((local_tid_31266 - squot32(local_tid_31266, 32) * 32) == 0) {
                    eta_p_19602 = eta_p_19603;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_31543 = 1;
            while (slt32(skip_threads_31543, 32)) {
                bool thread_active_31544 = sle32(skip_threads_31543, local_tid_31266 - squot32(local_tid_31266, 32) * 32) && ltid_in_bounds_31542;
                
                if (thread_active_31544) {
                    // read operands
                    {
                        eta_p_19602 = ((volatile __local float *) red_arr_mem_31535)[sext_i32_i64(local_tid_31266) - sext_i32_i64(skip_threads_31543)];
                    }
                }
                // perform operation
                {
                    bool inactive_31545 = slt64(srem64(sext_i32_i64(local_tid_31266), d_13944), sext_i32_i64(local_tid_31266) - sext_i32_i64(local_tid_31266 - skip_threads_31543));
                    
                    if (thread_active_31544 && inactive_31545) {
                        eta_p_19602 = eta_p_19603;
                    }
                    if (thread_active_31544) {
                        if (!inactive_31545) {
                            float defunc_0_op_res_19604 = eta_p_19602 + eta_p_19603;
                            
                            eta_p_19602 = defunc_0_op_res_19604;
                        }
                    }
                }
                if (sle32(wave_sizze_31268, skip_threads_31543)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (thread_active_31544) {
                    // write result
                    {
                        ((volatile __local float *) red_arr_mem_31535)[sext_i32_i64(local_tid_31266)] = eta_p_19602;
                        eta_p_19603 = eta_p_19602;
                    }
                }
                if (sle32(wave_sizze_31268, skip_threads_31543)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_31543 *= 2;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // last thread of block 'i' writes its result to offset 'i'
        {
            if ((local_tid_31266 - squot32(local_tid_31266, 32) * 32) == 31 && ltid_in_bounds_31542) {
                ((volatile __local float *) red_arr_mem_31535)[sext_i32_i64(squot32(local_tid_31266, 32))] = eta_p_19602;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
        {
            int32_t skip_threads_31546;
            
            // read input for in-block scan
            {
                if (squot32(local_tid_31266, 32) == 0 && ltid_in_bounds_31542) {
                    eta_p_31540 = ((volatile __local float *) red_arr_mem_31535)[sext_i32_i64(local_tid_31266)];
                    if ((local_tid_31266 - squot32(local_tid_31266, 32) * 32) == 0) {
                        eta_p_31539 = eta_p_31540;
                    }
                }
            }
            // in-block scan (hopefully no barriers needed)
            {
                skip_threads_31546 = 1;
                while (slt32(skip_threads_31546, 32)) {
                    bool thread_active_31547 = sle32(skip_threads_31546, local_tid_31266 - squot32(local_tid_31266, 32) * 32) && (squot32(local_tid_31266, 32) == 0 && ltid_in_bounds_31542);
                    
                    if (thread_active_31547) {
                        // read operands
                        {
                            eta_p_31539 = ((volatile __local float *) red_arr_mem_31535)[sext_i32_i64(local_tid_31266) - sext_i32_i64(skip_threads_31546)];
                        }
                    }
                    // perform operation
                    {
                        bool inactive_31548 = slt64(srem64(sext_i32_i64(local_tid_31266 * 32 + 32 - 1), d_13944), sext_i32_i64(local_tid_31266 * 32 + 32 - 1) - sext_i32_i64((local_tid_31266 - skip_threads_31546) * 32 + 32 - 1));
                        
                        if (thread_active_31547 && inactive_31548) {
                            eta_p_31539 = eta_p_31540;
                        }
                        if (thread_active_31547) {
                            if (!inactive_31548) {
                                float defunc_0_op_res_31541 = eta_p_31539 + eta_p_31540;
                                
                                eta_p_31539 = defunc_0_op_res_31541;
                            }
                        }
                    }
                    if (sle32(wave_sizze_31268, skip_threads_31546)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    if (thread_active_31547) {
                        // write result
                        {
                            ((volatile __local float *) red_arr_mem_31535)[sext_i32_i64(local_tid_31266)] = eta_p_31539;
                            eta_p_31540 = eta_p_31539;
                        }
                    }
                    if (sle32(wave_sizze_31268, skip_threads_31546)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    skip_threads_31546 *= 2;
                }
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        no_carry_in_31549 = squot32(local_tid_31266, 32) == 0 || !ltid_in_bounds_31542;
        // carry-in for every block except the first
        {
            // read operands
            {
                if (!no_carry_in_31549) {
                    eta_p_19603 = eta_p_19602;
                    eta_p_19602 = ((__local float *) red_arr_mem_31535)[sext_i32_i64(squot32(local_tid_31266, 32)) - (int64_t) 1];
                }
            }
            // perform operation
            {
                bool inactive_31550 = slt64(srem64(sext_i32_i64(local_tid_31266), d_13944), sext_i32_i64(local_tid_31266) - sext_i32_i64(squot32(local_tid_31266, 32) * 32 - 1));
                
                if (!no_carry_in_31549) {
                    if (inactive_31550) {
                        eta_p_19602 = eta_p_19603;
                    }
                }
                if (!no_carry_in_31549) {
                    if (!inactive_31550) {
                        float defunc_0_op_res_19604 = eta_p_19602 + eta_p_19603;
                        
                        eta_p_19602 = defunc_0_op_res_19604;
                    }
                }
            }
            // write final result
            {
                if (!no_carry_in_31549) {
                    ((__local float *) red_arr_mem_31535)[sext_i32_i64(local_tid_31266)] = eta_p_19602;
                }
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // restore correct values for first block
        {
            if (squot32(local_tid_31266, 32) == 0 && ltid_in_bounds_31542) {
                ((__local float *) red_arr_mem_31535)[sext_i32_i64(local_tid_31266)] = eta_p_19603;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_LOCAL_MEM_FENCE);
        // Save result of reduction.
        {
            int32_t num_chunks_31551 = sdiv_up32(sext_i64_i32(m_13945) * sext_i64_i32(d_13944) * sext_i64_i32(d_13944), sext_i64_i32(computed_tblock_sizze_18392));
            
            for (int32_t chunk_i_31552 = 0; chunk_i_31552 < num_chunks_31551; chunk_i_31552++) {
                int32_t i_31553 = chunk_i_31552 * sext_i64_i32(computed_tblock_sizze_18392) + local_tid_31266;
                
                if (slt32(i_31553, sext_i64_i32(m_13945) * sext_i64_i32(d_13944) * sext_i64_i32(d_13944))) {
                    ((__local float *) color_30648)[sext_i32_i64(squot32(i_31553, sext_i64_i32(d_13944) * sext_i64_i32(d_13944))) * (d_13944 * d_13944) + sext_i32_i64(squot32(i_31553 - squot32(i_31553, sext_i64_i32(d_13944) * sext_i64_i32(d_13944)) * (sext_i64_i32(d_13944) * sext_i64_i32(d_13944)), sext_i64_i32(d_13944))) * d_13944 + sext_i32_i64(i_31553 - squot32(i_31553, sext_i64_i32(d_13944) * sext_i64_i32(d_13944)) * (sext_i64_i32(d_13944) * sext_i64_i32(d_13944)) - squot32(i_31553 - squot32(i_31553, sext_i64_i32(d_13944) * sext_i64_i32(d_13944)) * (sext_i64_i32(d_13944) * sext_i64_i32(d_13944)), sext_i64_i32(d_13944)) * sext_i64_i32(d_13944))] = ((__local float *) red_arr_mem_31535)[d_13944 - (int64_t) 1 + sext_i32_i64(squot32(i_31553, sext_i64_i32(d_13944) * sext_i64_i32(d_13944))) * (d_13944 * d_13944 * d_13944) + sext_i32_i64(squot32(i_31553 - squot32(i_31553, sext_i64_i32(d_13944) * sext_i64_i32(d_13944)) * (sext_i64_i32(d_13944) * sext_i64_i32(d_13944)), sext_i64_i32(d_13944))) * (d_13944 * d_13944) + sext_i32_i64(i_31553 - squot32(i_31553, sext_i64_i32(d_13944) * sext_i64_i32(d_13944)) * (sext_i64_i32(d_13944) * sext_i64_i32(d_13944)) - squot32(i_31553 - squot32(i_31553, sext_i64_i32(d_13944) * sext_i64_i32(d_13944)) * (sext_i64_i32(d_13944) * sext_i64_i32(d_13944)), sext_i64_i32(d_13944)) * sext_i64_i32(d_13944)) * d_13944];
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        phys_tid_19616 = sext_i32_i64(local_tid_31266);
        gtid_19613 = sext_i32_i64(sext_i64_i32(ltid_pre_31408));
        gtid_19614 = sext_i32_i64(sext_i64_i32(ltid_pre_31409));
        gtid_19615 = sext_i32_i64(sext_i64_i32(ltid_pre_31410));
        if ((slt64(gtid_19613, m_13945) && slt64(gtid_19614, d_13944)) && slt64(gtid_19615, d_13944)) {
            float defunc_0_f_res_19617;
            f16 f32_res_19618;
            
            defunc_0_f_res_19617 = ((__local float *) color_30648)[gtid_19613 * (d_13944 * d_13944) + gtid_19614 * d_13944 + gtid_19615];
            f32_res_19618 = fpconv_f32_f16(defunc_0_f_res_19617);
            ((__local uint16_t *) color_30659)[gtid_19613 * (d_13944 * d_13944) + gtid_19614 * d_13944 + gtid_19615] = futrts_to_bits16(f32_res_19618);
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        ext_mem_ext_30747 = color_30659;
    }
    for (int32_t chunk_i_31556 = 0; chunk_i_31556 < num_chunks_31248; chunk_i_31556++) {
        int32_t i_31557;
        int64_t slice_31558;
        int64_t rep_i_31555;
        int64_t remnant_31559;
        
        i_31557 = chunk_i_31556 * sext_i64_i32(computed_tblock_sizze_18392) + local_tid_31266;
        slice_31558 = d_13944;
        rep_i_31555 = sext_i32_i64(i_31557);
        remnant_31559 = sext_i32_i64(i_31557) - rep_i_31555;
        if (sle64((int64_t) 0, rep_i_31555) && slt64(rep_i_31555, d_13944)) {
            ((__local uint16_t *) color_30649)[rep_i_31555] = futrts_to_bits16((f16) -INFINITY);
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    for (int32_t chunk_i_31562 = 0; chunk_i_31562 < num_chunks_31248; chunk_i_31562++) {
        int32_t i_31563;
        int64_t slice_31564;
        int64_t rep_i_31561;
        int64_t remnant_31565;
        
        i_31563 = chunk_i_31562 * sext_i64_i32(computed_tblock_sizze_18392) + local_tid_31266;
        slice_31564 = d_13944;
        rep_i_31561 = sext_i32_i64(i_31563);
        remnant_31565 = sext_i32_i64(i_31563) - rep_i_31561;
        if (sle64((int64_t) 0, rep_i_31561) && slt64(rep_i_31561, d_13944)) {
            ((__local uint16_t *) color_30648)[rep_i_31561] = futrts_to_bits16((f16) 0.0F);
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    barrier(CLK_LOCAL_MEM_FENCE);
    mem_param_29245 = color_30649;
    mem_param_out_30452 = color_30651;
    mem_param_29248 = color_30648;
    mem_param_out_30461 = color_30650;
    mem_param_ext_30751 = color_30649;
    mem_param_ext_30754 = color_30648;
    for (int64_t i_19628 = 0; i_19628 < q_16078; i_19628++) {
        int64_t copy2shr_arg0_19631;
        int32_t num_chunks_31574;
        __local unsigned char *ext_mem_ext_30757;
        int64_t phys_tid_19644;
        __local unsigned char *red_arr_mem_31580;
        int64_t gtid_19642;
        int64_t gtid_19643;
        int64_t dims_flat_31583;
        f16 eta_p_19645;
        f16 eta_p_19646;
        f16 eta_p_31585;
        f16 eta_p_31586;
        bool ltid_in_bounds_31588;
        int32_t skip_threads_31589;
        bool no_carry_in_31595;
        int64_t phys_tid_19660;
        __local unsigned char *red_arr_mem_31600;
        int64_t gtid_19658;
        int64_t gtid_19659;
        int64_t dims_flat_31603;
        f16 eta_p_19661;
        f16 eta_p_19662;
        f16 eta_p_31605;
        f16 eta_p_31606;
        bool ltid_in_bounds_31608;
        int32_t skip_threads_31609;
        bool no_carry_in_31615;
        int64_t phys_tid_19679;
        int64_t gtid_19678;
        __local unsigned char *mem_param_tmp_31566;
        __local unsigned char *mem_param_out_tmp_31567;
        __local unsigned char *mem_param_tmp_31568;
        __local unsigned char *mem_param_out_tmp_31569;
        __local unsigned char *mem_param_ext_tmp_31572;
        __local unsigned char *mem_param_ext_tmp_31573;
        
        copy2shr_arg0_19631 = mul64((int64_t) 1024, i_19628);
        num_chunks_31574 = sdiv_up32(sext_i64_i32(d_13944) * 1024, sext_i64_i32(computed_tblock_sizze_18392));
        for (int32_t chunk_i_31575 = 0; chunk_i_31575 < num_chunks_31574; chunk_i_31575++) {
            int32_t i_31576 = chunk_i_31575 * sext_i64_i32(computed_tblock_sizze_18392) + local_tid_31266;
            
            if (slt32(i_31576, sext_i64_i32(d_13944) * 1024)) {
                ((__local uint16_t *) color_30652)[sext_i32_i64(squot32(i_31576, 1024)) * (int64_t) 1024 + sext_i32_i64(i_31576 - squot32(i_31576, 1024) * 1024)] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) ext_mem_ext_30747)[(int64_t) 0 + ext_30750 * copy2shr_arg0_19631 + sext_i32_i64(squot32(i_31576, 1024)) * ext_30749 + sext_i32_i64(i_31576 - squot32(i_31576, 1024) * 1024) * ext_30750]));
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_LOCAL_MEM_FENCE);
        if (opaque_res_16082) {
            int32_t num_chunks_31577 = sdiv_up32(sext_i64_i32(d_13944) * 1024, sext_i64_i32(computed_tblock_sizze_18392));
            
            for (int32_t chunk_i_31578 = 0; chunk_i_31578 < num_chunks_31577; chunk_i_31578++) {
                int32_t i_31579 = chunk_i_31578 * sext_i64_i32(computed_tblock_sizze_18392) + local_tid_31266;
                
                if (slt32(i_31579, sext_i64_i32(d_13944) * 1024)) {
                    ((__local uint16_t *) color_30654)[sext_i32_i64(squot32(i_31579, 1024)) * (int64_t) 1024 + sext_i32_i64(i_31579 - squot32(i_31579, 1024) * 1024)] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) ext_mem_ext_30747)[(int64_t) 0 + ext_30750 * copy2shr_arg0_19631 + sext_i32_i64(squot32(i_31579, 1024)) * ext_30749 + sext_i32_i64(i_31579 - squot32(i_31579, 1024) * 1024) * ext_30750]));
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            ext_mem_ext_30757 = color_30654;
        } else {
            int64_t phys_tid_19638;
            int64_t gtid_19637;
            
            phys_tid_19638 = sext_i32_i64(local_tid_31266);
            gtid_19637 = sext_i32_i64(sext_i64_i32(ltid_pre_31339));
            if (slt64(gtid_19637, d_13944)) {
                ((__local uint16_t *) color_30652)[gtid_19637 * (int64_t) 1024] = futrts_to_bits16((f16) 0.0F);
                for (int64_t i_0 = 0; i_0 < (int64_t) 1024; i_0++) {
                    ((__local uint16_t *) color_30655)[gtid_19637 * (int64_t) 1024 + i_0] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) color_30652)[gtid_19637 * (int64_t) 1024 + i_0]));
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            ext_mem_ext_30757 = color_30655;
        }
        phys_tid_19644 = sext_i32_i64(local_tid_31266);
        red_arr_mem_31580 = (__local unsigned char *) red_arr_mem_31580_backing_13;
        gtid_19642 = sext_i32_i64(sext_i64_i32(ltid_pre_31342));
        gtid_19643 = sext_i32_i64(sext_i64_i32(ltid_pre_31343));
        if (slt64(gtid_19642, d_13944) && slt64(gtid_19643, (int64_t) 32)) {
            f16 defunc_0_f_res_19650;
            f16 r_19652 = (f16) -INFINITY;
            
            for (int64_t i_19651 = 0; i_19651 < (int64_t) 32; i_19651++) {
                int64_t zp_lhs_19653;
                int64_t f_arg0_19654;
                f16 f_arg0_19655;
                f16 max_res_19656;
                f16 r_tmp_31582;
                
                zp_lhs_19653 = mul64((int64_t) 32, i_19651);
                f_arg0_19654 = add64(gtid_19643, zp_lhs_19653);
                f_arg0_19655 = futrts_from_bits16(((__local uint16_t *) ext_mem_ext_30757)[gtid_19642 * (int64_t) 1024 + f_arg0_19654]);
                max_res_19656 = fmax16(r_19652, f_arg0_19655);
                r_tmp_31582 = max_res_19656;
                r_19652 = r_tmp_31582;
            }
            defunc_0_f_res_19650 = r_19652;
            ((__local uint16_t *) red_arr_mem_31580)[gtid_19642 * (int64_t) 32 + gtid_19643] = futrts_to_bits16(defunc_0_f_res_19650);
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        dims_flat_31583 = d_13944 * (int64_t) 32;
        ltid_in_bounds_31588 = slt64(sext_i32_i64(local_tid_31266), d_13944 * (int64_t) 32);
        // read input for in-block scan
        {
            if (ltid_in_bounds_31588) {
                eta_p_19646 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_31580)[sext_i32_i64(local_tid_31266)]);
                if ((local_tid_31266 - squot32(local_tid_31266, 32) * 32) == 0) {
                    eta_p_19645 = eta_p_19646;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_31589 = 1;
            while (slt32(skip_threads_31589, 32)) {
                bool thread_active_31590 = sle32(skip_threads_31589, local_tid_31266 - squot32(local_tid_31266, 32) * 32) && ltid_in_bounds_31588;
                
                if (thread_active_31590) {
                    // read operands
                    {
                        eta_p_19645 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_31580)[sext_i32_i64(local_tid_31266) - sext_i32_i64(skip_threads_31589)]);
                    }
                }
                // perform operation
                {
                    bool inactive_31591 = slt64(srem64(sext_i32_i64(local_tid_31266), (int64_t) 32), sext_i32_i64(local_tid_31266) - sext_i32_i64(local_tid_31266 - skip_threads_31589));
                    
                    if (thread_active_31590 && inactive_31591) {
                        eta_p_19645 = eta_p_19646;
                    }
                    if (thread_active_31590) {
                        if (!inactive_31591) {
                            f16 max_res_19647 = fmax16(eta_p_19645, eta_p_19646);
                            
                            eta_p_19645 = max_res_19647;
                        }
                    }
                }
                if (sle32(wave_sizze_31268, skip_threads_31589)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (thread_active_31590) {
                    // write result
                    {
                        ((volatile __local uint16_t *) red_arr_mem_31580)[sext_i32_i64(local_tid_31266)] = futrts_to_bits16(eta_p_19645);
                        eta_p_19646 = eta_p_19645;
                    }
                }
                if (sle32(wave_sizze_31268, skip_threads_31589)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_31589 *= 2;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // last thread of block 'i' writes its result to offset 'i'
        {
            if ((local_tid_31266 - squot32(local_tid_31266, 32) * 32) == 31 && ltid_in_bounds_31588) {
                ((volatile __local uint16_t *) red_arr_mem_31580)[sext_i32_i64(squot32(local_tid_31266, 32))] = futrts_to_bits16(eta_p_19645);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
        {
            int32_t skip_threads_31592;
            
            // read input for in-block scan
            {
                if (squot32(local_tid_31266, 32) == 0 && ltid_in_bounds_31588) {
                    eta_p_31586 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_31580)[sext_i32_i64(local_tid_31266)]);
                    if ((local_tid_31266 - squot32(local_tid_31266, 32) * 32) == 0) {
                        eta_p_31585 = eta_p_31586;
                    }
                }
            }
            // in-block scan (hopefully no barriers needed)
            {
                skip_threads_31592 = 1;
                while (slt32(skip_threads_31592, 32)) {
                    bool thread_active_31593 = sle32(skip_threads_31592, local_tid_31266 - squot32(local_tid_31266, 32) * 32) && (squot32(local_tid_31266, 32) == 0 && ltid_in_bounds_31588);
                    
                    if (thread_active_31593) {
                        // read operands
                        {
                            eta_p_31585 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_31580)[sext_i32_i64(local_tid_31266) - sext_i32_i64(skip_threads_31592)]);
                        }
                    }
                    // perform operation
                    {
                        bool inactive_31594 = slt64(srem64(sext_i32_i64(local_tid_31266 * 32 + 32 - 1), (int64_t) 32), sext_i32_i64(local_tid_31266 * 32 + 32 - 1) - sext_i32_i64((local_tid_31266 - skip_threads_31592) * 32 + 32 - 1));
                        
                        if (thread_active_31593 && inactive_31594) {
                            eta_p_31585 = eta_p_31586;
                        }
                        if (thread_active_31593) {
                            if (!inactive_31594) {
                                f16 max_res_31587 = fmax16(eta_p_31585, eta_p_31586);
                                
                                eta_p_31585 = max_res_31587;
                            }
                        }
                    }
                    if (sle32(wave_sizze_31268, skip_threads_31592)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    if (thread_active_31593) {
                        // write result
                        {
                            ((volatile __local uint16_t *) red_arr_mem_31580)[sext_i32_i64(local_tid_31266)] = futrts_to_bits16(eta_p_31585);
                            eta_p_31586 = eta_p_31585;
                        }
                    }
                    if (sle32(wave_sizze_31268, skip_threads_31592)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    skip_threads_31592 *= 2;
                }
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        no_carry_in_31595 = squot32(local_tid_31266, 32) == 0 || !ltid_in_bounds_31588;
        // carry-in for every block except the first
        {
            // read operands
            {
                if (!no_carry_in_31595) {
                    eta_p_19646 = eta_p_19645;
                    eta_p_19645 = futrts_from_bits16(((__local uint16_t *) red_arr_mem_31580)[sext_i32_i64(squot32(local_tid_31266, 32)) - (int64_t) 1]);
                }
            }
            // perform operation
            {
                bool inactive_31596 = slt64(srem64(sext_i32_i64(local_tid_31266), (int64_t) 32), sext_i32_i64(local_tid_31266) - sext_i32_i64(squot32(local_tid_31266, 32) * 32 - 1));
                
                if (!no_carry_in_31595) {
                    if (inactive_31596) {
                        eta_p_19645 = eta_p_19646;
                    }
                }
                if (!no_carry_in_31595) {
                    if (!inactive_31596) {
                        f16 max_res_19647 = fmax16(eta_p_19645, eta_p_19646);
                        
                        eta_p_19645 = max_res_19647;
                    }
                }
            }
            // write final result
            {
                if (!no_carry_in_31595) {
                    ((__local uint16_t *) red_arr_mem_31580)[sext_i32_i64(local_tid_31266)] = futrts_to_bits16(eta_p_19645);
                }
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // restore correct values for first block
        {
            if (squot32(local_tid_31266, 32) == 0 && ltid_in_bounds_31588) {
                ((__local uint16_t *) red_arr_mem_31580)[sext_i32_i64(local_tid_31266)] = futrts_to_bits16(eta_p_19646);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_LOCAL_MEM_FENCE);
        // Save result of reduction.
        {
            int32_t num_chunks_31597 = sdiv_up32(sext_i64_i32(d_13944), sext_i64_i32(computed_tblock_sizze_18392));
            
            for (int32_t chunk_i_31598 = 0; chunk_i_31598 < num_chunks_31597; chunk_i_31598++) {
                int32_t i_31599 = chunk_i_31598 * sext_i64_i32(computed_tblock_sizze_18392) + local_tid_31266;
                
                if (slt32(i_31599, sext_i64_i32(d_13944))) {
                    ((__local uint16_t *) color_30653)[sext_i32_i64(i_31599)] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) red_arr_mem_31580)[(int64_t) 31 + sext_i32_i64(i_31599) * (int64_t) 32]));
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        phys_tid_19660 = sext_i32_i64(local_tid_31266);
        red_arr_mem_31600 = (__local unsigned char *) red_arr_mem_31600_backing_14;
        gtid_19658 = sext_i32_i64(sext_i64_i32(ltid_pre_31342));
        gtid_19659 = sext_i32_i64(sext_i64_i32(ltid_pre_31343));
        if (slt64(gtid_19658, d_13944) && slt64(gtid_19659, (int64_t) 32)) {
            f16 defunc_0_reduce_comm_res_19665;
            f16 defunc_0_f_res_19667;
            f16 r_19669;
            
            defunc_0_reduce_comm_res_19665 = futrts_from_bits16(((__local uint16_t *) color_30653)[gtid_19658]);
            r_19669 = (f16) 0.0F;
            for (int64_t i_19668 = 0; i_19668 < (int64_t) 32; i_19668++) {
                int64_t zp_lhs_19670;
                int64_t f_arg0_19671;
                f16 f_arg0_19672;
                f16 real_exp_arg0_19673;
                f16 exp_res_19674;
                f16 defunc_0_bop_res_19675;
                f16 r_tmp_31602;
                
                zp_lhs_19670 = mul64((int64_t) 32, i_19668);
                f_arg0_19671 = add64(gtid_19659, zp_lhs_19670);
                f_arg0_19672 = futrts_from_bits16(((__local uint16_t *) ext_mem_ext_30757)[gtid_19658 * (int64_t) 1024 + f_arg0_19671]);
                real_exp_arg0_19673 = f_arg0_19672 - defunc_0_reduce_comm_res_19665;
                exp_res_19674 = futrts_exp16(real_exp_arg0_19673);
                defunc_0_bop_res_19675 = r_19669 + exp_res_19674;
                r_tmp_31602 = defunc_0_bop_res_19675;
                r_19669 = r_tmp_31602;
            }
            defunc_0_f_res_19667 = r_19669;
            ((__local uint16_t *) red_arr_mem_31600)[gtid_19658 * (int64_t) 32 + gtid_19659] = futrts_to_bits16(defunc_0_f_res_19667);
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        dims_flat_31603 = d_13944 * (int64_t) 32;
        ltid_in_bounds_31608 = slt64(sext_i32_i64(local_tid_31266), d_13944 * (int64_t) 32);
        // read input for in-block scan
        {
            if (ltid_in_bounds_31608) {
                eta_p_19662 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_31600)[sext_i32_i64(local_tid_31266)]);
                if ((local_tid_31266 - squot32(local_tid_31266, 32) * 32) == 0) {
                    eta_p_19661 = eta_p_19662;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_31609 = 1;
            while (slt32(skip_threads_31609, 32)) {
                bool thread_active_31610 = sle32(skip_threads_31609, local_tid_31266 - squot32(local_tid_31266, 32) * 32) && ltid_in_bounds_31608;
                
                if (thread_active_31610) {
                    // read operands
                    {
                        eta_p_19661 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_31600)[sext_i32_i64(local_tid_31266) - sext_i32_i64(skip_threads_31609)]);
                    }
                }
                // perform operation
                {
                    bool inactive_31611 = slt64(srem64(sext_i32_i64(local_tid_31266), (int64_t) 32), sext_i32_i64(local_tid_31266) - sext_i32_i64(local_tid_31266 - skip_threads_31609));
                    
                    if (thread_active_31610 && inactive_31611) {
                        eta_p_19661 = eta_p_19662;
                    }
                    if (thread_active_31610) {
                        if (!inactive_31611) {
                            f16 defunc_0_op_res_19663 = eta_p_19661 + eta_p_19662;
                            
                            eta_p_19661 = defunc_0_op_res_19663;
                        }
                    }
                }
                if (sle32(wave_sizze_31268, skip_threads_31609)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (thread_active_31610) {
                    // write result
                    {
                        ((volatile __local uint16_t *) red_arr_mem_31600)[sext_i32_i64(local_tid_31266)] = futrts_to_bits16(eta_p_19661);
                        eta_p_19662 = eta_p_19661;
                    }
                }
                if (sle32(wave_sizze_31268, skip_threads_31609)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_31609 *= 2;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // last thread of block 'i' writes its result to offset 'i'
        {
            if ((local_tid_31266 - squot32(local_tid_31266, 32) * 32) == 31 && ltid_in_bounds_31608) {
                ((volatile __local uint16_t *) red_arr_mem_31600)[sext_i32_i64(squot32(local_tid_31266, 32))] = futrts_to_bits16(eta_p_19661);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
        {
            int32_t skip_threads_31612;
            
            // read input for in-block scan
            {
                if (squot32(local_tid_31266, 32) == 0 && ltid_in_bounds_31608) {
                    eta_p_31606 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_31600)[sext_i32_i64(local_tid_31266)]);
                    if ((local_tid_31266 - squot32(local_tid_31266, 32) * 32) == 0) {
                        eta_p_31605 = eta_p_31606;
                    }
                }
            }
            // in-block scan (hopefully no barriers needed)
            {
                skip_threads_31612 = 1;
                while (slt32(skip_threads_31612, 32)) {
                    bool thread_active_31613 = sle32(skip_threads_31612, local_tid_31266 - squot32(local_tid_31266, 32) * 32) && (squot32(local_tid_31266, 32) == 0 && ltid_in_bounds_31608);
                    
                    if (thread_active_31613) {
                        // read operands
                        {
                            eta_p_31605 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_31600)[sext_i32_i64(local_tid_31266) - sext_i32_i64(skip_threads_31612)]);
                        }
                    }
                    // perform operation
                    {
                        bool inactive_31614 = slt64(srem64(sext_i32_i64(local_tid_31266 * 32 + 32 - 1), (int64_t) 32), sext_i32_i64(local_tid_31266 * 32 + 32 - 1) - sext_i32_i64((local_tid_31266 - skip_threads_31612) * 32 + 32 - 1));
                        
                        if (thread_active_31613 && inactive_31614) {
                            eta_p_31605 = eta_p_31606;
                        }
                        if (thread_active_31613) {
                            if (!inactive_31614) {
                                f16 defunc_0_op_res_31607 = eta_p_31605 + eta_p_31606;
                                
                                eta_p_31605 = defunc_0_op_res_31607;
                            }
                        }
                    }
                    if (sle32(wave_sizze_31268, skip_threads_31612)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    if (thread_active_31613) {
                        // write result
                        {
                            ((volatile __local uint16_t *) red_arr_mem_31600)[sext_i32_i64(local_tid_31266)] = futrts_to_bits16(eta_p_31605);
                            eta_p_31606 = eta_p_31605;
                        }
                    }
                    if (sle32(wave_sizze_31268, skip_threads_31612)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    skip_threads_31612 *= 2;
                }
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        no_carry_in_31615 = squot32(local_tid_31266, 32) == 0 || !ltid_in_bounds_31608;
        // carry-in for every block except the first
        {
            // read operands
            {
                if (!no_carry_in_31615) {
                    eta_p_19662 = eta_p_19661;
                    eta_p_19661 = futrts_from_bits16(((__local uint16_t *) red_arr_mem_31600)[sext_i32_i64(squot32(local_tid_31266, 32)) - (int64_t) 1]);
                }
            }
            // perform operation
            {
                bool inactive_31616 = slt64(srem64(sext_i32_i64(local_tid_31266), (int64_t) 32), sext_i32_i64(local_tid_31266) - sext_i32_i64(squot32(local_tid_31266, 32) * 32 - 1));
                
                if (!no_carry_in_31615) {
                    if (inactive_31616) {
                        eta_p_19661 = eta_p_19662;
                    }
                }
                if (!no_carry_in_31615) {
                    if (!inactive_31616) {
                        f16 defunc_0_op_res_19663 = eta_p_19661 + eta_p_19662;
                        
                        eta_p_19661 = defunc_0_op_res_19663;
                    }
                }
            }
            // write final result
            {
                if (!no_carry_in_31615) {
                    ((__local uint16_t *) red_arr_mem_31600)[sext_i32_i64(local_tid_31266)] = futrts_to_bits16(eta_p_19661);
                }
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // restore correct values for first block
        {
            if (squot32(local_tid_31266, 32) == 0 && ltid_in_bounds_31608) {
                ((__local uint16_t *) red_arr_mem_31600)[sext_i32_i64(local_tid_31266)] = futrts_to_bits16(eta_p_19662);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_LOCAL_MEM_FENCE);
        // Save result of reduction.
        {
            int32_t num_chunks_31617 = sdiv_up32(sext_i64_i32(d_13944), sext_i64_i32(computed_tblock_sizze_18392));
            
            for (int32_t chunk_i_31618 = 0; chunk_i_31618 < num_chunks_31617; chunk_i_31618++) {
                int32_t i_31619 = chunk_i_31618 * sext_i64_i32(computed_tblock_sizze_18392) + local_tid_31266;
                
                if (slt32(i_31619, sext_i64_i32(d_13944))) {
                    ((__local uint16_t *) color_30652)[sext_i32_i64(i_31619)] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) red_arr_mem_31600)[(int64_t) 31 + sext_i32_i64(i_31619) * (int64_t) 32]));
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        phys_tid_19679 = sext_i32_i64(local_tid_31266);
        gtid_19678 = sext_i32_i64(sext_i64_i32(ltid_pre_31339));
        if (slt64(gtid_19678, d_13944)) {
            f16 mi_old_19680;
            f16 li_old_19681;
            f16 defunc_0_reduce_comm_res_19682;
            f16 defunc_0_reduce_comm_res_19683;
            f16 max_res_19684;
            f16 real_exp_arg0_19685;
            f16 exp_res_19686;
            f16 exp_arg0_19687;
            f16 exp_res_19688;
            f16 eli_19689;
            f16 zp_rhs_19690;
            f16 li_new_19691;
            
            mi_old_19680 = futrts_from_bits16(((__local uint16_t *) mem_param_ext_30751)[gtid_19678]);
            li_old_19681 = futrts_from_bits16(((__local uint16_t *) mem_param_ext_30754)[gtid_19678]);
            defunc_0_reduce_comm_res_19682 = futrts_from_bits16(((__local uint16_t *) color_30653)[gtid_19678]);
            defunc_0_reduce_comm_res_19683 = futrts_from_bits16(((__local uint16_t *) color_30652)[gtid_19678]);
            max_res_19684 = fmax16(mi_old_19680, defunc_0_reduce_comm_res_19682);
            real_exp_arg0_19685 = defunc_0_reduce_comm_res_19682 - max_res_19684;
            exp_res_19686 = futrts_exp16(real_exp_arg0_19685);
            exp_arg0_19687 = mi_old_19680 - max_res_19684;
            exp_res_19688 = futrts_exp16(exp_arg0_19687);
            eli_19689 = li_old_19681 * exp_res_19688;
            zp_rhs_19690 = defunc_0_reduce_comm_res_19683 * exp_res_19686;
            li_new_19691 = eli_19689 + zp_rhs_19690;
            ((__local uint16_t *) mem_param_out_30452)[gtid_19678] = futrts_to_bits16(max_res_19684);
            ((__local uint16_t *) mem_param_out_30461)[gtid_19678] = futrts_to_bits16(li_new_19691);
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        mem_param_tmp_31566 = mem_param_out_30452;
        mem_param_out_tmp_31567 = mem_param_29245;
        mem_param_tmp_31568 = mem_param_out_30461;
        mem_param_out_tmp_31569 = mem_param_29248;
        mem_param_ext_tmp_31572 = mem_param_out_30452;
        mem_param_ext_tmp_31573 = mem_param_out_30461;
        mem_param_29245 = mem_param_tmp_31566;
        mem_param_out_30452 = mem_param_out_tmp_31567;
        mem_param_29248 = mem_param_tmp_31568;
        mem_param_out_30461 = mem_param_out_tmp_31569;
        mem_param_ext_30751 = mem_param_ext_tmp_31572;
        mem_param_ext_30754 = mem_param_ext_tmp_31573;
    }
    ext_mem_29272 = mem_param_29245;
    ext_mem_unused_30451 = mem_param_out_30452;
    ext_mem_29271 = mem_param_29248;
    ext_mem_unused_30460 = mem_param_out_30461;
    ext_mem_ext_30761 = mem_param_ext_30751;
    ext_mem_ext_30764 = mem_param_ext_30754;
    phys_tid_19697 = sext_i32_i64(local_tid_31266);
    gtid_19695 = sext_i32_i64(sext_i64_i32(ltid_pre_31369));
    gtid_19696 = sext_i32_i64(sext_i64_i32(ltid_pre_31370));
    if (slt64(gtid_19695, d_13944) && slt64(gtid_19696, dzlz7bUZLztZRz20Umz20Udz7dUzg_13946)) {
        f16 eta_p_19698;
        f16 eta_p_19699;
        f16 eta_p_19700;
        f16 real_exp_arg0_19701;
        f16 exp_res_19702;
        f16 lifted_lambda_res_19703;
        
        eta_p_19698 = futrts_from_bits16(((__local uint16_t *) ext_mem_ext_30761)[gtid_19695]);
        eta_p_19699 = futrts_from_bits16(((__local uint16_t *) ext_mem_ext_30764)[gtid_19695]);
        eta_p_19700 = futrts_from_bits16(((__local uint16_t *) ext_mem_ext_30747)[gtid_19695 * ext_30749 + gtid_19696 * ext_30750]);
        real_exp_arg0_19701 = eta_p_19700 - eta_p_19698;
        exp_res_19702 = futrts_exp16(real_exp_arg0_19701);
        lifted_lambda_res_19703 = exp_res_19702 / eta_p_19699;
        ((__local uint16_t *) color_30657)[gtid_19695 * dzlz7bUZLztZRz20Umz20Udz7dUzg_13946 + gtid_19696] = futrts_to_bits16(lifted_lambda_res_19703);
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    binop_x_30798 = computed_tblock_sizze_18392 * phys_tblock_id_19532;
    binop_x_30806 = computed_tblock_sizze_18392 * phys_tblock_id_19532;
    binop_x_30820 = computed_tblock_sizze_18392 * phys_tblock_id_19532;
    binop_x_30828 = computed_tblock_sizze_18392 * phys_tblock_id_19532;
    binop_x_30837 = computed_tblock_sizze_18392 * phys_tblock_id_19532;
    barrier(CLK_LOCAL_MEM_FENCE);
    if (cond_16148) {
        int64_t phys_tid_19710;
        __local unsigned char *red_arr_mem_31620;
        int64_t gtid_19707;
        int64_t gtid_19708;
        int64_t gtid_19709;
        int64_t dims_flat_31622;
        float eta_p_19711;
        float eta_p_19712;
        float eta_p_31624;
        float eta_p_31625;
        bool ltid_in_bounds_31627;
        int32_t skip_threads_31628;
        bool no_carry_in_31634;
        int64_t phys_tid_19723;
        int64_t gtid_19721;
        int64_t gtid_19722;
        
        phys_tid_19710 = sext_i32_i64(local_tid_31266);
        red_arr_mem_31620 = (__local unsigned char *) red_arr_mem_31620_backing_15;
        gtid_19707 = sext_i32_i64(sext_i64_i32(ltid_pre_31360));
        gtid_19708 = sext_i32_i64(sext_i64_i32(ltid_pre_31361));
        gtid_19709 = sext_i32_i64(sext_i64_i32(ltid_pre_31362));
        if ((slt64(gtid_19707, d_13944) && slt64(gtid_19708, d_13944)) && slt64(gtid_19709, dzlz7bUZLztZRz20Umz20Udz7dUzg_13946)) {
            f16 eta_p_19716;
            f16 eta_p_19717;
            f16 defunc_0_f_res_19718;
            float f16_res_19719;
            
            eta_p_19716 = futrts_from_bits16(((__local uint16_t *) color_30657)[gtid_19707 * dzlz7bUZLztZRz20Umz20Udz7dUzg_13946 + gtid_19709]);
            eta_p_19717 = futrts_from_bits16(((__global uint16_t *) V_mem_28341)[gtid_19709 * d_13944 + gtid_19708]);
            defunc_0_f_res_19718 = eta_p_19716 * eta_p_19717;
            f16_res_19719 = fpconv_f16_f32(defunc_0_f_res_19718);
            ((__local float *) red_arr_mem_31620)[gtid_19707 * (dzlz7bUZLztZRz20Umz20Udz7dUzg_13946 * d_13944) + gtid_19708 * dzlz7bUZLztZRz20Umz20Udz7dUzg_13946 + gtid_19709] = f16_res_19719;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        dims_flat_31622 = d_13944 * d_13944 * dzlz7bUZLztZRz20Umz20Udz7dUzg_13946;
        ltid_in_bounds_31627 = slt64(sext_i32_i64(local_tid_31266), d_13944 * d_13944 * dzlz7bUZLztZRz20Umz20Udz7dUzg_13946);
        // read input for in-block scan
        {
            if (ltid_in_bounds_31627) {
                eta_p_19712 = ((volatile __local float *) red_arr_mem_31620)[sext_i32_i64(local_tid_31266)];
                if ((local_tid_31266 - squot32(local_tid_31266, 32) * 32) == 0) {
                    eta_p_19711 = eta_p_19712;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_31628 = 1;
            while (slt32(skip_threads_31628, 32)) {
                bool thread_active_31629 = sle32(skip_threads_31628, local_tid_31266 - squot32(local_tid_31266, 32) * 32) && ltid_in_bounds_31627;
                
                if (thread_active_31629) {
                    // read operands
                    {
                        eta_p_19711 = ((volatile __local float *) red_arr_mem_31620)[sext_i32_i64(local_tid_31266) - sext_i32_i64(skip_threads_31628)];
                    }
                }
                // perform operation
                {
                    bool inactive_31630 = slt64(srem64(sext_i32_i64(local_tid_31266), dzlz7bUZLztZRz20Umz20Udz7dUzg_13946), sext_i32_i64(local_tid_31266) - sext_i32_i64(local_tid_31266 - skip_threads_31628));
                    
                    if (thread_active_31629 && inactive_31630) {
                        eta_p_19711 = eta_p_19712;
                    }
                    if (thread_active_31629) {
                        if (!inactive_31630) {
                            float defunc_0_op_res_19713 = eta_p_19711 + eta_p_19712;
                            
                            eta_p_19711 = defunc_0_op_res_19713;
                        }
                    }
                }
                if (sle32(wave_sizze_31268, skip_threads_31628)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (thread_active_31629) {
                    // write result
                    {
                        ((volatile __local float *) red_arr_mem_31620)[sext_i32_i64(local_tid_31266)] = eta_p_19711;
                        eta_p_19712 = eta_p_19711;
                    }
                }
                if (sle32(wave_sizze_31268, skip_threads_31628)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_31628 *= 2;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // last thread of block 'i' writes its result to offset 'i'
        {
            if ((local_tid_31266 - squot32(local_tid_31266, 32) * 32) == 31 && ltid_in_bounds_31627) {
                ((volatile __local float *) red_arr_mem_31620)[sext_i32_i64(squot32(local_tid_31266, 32))] = eta_p_19711;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
        {
            int32_t skip_threads_31631;
            
            // read input for in-block scan
            {
                if (squot32(local_tid_31266, 32) == 0 && ltid_in_bounds_31627) {
                    eta_p_31625 = ((volatile __local float *) red_arr_mem_31620)[sext_i32_i64(local_tid_31266)];
                    if ((local_tid_31266 - squot32(local_tid_31266, 32) * 32) == 0) {
                        eta_p_31624 = eta_p_31625;
                    }
                }
            }
            // in-block scan (hopefully no barriers needed)
            {
                skip_threads_31631 = 1;
                while (slt32(skip_threads_31631, 32)) {
                    bool thread_active_31632 = sle32(skip_threads_31631, local_tid_31266 - squot32(local_tid_31266, 32) * 32) && (squot32(local_tid_31266, 32) == 0 && ltid_in_bounds_31627);
                    
                    if (thread_active_31632) {
                        // read operands
                        {
                            eta_p_31624 = ((volatile __local float *) red_arr_mem_31620)[sext_i32_i64(local_tid_31266) - sext_i32_i64(skip_threads_31631)];
                        }
                    }
                    // perform operation
                    {
                        bool inactive_31633 = slt64(srem64(sext_i32_i64(local_tid_31266 * 32 + 32 - 1), dzlz7bUZLztZRz20Umz20Udz7dUzg_13946), sext_i32_i64(local_tid_31266 * 32 + 32 - 1) - sext_i32_i64((local_tid_31266 - skip_threads_31631) * 32 + 32 - 1));
                        
                        if (thread_active_31632 && inactive_31633) {
                            eta_p_31624 = eta_p_31625;
                        }
                        if (thread_active_31632) {
                            if (!inactive_31633) {
                                float defunc_0_op_res_31626 = eta_p_31624 + eta_p_31625;
                                
                                eta_p_31624 = defunc_0_op_res_31626;
                            }
                        }
                    }
                    if (sle32(wave_sizze_31268, skip_threads_31631)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    if (thread_active_31632) {
                        // write result
                        {
                            ((volatile __local float *) red_arr_mem_31620)[sext_i32_i64(local_tid_31266)] = eta_p_31624;
                            eta_p_31625 = eta_p_31624;
                        }
                    }
                    if (sle32(wave_sizze_31268, skip_threads_31631)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    skip_threads_31631 *= 2;
                }
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        no_carry_in_31634 = squot32(local_tid_31266, 32) == 0 || !ltid_in_bounds_31627;
        // carry-in for every block except the first
        {
            // read operands
            {
                if (!no_carry_in_31634) {
                    eta_p_19712 = eta_p_19711;
                    eta_p_19711 = ((__local float *) red_arr_mem_31620)[sext_i32_i64(squot32(local_tid_31266, 32)) - (int64_t) 1];
                }
            }
            // perform operation
            {
                bool inactive_31635 = slt64(srem64(sext_i32_i64(local_tid_31266), dzlz7bUZLztZRz20Umz20Udz7dUzg_13946), sext_i32_i64(local_tid_31266) - sext_i32_i64(squot32(local_tid_31266, 32) * 32 - 1));
                
                if (!no_carry_in_31634) {
                    if (inactive_31635) {
                        eta_p_19711 = eta_p_19712;
                    }
                }
                if (!no_carry_in_31634) {
                    if (!inactive_31635) {
                        float defunc_0_op_res_19713 = eta_p_19711 + eta_p_19712;
                        
                        eta_p_19711 = defunc_0_op_res_19713;
                    }
                }
            }
            // write final result
            {
                if (!no_carry_in_31634) {
                    ((__local float *) red_arr_mem_31620)[sext_i32_i64(local_tid_31266)] = eta_p_19711;
                }
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // restore correct values for first block
        {
            if (squot32(local_tid_31266, 32) == 0 && ltid_in_bounds_31627) {
                ((__local float *) red_arr_mem_31620)[sext_i32_i64(local_tid_31266)] = eta_p_19712;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_LOCAL_MEM_FENCE);
        // Save result of reduction.
        {
            int32_t num_chunks_31636 = sdiv_up32(sext_i64_i32(d_13944) * sext_i64_i32(d_13944), sext_i64_i32(computed_tblock_sizze_18392));
            
            for (int32_t chunk_i_31637 = 0; chunk_i_31637 < num_chunks_31636; chunk_i_31637++) {
                int32_t i_31638 = chunk_i_31637 * sext_i64_i32(computed_tblock_sizze_18392) + local_tid_31266;
                
                if (slt32(i_31638, sext_i64_i32(d_13944) * sext_i64_i32(d_13944))) {
                    ((__local float *) color_30649)[sext_i32_i64(squot32(i_31638, sext_i64_i32(d_13944))) * d_13944 + sext_i32_i64(i_31638 - squot32(i_31638, sext_i64_i32(d_13944)) * sext_i64_i32(d_13944))] = ((__local float *) red_arr_mem_31620)[dzlz7bUZLztZRz20Umz20Udz7dUzg_13946 - (int64_t) 1 + sext_i32_i64(squot32(i_31638, sext_i64_i32(d_13944))) * (dzlz7bUZLztZRz20Umz20Udz7dUzg_13946 * d_13944) + sext_i32_i64(i_31638 - squot32(i_31638, sext_i64_i32(d_13944)) * sext_i64_i32(d_13944)) * dzlz7bUZLztZRz20Umz20Udz7dUzg_13946];
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        phys_tid_19723 = sext_i32_i64(local_tid_31266);
        gtid_19721 = sext_i32_i64(sext_i64_i32(ltid_pre_31354));
        gtid_19722 = sext_i32_i64(sext_i64_i32(ltid_pre_31355));
        if (slt64(gtid_19721, d_13944) && slt64(gtid_19722, d_13944)) {
            float defunc_0_f_res_19724;
            f16 f32_res_19725;
            
            defunc_0_f_res_19724 = ((__local float *) color_30649)[gtid_19721 * d_13944 + gtid_19722];
            f32_res_19725 = fpconv_f32_f16(defunc_0_f_res_19724);
            ((__local uint16_t *) color_30648)[gtid_19721 * d_13944 + gtid_19722] = futrts_to_bits16(f32_res_19725);
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        ext_mem_ext_30855 = color_30648;
    } else {
        __local unsigned char *ext_mem_ext_30851;
        
        barrier(CLK_LOCAL_MEM_FENCE);
        if (cond_16173) {
            int64_t phys_tid_19746;
            int64_t gtid_19743;
            int64_t gtid_19744;
            int64_t gtid_19745;
            int64_t phys_tid_19759;
            int64_t gtid_19755;
            int64_t gtid_19756;
            int64_t gtid_19757;
            int64_t gtid_19758;
            int64_t phys_tid_19787;
            int64_t gtid_19784;
            int64_t gtid_19785;
            int64_t gtid_19786;
            int64_t phys_tid_19800;
            int64_t gtid_19796;
            int64_t gtid_19797;
            int64_t gtid_19798;
            int64_t gtid_19799;
            int64_t phys_tid_19872;
            int64_t gtid_19871;
            int64_t phys_tid_19882;
            int64_t gtid_19880;
            int64_t gtid_19881;
            
            phys_tid_19746 = sext_i32_i64(local_tid_31266);
            gtid_19743 = sext_i32_i64(sext_i64_i32(ltid_pre_31270));
            gtid_19744 = sext_i32_i64(sext_i64_i32(ltid_pre_31271));
            gtid_19745 = sext_i32_i64(sext_i64_i32(ltid_pre_31272));
            if ((slt64(gtid_19743, (int64_t) 2) && slt64(gtid_19744, (int64_t) 2)) && slt64(gtid_19745, dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396)) {
                int64_t index_primexp_27049;
                int64_t tmp_19749;
                bool x_19750;
                bool y_19751;
                bool bounds_check_19752;
                bool index_certs_19753;
                
                index_primexp_27049 = mul64(dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396, gtid_19743);
                tmp_19749 = add64(gtid_19745, index_primexp_27049);
                x_19750 = sle64((int64_t) 0, tmp_19749);
                y_19751 = slt64(tmp_19749, dzlz7bUZLztZRz20Umz20Udz7dUzg_13946);
                bounds_check_19752 = x_19750 && y_19751;
                if (!bounds_check_19752) {
                    {
                        if (atomic_cmpxchg_i32_global(global_failure, -1, 2) == -1) {
                            global_failure_args[0] = (int64_t) tmp_19749;
                            global_failure_args[1] = (int64_t) dzlz7bUZLztZRz20Umz20Udz7dUzg_13946;
                            ;
                        }
                        local_failure = 1;
                        goto error_28;
                    }
                }
            }
            
          error_28:
            barrier(CLK_LOCAL_MEM_FENCE);
            if (local_failure)
                return;
            barrier(CLK_LOCAL_MEM_FENCE);
            phys_tid_19759 = sext_i32_i64(local_tid_31266);
            gtid_19755 = sext_i32_i64(sext_i64_i32(ltid_pre_31279));
            gtid_19756 = sext_i32_i64(sext_i64_i32(ltid_pre_31280));
            gtid_19757 = sext_i32_i64(sext_i64_i32(ltid_pre_31281));
            gtid_19758 = sext_i32_i64(sext_i64_i32(ltid_pre_31282));
            if (((slt64(gtid_19755, (int64_t) 2) && slt64(gtid_19756, (int64_t) 2)) && slt64(gtid_19757, dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396)) && slt64(gtid_19758, dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) {
                int64_t index_primexp_27046;
                int64_t tmp_19764;
                bool x_19765;
                bool y_19766;
                bool bounds_check_19767;
                bool index_certs_19768;
                int64_t binop_y_27375;
                int64_t index_primexp_27376;
                bool index_certs_19762;
                f16 lifted_lambda_res_19769;
                
                index_primexp_27046 = mul64(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400, gtid_19756);
                tmp_19764 = add64(gtid_19758, index_primexp_27046);
                x_19765 = sle64((int64_t) 0, tmp_19764);
                y_19766 = slt64(tmp_19764, d_13944);
                bounds_check_19767 = x_19765 && y_19766;
                if (!bounds_check_19767) {
                    {
                        if (atomic_cmpxchg_i32_global(global_failure, -1, 3) == -1) {
                            global_failure_args[0] = (int64_t) tmp_19764;
                            global_failure_args[1] = (int64_t) d_13944;
                            ;
                        }
                        local_failure = 1;
                        goto error_29;
                    }
                }
                binop_y_27375 = mul64(dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396, gtid_19755);
                index_primexp_27376 = add64(gtid_19757, binop_y_27375);
                index_certs_19762 = 0;
                lifted_lambda_res_19769 = futrts_from_bits16(((__global uint16_t *) V_mem_28341)[index_primexp_27376 * d_13944 + tmp_19764]);
                ((__local uint16_t *) color_30654)[gtid_19755 * (dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396 * (int64_t) 2) + gtid_19756 * (dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396) + gtid_19757 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 + gtid_19758] = futrts_to_bits16(lifted_lambda_res_19769);
            }
            
          error_29:
            barrier(CLK_LOCAL_MEM_FENCE);
            if (local_failure)
                return;
            barrier(CLK_LOCAL_MEM_FENCE);
            phys_tid_19787 = sext_i32_i64(local_tid_31266);
            gtid_19784 = sext_i32_i64(sext_i64_i32(ltid_pre_31291));
            gtid_19785 = sext_i32_i64(sext_i64_i32(ltid_pre_31292));
            gtid_19786 = sext_i32_i64(sext_i64_i32(ltid_pre_31293));
            if ((slt64(gtid_19784, (int64_t) 2) && slt64(gtid_19785, (int64_t) 2)) && slt64(gtid_19786, dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) {
                int64_t index_primexp_27043;
                int64_t tmp_19790;
                bool x_19791;
                bool y_19792;
                bool bounds_check_19793;
                bool index_certs_19794;
                
                index_primexp_27043 = mul64(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400, gtid_19784);
                tmp_19790 = add64(gtid_19786, index_primexp_27043);
                x_19791 = sle64((int64_t) 0, tmp_19790);
                y_19792 = slt64(tmp_19790, d_13944);
                bounds_check_19793 = x_19791 && y_19792;
                if (!bounds_check_19793) {
                    {
                        if (atomic_cmpxchg_i32_global(global_failure, -1, 4) == -1) {
                            global_failure_args[0] = (int64_t) tmp_19790;
                            global_failure_args[1] = (int64_t) d_13944;
                            ;
                        }
                        local_failure = 1;
                        goto error_30;
                    }
                }
            }
            
          error_30:
            barrier(CLK_LOCAL_MEM_FENCE);
            if (local_failure)
                return;
            barrier(CLK_LOCAL_MEM_FENCE);
            phys_tid_19800 = sext_i32_i64(local_tid_31266);
            gtid_19796 = sext_i32_i64(sext_i64_i32(ltid_pre_31300));
            gtid_19797 = sext_i32_i64(sext_i64_i32(ltid_pre_31301));
            gtid_19798 = sext_i32_i64(sext_i64_i32(ltid_pre_31302));
            gtid_19799 = sext_i32_i64(sext_i64_i32(ltid_pre_31303));
            if (((slt64(gtid_19796, (int64_t) 2) && slt64(gtid_19797, (int64_t) 2)) && slt64(gtid_19798, dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) && slt64(gtid_19799, dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396)) {
                int64_t index_primexp_27040;
                int64_t tmp_19805;
                bool x_19806;
                bool y_19807;
                bool bounds_check_19808;
                bool index_certs_19809;
                int64_t binop_y_27371;
                int64_t index_primexp_27372;
                bool index_certs_19803;
                f16 lifted_lambda_res_19810;
                
                index_primexp_27040 = mul64(dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396, gtid_19797);
                tmp_19805 = add64(gtid_19799, index_primexp_27040);
                x_19806 = sle64((int64_t) 0, tmp_19805);
                y_19807 = slt64(tmp_19805, dzlz7bUZLztZRz20Umz20Udz7dUzg_13946);
                bounds_check_19808 = x_19806 && y_19807;
                if (!bounds_check_19808) {
                    {
                        if (atomic_cmpxchg_i32_global(global_failure, -1, 5) == -1) {
                            global_failure_args[0] = (int64_t) tmp_19805;
                            global_failure_args[1] = (int64_t) dzlz7bUZLztZRz20Umz20Udz7dUzg_13946;
                            ;
                        }
                        local_failure = 1;
                        goto error_31;
                    }
                }
                binop_y_27371 = mul64(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400, gtid_19796);
                index_primexp_27372 = add64(gtid_19798, binop_y_27371);
                index_certs_19803 = 0;
                lifted_lambda_res_19810 = futrts_from_bits16(((__local uint16_t *) color_30657)[index_primexp_27372 * dzlz7bUZLztZRz20Umz20Udz7dUzg_13946 + tmp_19805]);
                ((__local uint16_t *) color_30653)[gtid_19796 * (dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * (int64_t) 2) + gtid_19797 * (dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) + gtid_19798 * dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396 + gtid_19799] = futrts_to_bits16(lifted_lambda_res_19810);
            }
            
          error_31:
            barrier(CLK_LOCAL_MEM_FENCE);
            if (local_failure)
                return;
            barrier(CLK_LOCAL_MEM_FENCE);
            for (int32_t chunk_i_31644 = 0; chunk_i_31644 < num_chunks_31246; chunk_i_31644++) {
                int32_t i_31645;
                int64_t slice_31646;
                int64_t slice_31647;
                int64_t slice_31648;
                int64_t slice_31649;
                int64_t rep_i_31640;
                int64_t remnant_31650;
                int64_t rep_i_31641;
                int64_t remnant_31651;
                int64_t rep_i_31642;
                int64_t remnant_31652;
                int64_t rep_i_31643;
                int64_t remnant_31653;
                
                i_31645 = chunk_i_31644 * sext_i64_i32(computed_tblock_sizze_18392) + local_tid_31266;
                slice_31646 = dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400;
                slice_31647 = dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * slice_31646;
                slice_31648 = (int64_t) 2 * slice_31647;
                slice_31649 = (int64_t) 2 * slice_31648;
                rep_i_31640 = squot64(sext_i32_i64(i_31645), slice_31648);
                remnant_31650 = sext_i32_i64(i_31645) - rep_i_31640 * slice_31648;
                rep_i_31641 = squot64(remnant_31650, slice_31647);
                remnant_31651 = remnant_31650 - rep_i_31641 * slice_31647;
                rep_i_31642 = squot64(remnant_31651, slice_31646);
                remnant_31652 = remnant_31651 - rep_i_31642 * slice_31646;
                rep_i_31643 = remnant_31652;
                remnant_31653 = remnant_31652 - rep_i_31643;
                if ((((sle64((int64_t) 0, rep_i_31640) && slt64(rep_i_31640, (int64_t) 2)) && (sle64((int64_t) 0, rep_i_31641) && slt64(rep_i_31641, (int64_t) 2))) && (sle64((int64_t) 0, rep_i_31642) && slt64(rep_i_31642, dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400))) && (sle64((int64_t) 0, rep_i_31643) && slt64(rep_i_31643, dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400))) {
                    ((__local uint16_t *) color_30652)[rep_i_31640 * (dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * (int64_t) 2) + rep_i_31641 * (dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) + rep_i_31642 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 + rep_i_31643] = futrts_to_bits16((f16) 0.0F);
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            barrier(CLK_LOCAL_MEM_FENCE);
            for (int64_t K_i_19815 = 0; K_i_19815 < (int64_t) 2; K_i_19815++) {
                int64_t phys_tid_19826;
                __local unsigned char *red_arr_mem_31655;
                int64_t gtid_19821;
                int64_t gtid_19822;
                int64_t gtid_19823;
                int64_t gtid_19824;
                int64_t gtid_19825;
                int64_t dims_flat_31657;
                f16 eta_p_19827;
                f16 eta_p_19828;
                f16 eta_p_31659;
                f16 eta_p_31660;
                bool ltid_in_bounds_31662;
                int32_t skip_threads_31663;
                bool no_carry_in_31669;
                
                phys_tid_19826 = sext_i32_i64(local_tid_31266);
                red_arr_mem_31655 = (__local unsigned char *) red_arr_mem_31655_backing_16;
                gtid_19821 = sext_i32_i64(sext_i64_i32(ltid_pre_31324));
                gtid_19822 = sext_i32_i64(sext_i64_i32(ltid_pre_31325));
                gtid_19823 = sext_i32_i64(sext_i64_i32(ltid_pre_31326));
                gtid_19824 = sext_i32_i64(sext_i64_i32(ltid_pre_31327));
                gtid_19825 = sext_i32_i64(sext_i64_i32(ltid_pre_31328));
                if ((((slt64(gtid_19821, (int64_t) 2) && slt64(gtid_19822, (int64_t) 2)) && slt64(gtid_19823, dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) && slt64(gtid_19824, dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) && slt64(gtid_19825, dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396)) {
                    f16 eta_p_19834;
                    f16 eta_p_19835;
                    f16 defunc_0_f_res_19836;
                    
                    eta_p_19834 = futrts_from_bits16(((__local uint16_t *) color_30653)[gtid_19821 * (dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * (int64_t) 2) + K_i_19815 * (dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) + gtid_19823 * dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396 + gtid_19825]);
                    eta_p_19835 = futrts_from_bits16(((__local uint16_t *) color_30654)[K_i_19815 * (dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396 * (int64_t) 2) + gtid_19822 * (dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396) + gtid_19825 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 + gtid_19824]);
                    defunc_0_f_res_19836 = eta_p_19834 * eta_p_19835;
                    ((__local uint16_t *) red_arr_mem_31655)[gtid_19821 * (dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * (int64_t) 2) + gtid_19822 * (dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) + gtid_19823 * (dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) + gtid_19824 * dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396 + gtid_19825] = futrts_to_bits16(defunc_0_f_res_19836);
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                dims_flat_31657 = (int64_t) 4 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396;
                ltid_in_bounds_31662 = slt64(sext_i32_i64(local_tid_31266), (int64_t) 4 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396);
                // read input for in-block scan
                {
                    if (ltid_in_bounds_31662) {
                        eta_p_19828 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_31655)[sext_i32_i64(local_tid_31266)]);
                        if ((local_tid_31266 - squot32(local_tid_31266, 32) * 32) == 0) {
                            eta_p_19827 = eta_p_19828;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_31663 = 1;
                    while (slt32(skip_threads_31663, 32)) {
                        bool thread_active_31664 = sle32(skip_threads_31663, local_tid_31266 - squot32(local_tid_31266, 32) * 32) && ltid_in_bounds_31662;
                        
                        if (thread_active_31664) {
                            // read operands
                            {
                                eta_p_19827 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_31655)[sext_i32_i64(local_tid_31266) - sext_i32_i64(skip_threads_31663)]);
                            }
                        }
                        // perform operation
                        {
                            bool inactive_31665 = slt64(srem64(sext_i32_i64(local_tid_31266), dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396), sext_i32_i64(local_tid_31266) - sext_i32_i64(local_tid_31266 - skip_threads_31663));
                            
                            if (thread_active_31664 && inactive_31665) {
                                eta_p_19827 = eta_p_19828;
                            }
                            if (thread_active_31664) {
                                if (!inactive_31665) {
                                    f16 defunc_0_op_res_19829 = eta_p_19827 + eta_p_19828;
                                    
                                    eta_p_19827 = defunc_0_op_res_19829;
                                }
                            }
                        }
                        if (sle32(wave_sizze_31268, skip_threads_31663)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (thread_active_31664) {
                            // write result
                            {
                                ((volatile __local uint16_t *) red_arr_mem_31655)[sext_i32_i64(local_tid_31266)] = futrts_to_bits16(eta_p_19827);
                                eta_p_19828 = eta_p_19827;
                            }
                        }
                        if (sle32(wave_sizze_31268, skip_threads_31663)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_31663 *= 2;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // last thread of block 'i' writes its result to offset 'i'
                {
                    if ((local_tid_31266 - squot32(local_tid_31266, 32) * 32) == 31 && ltid_in_bounds_31662) {
                        ((volatile __local uint16_t *) red_arr_mem_31655)[sext_i32_i64(squot32(local_tid_31266, 32))] = futrts_to_bits16(eta_p_19827);
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
                {
                    int32_t skip_threads_31666;
                    
                    // read input for in-block scan
                    {
                        if (squot32(local_tid_31266, 32) == 0 && ltid_in_bounds_31662) {
                            eta_p_31660 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_31655)[sext_i32_i64(local_tid_31266)]);
                            if ((local_tid_31266 - squot32(local_tid_31266, 32) * 32) == 0) {
                                eta_p_31659 = eta_p_31660;
                            }
                        }
                    }
                    // in-block scan (hopefully no barriers needed)
                    {
                        skip_threads_31666 = 1;
                        while (slt32(skip_threads_31666, 32)) {
                            bool thread_active_31667 = sle32(skip_threads_31666, local_tid_31266 - squot32(local_tid_31266, 32) * 32) && (squot32(local_tid_31266, 32) == 0 && ltid_in_bounds_31662);
                            
                            if (thread_active_31667) {
                                // read operands
                                {
                                    eta_p_31659 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_31655)[sext_i32_i64(local_tid_31266) - sext_i32_i64(skip_threads_31666)]);
                                }
                            }
                            // perform operation
                            {
                                bool inactive_31668 = slt64(srem64(sext_i32_i64(local_tid_31266 * 32 + 32 - 1), dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396), sext_i32_i64(local_tid_31266 * 32 + 32 - 1) - sext_i32_i64((local_tid_31266 - skip_threads_31666) * 32 + 32 - 1));
                                
                                if (thread_active_31667 && inactive_31668) {
                                    eta_p_31659 = eta_p_31660;
                                }
                                if (thread_active_31667) {
                                    if (!inactive_31668) {
                                        f16 defunc_0_op_res_31661 = eta_p_31659 + eta_p_31660;
                                        
                                        eta_p_31659 = defunc_0_op_res_31661;
                                    }
                                }
                            }
                            if (sle32(wave_sizze_31268, skip_threads_31666)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            if (thread_active_31667) {
                                // write result
                                {
                                    ((volatile __local uint16_t *) red_arr_mem_31655)[sext_i32_i64(local_tid_31266)] = futrts_to_bits16(eta_p_31659);
                                    eta_p_31660 = eta_p_31659;
                                }
                            }
                            if (sle32(wave_sizze_31268, skip_threads_31666)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            skip_threads_31666 *= 2;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                no_carry_in_31669 = squot32(local_tid_31266, 32) == 0 || !ltid_in_bounds_31662;
                // carry-in for every block except the first
                {
                    // read operands
                    {
                        if (!no_carry_in_31669) {
                            eta_p_19828 = eta_p_19827;
                            eta_p_19827 = futrts_from_bits16(((__local uint16_t *) red_arr_mem_31655)[sext_i32_i64(squot32(local_tid_31266, 32)) - (int64_t) 1]);
                        }
                    }
                    // perform operation
                    {
                        bool inactive_31670 = slt64(srem64(sext_i32_i64(local_tid_31266), dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396), sext_i32_i64(local_tid_31266) - sext_i32_i64(squot32(local_tid_31266, 32) * 32 - 1));
                        
                        if (!no_carry_in_31669) {
                            if (inactive_31670) {
                                eta_p_19827 = eta_p_19828;
                            }
                        }
                        if (!no_carry_in_31669) {
                            if (!inactive_31670) {
                                f16 defunc_0_op_res_19829 = eta_p_19827 + eta_p_19828;
                                
                                eta_p_19827 = defunc_0_op_res_19829;
                            }
                        }
                    }
                    // write final result
                    {
                        if (!no_carry_in_31669) {
                            ((__local uint16_t *) red_arr_mem_31655)[sext_i32_i64(local_tid_31266)] = futrts_to_bits16(eta_p_19827);
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // restore correct values for first block
                {
                    if (squot32(local_tid_31266, 32) == 0 && ltid_in_bounds_31662) {
                        ((__local uint16_t *) red_arr_mem_31655)[sext_i32_i64(local_tid_31266)] = futrts_to_bits16(eta_p_19828);
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                barrier(CLK_LOCAL_MEM_FENCE);
                // Save result of reduction.
                {
                    int32_t num_chunks_31671 = sdiv_up32(4 * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400), sext_i64_i32(computed_tblock_sizze_18392));
                    
                    for (int32_t chunk_i_31672 = 0; chunk_i_31672 < num_chunks_31671; chunk_i_31672++) {
                        int32_t i_31673 = chunk_i_31672 * sext_i64_i32(computed_tblock_sizze_18392) + local_tid_31266;
                        
                        if (slt32(i_31673, 4 * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400))) {
                            ((__local uint16_t *) color_30651)[sext_i32_i64(squot32(i_31673, 2 * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400))) * (dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * (int64_t) 2) + sext_i32_i64(squot32(i_31673 - squot32(i_31673, 2 * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) * (2 * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)), sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400))) * (dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) + sext_i32_i64(squot32(i_31673 - squot32(i_31673, 2 * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) * (2 * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) - squot32(i_31673 - squot32(i_31673, 2 * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) * (2 * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)), sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) * (sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)), sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400))) * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 + sext_i32_i64(i_31673 - squot32(i_31673, 2 * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) * (2 * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) - squot32(i_31673 - squot32(i_31673, 2 * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) * (2 * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)), sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) * (sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) - squot32(i_31673 - squot32(i_31673, 2 * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) * (2 * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) - squot32(i_31673 - squot32(i_31673, 2 * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) * (2 * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)), sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) * (sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)), sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400))] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) red_arr_mem_31655)[dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396 - (int64_t) 1 + sext_i32_i64(squot32(i_31673, 2 * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400))) * (dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * (int64_t) 2) + sext_i32_i64(squot32(i_31673 - squot32(i_31673, 2 * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) * (2 * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)), sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400))) * (dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) + sext_i32_i64(squot32(i_31673 - squot32(i_31673, 2 * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) * (2 * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) - squot32(i_31673 - squot32(i_31673, 2 * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) * (2 * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)), sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) * (sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)), sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400))) * (dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) + sext_i32_i64(i_31673 - squot32(i_31673, 2 * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) * (2 * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) - squot32(i_31673 - squot32(i_31673, 2 * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) * (2 * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)), sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) * (sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) - squot32(i_31673 - squot32(i_31673, 2 * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) * (2 * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) - squot32(i_31673 - squot32(i_31673, 2 * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) * (2 * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)), sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) * (sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)), sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) * dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396]));
                        }
                    }
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                barrier(CLK_LOCAL_MEM_FENCE);
                for (int64_t i_19840 = 0; i_19840 < dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400; i_19840++) {
                    bool index_certs_19843;
                    int64_t phys_tid_19857;
                    int64_t gtid_19854;
                    int64_t gtid_19855;
                    int64_t gtid_19856;
                    int64_t phys_tid_19865;
                    int64_t gtid_19862;
                    int64_t gtid_19863;
                    int64_t gtid_slice_19864;
                    
                    if (!ok_or_empty_16195) {
                        {
                            if (atomic_cmpxchg_i32_global(global_failure, -1, 6) == -1) {
                                global_failure_args[0] = (int64_t) i_19840;
                                global_failure_args[1] = (int64_t) (int64_t) 0;
                                global_failure_args[2] = (int64_t) dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400;
                                global_failure_args[3] = (int64_t) dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400;
                                ;
                            }
                            local_failure = 1;
                            goto error_37;
                        }
                    }
                    phys_tid_19857 = sext_i32_i64(local_tid_31266);
                    gtid_19854 = sext_i32_i64(sext_i64_i32(ltid_pre_31291));
                    gtid_19855 = sext_i32_i64(sext_i64_i32(ltid_pre_31292));
                    gtid_19856 = sext_i32_i64(sext_i64_i32(ltid_pre_31293));
                    if ((slt64(gtid_19854, (int64_t) 2) && slt64(gtid_19855, (int64_t) 2)) && slt64(gtid_19856, dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) {
                        f16 eta_p_19858;
                        f16 eta_p_19859;
                        f16 defunc_0_f_res_19860;
                        
                        eta_p_19858 = futrts_from_bits16(((__local uint16_t *) color_30651)[gtid_19854 * (dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * (int64_t) 2) + gtid_19855 * (dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) + i_19840 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 + gtid_19856]);
                        eta_p_19859 = futrts_from_bits16(((__local uint16_t *) color_30652)[gtid_19854 * ctx_30774 + gtid_19855 * ctx_30775 + i_19840 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 + gtid_19856]);
                        defunc_0_f_res_19860 = eta_p_19858 + eta_p_19859;
                        ((__local uint16_t *) color_30649)[gtid_19854 * (dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * (int64_t) 2) + gtid_19855 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 + gtid_19856] = futrts_to_bits16(defunc_0_f_res_19860);
                    }
                    
                  error_37:
                    barrier(CLK_LOCAL_MEM_FENCE);
                    if (local_failure)
                        return;
                    barrier(CLK_LOCAL_MEM_FENCE);
                    phys_tid_19865 = sext_i32_i64(local_tid_31266);
                    gtid_19862 = sext_i32_i64(sext_i64_i32(ltid_pre_31291));
                    gtid_19863 = sext_i32_i64(sext_i64_i32(ltid_pre_31292));
                    gtid_slice_19864 = sext_i32_i64(sext_i64_i32(ltid_pre_31293));
                    if ((slt64(gtid_19862, (int64_t) 2) && slt64(gtid_19863, (int64_t) 2)) && slt64(gtid_slice_19864, dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) {
                        f16 v_19867 = futrts_from_bits16(((__local uint16_t *) color_30649)[gtid_19862 * (dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * (int64_t) 2) + gtid_19863 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 + gtid_slice_19864]);
                        
                        if ((((sle64((int64_t) 0, gtid_19862) && slt64(gtid_19862, (int64_t) 2)) && (sle64((int64_t) 0, gtid_19863) && slt64(gtid_19863, (int64_t) 2))) && (sle64((int64_t) 0, i_19840) && slt64(i_19840, dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400))) && (sle64((int64_t) 0, gtid_slice_19864) && slt64(gtid_slice_19864, dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400))) {
                            ((__local uint16_t *) color_30652)[gtid_19862 * ctx_30774 + gtid_19863 * ctx_30775 + i_19840 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 + gtid_slice_19864] = futrts_to_bits16(v_19867);
                        }
                    }
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
            }
            phys_tid_19872 = sext_i32_i64(local_tid_31266);
            gtid_19871 = sext_i32_i64(sext_i64_i32(ltid_pre_31339));
            if (slt64(gtid_19871, d_13944)) {
                int64_t tmp_19874;
                bool x_19875;
                bool y_19876;
                bool bounds_check_19877;
                bool index_certs_19878;
                
                tmp_19874 = sdiv64(gtid_19871, dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400);
                x_19875 = sle64((int64_t) 0, tmp_19874);
                y_19876 = slt64(tmp_19874, (int64_t) 2);
                bounds_check_19877 = x_19875 && y_19876;
                if (!bounds_check_19877) {
                    {
                        if (atomic_cmpxchg_i32_global(global_failure, -1, 7) == -1) {
                            global_failure_args[0] = (int64_t) tmp_19874;
                            global_failure_args[1] = (int64_t) (int64_t) 2;
                            ;
                        }
                        local_failure = 1;
                        goto error_39;
                    }
                }
            }
            
          error_39:
            barrier(CLK_LOCAL_MEM_FENCE);
            if (local_failure)
                return;
            barrier(CLK_LOCAL_MEM_FENCE);
            phys_tid_19882 = sext_i32_i64(local_tid_31266);
            gtid_19880 = sext_i32_i64(sext_i64_i32(ltid_pre_31354));
            gtid_19881 = sext_i32_i64(sext_i64_i32(ltid_pre_31355));
            if (slt64(gtid_19880, d_13944) && slt64(gtid_19881, d_13944)) {
                int64_t tmp_19886;
                bool x_19887;
                bool y_19888;
                bool bounds_check_19889;
                bool index_certs_19890;
                int64_t tmp_19891;
                bool x_19892;
                bool y_19893;
                bool bounds_check_19894;
                bool index_certs_19895;
                int64_t index_primexp_27037;
                bool index_certs_19884;
                f16 lifted_lambda_res_19896;
                
                tmp_19886 = sdiv64(gtid_19881, dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400);
                x_19887 = sle64((int64_t) 0, tmp_19886);
                y_19888 = slt64(tmp_19886, dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400);
                bounds_check_19889 = x_19887 && y_19888;
                if (!bounds_check_19889) {
                    {
                        if (atomic_cmpxchg_i32_global(global_failure, -1, 8) == -1) {
                            global_failure_args[0] = (int64_t) tmp_19886;
                            global_failure_args[1] = (int64_t) dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400;
                            ;
                        }
                        local_failure = 1;
                        goto error_40;
                    }
                }
                tmp_19891 = smod64(gtid_19881, dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400);
                x_19892 = sle64((int64_t) 0, tmp_19891);
                y_19893 = slt64(tmp_19891, dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400);
                bounds_check_19894 = x_19892 && y_19893;
                if (!bounds_check_19894) {
                    {
                        if (atomic_cmpxchg_i32_global(global_failure, -1, 9) == -1) {
                            global_failure_args[0] = (int64_t) tmp_19891;
                            global_failure_args[1] = (int64_t) dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400;
                            ;
                        }
                        local_failure = 1;
                        goto error_40;
                    }
                }
                index_primexp_27037 = sdiv64(gtid_19880, dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400);
                index_certs_19884 = 0;
                lifted_lambda_res_19896 = futrts_from_bits16(((__local uint16_t *) color_30652)[index_primexp_27037 * ctx_30774 + tmp_19886 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 + tmp_19891]);
                ((__local uint16_t *) color_30650)[gtid_19880 * d_13944 + gtid_19881] = futrts_to_bits16(lifted_lambda_res_19896);
            }
            
          error_40:
            barrier(CLK_LOCAL_MEM_FENCE);
            if (local_failure)
                return;
            barrier(CLK_LOCAL_MEM_FENCE);
            ext_mem_ext_30851 = color_30650;
        } else {
            int64_t phys_tid_19902;
            __local unsigned char *red_arr_mem_31684;
            int64_t gtid_19901;
            int32_t offset_31690;
            int32_t skip_waves_31691;
            
            for (int32_t chunk_i_31678 = 0; chunk_i_31678 < num_chunks_31251; chunk_i_31678++) {
                int32_t i_31679;
                int64_t slice_31680;
                int64_t slice_31681;
                int64_t rep_i_31676;
                int64_t remnant_31682;
                int64_t rep_i_31677;
                int64_t remnant_31683;
                
                i_31679 = chunk_i_31678 * sext_i64_i32(computed_tblock_sizze_18392) + local_tid_31266;
                slice_31680 = d_13944;
                slice_31681 = d_13944 * slice_31680;
                rep_i_31676 = squot64(sext_i32_i64(i_31679), slice_31680);
                remnant_31682 = sext_i32_i64(i_31679) - rep_i_31676 * slice_31680;
                rep_i_31677 = remnant_31682;
                remnant_31683 = remnant_31682 - rep_i_31677;
                if ((sle64((int64_t) 0, rep_i_31676) && slt64(rep_i_31676, d_13944)) && (sle64((int64_t) 0, rep_i_31677) && slt64(rep_i_31677, d_13944))) {
                    ((__local uint16_t *) color_30649)[rep_i_31676 * d_13944 + rep_i_31677] = futrts_to_bits16((f16) 0.0F);
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            phys_tid_19902 = sext_i32_i64(local_tid_31266);
            red_arr_mem_31684 = (__local unsigned char *) red_arr_mem_31684_backing_17;
            gtid_19901 = sext_i32_i64(sext_i64_i32(ltid_pre_31447));
            if (slt64(gtid_19901, m_16509)) {
                int64_t zp_rhs_19914;
                int64_t binop_x_28259;
                int64_t ctx_30821;
                int64_t ctx_30829;
                int64_t binop_x_30838;
                
                zp_rhs_19914 = mul64(d_13944, gtid_19901);
                binop_x_28259 = one_intra_par_min_18858 * gtid_19901;
                ctx_30821 = phys_tid_19902 + binop_x_30820;
                ctx_30829 = phys_tid_19902 + binop_x_30828;
                binop_x_30838 = phys_tid_19902 + binop_x_30837;
                for (int64_t i_27991 = 0; i_27991 < d_13944; i_27991++) {
                    int64_t binop_y_30840;
                    int64_t binop_y_30841;
                    int64_t ctx_30842;
                    
                    for (int64_t i_27995 = 0; i_27995 < d_13944; i_27995++) {
                        int64_t tmp_19923;
                        bool x_19924;
                        bool y_19925;
                        bool bounds_check_19926;
                        bool index_certs_19927;
                        
                        tmp_19923 = add64(zp_rhs_19914, i_27995);
                        x_19924 = sle64((int64_t) 0, tmp_19923);
                        y_19925 = slt64(tmp_19923, dzlz7bUZLztZRz20Umz20Udz7dUzg_13946);
                        bounds_check_19926 = x_19924 && y_19925;
                        if (!bounds_check_19926) {
                            {
                                if (atomic_cmpxchg_i32_global(global_failure, -1, 10) == -1) {
                                    global_failure_args[0] = (int64_t) tmp_19923;
                                    global_failure_args[1] = (int64_t) dzlz7bUZLztZRz20Umz20Udz7dUzg_13946;
                                    ;
                                }
                                local_failure = 1;
                                goto error_41;
                            }
                        }
                        for (int64_t i_0 = 0; i_0 < (int64_t) 1; i_0++) {
                            ((__global uint16_t *) color_30628)[ctx_30829 + ctx_30830 * i_27995 + i_0 * ctx_30830] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) color_30657)[i_27991 * dzlz7bUZLztZRz20Umz20Udz7dUzg_13946 + tmp_19923 + i_0]));
                        }
                    }
                    binop_y_30840 = d_13944 * i_27991;
                    binop_y_30841 = binop_x_30839 * binop_y_30840;
                    ctx_30842 = binop_x_30838 + binop_y_30841;
                    for (int64_t i_27999 = 0; i_27999 < d_13944; i_27999++) {
                        float defunc_0_f_res_19931;
                        float redout_28001;
                        f16 f32_res_19939;
                        
                        redout_28001 = 0.0F;
                        for (int64_t i_28002 = 0; i_28002 < d_13944; i_28002++) {
                            f16 eta_p_19935;
                            int64_t binop_y_28260;
                            int64_t binop_x_28261;
                            int64_t binop_x_28262;
                            int64_t new_index_28263;
                            int64_t binop_y_28275;
                            int64_t new_index_28276;
                            f16 eta_p_19936;
                            f16 defunc_0_f_res_19937;
                            float f16_res_19938;
                            float defunc_0_op_res_19934;
                            float redout_tmp_31689;
                            
                            eta_p_19935 = futrts_from_bits16(((__global uint16_t *) color_30628)[ctx_30829 + i_28002 * ctx_30830]);
                            binop_y_28260 = d_13944 * i_28002;
                            binop_x_28261 = binop_x_28259 + binop_y_28260;
                            binop_x_28262 = i_27999 + binop_x_28261;
                            new_index_28263 = squot64(binop_x_28262, d_13944);
                            binop_y_28275 = d_13944 * new_index_28263;
                            new_index_28276 = binop_x_28262 - binop_y_28275;
                            eta_p_19936 = futrts_from_bits16(((__global uint16_t *) V_mem_28341)[new_index_28263 * d_13944 + new_index_28276]);
                            defunc_0_f_res_19937 = eta_p_19935 * eta_p_19936;
                            f16_res_19938 = fpconv_f16_f32(defunc_0_f_res_19937);
                            defunc_0_op_res_19934 = f16_res_19938 + redout_28001;
                            redout_tmp_31689 = defunc_0_op_res_19934;
                            redout_28001 = redout_tmp_31689;
                        }
                        defunc_0_f_res_19931 = redout_28001;
                        f32_res_19939 = fpconv_f32_f16(defunc_0_f_res_19931);
                        ((__global uint16_t *) color_30629)[ctx_30842 + i_27999 * ctx_30843] = futrts_to_bits16(f32_res_19939);
                    }
                    if (!((ctx_30821 + i_27991 * ctx_30823) == ctx_30842 && ctx_30824 == ctx_30843)) {
                        for (int64_t i_0 = 0; i_0 < d_13944; i_0++) {
                            ((__global uint16_t *) color_30629)[ctx_30821 + i_27991 * ctx_30823 + i_0 * ctx_30824] = futrts_to_bits16(futrts_from_bits16(((__global uint16_t *) color_30629)[ctx_30842 + i_0 * ctx_30843]));
                        }
                    }
                }
                for (int64_t i_0 = 0; i_0 < d_13944; i_0++) {
                    for (int64_t i_1 = 0; i_1 < d_13944; i_1++) {
                        ((__local uint16_t *) red_arr_mem_31684)[gtid_19901 * (d_13944 * d_13944) + (i_0 * d_13944 + i_1)] = futrts_to_bits16(futrts_from_bits16(((__global uint16_t *) color_30629)[ctx_30821 + (i_0 * ctx_30823 + i_1 * ctx_30824)]));
                    }
                }
            }
            
          error_41:
            barrier(CLK_LOCAL_MEM_FENCE);
            if (local_failure)
                return;
            barrier(CLK_LOCAL_MEM_FENCE);
            skip_waves_31691 = 1;
            offset_31690 = 0;
            // participating threads read initial accumulator
            {
                if (slt32(local_tid_31266, sext_i64_i32(m_16509))) {
                    for (int64_t i_0 = 0; i_0 < d_13944; i_0++) {
                        for (int64_t i_1 = 0; i_1 < d_13944; i_1++) {
                            ((__global uint16_t *) color_30656)[phys_tblock_id_19532 + m_13945 * (phys_tid_19902 * (d_13944 * d_13944)) + (i_0 * (m_13945 * d_13944) + i_1 * m_13945)] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) red_arr_mem_31684)[sext_i32_i64(local_tid_31266 + offset_31690) * (d_13944 * d_13944) + (i_0 * d_13944 + i_1)]));
                        }
                    }
                }
            }
            offset_31690 = 1;
            while (slt32(offset_31690, wave_sizze_31268)) {
                if (slt32(local_tid_31266 + offset_31690, sext_i64_i32(m_16509)) && ((local_tid_31266 - squot32(local_tid_31266, wave_sizze_31268) * wave_sizze_31268) & (2 * offset_31690 - 1)) == 0) {
                    // read array element
                    {
                        for (int64_t i_0 = 0; i_0 < d_13944; i_0++) {
                            for (int64_t i_1 = 0; i_1 < d_13944; i_1++) {
                                ((__global uint16_t *) color_30656)[phys_tblock_id_19532 + m_13945 * ((phys_tid_19902 + computed_tblock_sizze_18392) * (d_13944 * d_13944)) + (i_0 * (m_13945 * d_13944) + i_1 * m_13945)] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) red_arr_mem_31684)[sext_i32_i64(local_tid_31266 + offset_31690) * (d_13944 * d_13944) + (i_0 * d_13944 + i_1)]));
                            }
                        }
                    }
                    // apply reduction operation
                    {
                        int64_t ctx_30799 = phys_tid_19902 + binop_x_30798;
                        int64_t ctx_30807 = phys_tid_19902 + binop_x_30806;
                        
                        for (int64_t i_27983 = 0; i_27983 < d_13944; i_27983++) {
                            for (int64_t i_27987 = 0; i_27987 < d_13944; i_27987++) {
                                f16 eta_p_19909 = futrts_from_bits16(((volatile __global uint16_t *) color_30656)[phys_tblock_id_19532 + m_13945 * (phys_tid_19902 * (d_13944 * d_13944)) + (i_27983 * (m_13945 * d_13944) + i_27987 * m_13945)]);
                                f16 eta_p_19910 = futrts_from_bits16(((volatile __global uint16_t *) color_30656)[phys_tblock_id_19532 + m_13945 * ((phys_tid_19902 + computed_tblock_sizze_18392) * (d_13944 * d_13944)) + (i_27983 * (m_13945 * d_13944) + i_27987 * m_13945)]);
                                f16 defunc_0_f_res_19911 = eta_p_19909 + eta_p_19910;
                                
                                ((volatile __global uint16_t *) mem_29292)[ctx_30807 + i_27987 * ctx_30808] = futrts_to_bits16(defunc_0_f_res_19911);
                            }
                            for (int64_t i_0 = 0; i_0 < d_13944; i_0++) {
                                ((__global uint16_t *) mem_29286)[ctx_30799 + i_27983 * ctx_30801 + i_0 * ctx_30802] = futrts_to_bits16(futrts_from_bits16(((__global uint16_t *) mem_29292)[ctx_30807 + i_0 * ctx_30808]));
                            }
                        }
                        for (int64_t i_0 = 0; i_0 < d_13944; i_0++) {
                            for (int64_t i_1 = 0; i_1 < d_13944; i_1++) {
                                ((__global uint16_t *) color_30656)[phys_tblock_id_19532 + m_13945 * (phys_tid_19902 * (d_13944 * d_13944)) + (i_0 * (m_13945 * d_13944) + i_1 * m_13945)] = futrts_to_bits16(futrts_from_bits16(((__global uint16_t *) mem_29286)[ctx_30799 + (i_0 * ctx_30801 + i_1 * ctx_30802)]));
                            }
                        }
                    }
                    // write result of operation
                    { }
                }
                offset_31690 *= 2;
            }
            while (slt32(skip_waves_31691, squot32(sext_i64_i32(computed_tblock_sizze_18392) + wave_sizze_31268 - 1, wave_sizze_31268))) {
                barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
                offset_31690 = skip_waves_31691 * wave_sizze_31268;
                if (slt32(local_tid_31266 + offset_31690, sext_i64_i32(m_16509)) && ((local_tid_31266 - squot32(local_tid_31266, wave_sizze_31268) * wave_sizze_31268) == 0 && (squot32(local_tid_31266, wave_sizze_31268) & (2 * skip_waves_31691 - 1)) == 0)) {
                    // read array element
                    {
                        for (int64_t i_0 = 0; i_0 < d_13944; i_0++) {
                            for (int64_t i_1 = 0; i_1 < d_13944; i_1++) {
                                ((__global uint16_t *) color_30656)[phys_tblock_id_19532 + m_13945 * ((phys_tid_19902 + computed_tblock_sizze_18392) * (d_13944 * d_13944)) + (i_0 * (m_13945 * d_13944) + i_1 * m_13945)] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) red_arr_mem_31684)[sext_i32_i64(local_tid_31266 + offset_31690) * (d_13944 * d_13944) + (i_0 * d_13944 + i_1)]));
                            }
                        }
                    }
                    // apply reduction operation
                    {
                        int64_t ctx_30799 = phys_tid_19902 + binop_x_30798;
                        int64_t ctx_30807 = phys_tid_19902 + binop_x_30806;
                        
                        for (int64_t i_27983 = 0; i_27983 < d_13944; i_27983++) {
                            for (int64_t i_27987 = 0; i_27987 < d_13944; i_27987++) {
                                f16 eta_p_19909 = futrts_from_bits16(((__global uint16_t *) color_30656)[phys_tblock_id_19532 + m_13945 * (phys_tid_19902 * (d_13944 * d_13944)) + (i_27983 * (m_13945 * d_13944) + i_27987 * m_13945)]);
                                f16 eta_p_19910 = futrts_from_bits16(((__global uint16_t *) color_30656)[phys_tblock_id_19532 + m_13945 * ((phys_tid_19902 + computed_tblock_sizze_18392) * (d_13944 * d_13944)) + (i_27983 * (m_13945 * d_13944) + i_27987 * m_13945)]);
                                f16 defunc_0_f_res_19911 = eta_p_19909 + eta_p_19910;
                                
                                ((__global uint16_t *) mem_29292)[ctx_30807 + i_27987 * ctx_30808] = futrts_to_bits16(defunc_0_f_res_19911);
                            }
                            for (int64_t i_0 = 0; i_0 < d_13944; i_0++) {
                                ((__global uint16_t *) mem_29286)[ctx_30799 + i_27983 * ctx_30801 + i_0 * ctx_30802] = futrts_to_bits16(futrts_from_bits16(((__global uint16_t *) mem_29292)[ctx_30807 + i_0 * ctx_30808]));
                            }
                        }
                        for (int64_t i_0 = 0; i_0 < d_13944; i_0++) {
                            for (int64_t i_1 = 0; i_1 < d_13944; i_1++) {
                                ((__global uint16_t *) color_30656)[phys_tblock_id_19532 + m_13945 * (phys_tid_19902 * (d_13944 * d_13944)) + (i_0 * (m_13945 * d_13944) + i_1 * m_13945)] = futrts_to_bits16(futrts_from_bits16(((__global uint16_t *) mem_29286)[ctx_30799 + (i_0 * ctx_30801 + i_1 * ctx_30802)]));
                            }
                        }
                    }
                    // write result of operation
                    { }
                }
                skip_waves_31691 *= 2;
            }
            barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
            // Copy array-typed operands to result array
            {
                if (local_tid_31266 == 0) {
                    for (int64_t i_0 = 0; i_0 < d_13944; i_0++) {
                        for (int64_t i_1 = 0; i_1 < d_13944; i_1++) {
                            ((__local uint16_t *) red_arr_mem_31684)[sext_i32_i64(local_tid_31266) * (d_13944 * d_13944) + (i_0 * d_13944 + i_1)] = futrts_to_bits16(futrts_from_bits16(((__global uint16_t *) color_30656)[phys_tblock_id_19532 + m_13945 * (phys_tid_19902 * (d_13944 * d_13944)) + (i_0 * (m_13945 * d_13944) + i_1 * m_13945)]));
                        }
                    }
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // Save result of reduction.
            {
                int32_t num_chunks_31696 = sdiv_up32(sext_i64_i32(d_13944) * sext_i64_i32(d_13944), sext_i64_i32(computed_tblock_sizze_18392));
                
                for (int32_t chunk_i_31697 = 0; chunk_i_31697 < num_chunks_31696; chunk_i_31697++) {
                    int32_t i_31698 = chunk_i_31697 * sext_i64_i32(computed_tblock_sizze_18392) + local_tid_31266;
                    
                    if (slt32(i_31698, sext_i64_i32(d_13944) * sext_i64_i32(d_13944))) {
                        ((__local uint16_t *) color_30655)[sext_i32_i64(squot32(i_31698, sext_i64_i32(d_13944))) * d_13944 + sext_i32_i64(i_31698 - squot32(i_31698, sext_i64_i32(d_13944)) * sext_i64_i32(d_13944))] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) red_arr_mem_31684)[sext_i32_i64(squot32(i_31698, sext_i64_i32(d_13944))) * d_13944 + sext_i32_i64(i_31698 - squot32(i_31698, sext_i64_i32(d_13944)) * sext_i64_i32(d_13944))]));
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            ext_mem_ext_30851 = color_30655;
        }
        ext_mem_ext_30855 = ext_mem_ext_30851;
    }
    num_chunks_31699 = sdiv_up32(sext_i64_i32(d_13944) * sext_i64_i32(d_13944), sext_i64_i32(computed_tblock_sizze_18392));
    for (int32_t chunk_i_31700 = 0; chunk_i_31700 < num_chunks_31699; chunk_i_31700++) {
        int32_t i_31701 = chunk_i_31700 * sext_i64_i32(computed_tblock_sizze_18392) + local_tid_31266;
        
        if (slt32(i_31701, sext_i64_i32(d_13944) * sext_i64_i32(d_13944))) {
            ((__global uint16_t *) mem_29391)[gtid_19531 * (d_13944 * d_13944) + sext_i32_i64(squot32(i_31701, sext_i64_i32(d_13944))) * d_13944 + sext_i32_i64(i_31701 - squot32(i_31701, sext_i64_i32(d_13944)) * sext_i64_i32(d_13944))] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) ext_mem_ext_30855)[sext_i32_i64(squot32(i_31701, sext_i64_i32(d_13944))) * d_13944 + sext_i32_i64(i_31701 - squot32(i_31701, sext_i64_i32(d_13944)) * sext_i64_i32(d_13944))]));
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
  error_45:
    return;
}
FUTHARK_KERNEL_SIZED(FlashAttention_6392zisegmap_intrablock_25343_dim1, 1, 1)
void FlashAttention_6392zisegmap_intrablock_25343(__global int *global_failure, int64_t d_13944, int64_t dzlz7bUZLztZRz20Umz20Udz7dUzg_13946, int64_t n_15975, __global unsigned char *K_mem_28340, __global unsigned char *mem_28359, __global unsigned char *mem_28364)
{
    volatile __local unsigned char *color_30660_backing_0 = &shared_mem[0];
    const int64_t color_30660_backing_0_offset = 0 + (int64_t) 256;
    
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_31724;
    int32_t tblock_sizze_31727;
    int32_t wave_sizze_31726;
    int32_t block_id_31725;
    int32_t global_tid_31723;
    int64_t phys_tblock_id_25343;
    int64_t slice_31728;
    int64_t gtid_25342;
    int64_t remnant_31729;
    __local unsigned char *color_30660;
    int64_t tmp_offs_31730;
    int32_t num_chunks_31731;
    int32_t num_chunks_31734;
    int32_t num_chunks_31737;
    
    local_tid_31724 = get_local_id(0);
    tblock_sizze_31727 = get_local_size(0);
    wave_sizze_31726 = LOCKSTEP_WIDTH;
    block_id_31725 = get_tblock_id(0);
    global_tid_31723 = block_id_31725 * tblock_sizze_31727 + local_tid_31724;
    phys_tblock_id_25343 = sext_i32_i64(block_id_31725);
    slice_31728 = dzlz7bUZLztZRz20Umz20Udz7dUzg_13946;
    gtid_25342 = sext_i32_i64(block_id_31725);
    remnant_31729 = sext_i32_i64(block_id_31725) - gtid_25342;
    color_30660 = (__local unsigned char *) color_30660_backing_0;
    tmp_offs_31730 = (int64_t) 0;
    num_chunks_31731 = sdiv_up32(sext_i64_i32(d_13944), 0);
    for (int32_t chunk_i_31732 = 0; chunk_i_31732 < num_chunks_31731; chunk_i_31732++) {
        int32_t i_31733 = local_tid_31724;
        
        if (slt32(i_31733, sext_i64_i32(d_13944))) {
            ((__local uint16_t *) color_30660)[tmp_offs_31730 + sext_i32_i64(i_31733)] = futrts_to_bits16(futrts_from_bits16(((__global uint16_t *) K_mem_28340)[gtid_25342 * d_13944 + sext_i32_i64(i_31733)]));
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    tmp_offs_31730 += d_13944;
    num_chunks_31734 = sdiv_up32(sext_i64_i32(n_15975), 0);
    for (int32_t chunk_i_31735 = 0; chunk_i_31735 < num_chunks_31734; chunk_i_31735++) {
        int32_t i_31736 = local_tid_31724;
        
        if (slt32(i_31736, sext_i64_i32(n_15975))) {
            ((__local uint16_t *) color_30660)[tmp_offs_31730 + sext_i32_i64(i_31736)] = futrts_to_bits16(futrts_from_bits16(((__global uint16_t *) mem_28359)[sext_i32_i64(i_31736)]));
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    tmp_offs_31730 += n_15975;
    num_chunks_31737 = sdiv_up32(128, 0);
    for (int32_t chunk_i_31738 = 0; chunk_i_31738 < num_chunks_31737; chunk_i_31738++) {
        int32_t i_31739 = local_tid_31724;
        
        if (slt32(i_31739, 128)) {
            ((__global uint16_t *) mem_28364)[gtid_25342 * (int64_t) 128 + sext_i32_i64(i_31739)] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) color_30660)[sext_i32_i64(i_31739)]));
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
  error_0:
    return;
}
FUTHARK_KERNEL
void FlashAttention_6392zisegmap_intrablock_25382(__global int *global_failure, int failure_is_an_option, __global int64_t *global_failure_args, int64_t d_13944, int64_t m_13945, int64_t dzlz7bUZLztZRz20Umz20Udz7dUzg_13946, int64_t n_15975, int64_t dzlz7bUZLztZRz20Umz20UZLZLzpZRz20Udz20UnZRz7dUzg_15976, int64_t dzlz7bUZLztZRz20Umz20Udz7dUzg_16051, int64_t computed_tblock_sizze_25372, int64_t bytes_28403, int64_t maxSubHelper_30661, __global unsigned char *Q_mem_28339, __global unsigned char *mem_28364, __global unsigned char *mem_28367, __global unsigned char *mem_28391, __global unsigned char *mem_28412)
{
    volatile __local unsigned char *red_arr_mem_31796_backing_3 = &shared_mem[0];
    const int64_t red_arr_mem_31796_backing_3_offset = 0 + ((int64_t) 4 * (m_13945 * (int64_t) 128 * (int64_t) 128 * (int64_t) 128) + srem64((int64_t) 8 - srem64((int64_t) 4 * (m_13945 * (int64_t) 128 * (int64_t) 128 * (int64_t) 128), (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_30665_backing_2 = &shared_mem[red_arr_mem_31796_backing_3_offset];
    const int64_t color_30665_backing_2_offset = red_arr_mem_31796_backing_3_offset + (bytes_28403 + srem64((int64_t) 8 - srem64(bytes_28403, (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_30664_backing_1 = &shared_mem[color_30665_backing_2_offset];
    const int64_t color_30664_backing_1_offset = color_30665_backing_2_offset + (int64_t) 32768;
    volatile __local unsigned char *color_30663_backing_0 = &shared_mem[color_30664_backing_1_offset];
    const int64_t color_30663_backing_0_offset = color_30664_backing_1_offset + (maxSubHelper_30661 + srem64((int64_t) 8 - srem64(maxSubHelper_30661, (int64_t) 8), (int64_t) 8));
    volatile __local int local_failure;
    
    if (failure_is_an_option) {
        int failed = *global_failure >= 0;
        
        if (failed)
            return;
    }
    local_failure = 0;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t local_tid_31746;
    int32_t tblock_sizze_31749;
    int32_t wave_sizze_31748;
    int32_t block_id_31747;
    int32_t global_tid_31745;
    int64_t phys_tblock_id_25382;
    int64_t slice_31751;
    int64_t ltid_pre_31750;
    int64_t remnant_31752;
    int64_t slice_31755;
    int64_t slice_31756;
    int64_t ltid_pre_31753;
    int64_t remnant_31757;
    int64_t ltid_pre_31754;
    int64_t remnant_31758;
    int64_t slice_31762;
    int64_t slice_31763;
    int64_t slice_31764;
    int64_t ltid_pre_31759;
    int64_t remnant_31765;
    int64_t ltid_pre_31760;
    int64_t remnant_31766;
    int64_t ltid_pre_31761;
    int64_t remnant_31767;
    int64_t slice_31772;
    int64_t slice_31773;
    int64_t slice_31774;
    int64_t slice_31775;
    int64_t ltid_pre_31768;
    int64_t remnant_31776;
    int64_t ltid_pre_31769;
    int64_t remnant_31777;
    int64_t ltid_pre_31770;
    int64_t remnant_31778;
    int64_t ltid_pre_31771;
    int64_t remnant_31779;
    int64_t slice_31780;
    int64_t gtid_25381;
    int64_t remnant_31781;
    __local unsigned char *color_30663;
    __local unsigned char *color_30664;
    __local unsigned char *color_30665;
    int64_t tmp_offs_31782;
    int32_t num_chunks_31783;
    int32_t num_chunks_31786;
    int64_t tmp_offs_31789;
    int32_t num_chunks_31793;
    int64_t phys_tid_25393;
    __local unsigned char *red_arr_mem_31796;
    int64_t gtid_25389;
    int64_t gtid_25390;
    int64_t gtid_25391;
    int64_t gtid_25392;
    int64_t dims_flat_31798;
    float eta_p_25394;
    float eta_p_25395;
    float eta_p_31800;
    float eta_p_31801;
    bool ltid_in_bounds_31803;
    int32_t skip_threads_31804;
    bool no_carry_in_31810;
    int64_t phys_tid_25408;
    int64_t gtid_25405;
    int64_t gtid_25406;
    int64_t gtid_25407;
    int64_t phys_tid_25416;
    int64_t gtid_25415;
    int64_t phys_tid_25425;
    int64_t gtid_25423;
    int64_t gtid_25424;
    int32_t num_chunks_31815;
    
    local_tid_31746 = get_local_id(0);
    tblock_sizze_31749 = get_local_size(0);
    wave_sizze_31748 = LOCKSTEP_WIDTH;
    block_id_31747 = get_tblock_id(0);
    global_tid_31745 = block_id_31747 * tblock_sizze_31749 + local_tid_31746;
    phys_tblock_id_25382 = sext_i32_i64(block_id_31747);
    slice_31751 = d_13944;
    ltid_pre_31750 = sext_i32_i64(local_tid_31746);
    remnant_31752 = sext_i32_i64(local_tid_31746) - ltid_pre_31750;
    slice_31755 = dzlz7bUZLztZRz20Umz20Udz7dUzg_16051;
    slice_31756 = d_13944 * slice_31755;
    ltid_pre_31753 = squot64(sext_i32_i64(local_tid_31746), slice_31755);
    remnant_31757 = sext_i32_i64(local_tid_31746) - ltid_pre_31753 * slice_31755;
    ltid_pre_31754 = remnant_31757;
    remnant_31758 = remnant_31757 - ltid_pre_31754;
    slice_31762 = (int64_t) 128;
    slice_31763 = (int64_t) 128 * slice_31762;
    slice_31764 = m_13945 * slice_31763;
    ltid_pre_31759 = squot64(sext_i32_i64(local_tid_31746), slice_31763);
    remnant_31765 = sext_i32_i64(local_tid_31746) - ltid_pre_31759 * slice_31763;
    ltid_pre_31760 = squot64(remnant_31765, slice_31762);
    remnant_31766 = remnant_31765 - ltid_pre_31760 * slice_31762;
    ltid_pre_31761 = remnant_31766;
    remnant_31767 = remnant_31766 - ltid_pre_31761;
    slice_31772 = (int64_t) 128;
    slice_31773 = (int64_t) 128 * slice_31772;
    slice_31774 = (int64_t) 128 * slice_31773;
    slice_31775 = m_13945 * slice_31774;
    ltid_pre_31768 = squot64(sext_i32_i64(local_tid_31746), slice_31774);
    remnant_31776 = sext_i32_i64(local_tid_31746) - ltid_pre_31768 * slice_31774;
    ltid_pre_31769 = squot64(remnant_31776, slice_31773);
    remnant_31777 = remnant_31776 - ltid_pre_31769 * slice_31773;
    ltid_pre_31770 = squot64(remnant_31777, slice_31772);
    remnant_31778 = remnant_31777 - ltid_pre_31770 * slice_31772;
    ltid_pre_31771 = remnant_31778;
    remnant_31779 = remnant_31778 - ltid_pre_31771;
    slice_31780 = m_13945;
    gtid_25381 = sext_i32_i64(block_id_31747);
    remnant_31781 = sext_i32_i64(block_id_31747) - gtid_25381;
    color_30663 = (__local unsigned char *) color_30663_backing_0;
    color_30664 = (__local unsigned char *) color_30664_backing_1;
    color_30665 = (__local unsigned char *) color_30665_backing_2;
    tmp_offs_31782 = (int64_t) 0;
    num_chunks_31783 = sdiv_up32(sext_i64_i32(d_13944) * sext_i64_i32(d_13944), sext_i64_i32(computed_tblock_sizze_25372));
    for (int32_t chunk_i_31784 = 0; chunk_i_31784 < num_chunks_31783; chunk_i_31784++) {
        int32_t i_31785 = chunk_i_31784 * sext_i64_i32(computed_tblock_sizze_25372) + local_tid_31746;
        
        if (slt32(i_31785, sext_i64_i32(d_13944) * sext_i64_i32(d_13944))) {
            ((__local uint16_t *) color_30664)[tmp_offs_31782 + sext_i32_i64(squot32(i_31785, sext_i64_i32(d_13944))) * (int64_t) 128 + sext_i32_i64(i_31785 - squot32(i_31785, sext_i64_i32(d_13944)) * sext_i64_i32(d_13944))] = futrts_to_bits16(futrts_from_bits16(((__global uint16_t *) Q_mem_28339)[gtid_25381 * (d_13944 * d_13944) + sext_i32_i64(squot32(i_31785, sext_i64_i32(d_13944))) * d_13944 + sext_i32_i64(i_31785 - squot32(i_31785, sext_i64_i32(d_13944)) * sext_i64_i32(d_13944))]));
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    tmp_offs_31782 += d_13944;
    num_chunks_31786 = sdiv_up32(sext_i64_i32(d_13944) * sext_i64_i32(n_15975), sext_i64_i32(computed_tblock_sizze_25372));
    for (int32_t chunk_i_31787 = 0; chunk_i_31787 < num_chunks_31786; chunk_i_31787++) {
        int32_t i_31788 = chunk_i_31787 * sext_i64_i32(computed_tblock_sizze_25372) + local_tid_31746;
        
        if (slt32(i_31788, sext_i64_i32(d_13944) * sext_i64_i32(n_15975))) {
            ((__local uint16_t *) color_30664)[tmp_offs_31782 + sext_i32_i64(squot32(i_31788, sext_i64_i32(n_15975))) * (int64_t) 128 + sext_i32_i64(i_31788 - squot32(i_31788, sext_i64_i32(n_15975)) * sext_i64_i32(n_15975))] = futrts_to_bits16(futrts_from_bits16(((__global uint16_t *) mem_28391)[sext_i32_i64(squot32(i_31788, sext_i64_i32(n_15975))) * n_15975 + sext_i32_i64(i_31788 - squot32(i_31788, sext_i64_i32(n_15975)) * sext_i64_i32(n_15975))]));
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    tmp_offs_31782 += n_15975;
    tmp_offs_31789 = (int64_t) 0;
    if (!((int64_t) 128 * tmp_offs_31789 == (int64_t) 0)) {
        int32_t num_chunks_31790 = sdiv_up32(sext_i64_i32(d_13944) * 128, sext_i64_i32(computed_tblock_sizze_25372));
        
        for (int32_t chunk_i_31791 = 0; chunk_i_31791 < num_chunks_31790; chunk_i_31791++) {
            int32_t i_31792 = chunk_i_31791 * sext_i64_i32(computed_tblock_sizze_25372) + local_tid_31746;
            
            if (slt32(i_31792, sext_i64_i32(d_13944) * 128)) {
                ((__local uint16_t *) color_30664)[(int64_t) 128 * tmp_offs_31789 + sext_i32_i64(squot32(i_31792, 128)) * (int64_t) 128 + sext_i32_i64(i_31792 - squot32(i_31792, 128) * 128)] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) color_30664)[sext_i32_i64(squot32(i_31792, 128)) * (int64_t) 128 + sext_i32_i64(i_31792 - squot32(i_31792, 128) * 128)]));
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
    }
    tmp_offs_31789 += d_13944;
    num_chunks_31793 = sdiv_up32(sext_i64_i32(n_15975) * 128, sext_i64_i32(computed_tblock_sizze_25372));
    for (int32_t chunk_i_31794 = 0; chunk_i_31794 < num_chunks_31793; chunk_i_31794++) {
        int32_t i_31795 = chunk_i_31794 * sext_i64_i32(computed_tblock_sizze_25372) + local_tid_31746;
        
        if (slt32(i_31795, sext_i64_i32(n_15975) * 128)) {
            ((__local uint16_t *) color_30664)[(int64_t) 128 * tmp_offs_31789 + sext_i32_i64(squot32(i_31795, 128)) * (int64_t) 128 + sext_i32_i64(i_31795 - squot32(i_31795, 128) * 128)] = futrts_to_bits16(futrts_from_bits16(((__global uint16_t *) mem_28367)[sext_i32_i64(squot32(i_31795, 128)) * (int64_t) 128 + sext_i32_i64(i_31795 - squot32(i_31795, 128) * 128)]));
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    tmp_offs_31789 += n_15975;
    phys_tid_25393 = sext_i32_i64(local_tid_31746);
    red_arr_mem_31796 = (__local unsigned char *) red_arr_mem_31796_backing_3;
    gtid_25389 = sext_i32_i64(sext_i64_i32(ltid_pre_31768));
    gtid_25390 = sext_i32_i64(sext_i64_i32(ltid_pre_31769));
    gtid_25391 = sext_i32_i64(sext_i64_i32(ltid_pre_31770));
    gtid_25392 = sext_i32_i64(sext_i64_i32(ltid_pre_31771));
    if (((slt64(gtid_25389, m_13945) && slt64(gtid_25390, (int64_t) 128)) && slt64(gtid_25391, (int64_t) 128)) && slt64(gtid_25392, (int64_t) 128)) {
        f16 eta_p_25400;
        int64_t binop_x_27165;
        int64_t binop_y_27166;
        int64_t binop_x_27167;
        int64_t binop_x_27168;
        int64_t new_index_27169;
        int64_t binop_y_27179;
        int64_t new_index_27180;
        bool index_concat_cmp_27182;
        f16 index_concat_branch_27186;
        f16 defunc_0_f_res_25402;
        float f16_res_25403;
        
        eta_p_25400 = futrts_from_bits16(((__local uint16_t *) color_30664)[gtid_25390 * (int64_t) 128 + gtid_25392]);
        binop_x_27165 = (int64_t) 16384 * gtid_25389;
        binop_y_27166 = (int64_t) 128 * gtid_25392;
        binop_x_27167 = binop_x_27165 + binop_y_27166;
        binop_x_27168 = gtid_25391 + binop_x_27167;
        new_index_27169 = squot64(binop_x_27168, (int64_t) 128);
        binop_y_27179 = (int64_t) 128 * new_index_27169;
        new_index_27180 = binop_x_27168 - binop_y_27179;
        index_concat_cmp_27182 = sle64(dzlz7bUZLztZRz20Umz20Udz7dUzg_13946, new_index_27169);
        if (index_concat_cmp_27182) {
            index_concat_branch_27186 = (f16) 0.0F;
        } else {
            f16 index_concat_27185 = futrts_from_bits16(((__global uint16_t *) mem_28364)[new_index_27169 * (int64_t) 128 + new_index_27180]);
            
            index_concat_branch_27186 = index_concat_27185;
        }
        defunc_0_f_res_25402 = eta_p_25400 * index_concat_branch_27186;
        f16_res_25403 = fpconv_f16_f32(defunc_0_f_res_25402);
        ((__local float *) red_arr_mem_31796)[gtid_25389 * (int64_t) 2097152 + gtid_25390 * (int64_t) 16384 + gtid_25391 * (int64_t) 128 + gtid_25392] = f16_res_25403;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    dims_flat_31798 = m_13945 * (int64_t) 128 * (int64_t) 128 * (int64_t) 128;
    ltid_in_bounds_31803 = slt64(sext_i32_i64(local_tid_31746), m_13945 * (int64_t) 128 * (int64_t) 128 * (int64_t) 128);
    // read input for in-block scan
    {
        if (ltid_in_bounds_31803) {
            eta_p_25395 = ((volatile __local float *) red_arr_mem_31796)[sext_i32_i64(local_tid_31746)];
            if ((local_tid_31746 - squot32(local_tid_31746, 32) * 32) == 0) {
                eta_p_25394 = eta_p_25395;
            }
        }
    }
    // in-block scan (hopefully no barriers needed)
    {
        skip_threads_31804 = 1;
        while (slt32(skip_threads_31804, 32)) {
            bool thread_active_31805 = sle32(skip_threads_31804, local_tid_31746 - squot32(local_tid_31746, 32) * 32) && ltid_in_bounds_31803;
            
            if (thread_active_31805) {
                // read operands
                {
                    eta_p_25394 = ((volatile __local float *) red_arr_mem_31796)[sext_i32_i64(local_tid_31746) - sext_i32_i64(skip_threads_31804)];
                }
            }
            // perform operation
            {
                bool inactive_31806 = slt64(srem64(sext_i32_i64(local_tid_31746), (int64_t) 128), sext_i32_i64(local_tid_31746) - sext_i32_i64(local_tid_31746 - skip_threads_31804));
                
                if (thread_active_31805 && inactive_31806) {
                    eta_p_25394 = eta_p_25395;
                }
                if (thread_active_31805) {
                    if (!inactive_31806) {
                        float defunc_0_op_res_25396 = eta_p_25394 + eta_p_25395;
                        
                        eta_p_25394 = defunc_0_op_res_25396;
                    }
                }
            }
            if (sle32(wave_sizze_31748, skip_threads_31804)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            if (thread_active_31805) {
                // write result
                {
                    ((volatile __local float *) red_arr_mem_31796)[sext_i32_i64(local_tid_31746)] = eta_p_25394;
                    eta_p_25395 = eta_p_25394;
                }
            }
            if (sle32(wave_sizze_31748, skip_threads_31804)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            skip_threads_31804 *= 2;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // last thread of block 'i' writes its result to offset 'i'
    {
        if ((local_tid_31746 - squot32(local_tid_31746, 32) * 32) == 31 && ltid_in_bounds_31803) {
            ((volatile __local float *) red_arr_mem_31796)[sext_i32_i64(squot32(local_tid_31746, 32))] = eta_p_25394;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
    {
        int32_t skip_threads_31807;
        
        // read input for in-block scan
        {
            if (squot32(local_tid_31746, 32) == 0 && ltid_in_bounds_31803) {
                eta_p_31801 = ((volatile __local float *) red_arr_mem_31796)[sext_i32_i64(local_tid_31746)];
                if ((local_tid_31746 - squot32(local_tid_31746, 32) * 32) == 0) {
                    eta_p_31800 = eta_p_31801;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_31807 = 1;
            while (slt32(skip_threads_31807, 32)) {
                bool thread_active_31808 = sle32(skip_threads_31807, local_tid_31746 - squot32(local_tid_31746, 32) * 32) && (squot32(local_tid_31746, 32) == 0 && ltid_in_bounds_31803);
                
                if (thread_active_31808) {
                    // read operands
                    {
                        eta_p_31800 = ((volatile __local float *) red_arr_mem_31796)[sext_i32_i64(local_tid_31746) - sext_i32_i64(skip_threads_31807)];
                    }
                }
                // perform operation
                {
                    bool inactive_31809 = slt64(srem64(sext_i32_i64(local_tid_31746 * 32 + 32 - 1), (int64_t) 128), sext_i32_i64(local_tid_31746 * 32 + 32 - 1) - sext_i32_i64((local_tid_31746 - skip_threads_31807) * 32 + 32 - 1));
                    
                    if (thread_active_31808 && inactive_31809) {
                        eta_p_31800 = eta_p_31801;
                    }
                    if (thread_active_31808) {
                        if (!inactive_31809) {
                            float defunc_0_op_res_31802 = eta_p_31800 + eta_p_31801;
                            
                            eta_p_31800 = defunc_0_op_res_31802;
                        }
                    }
                }
                if (sle32(wave_sizze_31748, skip_threads_31807)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (thread_active_31808) {
                    // write result
                    {
                        ((volatile __local float *) red_arr_mem_31796)[sext_i32_i64(local_tid_31746)] = eta_p_31800;
                        eta_p_31801 = eta_p_31800;
                    }
                }
                if (sle32(wave_sizze_31748, skip_threads_31807)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_31807 *= 2;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    no_carry_in_31810 = squot32(local_tid_31746, 32) == 0 || !ltid_in_bounds_31803;
    // carry-in for every block except the first
    {
        // read operands
        {
            if (!no_carry_in_31810) {
                eta_p_25395 = eta_p_25394;
                eta_p_25394 = ((__local float *) red_arr_mem_31796)[sext_i32_i64(squot32(local_tid_31746, 32)) - (int64_t) 1];
            }
        }
        // perform operation
        {
            bool inactive_31811 = slt64(srem64(sext_i32_i64(local_tid_31746), (int64_t) 128), sext_i32_i64(local_tid_31746) - sext_i32_i64(squot32(local_tid_31746, 32) * 32 - 1));
            
            if (!no_carry_in_31810) {
                if (inactive_31811) {
                    eta_p_25394 = eta_p_25395;
                }
            }
            if (!no_carry_in_31810) {
                if (!inactive_31811) {
                    float defunc_0_op_res_25396 = eta_p_25394 + eta_p_25395;
                    
                    eta_p_25394 = defunc_0_op_res_25396;
                }
            }
        }
        // write final result
        {
            if (!no_carry_in_31810) {
                ((__local float *) red_arr_mem_31796)[sext_i32_i64(local_tid_31746)] = eta_p_25394;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // restore correct values for first block
    {
        if (squot32(local_tid_31746, 32) == 0 && ltid_in_bounds_31803) {
            ((__local float *) red_arr_mem_31796)[sext_i32_i64(local_tid_31746)] = eta_p_25395;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    barrier(CLK_LOCAL_MEM_FENCE);
    // Save result of reduction.
    {
        int32_t num_chunks_31812 = sdiv_up32(sext_i64_i32(m_13945) * 128 * 128, sext_i64_i32(computed_tblock_sizze_25372));
        
        for (int32_t chunk_i_31813 = 0; chunk_i_31813 < num_chunks_31812; chunk_i_31813++) {
            int32_t i_31814 = chunk_i_31813 * sext_i64_i32(computed_tblock_sizze_25372) + local_tid_31746;
            
            if (slt32(i_31814, sext_i64_i32(m_13945) * 128 * 128)) {
                ((__local float *) color_30663)[sext_i32_i64(squot32(i_31814, 16384)) * (int64_t) 16384 + sext_i32_i64(squot32(i_31814 - squot32(i_31814, 16384) * 16384, 128)) * (int64_t) 128 + sext_i32_i64(i_31814 - squot32(i_31814, 16384) * 16384 - squot32(i_31814 - squot32(i_31814, 16384) * 16384, 128) * 128)] = ((__local float *) red_arr_mem_31796)[(int64_t) 127 + sext_i32_i64(squot32(i_31814, 16384)) * (int64_t) 2097152 + sext_i32_i64(squot32(i_31814 - squot32(i_31814, 16384) * 16384, 128)) * (int64_t) 16384 + sext_i32_i64(i_31814 - squot32(i_31814, 16384) * 16384 - squot32(i_31814 - squot32(i_31814, 16384) * 16384, 128) * 128) * (int64_t) 128];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    phys_tid_25408 = sext_i32_i64(local_tid_31746);
    gtid_25405 = sext_i32_i64(sext_i64_i32(ltid_pre_31759));
    gtid_25406 = sext_i32_i64(sext_i64_i32(ltid_pre_31760));
    gtid_25407 = sext_i32_i64(sext_i64_i32(ltid_pre_31761));
    if ((slt64(gtid_25405, m_13945) && slt64(gtid_25406, (int64_t) 128)) && slt64(gtid_25407, (int64_t) 128)) {
        float defunc_0_f_res_25409;
        f16 f32_res_25410;
        
        defunc_0_f_res_25409 = ((__local float *) color_30663)[gtid_25405 * (int64_t) 16384 + gtid_25406 * (int64_t) 128 + gtid_25407];
        f32_res_25410 = fpconv_f32_f16(defunc_0_f_res_25409);
        ((__local uint16_t *) color_30665)[gtid_25405 * (int64_t) 16384 + gtid_25406 * (int64_t) 128 + gtid_25407] = futrts_to_bits16(f32_res_25410);
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    phys_tid_25416 = sext_i32_i64(local_tid_31746);
    gtid_25415 = sext_i32_i64(sext_i64_i32(ltid_pre_31750));
    if (slt64(gtid_25415, d_13944)) {
        bool y_25419;
        bool index_certs_25421;
        
        y_25419 = slt64(gtid_25415, (int64_t) 128);
        if (!y_25419) {
            {
                if (atomic_cmpxchg_i32_global(global_failure, -1, 11) == -1) {
                    global_failure_args[0] = (int64_t) gtid_25415;
                    global_failure_args[1] = (int64_t) (int64_t) 128;
                    ;
                }
                local_failure = 1;
                goto error_4;
            }
        }
    }
    
  error_4:
    barrier(CLK_LOCAL_MEM_FENCE);
    if (local_failure)
        return;
    barrier(CLK_LOCAL_MEM_FENCE);
    phys_tid_25425 = sext_i32_i64(local_tid_31746);
    gtid_25423 = sext_i32_i64(sext_i64_i32(ltid_pre_31753));
    gtid_25424 = sext_i32_i64(sext_i64_i32(ltid_pre_31754));
    if (slt64(gtid_25423, d_13944) && slt64(gtid_25424, dzlz7bUZLztZRz20Umz20Udz7dUzg_16051)) {
        bool y_25430;
        bool index_certs_25432;
        bool index_certs_25427;
        f16 lifted_lambda_res_25433;
        
        y_25430 = slt64(gtid_25424, dzlz7bUZLztZRz20Umz20UZLZLzpZRz20Udz20UnZRz7dUzg_15976);
        if (!y_25430) {
            {
                if (atomic_cmpxchg_i32_global(global_failure, -1, 12) == -1) {
                    global_failure_args[0] = (int64_t) gtid_25424;
                    global_failure_args[1] = (int64_t) dzlz7bUZLztZRz20Umz20UZLZLzpZRz20Udz20UnZRz7dUzg_15976;
                    ;
                }
                local_failure = 1;
                goto error_5;
            }
        }
        index_certs_25427 = 0;
        lifted_lambda_res_25433 = futrts_from_bits16(((__local uint16_t *) color_30665)[gtid_25423 + gtid_25424 * (int64_t) 128]);
        ((__local uint16_t *) color_30663)[gtid_25423 * dzlz7bUZLztZRz20Umz20Udz7dUzg_16051 + gtid_25424] = futrts_to_bits16(lifted_lambda_res_25433);
    }
    
  error_5:
    barrier(CLK_LOCAL_MEM_FENCE);
    if (local_failure)
        return;
    barrier(CLK_LOCAL_MEM_FENCE);
    num_chunks_31815 = sdiv_up32(sext_i64_i32(d_13944) * sext_i64_i32(dzlz7bUZLztZRz20Umz20Udz7dUzg_13946), sext_i64_i32(computed_tblock_sizze_25372));
    for (int32_t chunk_i_31816 = 0; chunk_i_31816 < num_chunks_31815; chunk_i_31816++) {
        int32_t i_31817 = chunk_i_31816 * sext_i64_i32(computed_tblock_sizze_25372) + local_tid_31746;
        
        if (slt32(i_31817, sext_i64_i32(d_13944) * sext_i64_i32(dzlz7bUZLztZRz20Umz20Udz7dUzg_13946))) {
            ((__global uint16_t *) mem_28412)[gtid_25381 * (dzlz7bUZLztZRz20Umz20Udz7dUzg_13946 * d_13944) + sext_i32_i64(squot32(i_31817, sext_i64_i32(dzlz7bUZLztZRz20Umz20Udz7dUzg_13946))) * dzlz7bUZLztZRz20Umz20Udz7dUzg_13946 + sext_i32_i64(i_31817 - squot32(i_31817, sext_i64_i32(dzlz7bUZLztZRz20Umz20Udz7dUzg_13946)) * sext_i64_i32(dzlz7bUZLztZRz20Umz20Udz7dUzg_13946))] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) color_30663)[sext_i32_i64(squot32(i_31817, sext_i64_i32(dzlz7bUZLztZRz20Umz20Udz7dUzg_13946))) * dzlz7bUZLztZRz20Umz20Udz7dUzg_16051 + sext_i32_i64(i_31817 - squot32(i_31817, sext_i64_i32(dzlz7bUZLztZRz20Umz20Udz7dUzg_13946)) * sext_i64_i32(dzlz7bUZLztZRz20Umz20Udz7dUzg_13946))]));
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
  error_6:
    return;
}
FUTHARK_KERNEL_SIZED(FlashAttention_6392zisegmap_intrablock_25447_dim1, 1, 1)
void FlashAttention_6392zisegmap_intrablock_25447(__global int *global_failure, int64_t d_13944, int64_t m_13945, int64_t n_15975, __global unsigned char *Q_mem_28339, __global unsigned char *mem_28359, __global unsigned char *mem_28373)
{
    volatile __local unsigned char *color_30666_backing_0 = &shared_mem[0];
    const int64_t color_30666_backing_0_offset = 0 + (int64_t) 256;
    
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_31820;
    int32_t tblock_sizze_31823;
    int32_t wave_sizze_31822;
    int32_t block_id_31821;
    int32_t global_tid_31819;
    int64_t phys_tblock_id_25447;
    int64_t slice_31824;
    int64_t slice_31825;
    int64_t gtid_25445;
    int64_t remnant_31826;
    int64_t gtid_25446;
    int64_t remnant_31827;
    __local unsigned char *color_30666;
    int64_t tmp_offs_31828;
    int32_t num_chunks_31829;
    int32_t num_chunks_31832;
    int32_t num_chunks_31835;
    
    local_tid_31820 = get_local_id(0);
    tblock_sizze_31823 = get_local_size(0);
    wave_sizze_31822 = LOCKSTEP_WIDTH;
    block_id_31821 = get_tblock_id(0);
    global_tid_31819 = block_id_31821 * tblock_sizze_31823 + local_tid_31820;
    phys_tblock_id_25447 = sext_i32_i64(block_id_31821);
    slice_31824 = d_13944;
    slice_31825 = m_13945 * slice_31824;
    gtid_25445 = squot64(sext_i32_i64(block_id_31821), slice_31824);
    remnant_31826 = sext_i32_i64(block_id_31821) - gtid_25445 * slice_31824;
    gtid_25446 = remnant_31826;
    remnant_31827 = remnant_31826 - gtid_25446;
    color_30666 = (__local unsigned char *) color_30666_backing_0;
    tmp_offs_31828 = (int64_t) 0;
    num_chunks_31829 = sdiv_up32(sext_i64_i32(d_13944), 0);
    for (int32_t chunk_i_31830 = 0; chunk_i_31830 < num_chunks_31829; chunk_i_31830++) {
        int32_t i_31831 = local_tid_31820;
        
        if (slt32(i_31831, sext_i64_i32(d_13944))) {
            ((__local uint16_t *) color_30666)[tmp_offs_31828 + sext_i32_i64(i_31831)] = futrts_to_bits16(futrts_from_bits16(((__global uint16_t *) Q_mem_28339)[gtid_25445 * (d_13944 * d_13944) + gtid_25446 * d_13944 + sext_i32_i64(i_31831)]));
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    tmp_offs_31828 += d_13944;
    num_chunks_31832 = sdiv_up32(sext_i64_i32(n_15975), 0);
    for (int32_t chunk_i_31833 = 0; chunk_i_31833 < num_chunks_31832; chunk_i_31833++) {
        int32_t i_31834 = local_tid_31820;
        
        if (slt32(i_31834, sext_i64_i32(n_15975))) {
            ((__local uint16_t *) color_30666)[tmp_offs_31828 + sext_i32_i64(i_31834)] = futrts_to_bits16(futrts_from_bits16(((__global uint16_t *) mem_28359)[sext_i32_i64(i_31834)]));
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    tmp_offs_31828 += n_15975;
    num_chunks_31835 = sdiv_up32(128, 0);
    for (int32_t chunk_i_31836 = 0; chunk_i_31836 < num_chunks_31835; chunk_i_31836++) {
        int32_t i_31837 = local_tid_31820;
        
        if (slt32(i_31837, 128)) {
            ((__global uint16_t *) mem_28373)[gtid_25445 * ((int64_t) 128 * d_13944) + gtid_25446 * (int64_t) 128 + sext_i32_i64(i_31837)] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) color_30666)[sext_i32_i64(i_31837)]));
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
  error_0:
    return;
}
FUTHARK_KERNEL_SIZED(FlashAttention_6392zisegmap_intrablock_25472_dim1, 1, 1)
void FlashAttention_6392zisegmap_intrablock_25472(__global int *global_failure, int64_t d_13944, int64_t m_13945, int64_t dzlz7bUZLztZRz20Umz20Udz7dUzg_13946, __global unsigned char *mem_28364, __global unsigned char *mem_28373, __global unsigned char *mem_28381)
{
    volatile __local unsigned char *red_arr_mem_31865_backing_2 = &shared_mem[0];
    const int64_t red_arr_mem_31865_backing_2_offset = 0 + (int64_t) 8388608;
    volatile __local unsigned char *color_30668_backing_1 = &shared_mem[red_arr_mem_31865_backing_2_offset];
    const int64_t color_30668_backing_1_offset = red_arr_mem_31865_backing_2_offset + (int64_t) 65536;
    volatile __local unsigned char *color_30667_backing_0 = &shared_mem[color_30668_backing_1_offset];
    const int64_t color_30667_backing_0_offset = color_30668_backing_1_offset + (int64_t) 32768;
    
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_31842;
    int32_t tblock_sizze_31845;
    int32_t wave_sizze_31844;
    int32_t block_id_31843;
    int32_t global_tid_31841;
    int64_t phys_tblock_id_25472;
    int64_t slice_31848;
    int64_t slice_31849;
    int64_t ltid_pre_31846;
    int64_t remnant_31850;
    int64_t ltid_pre_31847;
    int64_t remnant_31851;
    int64_t slice_31855;
    int64_t slice_31856;
    int64_t slice_31857;
    int64_t ltid_pre_31852;
    int64_t remnant_31858;
    int64_t ltid_pre_31853;
    int64_t remnant_31859;
    int64_t ltid_pre_31854;
    int64_t remnant_31860;
    int64_t slice_31861;
    int64_t slice_31862;
    int64_t gtid_25470;
    int64_t remnant_31863;
    int64_t gtid_25471;
    int64_t remnant_31864;
    __local unsigned char *color_30667;
    __local unsigned char *color_30668;
    int64_t binop_x_27328;
    int64_t phys_tid_25481;
    __local unsigned char *red_arr_mem_31865;
    int64_t gtid_25478;
    int64_t gtid_25479;
    int64_t gtid_25480;
    int64_t dims_flat_31867;
    float eta_p_25482;
    float eta_p_25483;
    float eta_p_31869;
    float eta_p_31870;
    bool ltid_in_bounds_31872;
    int32_t skip_threads_31873;
    bool no_carry_in_31879;
    int64_t phys_tid_25494;
    int64_t gtid_25492;
    int64_t gtid_25493;
    int32_t num_chunks_31884;
    
    local_tid_31842 = get_local_id(0);
    tblock_sizze_31845 = get_local_size(0);
    wave_sizze_31844 = LOCKSTEP_WIDTH;
    block_id_31843 = get_tblock_id(0);
    global_tid_31841 = block_id_31843 * tblock_sizze_31845 + local_tid_31842;
    phys_tblock_id_25472 = sext_i32_i64(block_id_31843);
    slice_31848 = (int64_t) 128;
    slice_31849 = (int64_t) 128 * slice_31848;
    ltid_pre_31846 = squot64(sext_i32_i64(local_tid_31842), slice_31848);
    remnant_31850 = sext_i32_i64(local_tid_31842) - ltid_pre_31846 * slice_31848;
    ltid_pre_31847 = remnant_31850;
    remnant_31851 = remnant_31850 - ltid_pre_31847;
    slice_31855 = (int64_t) 128;
    slice_31856 = (int64_t) 128 * slice_31855;
    slice_31857 = (int64_t) 128 * slice_31856;
    ltid_pre_31852 = squot64(sext_i32_i64(local_tid_31842), slice_31856);
    remnant_31858 = sext_i32_i64(local_tid_31842) - ltid_pre_31852 * slice_31856;
    ltid_pre_31853 = squot64(remnant_31858, slice_31855);
    remnant_31859 = remnant_31858 - ltid_pre_31853 * slice_31855;
    ltid_pre_31854 = remnant_31859;
    remnant_31860 = remnant_31859 - ltid_pre_31854;
    slice_31861 = m_13945;
    slice_31862 = m_13945 * slice_31861;
    gtid_25470 = squot64(sext_i32_i64(block_id_31843), slice_31861);
    remnant_31863 = sext_i32_i64(block_id_31843) - gtid_25470 * slice_31861;
    gtid_25471 = remnant_31863;
    remnant_31864 = remnant_31863 - gtid_25471;
    color_30667 = (__local unsigned char *) color_30667_backing_0;
    color_30668 = (__local unsigned char *) color_30668_backing_1;
    binop_x_27328 = (int64_t) 16384 * gtid_25471;
    phys_tid_25481 = sext_i32_i64(local_tid_31842);
    red_arr_mem_31865 = (__local unsigned char *) red_arr_mem_31865_backing_2;
    gtid_25478 = sext_i32_i64(sext_i64_i32(ltid_pre_31852));
    gtid_25479 = sext_i32_i64(sext_i64_i32(ltid_pre_31853));
    gtid_25480 = sext_i32_i64(sext_i64_i32(ltid_pre_31854));
    if ((slt64(gtid_25478, (int64_t) 128) && slt64(gtid_25479, (int64_t) 128)) && slt64(gtid_25480, (int64_t) 128)) {
        bool index_concat_cmp_27029;
        f16 index_concat_branch_27033;
        int64_t binop_y_27329;
        int64_t binop_x_27330;
        int64_t binop_x_27331;
        int64_t new_index_27332;
        int64_t binop_y_27342;
        int64_t new_index_27343;
        bool index_concat_cmp_27345;
        f16 index_concat_branch_27349;
        f16 defunc_0_f_res_25489;
        float f16_res_25490;
        
        index_concat_cmp_27029 = sle64(d_13944, gtid_25478);
        if (index_concat_cmp_27029) {
            index_concat_branch_27033 = (f16) 0.0F;
        } else {
            f16 index_concat_27032 = futrts_from_bits16(((__global uint16_t *) mem_28373)[gtid_25470 * ((int64_t) 128 * d_13944) + gtid_25478 * (int64_t) 128 + gtid_25480]);
            
            index_concat_branch_27033 = index_concat_27032;
        }
        binop_y_27329 = (int64_t) 128 * gtid_25480;
        binop_x_27330 = binop_x_27328 + binop_y_27329;
        binop_x_27331 = gtid_25479 + binop_x_27330;
        new_index_27332 = squot64(binop_x_27331, (int64_t) 128);
        binop_y_27342 = (int64_t) 128 * new_index_27332;
        new_index_27343 = binop_x_27331 - binop_y_27342;
        index_concat_cmp_27345 = sle64(dzlz7bUZLztZRz20Umz20Udz7dUzg_13946, new_index_27332);
        if (index_concat_cmp_27345) {
            index_concat_branch_27349 = (f16) 0.0F;
        } else {
            f16 index_concat_27348 = futrts_from_bits16(((__global uint16_t *) mem_28364)[new_index_27332 * (int64_t) 128 + new_index_27343]);
            
            index_concat_branch_27349 = index_concat_27348;
        }
        defunc_0_f_res_25489 = index_concat_branch_27033 * index_concat_branch_27349;
        f16_res_25490 = fpconv_f16_f32(defunc_0_f_res_25489);
        ((__local float *) red_arr_mem_31865)[gtid_25478 * (int64_t) 16384 + gtid_25479 * (int64_t) 128 + gtid_25480] = f16_res_25490;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    dims_flat_31867 = (int64_t) 2097152;
    ltid_in_bounds_31872 = slt64(sext_i32_i64(local_tid_31842), (int64_t) 2097152);
    // read input for in-block scan
    {
        if (ltid_in_bounds_31872) {
            eta_p_25483 = ((volatile __local float *) red_arr_mem_31865)[sext_i32_i64(local_tid_31842)];
            if ((local_tid_31842 - squot32(local_tid_31842, 32) * 32) == 0) {
                eta_p_25482 = eta_p_25483;
            }
        }
    }
    // in-block scan (hopefully no barriers needed)
    {
        skip_threads_31873 = 1;
        while (slt32(skip_threads_31873, 32)) {
            bool thread_active_31874 = sle32(skip_threads_31873, local_tid_31842 - squot32(local_tid_31842, 32) * 32) && ltid_in_bounds_31872;
            
            if (thread_active_31874) {
                // read operands
                {
                    eta_p_25482 = ((volatile __local float *) red_arr_mem_31865)[sext_i32_i64(local_tid_31842) - sext_i32_i64(skip_threads_31873)];
                }
            }
            // perform operation
            {
                bool inactive_31875 = slt64(srem64(sext_i32_i64(local_tid_31842), (int64_t) 128), sext_i32_i64(local_tid_31842) - sext_i32_i64(local_tid_31842 - skip_threads_31873));
                
                if (thread_active_31874 && inactive_31875) {
                    eta_p_25482 = eta_p_25483;
                }
                if (thread_active_31874) {
                    if (!inactive_31875) {
                        float defunc_0_op_res_25484 = eta_p_25482 + eta_p_25483;
                        
                        eta_p_25482 = defunc_0_op_res_25484;
                    }
                }
            }
            if (sle32(wave_sizze_31844, skip_threads_31873)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            if (thread_active_31874) {
                // write result
                {
                    ((volatile __local float *) red_arr_mem_31865)[sext_i32_i64(local_tid_31842)] = eta_p_25482;
                    eta_p_25483 = eta_p_25482;
                }
            }
            if (sle32(wave_sizze_31844, skip_threads_31873)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            skip_threads_31873 *= 2;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // last thread of block 'i' writes its result to offset 'i'
    {
        if ((local_tid_31842 - squot32(local_tid_31842, 32) * 32) == 31 && ltid_in_bounds_31872) {
            ((volatile __local float *) red_arr_mem_31865)[sext_i32_i64(squot32(local_tid_31842, 32))] = eta_p_25482;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
    {
        int32_t skip_threads_31876;
        
        // read input for in-block scan
        {
            if (squot32(local_tid_31842, 32) == 0 && ltid_in_bounds_31872) {
                eta_p_31870 = ((volatile __local float *) red_arr_mem_31865)[sext_i32_i64(local_tid_31842)];
                if ((local_tid_31842 - squot32(local_tid_31842, 32) * 32) == 0) {
                    eta_p_31869 = eta_p_31870;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_31876 = 1;
            while (slt32(skip_threads_31876, 32)) {
                bool thread_active_31877 = sle32(skip_threads_31876, local_tid_31842 - squot32(local_tid_31842, 32) * 32) && (squot32(local_tid_31842, 32) == 0 && ltid_in_bounds_31872);
                
                if (thread_active_31877) {
                    // read operands
                    {
                        eta_p_31869 = ((volatile __local float *) red_arr_mem_31865)[sext_i32_i64(local_tid_31842) - sext_i32_i64(skip_threads_31876)];
                    }
                }
                // perform operation
                {
                    bool inactive_31878 = slt64(srem64(sext_i32_i64(local_tid_31842 * 32 + 32 - 1), (int64_t) 128), sext_i32_i64(local_tid_31842 * 32 + 32 - 1) - sext_i32_i64((local_tid_31842 - skip_threads_31876) * 32 + 32 - 1));
                    
                    if (thread_active_31877 && inactive_31878) {
                        eta_p_31869 = eta_p_31870;
                    }
                    if (thread_active_31877) {
                        if (!inactive_31878) {
                            float defunc_0_op_res_31871 = eta_p_31869 + eta_p_31870;
                            
                            eta_p_31869 = defunc_0_op_res_31871;
                        }
                    }
                }
                if (sle32(wave_sizze_31844, skip_threads_31876)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (thread_active_31877) {
                    // write result
                    {
                        ((volatile __local float *) red_arr_mem_31865)[sext_i32_i64(local_tid_31842)] = eta_p_31869;
                        eta_p_31870 = eta_p_31869;
                    }
                }
                if (sle32(wave_sizze_31844, skip_threads_31876)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_31876 *= 2;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    no_carry_in_31879 = squot32(local_tid_31842, 32) == 0 || !ltid_in_bounds_31872;
    // carry-in for every block except the first
    {
        // read operands
        {
            if (!no_carry_in_31879) {
                eta_p_25483 = eta_p_25482;
                eta_p_25482 = ((__local float *) red_arr_mem_31865)[sext_i32_i64(squot32(local_tid_31842, 32)) - (int64_t) 1];
            }
        }
        // perform operation
        {
            bool inactive_31880 = slt64(srem64(sext_i32_i64(local_tid_31842), (int64_t) 128), sext_i32_i64(local_tid_31842) - sext_i32_i64(squot32(local_tid_31842, 32) * 32 - 1));
            
            if (!no_carry_in_31879) {
                if (inactive_31880) {
                    eta_p_25482 = eta_p_25483;
                }
            }
            if (!no_carry_in_31879) {
                if (!inactive_31880) {
                    float defunc_0_op_res_25484 = eta_p_25482 + eta_p_25483;
                    
                    eta_p_25482 = defunc_0_op_res_25484;
                }
            }
        }
        // write final result
        {
            if (!no_carry_in_31879) {
                ((__local float *) red_arr_mem_31865)[sext_i32_i64(local_tid_31842)] = eta_p_25482;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // restore correct values for first block
    {
        if (squot32(local_tid_31842, 32) == 0 && ltid_in_bounds_31872) {
            ((__local float *) red_arr_mem_31865)[sext_i32_i64(local_tid_31842)] = eta_p_25483;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    barrier(CLK_LOCAL_MEM_FENCE);
    // Save result of reduction.
    {
        int32_t num_chunks_31881 = 1;
        
        for (int32_t chunk_i_31882 = 0; chunk_i_31882 < num_chunks_31881; chunk_i_31882++) {
            int32_t i_31883 = chunk_i_31882 * 2097152 + local_tid_31842;
            
            if (slt32(i_31883, 16384)) {
                ((__local float *) color_30668)[sext_i32_i64(squot32(i_31883, 128)) * (int64_t) 128 + sext_i32_i64(i_31883 - squot32(i_31883, 128) * 128)] = ((__local float *) red_arr_mem_31865)[(int64_t) 127 + sext_i32_i64(squot32(i_31883, 128)) * (int64_t) 16384 + sext_i32_i64(i_31883 - squot32(i_31883, 128) * 128) * (int64_t) 128];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    phys_tid_25494 = sext_i32_i64(local_tid_31842);
    gtid_25492 = sext_i32_i64(sext_i64_i32(ltid_pre_31846));
    gtid_25493 = sext_i32_i64(sext_i64_i32(ltid_pre_31847));
    if (slt64(gtid_25492, (int64_t) 128) && slt64(gtid_25493, (int64_t) 128)) {
        float defunc_0_f_res_25495;
        f16 f32_res_25496;
        
        defunc_0_f_res_25495 = ((__local float *) color_30668)[gtid_25492 * (int64_t) 128 + gtid_25493];
        f32_res_25496 = fpconv_f32_f16(defunc_0_f_res_25495);
        ((__local uint16_t *) color_30667)[gtid_25492 * (int64_t) 128 + gtid_25493] = futrts_to_bits16(f32_res_25496);
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    num_chunks_31884 = 1;
    for (int32_t chunk_i_31885 = 0; chunk_i_31885 < num_chunks_31884; chunk_i_31885++) {
        int32_t i_31886 = chunk_i_31885 * 2097152 + local_tid_31842;
        
        if (slt32(i_31886, 16384)) {
            ((__global uint16_t *) mem_28381)[gtid_25470 * ((int64_t) 16384 * m_13945) + gtid_25471 * (int64_t) 16384 + sext_i32_i64(squot32(i_31886, 128)) * (int64_t) 128 + sext_i32_i64(i_31886 - squot32(i_31886, 128) * 128)] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) color_30667)[sext_i32_i64(squot32(i_31886, 128)) * (int64_t) 128 + sext_i32_i64(i_31886 - squot32(i_31886, 128) * 128)]));
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
  error_4:
    return;
}
FUTHARK_KERNEL
void FlashAttention_6392zisegmap_intrablock_25566(__global int *global_failure, int64_t d_13944, int64_t m_13945, int64_t one_intra_par_min_18858, int64_t computed_tblock_sizze_25560, int64_t bytes_28344, int64_t bytes_28347, __global unsigned char *Q_mem_28339, __global unsigned char *K_mem_28340, __global unsigned char *mem_28353)
{
    volatile __local unsigned char *red_arr_mem_31939_backing_2 = &shared_mem[0];
    const int64_t red_arr_mem_31939_backing_2_offset = 0 + ((int64_t) 4 * (d_13944 * d_13944 * d_13944) + srem64((int64_t) 8 - srem64((int64_t) 4 * (d_13944 * d_13944 * d_13944), (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_30670_backing_1 = &shared_mem[red_arr_mem_31939_backing_2_offset];
    const int64_t color_30670_backing_1_offset = red_arr_mem_31939_backing_2_offset + (bytes_28344 + srem64((int64_t) 8 - srem64(bytes_28344, (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_30669_backing_0 = &shared_mem[color_30670_backing_1_offset];
    const int64_t color_30669_backing_0_offset = color_30670_backing_1_offset + (bytes_28347 + srem64((int64_t) 8 - srem64(bytes_28347, (int64_t) 8), (int64_t) 8));
    
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_31916;
    int32_t tblock_sizze_31919;
    int32_t wave_sizze_31918;
    int32_t block_id_31917;
    int32_t global_tid_31915;
    int64_t phys_tblock_id_25566;
    int64_t slice_31922;
    int64_t slice_31923;
    int64_t ltid_pre_31920;
    int64_t remnant_31924;
    int64_t ltid_pre_31921;
    int64_t remnant_31925;
    int64_t slice_31929;
    int64_t slice_31930;
    int64_t slice_31931;
    int64_t ltid_pre_31926;
    int64_t remnant_31932;
    int64_t ltid_pre_31927;
    int64_t remnant_31933;
    int64_t ltid_pre_31928;
    int64_t remnant_31934;
    int64_t slice_31935;
    int64_t slice_31936;
    int64_t gtid_25564;
    int64_t remnant_31937;
    int64_t gtid_25565;
    int64_t remnant_31938;
    __local unsigned char *color_30669;
    __local unsigned char *color_30670;
    int64_t binop_x_27351;
    int64_t phys_tid_25575;
    __local unsigned char *red_arr_mem_31939;
    int64_t gtid_25572;
    int64_t gtid_25573;
    int64_t gtid_25574;
    int64_t dims_flat_31941;
    float eta_p_25576;
    float eta_p_25577;
    float eta_p_31943;
    float eta_p_31944;
    bool ltid_in_bounds_31946;
    int32_t skip_threads_31947;
    bool no_carry_in_31953;
    int64_t phys_tid_25588;
    int64_t gtid_25586;
    int64_t gtid_25587;
    int32_t num_chunks_31958;
    
    local_tid_31916 = get_local_id(0);
    tblock_sizze_31919 = get_local_size(0);
    wave_sizze_31918 = LOCKSTEP_WIDTH;
    block_id_31917 = get_tblock_id(0);
    global_tid_31915 = block_id_31917 * tblock_sizze_31919 + local_tid_31916;
    phys_tblock_id_25566 = sext_i32_i64(block_id_31917);
    slice_31922 = d_13944;
    slice_31923 = d_13944 * slice_31922;
    ltid_pre_31920 = squot64(sext_i32_i64(local_tid_31916), slice_31922);
    remnant_31924 = sext_i32_i64(local_tid_31916) - ltid_pre_31920 * slice_31922;
    ltid_pre_31921 = remnant_31924;
    remnant_31925 = remnant_31924 - ltid_pre_31921;
    slice_31929 = d_13944;
    slice_31930 = d_13944 * slice_31929;
    slice_31931 = d_13944 * slice_31930;
    ltid_pre_31926 = squot64(sext_i32_i64(local_tid_31916), slice_31930);
    remnant_31932 = sext_i32_i64(local_tid_31916) - ltid_pre_31926 * slice_31930;
    ltid_pre_31927 = squot64(remnant_31932, slice_31929);
    remnant_31933 = remnant_31932 - ltid_pre_31927 * slice_31929;
    ltid_pre_31928 = remnant_31933;
    remnant_31934 = remnant_31933 - ltid_pre_31928;
    slice_31935 = m_13945;
    slice_31936 = m_13945 * slice_31935;
    gtid_25564 = squot64(sext_i32_i64(block_id_31917), slice_31935);
    remnant_31937 = sext_i32_i64(block_id_31917) - gtid_25564 * slice_31935;
    gtid_25565 = remnant_31937;
    remnant_31938 = remnant_31937 - gtid_25565;
    color_30669 = (__local unsigned char *) color_30669_backing_0;
    color_30670 = (__local unsigned char *) color_30670_backing_1;
    binop_x_27351 = one_intra_par_min_18858 * gtid_25565;
    phys_tid_25575 = sext_i32_i64(local_tid_31916);
    red_arr_mem_31939 = (__local unsigned char *) red_arr_mem_31939_backing_2;
    gtid_25572 = sext_i32_i64(sext_i64_i32(ltid_pre_31926));
    gtid_25573 = sext_i32_i64(sext_i64_i32(ltid_pre_31927));
    gtid_25574 = sext_i32_i64(sext_i64_i32(ltid_pre_31928));
    if ((slt64(gtid_25572, d_13944) && slt64(gtid_25573, d_13944)) && slt64(gtid_25574, d_13944)) {
        f16 eta_p_25581;
        int64_t binop_y_27352;
        int64_t binop_x_27353;
        int64_t binop_x_27354;
        int64_t new_index_27355;
        int64_t binop_y_27367;
        int64_t new_index_27368;
        f16 eta_p_25582;
        f16 defunc_0_f_res_25583;
        float f16_res_25584;
        
        eta_p_25581 = futrts_from_bits16(((__global uint16_t *) Q_mem_28339)[gtid_25564 * (d_13944 * d_13944) + gtid_25572 * d_13944 + gtid_25574]);
        binop_y_27352 = d_13944 * gtid_25574;
        binop_x_27353 = binop_x_27351 + binop_y_27352;
        binop_x_27354 = gtid_25573 + binop_x_27353;
        new_index_27355 = squot64(binop_x_27354, d_13944);
        binop_y_27367 = d_13944 * new_index_27355;
        new_index_27368 = binop_x_27354 - binop_y_27367;
        eta_p_25582 = futrts_from_bits16(((__global uint16_t *) K_mem_28340)[new_index_27355 * d_13944 + new_index_27368]);
        defunc_0_f_res_25583 = eta_p_25581 * eta_p_25582;
        f16_res_25584 = fpconv_f16_f32(defunc_0_f_res_25583);
        ((__local float *) red_arr_mem_31939)[gtid_25572 * (d_13944 * d_13944) + gtid_25573 * d_13944 + gtid_25574] = f16_res_25584;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    dims_flat_31941 = d_13944 * d_13944 * d_13944;
    ltid_in_bounds_31946 = slt64(sext_i32_i64(local_tid_31916), d_13944 * d_13944 * d_13944);
    // read input for in-block scan
    {
        if (ltid_in_bounds_31946) {
            eta_p_25577 = ((volatile __local float *) red_arr_mem_31939)[sext_i32_i64(local_tid_31916)];
            if ((local_tid_31916 - squot32(local_tid_31916, 32) * 32) == 0) {
                eta_p_25576 = eta_p_25577;
            }
        }
    }
    // in-block scan (hopefully no barriers needed)
    {
        skip_threads_31947 = 1;
        while (slt32(skip_threads_31947, 32)) {
            bool thread_active_31948 = sle32(skip_threads_31947, local_tid_31916 - squot32(local_tid_31916, 32) * 32) && ltid_in_bounds_31946;
            
            if (thread_active_31948) {
                // read operands
                {
                    eta_p_25576 = ((volatile __local float *) red_arr_mem_31939)[sext_i32_i64(local_tid_31916) - sext_i32_i64(skip_threads_31947)];
                }
            }
            // perform operation
            {
                bool inactive_31949 = slt64(srem64(sext_i32_i64(local_tid_31916), d_13944), sext_i32_i64(local_tid_31916) - sext_i32_i64(local_tid_31916 - skip_threads_31947));
                
                if (thread_active_31948 && inactive_31949) {
                    eta_p_25576 = eta_p_25577;
                }
                if (thread_active_31948) {
                    if (!inactive_31949) {
                        float defunc_0_op_res_25578 = eta_p_25576 + eta_p_25577;
                        
                        eta_p_25576 = defunc_0_op_res_25578;
                    }
                }
            }
            if (sle32(wave_sizze_31918, skip_threads_31947)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            if (thread_active_31948) {
                // write result
                {
                    ((volatile __local float *) red_arr_mem_31939)[sext_i32_i64(local_tid_31916)] = eta_p_25576;
                    eta_p_25577 = eta_p_25576;
                }
            }
            if (sle32(wave_sizze_31918, skip_threads_31947)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            skip_threads_31947 *= 2;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // last thread of block 'i' writes its result to offset 'i'
    {
        if ((local_tid_31916 - squot32(local_tid_31916, 32) * 32) == 31 && ltid_in_bounds_31946) {
            ((volatile __local float *) red_arr_mem_31939)[sext_i32_i64(squot32(local_tid_31916, 32))] = eta_p_25576;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
    {
        int32_t skip_threads_31950;
        
        // read input for in-block scan
        {
            if (squot32(local_tid_31916, 32) == 0 && ltid_in_bounds_31946) {
                eta_p_31944 = ((volatile __local float *) red_arr_mem_31939)[sext_i32_i64(local_tid_31916)];
                if ((local_tid_31916 - squot32(local_tid_31916, 32) * 32) == 0) {
                    eta_p_31943 = eta_p_31944;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_31950 = 1;
            while (slt32(skip_threads_31950, 32)) {
                bool thread_active_31951 = sle32(skip_threads_31950, local_tid_31916 - squot32(local_tid_31916, 32) * 32) && (squot32(local_tid_31916, 32) == 0 && ltid_in_bounds_31946);
                
                if (thread_active_31951) {
                    // read operands
                    {
                        eta_p_31943 = ((volatile __local float *) red_arr_mem_31939)[sext_i32_i64(local_tid_31916) - sext_i32_i64(skip_threads_31950)];
                    }
                }
                // perform operation
                {
                    bool inactive_31952 = slt64(srem64(sext_i32_i64(local_tid_31916 * 32 + 32 - 1), d_13944), sext_i32_i64(local_tid_31916 * 32 + 32 - 1) - sext_i32_i64((local_tid_31916 - skip_threads_31950) * 32 + 32 - 1));
                    
                    if (thread_active_31951 && inactive_31952) {
                        eta_p_31943 = eta_p_31944;
                    }
                    if (thread_active_31951) {
                        if (!inactive_31952) {
                            float defunc_0_op_res_31945 = eta_p_31943 + eta_p_31944;
                            
                            eta_p_31943 = defunc_0_op_res_31945;
                        }
                    }
                }
                if (sle32(wave_sizze_31918, skip_threads_31950)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (thread_active_31951) {
                    // write result
                    {
                        ((volatile __local float *) red_arr_mem_31939)[sext_i32_i64(local_tid_31916)] = eta_p_31943;
                        eta_p_31944 = eta_p_31943;
                    }
                }
                if (sle32(wave_sizze_31918, skip_threads_31950)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_31950 *= 2;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    no_carry_in_31953 = squot32(local_tid_31916, 32) == 0 || !ltid_in_bounds_31946;
    // carry-in for every block except the first
    {
        // read operands
        {
            if (!no_carry_in_31953) {
                eta_p_25577 = eta_p_25576;
                eta_p_25576 = ((__local float *) red_arr_mem_31939)[sext_i32_i64(squot32(local_tid_31916, 32)) - (int64_t) 1];
            }
        }
        // perform operation
        {
            bool inactive_31954 = slt64(srem64(sext_i32_i64(local_tid_31916), d_13944), sext_i32_i64(local_tid_31916) - sext_i32_i64(squot32(local_tid_31916, 32) * 32 - 1));
            
            if (!no_carry_in_31953) {
                if (inactive_31954) {
                    eta_p_25576 = eta_p_25577;
                }
            }
            if (!no_carry_in_31953) {
                if (!inactive_31954) {
                    float defunc_0_op_res_25578 = eta_p_25576 + eta_p_25577;
                    
                    eta_p_25576 = defunc_0_op_res_25578;
                }
            }
        }
        // write final result
        {
            if (!no_carry_in_31953) {
                ((__local float *) red_arr_mem_31939)[sext_i32_i64(local_tid_31916)] = eta_p_25576;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // restore correct values for first block
    {
        if (squot32(local_tid_31916, 32) == 0 && ltid_in_bounds_31946) {
            ((__local float *) red_arr_mem_31939)[sext_i32_i64(local_tid_31916)] = eta_p_25577;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    barrier(CLK_LOCAL_MEM_FENCE);
    // Save result of reduction.
    {
        int32_t num_chunks_31955 = sdiv_up32(sext_i64_i32(d_13944) * sext_i64_i32(d_13944), sext_i64_i32(computed_tblock_sizze_25560));
        
        for (int32_t chunk_i_31956 = 0; chunk_i_31956 < num_chunks_31955; chunk_i_31956++) {
            int32_t i_31957 = chunk_i_31956 * sext_i64_i32(computed_tblock_sizze_25560) + local_tid_31916;
            
            if (slt32(i_31957, sext_i64_i32(d_13944) * sext_i64_i32(d_13944))) {
                ((__local float *) color_30670)[sext_i32_i64(squot32(i_31957, sext_i64_i32(d_13944))) * d_13944 + sext_i32_i64(i_31957 - squot32(i_31957, sext_i64_i32(d_13944)) * sext_i64_i32(d_13944))] = ((__local float *) red_arr_mem_31939)[d_13944 - (int64_t) 1 + sext_i32_i64(squot32(i_31957, sext_i64_i32(d_13944))) * (d_13944 * d_13944) + sext_i32_i64(i_31957 - squot32(i_31957, sext_i64_i32(d_13944)) * sext_i64_i32(d_13944)) * d_13944];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    phys_tid_25588 = sext_i32_i64(local_tid_31916);
    gtid_25586 = sext_i32_i64(sext_i64_i32(ltid_pre_31920));
    gtid_25587 = sext_i32_i64(sext_i64_i32(ltid_pre_31921));
    if (slt64(gtid_25586, d_13944) && slt64(gtid_25587, d_13944)) {
        float defunc_0_f_res_25589;
        f16 f32_res_25590;
        
        defunc_0_f_res_25589 = ((__local float *) color_30670)[gtid_25586 * d_13944 + gtid_25587];
        f32_res_25590 = fpconv_f32_f16(defunc_0_f_res_25589);
        ((__local uint16_t *) color_30669)[gtid_25586 * d_13944 + gtid_25587] = futrts_to_bits16(f32_res_25590);
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    num_chunks_31958 = sdiv_up32(sext_i64_i32(d_13944) * sext_i64_i32(d_13944), sext_i64_i32(computed_tblock_sizze_25560));
    for (int32_t chunk_i_31959 = 0; chunk_i_31959 < num_chunks_31958; chunk_i_31959++) {
        int32_t i_31960 = chunk_i_31959 * sext_i64_i32(computed_tblock_sizze_25560) + local_tid_31916;
        
        if (slt32(i_31960, sext_i64_i32(d_13944) * sext_i64_i32(d_13944))) {
            ((__global uint16_t *) mem_28353)[gtid_25564 * (d_13944 * d_13944 * m_13945) + gtid_25565 * (d_13944 * d_13944) + sext_i32_i64(squot32(i_31960, sext_i64_i32(d_13944))) * d_13944 + sext_i32_i64(i_31960 - squot32(i_31960, sext_i64_i32(d_13944)) * sext_i64_i32(d_13944))] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) color_30669)[sext_i32_i64(squot32(i_31960, sext_i64_i32(d_13944))) * d_13944 + sext_i32_i64(i_31960 - squot32(i_31960, sext_i64_i32(d_13944)) * sext_i64_i32(d_13944))]));
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
  error_4:
    return;
}
FUTHARK_KERNEL_SIZED(FlashAttention_6392zisegmap_intrablock_25610_dim1, 1, 1)
void FlashAttention_6392zisegmap_intrablock_25610(__global int *global_failure, int64_t d_13944, int64_t m_13945, int64_t q_16078, unsigned char opaque_res_16082_bits, int64_t ext_28419, int64_t ext_28420, __global unsigned char *ext_mem_28421, __global unsigned char *mem_28426, __global unsigned char *mem_28429)
{
    bool opaque_res_16082 = opaque_res_16082_bits;
    volatile __local unsigned char *red_arr_mem_31989_backing_2 = &shared_mem[0];
    const int64_t red_arr_mem_31989_backing_2_offset = 0 + (int64_t) 64;
    volatile __local unsigned char *red_arr_mem_31984_backing_1 = &shared_mem[red_arr_mem_31989_backing_2_offset];
    const int64_t red_arr_mem_31984_backing_1_offset = red_arr_mem_31989_backing_2_offset + (int64_t) 64;
    volatile __local unsigned char *color_30671_backing_0 = &shared_mem[red_arr_mem_31984_backing_1_offset];
    const int64_t color_30671_backing_0_offset = red_arr_mem_31984_backing_1_offset + (int64_t) 2048;
    
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_31965;
    int32_t tblock_sizze_31968;
    int32_t wave_sizze_31967;
    int32_t block_id_31966;
    int32_t global_tid_31964;
    int64_t phys_tblock_id_25610;
    int64_t slice_31970;
    int64_t ltid_pre_31969;
    int64_t remnant_31971;
    int64_t slice_31973;
    int64_t ltid_pre_31972;
    int64_t remnant_31974;
    int64_t slice_31975;
    int64_t slice_31976;
    int64_t gtid_25608;
    int64_t remnant_31977;
    int64_t gtid_25609;
    int64_t remnant_31978;
    __local unsigned char *color_30671;
    f16 softmaxChunkML_res_25613;
    f16 softmaxChunkML_res_25614;
    f16 mi_old_25616;
    f16 li_old_25617;
    
    local_tid_31965 = get_local_id(0);
    tblock_sizze_31968 = get_local_size(0);
    wave_sizze_31967 = LOCKSTEP_WIDTH;
    block_id_31966 = get_tblock_id(0);
    global_tid_31964 = block_id_31966 * tblock_sizze_31968 + local_tid_31965;
    phys_tblock_id_25610 = sext_i32_i64(block_id_31966);
    slice_31970 = (int64_t) 32;
    ltid_pre_31969 = sext_i32_i64(local_tid_31965);
    remnant_31971 = sext_i32_i64(local_tid_31965) - ltid_pre_31969;
    slice_31973 = (int64_t) 1024;
    ltid_pre_31972 = sext_i32_i64(local_tid_31965);
    remnant_31974 = sext_i32_i64(local_tid_31965) - ltid_pre_31972;
    slice_31975 = d_13944;
    slice_31976 = m_13945 * slice_31975;
    gtid_25608 = squot64(sext_i32_i64(block_id_31966), slice_31975);
    remnant_31977 = sext_i32_i64(block_id_31966) - gtid_25608 * slice_31975;
    gtid_25609 = remnant_31977;
    remnant_31978 = remnant_31977 - gtid_25609;
    color_30671 = (__local unsigned char *) color_30671_backing_0;
    barrier(CLK_LOCAL_MEM_FENCE);
    mi_old_25616 = (f16) -INFINITY;
    li_old_25617 = (f16) 0.0F;
    for (int64_t i_25615 = 0; i_25615 < q_16078; i_25615++) {
        int64_t copy2shr_arg0_25618;
        int32_t num_chunks_31981;
        f16 defunc_0_reduce_comm_res_25623;
        int64_t phys_tid_25625;
        __local unsigned char *red_arr_mem_31984;
        int64_t gtid_25624;
        f16 defunc_0_f_res_25630;
        f16 r_25632;
        int32_t offset_31987;
        int32_t skip_waves_31988;
        f16 eta_p_25626;
        f16 eta_p_25627;
        f16 defunc_0_reduce_comm_res_25637;
        int64_t phys_tid_25639;
        __local unsigned char *red_arr_mem_31989;
        int64_t gtid_25638;
        f16 defunc_0_f_res_25644;
        f16 r_25646;
        int32_t offset_31992;
        int32_t skip_waves_31993;
        f16 eta_p_25640;
        f16 eta_p_25641;
        f16 max_res_25653;
        f16 real_exp_arg0_25654;
        f16 exp_res_25655;
        f16 exp_arg0_25656;
        f16 exp_res_25657;
        f16 eli_25658;
        f16 zp_rhs_25659;
        f16 li_new_25660;
        f16 mi_old_tmp_31979;
        f16 li_old_tmp_31980;
        
        copy2shr_arg0_25618 = mul64((int64_t) 1024, i_25615);
        num_chunks_31981 = 32;
        for (int32_t chunk_i_31982 = 0; chunk_i_31982 < num_chunks_31981; chunk_i_31982++) {
            int32_t i_31983 = chunk_i_31982 * 32 + local_tid_31965;
            
            if (slt32(i_31983, 1024)) {
                ((__local uint16_t *) color_30671)[sext_i32_i64(i_31983)] = futrts_to_bits16(futrts_from_bits16(((__global uint16_t *) ext_mem_28421)[gtid_25608 * ext_28420 + gtid_25609 * ext_28419 + copy2shr_arg0_25618 + sext_i32_i64(i_31983)]));
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_LOCAL_MEM_FENCE);
        if (!opaque_res_16082) {
            barrier(CLK_LOCAL_MEM_FENCE);
            if (local_tid_31965 == 0) {
                ((__local uint16_t *) color_30671)[(int64_t) 0] = futrts_to_bits16((f16) 0.0F);
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }
        phys_tid_25625 = sext_i32_i64(local_tid_31965);
        red_arr_mem_31984 = (__local unsigned char *) red_arr_mem_31984_backing_1;
        gtid_25624 = sext_i32_i64(sext_i64_i32(ltid_pre_31969));
        r_25632 = (f16) -INFINITY;
        for (int64_t i_25631 = 0; i_25631 < (int64_t) 32; i_25631++) {
            int64_t zp_lhs_25633;
            int64_t f_arg0_25634;
            f16 f_arg0_25635;
            f16 max_res_25636;
            f16 r_tmp_31986;
            
            zp_lhs_25633 = mul64((int64_t) 32, i_25631);
            f_arg0_25634 = add64(gtid_25624, zp_lhs_25633);
            f_arg0_25635 = futrts_from_bits16(((__local uint16_t *) color_30671)[f_arg0_25634]);
            max_res_25636 = fmax16(r_25632, f_arg0_25635);
            r_tmp_31986 = max_res_25636;
            r_25632 = r_tmp_31986;
        }
        defunc_0_f_res_25630 = r_25632;
        ((__local uint16_t *) red_arr_mem_31984)[gtid_25624] = futrts_to_bits16(defunc_0_f_res_25630);
        barrier(CLK_LOCAL_MEM_FENCE);
        skip_waves_31988 = 1;
        offset_31987 = 0;
        // participating threads read initial accumulator
        {
            if (slt32(local_tid_31965, 32)) {
                eta_p_25626 = futrts_from_bits16(((__local uint16_t *) red_arr_mem_31984)[sext_i32_i64(local_tid_31965 + offset_31987)]);
            }
        }
        offset_31987 = 1;
        while (slt32(offset_31987, wave_sizze_31967)) {
            if (slt32(local_tid_31965 + offset_31987, 32) && ((local_tid_31965 - squot32(local_tid_31965, wave_sizze_31967) * wave_sizze_31967) & (2 * offset_31987 - 1)) == 0) {
                // read array element
                {
                    eta_p_25627 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_31984)[sext_i32_i64(local_tid_31965 + offset_31987)]);
                }
                // apply reduction operation
                {
                    f16 max_res_25628 = fmax16(eta_p_25626, eta_p_25627);
                    
                    eta_p_25626 = max_res_25628;
                }
                // write result of operation
                {
                    ((volatile __local uint16_t *) red_arr_mem_31984)[sext_i32_i64(local_tid_31965)] = futrts_to_bits16(eta_p_25626);
                }
            }
            offset_31987 *= 2;
        }
        while (slt32(skip_waves_31988, squot32(32 + wave_sizze_31967 - 1, wave_sizze_31967))) {
            barrier(CLK_LOCAL_MEM_FENCE);
            offset_31987 = skip_waves_31988 * wave_sizze_31967;
            if (slt32(local_tid_31965 + offset_31987, 32) && ((local_tid_31965 - squot32(local_tid_31965, wave_sizze_31967) * wave_sizze_31967) == 0 && (squot32(local_tid_31965, wave_sizze_31967) & (2 * skip_waves_31988 - 1)) == 0)) {
                // read array element
                {
                    eta_p_25627 = futrts_from_bits16(((__local uint16_t *) red_arr_mem_31984)[sext_i32_i64(local_tid_31965 + offset_31987)]);
                }
                // apply reduction operation
                {
                    f16 max_res_25628 = fmax16(eta_p_25626, eta_p_25627);
                    
                    eta_p_25626 = max_res_25628;
                }
                // write result of operation
                {
                    ((__local uint16_t *) red_arr_mem_31984)[sext_i32_i64(local_tid_31965)] = futrts_to_bits16(eta_p_25626);
                }
            }
            skip_waves_31988 *= 2;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_LOCAL_MEM_FENCE);
        // Save result of reduction.
        {
            defunc_0_reduce_comm_res_25623 = futrts_from_bits16(((__local uint16_t *) red_arr_mem_31984)[(int64_t) 0]);
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        phys_tid_25639 = sext_i32_i64(local_tid_31965);
        red_arr_mem_31989 = (__local unsigned char *) red_arr_mem_31989_backing_2;
        gtid_25638 = sext_i32_i64(sext_i64_i32(ltid_pre_31969));
        r_25646 = (f16) 0.0F;
        for (int64_t i_25645 = 0; i_25645 < (int64_t) 32; i_25645++) {
            int64_t zp_lhs_25647;
            int64_t f_arg0_25648;
            f16 f_arg0_25649;
            f16 real_exp_arg0_25650;
            f16 exp_res_25651;
            f16 defunc_0_bop_res_25652;
            f16 r_tmp_31991;
            
            zp_lhs_25647 = mul64((int64_t) 32, i_25645);
            f_arg0_25648 = add64(gtid_25638, zp_lhs_25647);
            f_arg0_25649 = futrts_from_bits16(((__local uint16_t *) color_30671)[f_arg0_25648]);
            real_exp_arg0_25650 = f_arg0_25649 - defunc_0_reduce_comm_res_25623;
            exp_res_25651 = futrts_exp16(real_exp_arg0_25650);
            defunc_0_bop_res_25652 = r_25646 + exp_res_25651;
            r_tmp_31991 = defunc_0_bop_res_25652;
            r_25646 = r_tmp_31991;
        }
        defunc_0_f_res_25644 = r_25646;
        ((__local uint16_t *) red_arr_mem_31989)[gtid_25638] = futrts_to_bits16(defunc_0_f_res_25644);
        barrier(CLK_LOCAL_MEM_FENCE);
        skip_waves_31993 = 1;
        offset_31992 = 0;
        // participating threads read initial accumulator
        {
            if (slt32(local_tid_31965, 32)) {
                eta_p_25640 = futrts_from_bits16(((__local uint16_t *) red_arr_mem_31989)[sext_i32_i64(local_tid_31965 + offset_31992)]);
            }
        }
        offset_31992 = 1;
        while (slt32(offset_31992, wave_sizze_31967)) {
            if (slt32(local_tid_31965 + offset_31992, 32) && ((local_tid_31965 - squot32(local_tid_31965, wave_sizze_31967) * wave_sizze_31967) & (2 * offset_31992 - 1)) == 0) {
                // read array element
                {
                    eta_p_25641 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_31989)[sext_i32_i64(local_tid_31965 + offset_31992)]);
                }
                // apply reduction operation
                {
                    f16 defunc_0_op_res_25642 = eta_p_25640 + eta_p_25641;
                    
                    eta_p_25640 = defunc_0_op_res_25642;
                }
                // write result of operation
                {
                    ((volatile __local uint16_t *) red_arr_mem_31989)[sext_i32_i64(local_tid_31965)] = futrts_to_bits16(eta_p_25640);
                }
            }
            offset_31992 *= 2;
        }
        while (slt32(skip_waves_31993, squot32(32 + wave_sizze_31967 - 1, wave_sizze_31967))) {
            barrier(CLK_LOCAL_MEM_FENCE);
            offset_31992 = skip_waves_31993 * wave_sizze_31967;
            if (slt32(local_tid_31965 + offset_31992, 32) && ((local_tid_31965 - squot32(local_tid_31965, wave_sizze_31967) * wave_sizze_31967) == 0 && (squot32(local_tid_31965, wave_sizze_31967) & (2 * skip_waves_31993 - 1)) == 0)) {
                // read array element
                {
                    eta_p_25641 = futrts_from_bits16(((__local uint16_t *) red_arr_mem_31989)[sext_i32_i64(local_tid_31965 + offset_31992)]);
                }
                // apply reduction operation
                {
                    f16 defunc_0_op_res_25642 = eta_p_25640 + eta_p_25641;
                    
                    eta_p_25640 = defunc_0_op_res_25642;
                }
                // write result of operation
                {
                    ((__local uint16_t *) red_arr_mem_31989)[sext_i32_i64(local_tid_31965)] = futrts_to_bits16(eta_p_25640);
                }
            }
            skip_waves_31993 *= 2;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_LOCAL_MEM_FENCE);
        // Save result of reduction.
        {
            defunc_0_reduce_comm_res_25637 = futrts_from_bits16(((__local uint16_t *) red_arr_mem_31989)[(int64_t) 0]);
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        max_res_25653 = fmax16(mi_old_25616, defunc_0_reduce_comm_res_25623);
        real_exp_arg0_25654 = defunc_0_reduce_comm_res_25623 - max_res_25653;
        exp_res_25655 = futrts_exp16(real_exp_arg0_25654);
        exp_arg0_25656 = mi_old_25616 - max_res_25653;
        exp_res_25657 = futrts_exp16(exp_arg0_25656);
        eli_25658 = li_old_25617 * exp_res_25657;
        zp_rhs_25659 = defunc_0_reduce_comm_res_25637 * exp_res_25655;
        li_new_25660 = eli_25658 + zp_rhs_25659;
        mi_old_tmp_31979 = max_res_25653;
        li_old_tmp_31980 = li_new_25660;
        mi_old_25616 = mi_old_tmp_31979;
        li_old_25617 = li_old_tmp_31980;
    }
    softmaxChunkML_res_25613 = mi_old_25616;
    softmaxChunkML_res_25614 = li_old_25617;
    if (local_tid_31965 == 0) {
        ((__global uint16_t *) mem_28426)[gtid_25608 * d_13944 + gtid_25609] = futrts_to_bits16(softmaxChunkML_res_25613);
    }
    if (local_tid_31965 == 0) {
        ((__global uint16_t *) mem_28429)[gtid_25608 * d_13944 + gtid_25609] = futrts_to_bits16(softmaxChunkML_res_25614);
    }
    
  error_10:
    return;
}
FUTHARK_KERNEL
void FlashAttention_6392zisegmap_intrablock_25823(__global int *global_failure, int failure_is_an_option, __global int64_t *global_failure_args, int64_t d_13944, int64_t m_13945, int64_t dzlz7bUZLztZRz20Umz20Udz7dUzg_13946, unsigned char cond_16173_bits, unsigned char ok_or_empty_16195_bits, int64_t dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396, int64_t dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400, int64_t m_16509, int64_t one_intra_par_min_18858, int64_t computed_tblock_sizze_25813, int64_t bytes_28347, int64_t bytes_28648, int64_t bytes_28700, int64_t bytes_28703, int64_t maxSubHelper_30677, int64_t ctx_30876, int64_t ctx_30877, int64_t ctx_30903, int64_t ctx_30904, int64_t ctx_30910, int64_t ctx_30925, int64_t ctx_30926, int64_t ctx_30932, int64_t binop_x_30941, int64_t ctx_30945, int32_t num_chunks_32182, int32_t num_chunks_32185, __global unsigned char *V_mem_28341, __global unsigned char *mem_28434, __global unsigned char *mem_28934, __global unsigned char *mem_28940, __global unsigned char *mem_29032, __global unsigned char *color_30674, __global unsigned char *color_30675, __global unsigned char *color_30685)
{
    bool cond_16173 = cond_16173_bits;
    bool ok_or_empty_16195 = ok_or_empty_16195_bits;
    volatile __local unsigned char *red_arr_mem_32321_backing_8 = &shared_mem[0];
    const int64_t red_arr_mem_32321_backing_8_offset = 0 + ((int64_t) 2 * (m_16509 * d_13944 * d_13944) + srem64((int64_t) 8 - srem64((int64_t) 2 * (m_16509 * d_13944 * d_13944), (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *red_arr_mem_32292_backing_7 = &shared_mem[red_arr_mem_32321_backing_8_offset];
    const int64_t red_arr_mem_32292_backing_7_offset = red_arr_mem_32321_backing_8_offset + ((int64_t) 2 * ((int64_t) 4 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396) + srem64((int64_t) 8 - srem64((int64_t) 2 * ((int64_t) 4 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396), (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_30684_backing_6 = &shared_mem[red_arr_mem_32292_backing_7_offset];
    const int64_t color_30684_backing_6_offset = red_arr_mem_32292_backing_7_offset + (bytes_28347 + srem64((int64_t) 8 - srem64(bytes_28347, (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_30683_backing_5 = &shared_mem[color_30684_backing_6_offset];
    const int64_t color_30683_backing_5_offset = color_30684_backing_6_offset + (bytes_28648 + srem64((int64_t) 8 - srem64(bytes_28648, (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_30682_backing_4 = &shared_mem[color_30683_backing_5_offset];
    const int64_t color_30682_backing_4_offset = color_30683_backing_5_offset + (bytes_28700 + srem64((int64_t) 8 - srem64(bytes_28700, (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_30681_backing_3 = &shared_mem[color_30682_backing_4_offset];
    const int64_t color_30681_backing_3_offset = color_30682_backing_4_offset + (bytes_28703 + srem64((int64_t) 8 - srem64(bytes_28703, (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_30680_backing_2 = &shared_mem[color_30681_backing_3_offset];
    const int64_t color_30680_backing_2_offset = color_30681_backing_3_offset + (bytes_28703 + srem64((int64_t) 8 - srem64(bytes_28703, (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_30679_backing_1 = &shared_mem[color_30680_backing_2_offset];
    const int64_t color_30679_backing_1_offset = color_30680_backing_2_offset + (maxSubHelper_30677 + srem64((int64_t) 8 - srem64(maxSubHelper_30677, (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_30678_backing_0 = &shared_mem[color_30679_backing_1_offset];
    const int64_t color_30678_backing_0_offset = color_30679_backing_1_offset + (bytes_28347 + srem64((int64_t) 8 - srem64(bytes_28347, (int64_t) 8), (int64_t) 8));
    volatile __local int local_failure;
    
    if (failure_is_an_option) {
        int failed = *global_failure >= 0;
        
        if (failed)
            return;
    }
    local_failure = 0;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t local_tid_32189;
    int32_t tblock_sizze_32192;
    int32_t wave_sizze_32191;
    int32_t block_id_32190;
    int32_t global_tid_32188;
    int64_t phys_tblock_id_25823;
    int64_t slice_32196;
    int64_t slice_32197;
    int64_t slice_32198;
    int64_t ltid_pre_32193;
    int64_t remnant_32199;
    int64_t ltid_pre_32194;
    int64_t remnant_32200;
    int64_t ltid_pre_32195;
    int64_t remnant_32201;
    int64_t slice_32206;
    int64_t slice_32207;
    int64_t slice_32208;
    int64_t slice_32209;
    int64_t ltid_pre_32202;
    int64_t remnant_32210;
    int64_t ltid_pre_32203;
    int64_t remnant_32211;
    int64_t ltid_pre_32204;
    int64_t remnant_32212;
    int64_t ltid_pre_32205;
    int64_t remnant_32213;
    int64_t slice_32217;
    int64_t slice_32218;
    int64_t slice_32219;
    int64_t ltid_pre_32214;
    int64_t remnant_32220;
    int64_t ltid_pre_32215;
    int64_t remnant_32221;
    int64_t ltid_pre_32216;
    int64_t remnant_32222;
    int64_t slice_32227;
    int64_t slice_32228;
    int64_t slice_32229;
    int64_t slice_32230;
    int64_t ltid_pre_32223;
    int64_t remnant_32231;
    int64_t ltid_pre_32224;
    int64_t remnant_32232;
    int64_t ltid_pre_32225;
    int64_t remnant_32233;
    int64_t ltid_pre_32226;
    int64_t remnant_32234;
    int64_t slice_32239;
    int64_t slice_32240;
    int64_t slice_32241;
    int64_t slice_32242;
    int64_t ltid_pre_32235;
    int64_t remnant_32243;
    int64_t ltid_pre_32236;
    int64_t remnant_32244;
    int64_t ltid_pre_32237;
    int64_t remnant_32245;
    int64_t ltid_pre_32238;
    int64_t remnant_32246;
    int64_t slice_32252;
    int64_t slice_32253;
    int64_t slice_32254;
    int64_t slice_32255;
    int64_t slice_32256;
    int64_t ltid_pre_32247;
    int64_t remnant_32257;
    int64_t ltid_pre_32248;
    int64_t remnant_32258;
    int64_t ltid_pre_32249;
    int64_t remnant_32259;
    int64_t ltid_pre_32250;
    int64_t remnant_32260;
    int64_t ltid_pre_32251;
    int64_t remnant_32261;
    int64_t slice_32263;
    int64_t ltid_pre_32262;
    int64_t remnant_32264;
    int64_t slice_32267;
    int64_t slice_32268;
    int64_t ltid_pre_32265;
    int64_t remnant_32269;
    int64_t ltid_pre_32266;
    int64_t remnant_32270;
    int64_t slice_32272;
    int64_t ltid_pre_32271;
    int64_t remnant_32273;
    int64_t slice_32274;
    int64_t gtid_25822;
    int64_t remnant_32275;
    __local unsigned char *color_30678;
    __local unsigned char *color_30679;
    __local unsigned char *color_30680;
    __local unsigned char *color_30681;
    __local unsigned char *color_30682;
    __local unsigned char *color_30683;
    __local unsigned char *color_30684;
    int64_t binop_x_30900;
    int64_t binop_x_30908;
    int64_t binop_x_30922;
    int64_t binop_x_30930;
    int64_t binop_x_30939;
    __local unsigned char *ext_mem_ext_30953;
    int32_t num_chunks_32336;
    
    local_tid_32189 = get_local_id(0);
    tblock_sizze_32192 = get_local_size(0);
    wave_sizze_32191 = LOCKSTEP_WIDTH;
    block_id_32190 = get_tblock_id(0);
    global_tid_32188 = block_id_32190 * tblock_sizze_32192 + local_tid_32189;
    phys_tblock_id_25823 = sext_i32_i64(block_id_32190);
    slice_32196 = dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396;
    slice_32197 = (int64_t) 2 * slice_32196;
    slice_32198 = (int64_t) 2 * slice_32197;
    ltid_pre_32193 = squot64(sext_i32_i64(local_tid_32189), slice_32197);
    remnant_32199 = sext_i32_i64(local_tid_32189) - ltid_pre_32193 * slice_32197;
    ltid_pre_32194 = squot64(remnant_32199, slice_32196);
    remnant_32200 = remnant_32199 - ltid_pre_32194 * slice_32196;
    ltid_pre_32195 = remnant_32200;
    remnant_32201 = remnant_32200 - ltid_pre_32195;
    slice_32206 = dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400;
    slice_32207 = dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396 * slice_32206;
    slice_32208 = (int64_t) 2 * slice_32207;
    slice_32209 = (int64_t) 2 * slice_32208;
    ltid_pre_32202 = squot64(sext_i32_i64(local_tid_32189), slice_32208);
    remnant_32210 = sext_i32_i64(local_tid_32189) - ltid_pre_32202 * slice_32208;
    ltid_pre_32203 = squot64(remnant_32210, slice_32207);
    remnant_32211 = remnant_32210 - ltid_pre_32203 * slice_32207;
    ltid_pre_32204 = squot64(remnant_32211, slice_32206);
    remnant_32212 = remnant_32211 - ltid_pre_32204 * slice_32206;
    ltid_pre_32205 = remnant_32212;
    remnant_32213 = remnant_32212 - ltid_pre_32205;
    slice_32217 = dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400;
    slice_32218 = (int64_t) 2 * slice_32217;
    slice_32219 = (int64_t) 2 * slice_32218;
    ltid_pre_32214 = squot64(sext_i32_i64(local_tid_32189), slice_32218);
    remnant_32220 = sext_i32_i64(local_tid_32189) - ltid_pre_32214 * slice_32218;
    ltid_pre_32215 = squot64(remnant_32220, slice_32217);
    remnant_32221 = remnant_32220 - ltid_pre_32215 * slice_32217;
    ltid_pre_32216 = remnant_32221;
    remnant_32222 = remnant_32221 - ltid_pre_32216;
    slice_32227 = dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396;
    slice_32228 = dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * slice_32227;
    slice_32229 = (int64_t) 2 * slice_32228;
    slice_32230 = (int64_t) 2 * slice_32229;
    ltid_pre_32223 = squot64(sext_i32_i64(local_tid_32189), slice_32229);
    remnant_32231 = sext_i32_i64(local_tid_32189) - ltid_pre_32223 * slice_32229;
    ltid_pre_32224 = squot64(remnant_32231, slice_32228);
    remnant_32232 = remnant_32231 - ltid_pre_32224 * slice_32228;
    ltid_pre_32225 = squot64(remnant_32232, slice_32227);
    remnant_32233 = remnant_32232 - ltid_pre_32225 * slice_32227;
    ltid_pre_32226 = remnant_32233;
    remnant_32234 = remnant_32233 - ltid_pre_32226;
    slice_32239 = dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400;
    slice_32240 = dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * slice_32239;
    slice_32241 = (int64_t) 2 * slice_32240;
    slice_32242 = (int64_t) 2 * slice_32241;
    ltid_pre_32235 = squot64(sext_i32_i64(local_tid_32189), slice_32241);
    remnant_32243 = sext_i32_i64(local_tid_32189) - ltid_pre_32235 * slice_32241;
    ltid_pre_32236 = squot64(remnant_32243, slice_32240);
    remnant_32244 = remnant_32243 - ltid_pre_32236 * slice_32240;
    ltid_pre_32237 = squot64(remnant_32244, slice_32239);
    remnant_32245 = remnant_32244 - ltid_pre_32237 * slice_32239;
    ltid_pre_32238 = remnant_32245;
    remnant_32246 = remnant_32245 - ltid_pre_32238;
    slice_32252 = dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396;
    slice_32253 = dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * slice_32252;
    slice_32254 = dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * slice_32253;
    slice_32255 = (int64_t) 2 * slice_32254;
    slice_32256 = (int64_t) 2 * slice_32255;
    ltid_pre_32247 = squot64(sext_i32_i64(local_tid_32189), slice_32255);
    remnant_32257 = sext_i32_i64(local_tid_32189) - ltid_pre_32247 * slice_32255;
    ltid_pre_32248 = squot64(remnant_32257, slice_32254);
    remnant_32258 = remnant_32257 - ltid_pre_32248 * slice_32254;
    ltid_pre_32249 = squot64(remnant_32258, slice_32253);
    remnant_32259 = remnant_32258 - ltid_pre_32249 * slice_32253;
    ltid_pre_32250 = squot64(remnant_32259, slice_32252);
    remnant_32260 = remnant_32259 - ltid_pre_32250 * slice_32252;
    ltid_pre_32251 = remnant_32260;
    remnant_32261 = remnant_32260 - ltid_pre_32251;
    slice_32263 = d_13944;
    ltid_pre_32262 = sext_i32_i64(local_tid_32189);
    remnant_32264 = sext_i32_i64(local_tid_32189) - ltid_pre_32262;
    slice_32267 = d_13944;
    slice_32268 = d_13944 * slice_32267;
    ltid_pre_32265 = squot64(sext_i32_i64(local_tid_32189), slice_32267);
    remnant_32269 = sext_i32_i64(local_tid_32189) - ltid_pre_32265 * slice_32267;
    ltid_pre_32266 = remnant_32269;
    remnant_32270 = remnant_32269 - ltid_pre_32266;
    slice_32272 = m_16509;
    ltid_pre_32271 = sext_i32_i64(local_tid_32189);
    remnant_32273 = sext_i32_i64(local_tid_32189) - ltid_pre_32271;
    slice_32274 = m_13945;
    gtid_25822 = sext_i32_i64(block_id_32190);
    remnant_32275 = sext_i32_i64(block_id_32190) - gtid_25822;
    color_30678 = (__local unsigned char *) color_30678_backing_0;
    color_30679 = (__local unsigned char *) color_30679_backing_1;
    color_30680 = (__local unsigned char *) color_30680_backing_2;
    color_30681 = (__local unsigned char *) color_30681_backing_3;
    color_30682 = (__local unsigned char *) color_30682_backing_4;
    color_30683 = (__local unsigned char *) color_30683_backing_5;
    color_30684 = (__local unsigned char *) color_30684_backing_6;
    binop_x_30900 = computed_tblock_sizze_25813 * phys_tblock_id_25823;
    binop_x_30908 = computed_tblock_sizze_25813 * phys_tblock_id_25823;
    binop_x_30922 = computed_tblock_sizze_25813 * phys_tblock_id_25823;
    binop_x_30930 = computed_tblock_sizze_25813 * phys_tblock_id_25823;
    binop_x_30939 = computed_tblock_sizze_25813 * phys_tblock_id_25823;
    barrier(CLK_LOCAL_MEM_FENCE);
    if (cond_16173) {
        int64_t phys_tid_25846;
        int64_t gtid_25843;
        int64_t gtid_25844;
        int64_t gtid_25845;
        int64_t phys_tid_25859;
        int64_t gtid_25855;
        int64_t gtid_25856;
        int64_t gtid_25857;
        int64_t gtid_25858;
        int64_t phys_tid_25887;
        int64_t gtid_25884;
        int64_t gtid_25885;
        int64_t gtid_25886;
        int64_t phys_tid_25900;
        int64_t gtid_25896;
        int64_t gtid_25897;
        int64_t gtid_25898;
        int64_t gtid_25899;
        int64_t phys_tid_25972;
        int64_t gtid_25971;
        int64_t phys_tid_25982;
        int64_t gtid_25980;
        int64_t gtid_25981;
        
        phys_tid_25846 = sext_i32_i64(local_tid_32189);
        gtid_25843 = sext_i32_i64(sext_i64_i32(ltid_pre_32193));
        gtid_25844 = sext_i32_i64(sext_i64_i32(ltid_pre_32194));
        gtid_25845 = sext_i32_i64(sext_i64_i32(ltid_pre_32195));
        if ((slt64(gtid_25843, (int64_t) 2) && slt64(gtid_25844, (int64_t) 2)) && slt64(gtid_25845, dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396)) {
            int64_t index_primexp_27099;
            int64_t tmp_25849;
            bool x_25850;
            bool y_25851;
            bool bounds_check_25852;
            bool index_certs_25853;
            
            index_primexp_27099 = mul64(dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396, gtid_25843);
            tmp_25849 = add64(gtid_25845, index_primexp_27099);
            x_25850 = sle64((int64_t) 0, tmp_25849);
            y_25851 = slt64(tmp_25849, dzlz7bUZLztZRz20Umz20Udz7dUzg_13946);
            bounds_check_25852 = x_25850 && y_25851;
            if (!bounds_check_25852) {
                {
                    if (atomic_cmpxchg_i32_global(global_failure, -1, 15) == -1) {
                        global_failure_args[0] = (int64_t) tmp_25849;
                        global_failure_args[1] = (int64_t) dzlz7bUZLztZRz20Umz20Udz7dUzg_13946;
                        ;
                    }
                    local_failure = 1;
                    goto error_1;
                }
            }
        }
        
      error_1:
        barrier(CLK_LOCAL_MEM_FENCE);
        if (local_failure)
            return;
        barrier(CLK_LOCAL_MEM_FENCE);
        phys_tid_25859 = sext_i32_i64(local_tid_32189);
        gtid_25855 = sext_i32_i64(sext_i64_i32(ltid_pre_32202));
        gtid_25856 = sext_i32_i64(sext_i64_i32(ltid_pre_32203));
        gtid_25857 = sext_i32_i64(sext_i64_i32(ltid_pre_32204));
        gtid_25858 = sext_i32_i64(sext_i64_i32(ltid_pre_32205));
        if (((slt64(gtid_25855, (int64_t) 2) && slt64(gtid_25856, (int64_t) 2)) && slt64(gtid_25857, dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396)) && slt64(gtid_25858, dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) {
            int64_t index_primexp_27096;
            int64_t tmp_25864;
            bool x_25865;
            bool y_25866;
            bool bounds_check_25867;
            bool index_certs_25868;
            int64_t binop_y_27383;
            int64_t index_primexp_27384;
            bool index_certs_25862;
            f16 lifted_lambda_res_25869;
            
            index_primexp_27096 = mul64(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400, gtid_25856);
            tmp_25864 = add64(gtid_25858, index_primexp_27096);
            x_25865 = sle64((int64_t) 0, tmp_25864);
            y_25866 = slt64(tmp_25864, d_13944);
            bounds_check_25867 = x_25865 && y_25866;
            if (!bounds_check_25867) {
                {
                    if (atomic_cmpxchg_i32_global(global_failure, -1, 16) == -1) {
                        global_failure_args[0] = (int64_t) tmp_25864;
                        global_failure_args[1] = (int64_t) d_13944;
                        ;
                    }
                    local_failure = 1;
                    goto error_2;
                }
            }
            binop_y_27383 = mul64(dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396, gtid_25855);
            index_primexp_27384 = add64(gtid_25857, binop_y_27383);
            index_certs_25862 = 0;
            lifted_lambda_res_25869 = futrts_from_bits16(((__global uint16_t *) V_mem_28341)[index_primexp_27384 * d_13944 + tmp_25864]);
            ((__local uint16_t *) color_30683)[gtid_25855 * (dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396 * (int64_t) 2) + gtid_25856 * (dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396) + gtid_25857 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 + gtid_25858] = futrts_to_bits16(lifted_lambda_res_25869);
        }
        
      error_2:
        barrier(CLK_LOCAL_MEM_FENCE);
        if (local_failure)
            return;
        barrier(CLK_LOCAL_MEM_FENCE);
        phys_tid_25887 = sext_i32_i64(local_tid_32189);
        gtid_25884 = sext_i32_i64(sext_i64_i32(ltid_pre_32214));
        gtid_25885 = sext_i32_i64(sext_i64_i32(ltid_pre_32215));
        gtid_25886 = sext_i32_i64(sext_i64_i32(ltid_pre_32216));
        if ((slt64(gtid_25884, (int64_t) 2) && slt64(gtid_25885, (int64_t) 2)) && slt64(gtid_25886, dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) {
            int64_t index_primexp_27093;
            int64_t tmp_25890;
            bool x_25891;
            bool y_25892;
            bool bounds_check_25893;
            bool index_certs_25894;
            
            index_primexp_27093 = mul64(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400, gtid_25884);
            tmp_25890 = add64(gtid_25886, index_primexp_27093);
            x_25891 = sle64((int64_t) 0, tmp_25890);
            y_25892 = slt64(tmp_25890, d_13944);
            bounds_check_25893 = x_25891 && y_25892;
            if (!bounds_check_25893) {
                {
                    if (atomic_cmpxchg_i32_global(global_failure, -1, 17) == -1) {
                        global_failure_args[0] = (int64_t) tmp_25890;
                        global_failure_args[1] = (int64_t) d_13944;
                        ;
                    }
                    local_failure = 1;
                    goto error_3;
                }
            }
        }
        
      error_3:
        barrier(CLK_LOCAL_MEM_FENCE);
        if (local_failure)
            return;
        barrier(CLK_LOCAL_MEM_FENCE);
        phys_tid_25900 = sext_i32_i64(local_tid_32189);
        gtid_25896 = sext_i32_i64(sext_i64_i32(ltid_pre_32223));
        gtid_25897 = sext_i32_i64(sext_i64_i32(ltid_pre_32224));
        gtid_25898 = sext_i32_i64(sext_i64_i32(ltid_pre_32225));
        gtid_25899 = sext_i32_i64(sext_i64_i32(ltid_pre_32226));
        if (((slt64(gtid_25896, (int64_t) 2) && slt64(gtid_25897, (int64_t) 2)) && slt64(gtid_25898, dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) && slt64(gtid_25899, dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396)) {
            int64_t index_primexp_27090;
            int64_t tmp_25905;
            bool x_25906;
            bool y_25907;
            bool bounds_check_25908;
            bool index_certs_25909;
            int64_t binop_y_27379;
            int64_t index_primexp_27380;
            bool index_certs_25903;
            f16 lifted_lambda_res_25910;
            
            index_primexp_27090 = mul64(dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396, gtid_25897);
            tmp_25905 = add64(gtid_25899, index_primexp_27090);
            x_25906 = sle64((int64_t) 0, tmp_25905);
            y_25907 = slt64(tmp_25905, dzlz7bUZLztZRz20Umz20Udz7dUzg_13946);
            bounds_check_25908 = x_25906 && y_25907;
            if (!bounds_check_25908) {
                {
                    if (atomic_cmpxchg_i32_global(global_failure, -1, 18) == -1) {
                        global_failure_args[0] = (int64_t) tmp_25905;
                        global_failure_args[1] = (int64_t) dzlz7bUZLztZRz20Umz20Udz7dUzg_13946;
                        ;
                    }
                    local_failure = 1;
                    goto error_4;
                }
            }
            binop_y_27379 = mul64(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400, gtid_25896);
            index_primexp_27380 = add64(gtid_25898, binop_y_27379);
            index_certs_25903 = 0;
            lifted_lambda_res_25910 = futrts_from_bits16(((__global uint16_t *) mem_28434)[gtid_25822 * (dzlz7bUZLztZRz20Umz20Udz7dUzg_13946 * d_13944) + index_primexp_27380 * dzlz7bUZLztZRz20Umz20Udz7dUzg_13946 + tmp_25905]);
            ((__local uint16_t *) color_30682)[gtid_25896 * (dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * (int64_t) 2) + gtid_25897 * (dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) + gtid_25898 * dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396 + gtid_25899] = futrts_to_bits16(lifted_lambda_res_25910);
        }
        
      error_4:
        barrier(CLK_LOCAL_MEM_FENCE);
        if (local_failure)
            return;
        barrier(CLK_LOCAL_MEM_FENCE);
        for (int32_t chunk_i_32281 = 0; chunk_i_32281 < num_chunks_32182; chunk_i_32281++) {
            int32_t i_32282;
            int64_t slice_32283;
            int64_t slice_32284;
            int64_t slice_32285;
            int64_t slice_32286;
            int64_t rep_i_32277;
            int64_t remnant_32287;
            int64_t rep_i_32278;
            int64_t remnant_32288;
            int64_t rep_i_32279;
            int64_t remnant_32289;
            int64_t rep_i_32280;
            int64_t remnant_32290;
            
            i_32282 = chunk_i_32281 * sext_i64_i32(computed_tblock_sizze_25813) + local_tid_32189;
            slice_32283 = dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400;
            slice_32284 = dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * slice_32283;
            slice_32285 = (int64_t) 2 * slice_32284;
            slice_32286 = (int64_t) 2 * slice_32285;
            rep_i_32277 = squot64(sext_i32_i64(i_32282), slice_32285);
            remnant_32287 = sext_i32_i64(i_32282) - rep_i_32277 * slice_32285;
            rep_i_32278 = squot64(remnant_32287, slice_32284);
            remnant_32288 = remnant_32287 - rep_i_32278 * slice_32284;
            rep_i_32279 = squot64(remnant_32288, slice_32283);
            remnant_32289 = remnant_32288 - rep_i_32279 * slice_32283;
            rep_i_32280 = remnant_32289;
            remnant_32290 = remnant_32289 - rep_i_32280;
            if ((((sle64((int64_t) 0, rep_i_32277) && slt64(rep_i_32277, (int64_t) 2)) && (sle64((int64_t) 0, rep_i_32278) && slt64(rep_i_32278, (int64_t) 2))) && (sle64((int64_t) 0, rep_i_32279) && slt64(rep_i_32279, dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400))) && (sle64((int64_t) 0, rep_i_32280) && slt64(rep_i_32280, dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400))) {
                ((__local uint16_t *) color_30681)[rep_i_32277 * (dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * (int64_t) 2) + rep_i_32278 * (dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) + rep_i_32279 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 + rep_i_32280] = futrts_to_bits16((f16) 0.0F);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_LOCAL_MEM_FENCE);
        for (int64_t K_i_25915 = 0; K_i_25915 < (int64_t) 2; K_i_25915++) {
            int64_t phys_tid_25926;
            __local unsigned char *red_arr_mem_32292;
            int64_t gtid_25921;
            int64_t gtid_25922;
            int64_t gtid_25923;
            int64_t gtid_25924;
            int64_t gtid_25925;
            int64_t dims_flat_32294;
            f16 eta_p_25927;
            f16 eta_p_25928;
            f16 eta_p_32296;
            f16 eta_p_32297;
            bool ltid_in_bounds_32299;
            int32_t skip_threads_32300;
            bool no_carry_in_32306;
            
            phys_tid_25926 = sext_i32_i64(local_tid_32189);
            red_arr_mem_32292 = (__local unsigned char *) red_arr_mem_32292_backing_7;
            gtid_25921 = sext_i32_i64(sext_i64_i32(ltid_pre_32247));
            gtid_25922 = sext_i32_i64(sext_i64_i32(ltid_pre_32248));
            gtid_25923 = sext_i32_i64(sext_i64_i32(ltid_pre_32249));
            gtid_25924 = sext_i32_i64(sext_i64_i32(ltid_pre_32250));
            gtid_25925 = sext_i32_i64(sext_i64_i32(ltid_pre_32251));
            if ((((slt64(gtid_25921, (int64_t) 2) && slt64(gtid_25922, (int64_t) 2)) && slt64(gtid_25923, dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) && slt64(gtid_25924, dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) && slt64(gtid_25925, dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396)) {
                f16 eta_p_25934;
                f16 eta_p_25935;
                f16 defunc_0_f_res_25936;
                
                eta_p_25934 = futrts_from_bits16(((__local uint16_t *) color_30682)[gtid_25921 * (dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * (int64_t) 2) + K_i_25915 * (dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) + gtid_25923 * dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396 + gtid_25925]);
                eta_p_25935 = futrts_from_bits16(((__local uint16_t *) color_30683)[K_i_25915 * (dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396 * (int64_t) 2) + gtid_25922 * (dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396) + gtid_25925 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 + gtid_25924]);
                defunc_0_f_res_25936 = eta_p_25934 * eta_p_25935;
                ((__local uint16_t *) red_arr_mem_32292)[gtid_25921 * (dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * (int64_t) 2) + gtid_25922 * (dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) + gtid_25923 * (dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) + gtid_25924 * dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396 + gtid_25925] = futrts_to_bits16(defunc_0_f_res_25936);
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            dims_flat_32294 = (int64_t) 4 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396;
            ltid_in_bounds_32299 = slt64(sext_i32_i64(local_tid_32189), (int64_t) 4 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396);
            // read input for in-block scan
            {
                if (ltid_in_bounds_32299) {
                    eta_p_25928 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_32292)[sext_i32_i64(local_tid_32189)]);
                    if ((local_tid_32189 - squot32(local_tid_32189, 32) * 32) == 0) {
                        eta_p_25927 = eta_p_25928;
                    }
                }
            }
            // in-block scan (hopefully no barriers needed)
            {
                skip_threads_32300 = 1;
                while (slt32(skip_threads_32300, 32)) {
                    bool thread_active_32301 = sle32(skip_threads_32300, local_tid_32189 - squot32(local_tid_32189, 32) * 32) && ltid_in_bounds_32299;
                    
                    if (thread_active_32301) {
                        // read operands
                        {
                            eta_p_25927 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_32292)[sext_i32_i64(local_tid_32189) - sext_i32_i64(skip_threads_32300)]);
                        }
                    }
                    // perform operation
                    {
                        bool inactive_32302 = slt64(srem64(sext_i32_i64(local_tid_32189), dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396), sext_i32_i64(local_tid_32189) - sext_i32_i64(local_tid_32189 - skip_threads_32300));
                        
                        if (thread_active_32301 && inactive_32302) {
                            eta_p_25927 = eta_p_25928;
                        }
                        if (thread_active_32301) {
                            if (!inactive_32302) {
                                f16 defunc_0_op_res_25929 = eta_p_25927 + eta_p_25928;
                                
                                eta_p_25927 = defunc_0_op_res_25929;
                            }
                        }
                    }
                    if (sle32(wave_sizze_32191, skip_threads_32300)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    if (thread_active_32301) {
                        // write result
                        {
                            ((volatile __local uint16_t *) red_arr_mem_32292)[sext_i32_i64(local_tid_32189)] = futrts_to_bits16(eta_p_25927);
                            eta_p_25928 = eta_p_25927;
                        }
                    }
                    if (sle32(wave_sizze_32191, skip_threads_32300)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    skip_threads_32300 *= 2;
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // last thread of block 'i' writes its result to offset 'i'
            {
                if ((local_tid_32189 - squot32(local_tid_32189, 32) * 32) == 31 && ltid_in_bounds_32299) {
                    ((volatile __local uint16_t *) red_arr_mem_32292)[sext_i32_i64(squot32(local_tid_32189, 32))] = futrts_to_bits16(eta_p_25927);
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
            {
                int32_t skip_threads_32303;
                
                // read input for in-block scan
                {
                    if (squot32(local_tid_32189, 32) == 0 && ltid_in_bounds_32299) {
                        eta_p_32297 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_32292)[sext_i32_i64(local_tid_32189)]);
                        if ((local_tid_32189 - squot32(local_tid_32189, 32) * 32) == 0) {
                            eta_p_32296 = eta_p_32297;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_32303 = 1;
                    while (slt32(skip_threads_32303, 32)) {
                        bool thread_active_32304 = sle32(skip_threads_32303, local_tid_32189 - squot32(local_tid_32189, 32) * 32) && (squot32(local_tid_32189, 32) == 0 && ltid_in_bounds_32299);
                        
                        if (thread_active_32304) {
                            // read operands
                            {
                                eta_p_32296 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_32292)[sext_i32_i64(local_tid_32189) - sext_i32_i64(skip_threads_32303)]);
                            }
                        }
                        // perform operation
                        {
                            bool inactive_32305 = slt64(srem64(sext_i32_i64(local_tid_32189 * 32 + 32 - 1), dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396), sext_i32_i64(local_tid_32189 * 32 + 32 - 1) - sext_i32_i64((local_tid_32189 - skip_threads_32303) * 32 + 32 - 1));
                            
                            if (thread_active_32304 && inactive_32305) {
                                eta_p_32296 = eta_p_32297;
                            }
                            if (thread_active_32304) {
                                if (!inactive_32305) {
                                    f16 defunc_0_op_res_32298 = eta_p_32296 + eta_p_32297;
                                    
                                    eta_p_32296 = defunc_0_op_res_32298;
                                }
                            }
                        }
                        if (sle32(wave_sizze_32191, skip_threads_32303)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (thread_active_32304) {
                            // write result
                            {
                                ((volatile __local uint16_t *) red_arr_mem_32292)[sext_i32_i64(local_tid_32189)] = futrts_to_bits16(eta_p_32296);
                                eta_p_32297 = eta_p_32296;
                            }
                        }
                        if (sle32(wave_sizze_32191, skip_threads_32303)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_32303 *= 2;
                    }
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            no_carry_in_32306 = squot32(local_tid_32189, 32) == 0 || !ltid_in_bounds_32299;
            // carry-in for every block except the first
            {
                // read operands
                {
                    if (!no_carry_in_32306) {
                        eta_p_25928 = eta_p_25927;
                        eta_p_25927 = futrts_from_bits16(((__local uint16_t *) red_arr_mem_32292)[sext_i32_i64(squot32(local_tid_32189, 32)) - (int64_t) 1]);
                    }
                }
                // perform operation
                {
                    bool inactive_32307 = slt64(srem64(sext_i32_i64(local_tid_32189), dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396), sext_i32_i64(local_tid_32189) - sext_i32_i64(squot32(local_tid_32189, 32) * 32 - 1));
                    
                    if (!no_carry_in_32306) {
                        if (inactive_32307) {
                            eta_p_25927 = eta_p_25928;
                        }
                    }
                    if (!no_carry_in_32306) {
                        if (!inactive_32307) {
                            f16 defunc_0_op_res_25929 = eta_p_25927 + eta_p_25928;
                            
                            eta_p_25927 = defunc_0_op_res_25929;
                        }
                    }
                }
                // write final result
                {
                    if (!no_carry_in_32306) {
                        ((__local uint16_t *) red_arr_mem_32292)[sext_i32_i64(local_tid_32189)] = futrts_to_bits16(eta_p_25927);
                    }
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            // restore correct values for first block
            {
                if (squot32(local_tid_32189, 32) == 0 && ltid_in_bounds_32299) {
                    ((__local uint16_t *) red_arr_mem_32292)[sext_i32_i64(local_tid_32189)] = futrts_to_bits16(eta_p_25928);
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            barrier(CLK_LOCAL_MEM_FENCE);
            // Save result of reduction.
            {
                int32_t num_chunks_32308 = sdiv_up32(4 * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400), sext_i64_i32(computed_tblock_sizze_25813));
                
                for (int32_t chunk_i_32309 = 0; chunk_i_32309 < num_chunks_32308; chunk_i_32309++) {
                    int32_t i_32310 = chunk_i_32309 * sext_i64_i32(computed_tblock_sizze_25813) + local_tid_32189;
                    
                    if (slt32(i_32310, 4 * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400))) {
                        ((__local uint16_t *) color_30680)[sext_i32_i64(squot32(i_32310, 2 * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400))) * (dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * (int64_t) 2) + sext_i32_i64(squot32(i_32310 - squot32(i_32310, 2 * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) * (2 * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)), sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400))) * (dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) + sext_i32_i64(squot32(i_32310 - squot32(i_32310, 2 * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) * (2 * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) - squot32(i_32310 - squot32(i_32310, 2 * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) * (2 * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)), sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) * (sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)), sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400))) * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 + sext_i32_i64(i_32310 - squot32(i_32310, 2 * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) * (2 * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) - squot32(i_32310 - squot32(i_32310, 2 * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) * (2 * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)), sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) * (sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) - squot32(i_32310 - squot32(i_32310, 2 * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) * (2 * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) - squot32(i_32310 - squot32(i_32310, 2 * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) * (2 * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)), sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) * (sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)), sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400))] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) red_arr_mem_32292)[dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396 - (int64_t) 1 + sext_i32_i64(squot32(i_32310, 2 * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400))) * (dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * (int64_t) 2) + sext_i32_i64(squot32(i_32310 - squot32(i_32310, 2 * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) * (2 * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)), sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400))) * (dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) + sext_i32_i64(squot32(i_32310 - squot32(i_32310, 2 * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) * (2 * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) - squot32(i_32310 - squot32(i_32310, 2 * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) * (2 * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)), sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) * (sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)), sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400))) * (dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) + sext_i32_i64(i_32310 - squot32(i_32310, 2 * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) * (2 * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) - squot32(i_32310 - squot32(i_32310, 2 * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) * (2 * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)), sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) * (sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) - squot32(i_32310 - squot32(i_32310, 2 * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) * (2 * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) - squot32(i_32310 - squot32(i_32310, 2 * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) * (2 * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)), sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) * (sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)), sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) * dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396]));
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            barrier(CLK_LOCAL_MEM_FENCE);
            for (int64_t i_25940 = 0; i_25940 < dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400; i_25940++) {
                bool index_certs_25943;
                int64_t phys_tid_25957;
                int64_t gtid_25954;
                int64_t gtid_25955;
                int64_t gtid_25956;
                int64_t phys_tid_25965;
                int64_t gtid_25962;
                int64_t gtid_25963;
                int64_t gtid_slice_25964;
                
                if (!ok_or_empty_16195) {
                    {
                        if (atomic_cmpxchg_i32_global(global_failure, -1, 19) == -1) {
                            global_failure_args[0] = (int64_t) i_25940;
                            global_failure_args[1] = (int64_t) (int64_t) 0;
                            global_failure_args[2] = (int64_t) dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400;
                            global_failure_args[3] = (int64_t) dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400;
                            ;
                        }
                        local_failure = 1;
                        goto error_10;
                    }
                }
                phys_tid_25957 = sext_i32_i64(local_tid_32189);
                gtid_25954 = sext_i32_i64(sext_i64_i32(ltid_pre_32214));
                gtid_25955 = sext_i32_i64(sext_i64_i32(ltid_pre_32215));
                gtid_25956 = sext_i32_i64(sext_i64_i32(ltid_pre_32216));
                if ((slt64(gtid_25954, (int64_t) 2) && slt64(gtid_25955, (int64_t) 2)) && slt64(gtid_25956, dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) {
                    f16 eta_p_25958;
                    f16 eta_p_25959;
                    f16 defunc_0_f_res_25960;
                    
                    eta_p_25958 = futrts_from_bits16(((__local uint16_t *) color_30680)[gtid_25954 * (dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * (int64_t) 2) + gtid_25955 * (dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) + i_25940 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 + gtid_25956]);
                    eta_p_25959 = futrts_from_bits16(((__local uint16_t *) color_30681)[gtid_25954 * ctx_30876 + gtid_25955 * ctx_30877 + i_25940 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 + gtid_25956]);
                    defunc_0_f_res_25960 = eta_p_25958 + eta_p_25959;
                    ((__local uint16_t *) color_30679)[gtid_25954 * (dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * (int64_t) 2) + gtid_25955 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 + gtid_25956] = futrts_to_bits16(defunc_0_f_res_25960);
                }
                
              error_10:
                barrier(CLK_LOCAL_MEM_FENCE);
                if (local_failure)
                    return;
                barrier(CLK_LOCAL_MEM_FENCE);
                phys_tid_25965 = sext_i32_i64(local_tid_32189);
                gtid_25962 = sext_i32_i64(sext_i64_i32(ltid_pre_32214));
                gtid_25963 = sext_i32_i64(sext_i64_i32(ltid_pre_32215));
                gtid_slice_25964 = sext_i32_i64(sext_i64_i32(ltid_pre_32216));
                if ((slt64(gtid_25962, (int64_t) 2) && slt64(gtid_25963, (int64_t) 2)) && slt64(gtid_slice_25964, dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) {
                    f16 v_25967 = futrts_from_bits16(((__local uint16_t *) color_30679)[gtid_25962 * (dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * (int64_t) 2) + gtid_25963 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 + gtid_slice_25964]);
                    
                    if ((((sle64((int64_t) 0, gtid_25962) && slt64(gtid_25962, (int64_t) 2)) && (sle64((int64_t) 0, gtid_25963) && slt64(gtid_25963, (int64_t) 2))) && (sle64((int64_t) 0, i_25940) && slt64(i_25940, dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400))) && (sle64((int64_t) 0, gtid_slice_25964) && slt64(gtid_slice_25964, dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400))) {
                        ((__local uint16_t *) color_30681)[gtid_25962 * ctx_30876 + gtid_25963 * ctx_30877 + i_25940 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 + gtid_slice_25964] = futrts_to_bits16(v_25967);
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
            }
        }
        phys_tid_25972 = sext_i32_i64(local_tid_32189);
        gtid_25971 = sext_i32_i64(sext_i64_i32(ltid_pre_32262));
        if (slt64(gtid_25971, d_13944)) {
            int64_t tmp_25974;
            bool x_25975;
            bool y_25976;
            bool bounds_check_25977;
            bool index_certs_25978;
            
            tmp_25974 = sdiv64(gtid_25971, dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400);
            x_25975 = sle64((int64_t) 0, tmp_25974);
            y_25976 = slt64(tmp_25974, (int64_t) 2);
            bounds_check_25977 = x_25975 && y_25976;
            if (!bounds_check_25977) {
                {
                    if (atomic_cmpxchg_i32_global(global_failure, -1, 20) == -1) {
                        global_failure_args[0] = (int64_t) tmp_25974;
                        global_failure_args[1] = (int64_t) (int64_t) 2;
                        ;
                    }
                    local_failure = 1;
                    goto error_12;
                }
            }
        }
        
      error_12:
        barrier(CLK_LOCAL_MEM_FENCE);
        if (local_failure)
            return;
        barrier(CLK_LOCAL_MEM_FENCE);
        phys_tid_25982 = sext_i32_i64(local_tid_32189);
        gtid_25980 = sext_i32_i64(sext_i64_i32(ltid_pre_32265));
        gtid_25981 = sext_i32_i64(sext_i64_i32(ltid_pre_32266));
        if (slt64(gtid_25980, d_13944) && slt64(gtid_25981, d_13944)) {
            int64_t tmp_25986;
            bool x_25987;
            bool y_25988;
            bool bounds_check_25989;
            bool index_certs_25990;
            int64_t tmp_25991;
            bool x_25992;
            bool y_25993;
            bool bounds_check_25994;
            bool index_certs_25995;
            int64_t index_primexp_27087;
            bool index_certs_25984;
            f16 lifted_lambda_res_25996;
            
            tmp_25986 = sdiv64(gtid_25981, dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400);
            x_25987 = sle64((int64_t) 0, tmp_25986);
            y_25988 = slt64(tmp_25986, dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400);
            bounds_check_25989 = x_25987 && y_25988;
            if (!bounds_check_25989) {
                {
                    if (atomic_cmpxchg_i32_global(global_failure, -1, 21) == -1) {
                        global_failure_args[0] = (int64_t) tmp_25986;
                        global_failure_args[1] = (int64_t) dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400;
                        ;
                    }
                    local_failure = 1;
                    goto error_13;
                }
            }
            tmp_25991 = smod64(gtid_25981, dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400);
            x_25992 = sle64((int64_t) 0, tmp_25991);
            y_25993 = slt64(tmp_25991, dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400);
            bounds_check_25994 = x_25992 && y_25993;
            if (!bounds_check_25994) {
                {
                    if (atomic_cmpxchg_i32_global(global_failure, -1, 22) == -1) {
                        global_failure_args[0] = (int64_t) tmp_25991;
                        global_failure_args[1] = (int64_t) dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400;
                        ;
                    }
                    local_failure = 1;
                    goto error_13;
                }
            }
            index_primexp_27087 = sdiv64(gtid_25980, dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400);
            index_certs_25984 = 0;
            lifted_lambda_res_25996 = futrts_from_bits16(((__local uint16_t *) color_30681)[index_primexp_27087 * ctx_30876 + tmp_25986 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 + tmp_25991]);
            ((__local uint16_t *) color_30678)[gtid_25980 * d_13944 + gtid_25981] = futrts_to_bits16(lifted_lambda_res_25996);
        }
        
      error_13:
        barrier(CLK_LOCAL_MEM_FENCE);
        if (local_failure)
            return;
        barrier(CLK_LOCAL_MEM_FENCE);
        ext_mem_ext_30953 = color_30678;
    } else {
        int64_t phys_tid_26002;
        __local unsigned char *red_arr_mem_32321;
        int64_t gtid_26001;
        int32_t offset_32327;
        int32_t skip_waves_32328;
        
        for (int32_t chunk_i_32315 = 0; chunk_i_32315 < num_chunks_32185; chunk_i_32315++) {
            int32_t i_32316;
            int64_t slice_32317;
            int64_t slice_32318;
            int64_t rep_i_32313;
            int64_t remnant_32319;
            int64_t rep_i_32314;
            int64_t remnant_32320;
            
            i_32316 = chunk_i_32315 * sext_i64_i32(computed_tblock_sizze_25813) + local_tid_32189;
            slice_32317 = d_13944;
            slice_32318 = d_13944 * slice_32317;
            rep_i_32313 = squot64(sext_i32_i64(i_32316), slice_32317);
            remnant_32319 = sext_i32_i64(i_32316) - rep_i_32313 * slice_32317;
            rep_i_32314 = remnant_32319;
            remnant_32320 = remnant_32319 - rep_i_32314;
            if ((sle64((int64_t) 0, rep_i_32313) && slt64(rep_i_32313, d_13944)) && (sle64((int64_t) 0, rep_i_32314) && slt64(rep_i_32314, d_13944))) {
                ((__local uint16_t *) color_30679)[rep_i_32313 * d_13944 + rep_i_32314] = futrts_to_bits16((f16) 0.0F);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        phys_tid_26002 = sext_i32_i64(local_tid_32189);
        red_arr_mem_32321 = (__local unsigned char *) red_arr_mem_32321_backing_8;
        gtid_26001 = sext_i32_i64(sext_i64_i32(ltid_pre_32271));
        if (slt64(gtid_26001, m_16509)) {
            int64_t zp_rhs_26014;
            int64_t binop_x_28278;
            int64_t ctx_30923;
            int64_t ctx_30931;
            int64_t binop_x_30940;
            
            zp_rhs_26014 = mul64(d_13944, gtid_26001);
            binop_x_28278 = one_intra_par_min_18858 * gtid_26001;
            ctx_30923 = phys_tid_26002 + binop_x_30922;
            ctx_30931 = phys_tid_26002 + binop_x_30930;
            binop_x_30940 = phys_tid_26002 + binop_x_30939;
            for (int64_t i_28013 = 0; i_28013 < d_13944; i_28013++) {
                int64_t binop_y_30942;
                int64_t binop_y_30943;
                int64_t ctx_30944;
                
                for (int64_t i_28017 = 0; i_28017 < d_13944; i_28017++) {
                    int64_t tmp_26023;
                    bool x_26024;
                    bool y_26025;
                    bool bounds_check_26026;
                    bool index_certs_26027;
                    
                    tmp_26023 = add64(zp_rhs_26014, i_28017);
                    x_26024 = sle64((int64_t) 0, tmp_26023);
                    y_26025 = slt64(tmp_26023, dzlz7bUZLztZRz20Umz20Udz7dUzg_13946);
                    bounds_check_26026 = x_26024 && y_26025;
                    if (!bounds_check_26026) {
                        {
                            if (atomic_cmpxchg_i32_global(global_failure, -1, 23) == -1) {
                                global_failure_args[0] = (int64_t) tmp_26023;
                                global_failure_args[1] = (int64_t) dzlz7bUZLztZRz20Umz20Udz7dUzg_13946;
                                ;
                            }
                            local_failure = 1;
                            goto error_14;
                        }
                    }
                    for (int64_t i_0 = 0; i_0 < (int64_t) 1; i_0++) {
                        ((__global uint16_t *) color_30674)[ctx_30931 + ctx_30932 * i_28017 + i_0 * ctx_30932] = futrts_to_bits16(futrts_from_bits16(((__global uint16_t *) mem_28434)[gtid_25822 * (dzlz7bUZLztZRz20Umz20Udz7dUzg_13946 * d_13944) + i_28013 * dzlz7bUZLztZRz20Umz20Udz7dUzg_13946 + tmp_26023 + i_0]));
                    }
                }
                binop_y_30942 = d_13944 * i_28013;
                binop_y_30943 = binop_x_30941 * binop_y_30942;
                ctx_30944 = binop_x_30940 + binop_y_30943;
                for (int64_t i_28021 = 0; i_28021 < d_13944; i_28021++) {
                    float defunc_0_f_res_26031;
                    float redout_28023;
                    f16 f32_res_26039;
                    
                    redout_28023 = 0.0F;
                    for (int64_t i_28024 = 0; i_28024 < d_13944; i_28024++) {
                        f16 eta_p_26035;
                        int64_t binop_y_28279;
                        int64_t binop_x_28280;
                        int64_t binop_x_28281;
                        int64_t new_index_28282;
                        int64_t binop_y_28294;
                        int64_t new_index_28295;
                        f16 eta_p_26036;
                        f16 defunc_0_f_res_26037;
                        float f16_res_26038;
                        float defunc_0_op_res_26034;
                        float redout_tmp_32326;
                        
                        eta_p_26035 = futrts_from_bits16(((__global uint16_t *) color_30674)[ctx_30931 + i_28024 * ctx_30932]);
                        binop_y_28279 = d_13944 * i_28024;
                        binop_x_28280 = binop_x_28278 + binop_y_28279;
                        binop_x_28281 = i_28021 + binop_x_28280;
                        new_index_28282 = squot64(binop_x_28281, d_13944);
                        binop_y_28294 = d_13944 * new_index_28282;
                        new_index_28295 = binop_x_28281 - binop_y_28294;
                        eta_p_26036 = futrts_from_bits16(((__global uint16_t *) V_mem_28341)[new_index_28282 * d_13944 + new_index_28295]);
                        defunc_0_f_res_26037 = eta_p_26035 * eta_p_26036;
                        f16_res_26038 = fpconv_f16_f32(defunc_0_f_res_26037);
                        defunc_0_op_res_26034 = f16_res_26038 + redout_28023;
                        redout_tmp_32326 = defunc_0_op_res_26034;
                        redout_28023 = redout_tmp_32326;
                    }
                    defunc_0_f_res_26031 = redout_28023;
                    f32_res_26039 = fpconv_f32_f16(defunc_0_f_res_26031);
                    ((__global uint16_t *) color_30675)[ctx_30944 + i_28021 * ctx_30945] = futrts_to_bits16(f32_res_26039);
                }
                if (!((ctx_30923 + i_28013 * ctx_30925) == ctx_30944 && ctx_30926 == ctx_30945)) {
                    for (int64_t i_0 = 0; i_0 < d_13944; i_0++) {
                        ((__global uint16_t *) color_30675)[ctx_30923 + i_28013 * ctx_30925 + i_0 * ctx_30926] = futrts_to_bits16(futrts_from_bits16(((__global uint16_t *) color_30675)[ctx_30944 + i_0 * ctx_30945]));
                    }
                }
            }
            for (int64_t i_0 = 0; i_0 < d_13944; i_0++) {
                for (int64_t i_1 = 0; i_1 < d_13944; i_1++) {
                    ((__local uint16_t *) red_arr_mem_32321)[gtid_26001 * (d_13944 * d_13944) + (i_0 * d_13944 + i_1)] = futrts_to_bits16(futrts_from_bits16(((__global uint16_t *) color_30675)[ctx_30923 + (i_0 * ctx_30925 + i_1 * ctx_30926)]));
                }
            }
        }
        
      error_14:
        barrier(CLK_LOCAL_MEM_FENCE);
        if (local_failure)
            return;
        barrier(CLK_LOCAL_MEM_FENCE);
        skip_waves_32328 = 1;
        offset_32327 = 0;
        // participating threads read initial accumulator
        {
            if (slt32(local_tid_32189, sext_i64_i32(m_16509))) {
                for (int64_t i_0 = 0; i_0 < d_13944; i_0++) {
                    for (int64_t i_1 = 0; i_1 < d_13944; i_1++) {
                        ((__global uint16_t *) color_30685)[phys_tblock_id_25823 + m_13945 * (phys_tid_26002 * (d_13944 * d_13944)) + (i_0 * (m_13945 * d_13944) + i_1 * m_13945)] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) red_arr_mem_32321)[sext_i32_i64(local_tid_32189 + offset_32327) * (d_13944 * d_13944) + (i_0 * d_13944 + i_1)]));
                    }
                }
            }
        }
        offset_32327 = 1;
        while (slt32(offset_32327, wave_sizze_32191)) {
            if (slt32(local_tid_32189 + offset_32327, sext_i64_i32(m_16509)) && ((local_tid_32189 - squot32(local_tid_32189, wave_sizze_32191) * wave_sizze_32191) & (2 * offset_32327 - 1)) == 0) {
                // read array element
                {
                    for (int64_t i_0 = 0; i_0 < d_13944; i_0++) {
                        for (int64_t i_1 = 0; i_1 < d_13944; i_1++) {
                            ((__global uint16_t *) color_30685)[phys_tblock_id_25823 + m_13945 * ((phys_tid_26002 + computed_tblock_sizze_25813) * (d_13944 * d_13944)) + (i_0 * (m_13945 * d_13944) + i_1 * m_13945)] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) red_arr_mem_32321)[sext_i32_i64(local_tid_32189 + offset_32327) * (d_13944 * d_13944) + (i_0 * d_13944 + i_1)]));
                        }
                    }
                }
                // apply reduction operation
                {
                    int64_t ctx_30901 = phys_tid_26002 + binop_x_30900;
                    int64_t ctx_30909 = phys_tid_26002 + binop_x_30908;
                    
                    for (int64_t i_28005 = 0; i_28005 < d_13944; i_28005++) {
                        for (int64_t i_28009 = 0; i_28009 < d_13944; i_28009++) {
                            f16 eta_p_26009 = futrts_from_bits16(((volatile __global uint16_t *) color_30685)[phys_tblock_id_25823 + m_13945 * (phys_tid_26002 * (d_13944 * d_13944)) + (i_28005 * (m_13945 * d_13944) + i_28009 * m_13945)]);
                            f16 eta_p_26010 = futrts_from_bits16(((volatile __global uint16_t *) color_30685)[phys_tblock_id_25823 + m_13945 * ((phys_tid_26002 + computed_tblock_sizze_25813) * (d_13944 * d_13944)) + (i_28005 * (m_13945 * d_13944) + i_28009 * m_13945)]);
                            f16 defunc_0_f_res_26011 = eta_p_26009 + eta_p_26010;
                            
                            ((volatile __global uint16_t *) mem_28940)[ctx_30909 + i_28009 * ctx_30910] = futrts_to_bits16(defunc_0_f_res_26011);
                        }
                        for (int64_t i_0 = 0; i_0 < d_13944; i_0++) {
                            ((__global uint16_t *) mem_28934)[ctx_30901 + i_28005 * ctx_30903 + i_0 * ctx_30904] = futrts_to_bits16(futrts_from_bits16(((__global uint16_t *) mem_28940)[ctx_30909 + i_0 * ctx_30910]));
                        }
                    }
                    for (int64_t i_0 = 0; i_0 < d_13944; i_0++) {
                        for (int64_t i_1 = 0; i_1 < d_13944; i_1++) {
                            ((__global uint16_t *) color_30685)[phys_tblock_id_25823 + m_13945 * (phys_tid_26002 * (d_13944 * d_13944)) + (i_0 * (m_13945 * d_13944) + i_1 * m_13945)] = futrts_to_bits16(futrts_from_bits16(((__global uint16_t *) mem_28934)[ctx_30901 + (i_0 * ctx_30903 + i_1 * ctx_30904)]));
                        }
                    }
                }
                // write result of operation
                { }
            }
            offset_32327 *= 2;
        }
        while (slt32(skip_waves_32328, squot32(sext_i64_i32(computed_tblock_sizze_25813) + wave_sizze_32191 - 1, wave_sizze_32191))) {
            barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
            offset_32327 = skip_waves_32328 * wave_sizze_32191;
            if (slt32(local_tid_32189 + offset_32327, sext_i64_i32(m_16509)) && ((local_tid_32189 - squot32(local_tid_32189, wave_sizze_32191) * wave_sizze_32191) == 0 && (squot32(local_tid_32189, wave_sizze_32191) & (2 * skip_waves_32328 - 1)) == 0)) {
                // read array element
                {
                    for (int64_t i_0 = 0; i_0 < d_13944; i_0++) {
                        for (int64_t i_1 = 0; i_1 < d_13944; i_1++) {
                            ((__global uint16_t *) color_30685)[phys_tblock_id_25823 + m_13945 * ((phys_tid_26002 + computed_tblock_sizze_25813) * (d_13944 * d_13944)) + (i_0 * (m_13945 * d_13944) + i_1 * m_13945)] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) red_arr_mem_32321)[sext_i32_i64(local_tid_32189 + offset_32327) * (d_13944 * d_13944) + (i_0 * d_13944 + i_1)]));
                        }
                    }
                }
                // apply reduction operation
                {
                    int64_t ctx_30901 = phys_tid_26002 + binop_x_30900;
                    int64_t ctx_30909 = phys_tid_26002 + binop_x_30908;
                    
                    for (int64_t i_28005 = 0; i_28005 < d_13944; i_28005++) {
                        for (int64_t i_28009 = 0; i_28009 < d_13944; i_28009++) {
                            f16 eta_p_26009 = futrts_from_bits16(((__global uint16_t *) color_30685)[phys_tblock_id_25823 + m_13945 * (phys_tid_26002 * (d_13944 * d_13944)) + (i_28005 * (m_13945 * d_13944) + i_28009 * m_13945)]);
                            f16 eta_p_26010 = futrts_from_bits16(((__global uint16_t *) color_30685)[phys_tblock_id_25823 + m_13945 * ((phys_tid_26002 + computed_tblock_sizze_25813) * (d_13944 * d_13944)) + (i_28005 * (m_13945 * d_13944) + i_28009 * m_13945)]);
                            f16 defunc_0_f_res_26011 = eta_p_26009 + eta_p_26010;
                            
                            ((__global uint16_t *) mem_28940)[ctx_30909 + i_28009 * ctx_30910] = futrts_to_bits16(defunc_0_f_res_26011);
                        }
                        for (int64_t i_0 = 0; i_0 < d_13944; i_0++) {
                            ((__global uint16_t *) mem_28934)[ctx_30901 + i_28005 * ctx_30903 + i_0 * ctx_30904] = futrts_to_bits16(futrts_from_bits16(((__global uint16_t *) mem_28940)[ctx_30909 + i_0 * ctx_30910]));
                        }
                    }
                    for (int64_t i_0 = 0; i_0 < d_13944; i_0++) {
                        for (int64_t i_1 = 0; i_1 < d_13944; i_1++) {
                            ((__global uint16_t *) color_30685)[phys_tblock_id_25823 + m_13945 * (phys_tid_26002 * (d_13944 * d_13944)) + (i_0 * (m_13945 * d_13944) + i_1 * m_13945)] = futrts_to_bits16(futrts_from_bits16(((__global uint16_t *) mem_28934)[ctx_30901 + (i_0 * ctx_30903 + i_1 * ctx_30904)]));
                        }
                    }
                }
                // write result of operation
                { }
            }
            skip_waves_32328 *= 2;
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
        // Copy array-typed operands to result array
        {
            if (local_tid_32189 == 0) {
                for (int64_t i_0 = 0; i_0 < d_13944; i_0++) {
                    for (int64_t i_1 = 0; i_1 < d_13944; i_1++) {
                        ((__local uint16_t *) red_arr_mem_32321)[sext_i32_i64(local_tid_32189) * (d_13944 * d_13944) + (i_0 * d_13944 + i_1)] = futrts_to_bits16(futrts_from_bits16(((__global uint16_t *) color_30685)[phys_tblock_id_25823 + m_13945 * (phys_tid_26002 * (d_13944 * d_13944)) + (i_0 * (m_13945 * d_13944) + i_1 * m_13945)]));
                    }
                }
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // Save result of reduction.
        {
            int32_t num_chunks_32333 = sdiv_up32(sext_i64_i32(d_13944) * sext_i64_i32(d_13944), sext_i64_i32(computed_tblock_sizze_25813));
            
            for (int32_t chunk_i_32334 = 0; chunk_i_32334 < num_chunks_32333; chunk_i_32334++) {
                int32_t i_32335 = chunk_i_32334 * sext_i64_i32(computed_tblock_sizze_25813) + local_tid_32189;
                
                if (slt32(i_32335, sext_i64_i32(d_13944) * sext_i64_i32(d_13944))) {
                    ((__local uint16_t *) color_30684)[sext_i32_i64(squot32(i_32335, sext_i64_i32(d_13944))) * d_13944 + sext_i32_i64(i_32335 - squot32(i_32335, sext_i64_i32(d_13944)) * sext_i64_i32(d_13944))] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) red_arr_mem_32321)[sext_i32_i64(squot32(i_32335, sext_i64_i32(d_13944))) * d_13944 + sext_i32_i64(i_32335 - squot32(i_32335, sext_i64_i32(d_13944)) * sext_i64_i32(d_13944))]));
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        ext_mem_ext_30953 = color_30684;
    }
    num_chunks_32336 = sdiv_up32(sext_i64_i32(d_13944) * sext_i64_i32(d_13944), sext_i64_i32(computed_tblock_sizze_25813));
    for (int32_t chunk_i_32337 = 0; chunk_i_32337 < num_chunks_32336; chunk_i_32337++) {
        int32_t i_32338 = chunk_i_32337 * sext_i64_i32(computed_tblock_sizze_25813) + local_tid_32189;
        
        if (slt32(i_32338, sext_i64_i32(d_13944) * sext_i64_i32(d_13944))) {
            ((__global uint16_t *) mem_29032)[gtid_25822 * (d_13944 * d_13944) + sext_i32_i64(squot32(i_32338, sext_i64_i32(d_13944))) * d_13944 + sext_i32_i64(i_32338 - squot32(i_32338, sext_i64_i32(d_13944)) * sext_i64_i32(d_13944))] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) ext_mem_ext_30953)[sext_i32_i64(squot32(i_32338, sext_i64_i32(d_13944))) * d_13944 + sext_i32_i64(i_32338 - squot32(i_32338, sext_i64_i32(d_13944)) * sext_i64_i32(d_13944))]));
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
  error_18:
    return;
}
FUTHARK_KERNEL
void FlashAttention_6392zisegmap_intrablock_26252(__global int *global_failure, int failure_is_an_option, __global int64_t *global_failure_args, int64_t d_13944, int64_t m_13945, int64_t dzlz7bUZLztZRz20Umz20Udz7dUzg_13946, unsigned char ok_or_empty_16195_bits, int64_t dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396, int64_t dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400, int64_t computed_tblock_sizze_26160, int64_t bytes_28700, int64_t bytes_28703, int64_t binop_x_28711, int64_t lmad_arg_28712, int64_t maxSubHelper_30690, int64_t maxSubHelper_30691, int32_t num_chunks_32397, __global unsigned char *mem_28434, __global unsigned char *mem_28649, __global unsigned char *mem_28744)
{
    bool ok_or_empty_16195 = ok_or_empty_16195_bits;
    volatile __local unsigned char *red_arr_mem_32482_backing_4 = &shared_mem[0];
    const int64_t red_arr_mem_32482_backing_4_offset = 0 + ((int64_t) 2 * ((int64_t) 4 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396) + srem64((int64_t) 8 - srem64((int64_t) 2 * ((int64_t) 4 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396), (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_30695_backing_3 = &shared_mem[red_arr_mem_32482_backing_4_offset];
    const int64_t color_30695_backing_3_offset = red_arr_mem_32482_backing_4_offset + (bytes_28700 + srem64((int64_t) 8 - srem64(bytes_28700, (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_30694_backing_2 = &shared_mem[color_30695_backing_3_offset];
    const int64_t color_30694_backing_2_offset = color_30695_backing_3_offset + (bytes_28703 + srem64((int64_t) 8 - srem64(bytes_28703, (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_30693_backing_1 = &shared_mem[color_30694_backing_2_offset];
    const int64_t color_30693_backing_1_offset = color_30694_backing_2_offset + (maxSubHelper_30691 + srem64((int64_t) 8 - srem64(maxSubHelper_30691, (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_30692_backing_0 = &shared_mem[color_30693_backing_1_offset];
    const int64_t color_30692_backing_0_offset = color_30693_backing_1_offset + (maxSubHelper_30690 + srem64((int64_t) 8 - srem64(maxSubHelper_30690, (int64_t) 8), (int64_t) 8));
    volatile __local int local_failure;
    
    if (failure_is_an_option) {
        int failed = *global_failure >= 0;
        
        if (failed)
            return;
    }
    local_failure = 0;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t local_tid_32403;
    int32_t tblock_sizze_32406;
    int32_t wave_sizze_32405;
    int32_t block_id_32404;
    int32_t global_tid_32402;
    int64_t phys_tblock_id_26252;
    int64_t slice_32410;
    int64_t slice_32411;
    int64_t slice_32412;
    int64_t ltid_pre_32407;
    int64_t remnant_32413;
    int64_t ltid_pre_32408;
    int64_t remnant_32414;
    int64_t ltid_pre_32409;
    int64_t remnant_32415;
    int64_t slice_32420;
    int64_t slice_32421;
    int64_t slice_32422;
    int64_t slice_32423;
    int64_t ltid_pre_32416;
    int64_t remnant_32424;
    int64_t ltid_pre_32417;
    int64_t remnant_32425;
    int64_t ltid_pre_32418;
    int64_t remnant_32426;
    int64_t ltid_pre_32419;
    int64_t remnant_32427;
    int64_t slice_32432;
    int64_t slice_32433;
    int64_t slice_32434;
    int64_t slice_32435;
    int64_t ltid_pre_32428;
    int64_t remnant_32436;
    int64_t ltid_pre_32429;
    int64_t remnant_32437;
    int64_t ltid_pre_32430;
    int64_t remnant_32438;
    int64_t ltid_pre_32431;
    int64_t remnant_32439;
    int64_t slice_32445;
    int64_t slice_32446;
    int64_t slice_32447;
    int64_t slice_32448;
    int64_t slice_32449;
    int64_t ltid_pre_32440;
    int64_t remnant_32450;
    int64_t ltid_pre_32441;
    int64_t remnant_32451;
    int64_t ltid_pre_32442;
    int64_t remnant_32452;
    int64_t ltid_pre_32443;
    int64_t remnant_32453;
    int64_t ltid_pre_32444;
    int64_t remnant_32454;
    int64_t slice_32456;
    int64_t ltid_pre_32455;
    int64_t remnant_32457;
    int64_t slice_32460;
    int64_t slice_32461;
    int64_t ltid_pre_32458;
    int64_t remnant_32462;
    int64_t ltid_pre_32459;
    int64_t remnant_32463;
    int64_t slice_32464;
    int64_t gtid_26251;
    int64_t remnant_32465;
    __local unsigned char *color_30692;
    __local unsigned char *color_30693;
    __local unsigned char *color_30694;
    __local unsigned char *color_30695;
    int64_t phys_tid_26271;
    int64_t gtid_26268;
    int64_t gtid_26269;
    int64_t gtid_26270;
    int64_t phys_tid_26284;
    int64_t gtid_26280;
    int64_t gtid_26281;
    int64_t gtid_26282;
    int64_t gtid_26283;
    int64_t phys_tid_26355;
    int64_t gtid_26354;
    int64_t phys_tid_26365;
    int64_t gtid_26363;
    int64_t gtid_26364;
    int32_t num_chunks_32502;
    
    local_tid_32403 = get_local_id(0);
    tblock_sizze_32406 = get_local_size(0);
    wave_sizze_32405 = LOCKSTEP_WIDTH;
    block_id_32404 = get_tblock_id(0);
    global_tid_32402 = block_id_32404 * tblock_sizze_32406 + local_tid_32403;
    phys_tblock_id_26252 = sext_i32_i64(block_id_32404);
    slice_32410 = dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400;
    slice_32411 = (int64_t) 2 * slice_32410;
    slice_32412 = (int64_t) 2 * slice_32411;
    ltid_pre_32407 = squot64(sext_i32_i64(local_tid_32403), slice_32411);
    remnant_32413 = sext_i32_i64(local_tid_32403) - ltid_pre_32407 * slice_32411;
    ltid_pre_32408 = squot64(remnant_32413, slice_32410);
    remnant_32414 = remnant_32413 - ltid_pre_32408 * slice_32410;
    ltid_pre_32409 = remnant_32414;
    remnant_32415 = remnant_32414 - ltid_pre_32409;
    slice_32420 = dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396;
    slice_32421 = dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * slice_32420;
    slice_32422 = (int64_t) 2 * slice_32421;
    slice_32423 = (int64_t) 2 * slice_32422;
    ltid_pre_32416 = squot64(sext_i32_i64(local_tid_32403), slice_32422);
    remnant_32424 = sext_i32_i64(local_tid_32403) - ltid_pre_32416 * slice_32422;
    ltid_pre_32417 = squot64(remnant_32424, slice_32421);
    remnant_32425 = remnant_32424 - ltid_pre_32417 * slice_32421;
    ltid_pre_32418 = squot64(remnant_32425, slice_32420);
    remnant_32426 = remnant_32425 - ltid_pre_32418 * slice_32420;
    ltid_pre_32419 = remnant_32426;
    remnant_32427 = remnant_32426 - ltid_pre_32419;
    slice_32432 = dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400;
    slice_32433 = dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * slice_32432;
    slice_32434 = (int64_t) 2 * slice_32433;
    slice_32435 = (int64_t) 2 * slice_32434;
    ltid_pre_32428 = squot64(sext_i32_i64(local_tid_32403), slice_32434);
    remnant_32436 = sext_i32_i64(local_tid_32403) - ltid_pre_32428 * slice_32434;
    ltid_pre_32429 = squot64(remnant_32436, slice_32433);
    remnant_32437 = remnant_32436 - ltid_pre_32429 * slice_32433;
    ltid_pre_32430 = squot64(remnant_32437, slice_32432);
    remnant_32438 = remnant_32437 - ltid_pre_32430 * slice_32432;
    ltid_pre_32431 = remnant_32438;
    remnant_32439 = remnant_32438 - ltid_pre_32431;
    slice_32445 = dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396;
    slice_32446 = dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * slice_32445;
    slice_32447 = dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * slice_32446;
    slice_32448 = (int64_t) 2 * slice_32447;
    slice_32449 = (int64_t) 2 * slice_32448;
    ltid_pre_32440 = squot64(sext_i32_i64(local_tid_32403), slice_32448);
    remnant_32450 = sext_i32_i64(local_tid_32403) - ltid_pre_32440 * slice_32448;
    ltid_pre_32441 = squot64(remnant_32450, slice_32447);
    remnant_32451 = remnant_32450 - ltid_pre_32441 * slice_32447;
    ltid_pre_32442 = squot64(remnant_32451, slice_32446);
    remnant_32452 = remnant_32451 - ltid_pre_32442 * slice_32446;
    ltid_pre_32443 = squot64(remnant_32452, slice_32445);
    remnant_32453 = remnant_32452 - ltid_pre_32443 * slice_32445;
    ltid_pre_32444 = remnant_32453;
    remnant_32454 = remnant_32453 - ltid_pre_32444;
    slice_32456 = d_13944;
    ltid_pre_32455 = sext_i32_i64(local_tid_32403);
    remnant_32457 = sext_i32_i64(local_tid_32403) - ltid_pre_32455;
    slice_32460 = d_13944;
    slice_32461 = d_13944 * slice_32460;
    ltid_pre_32458 = squot64(sext_i32_i64(local_tid_32403), slice_32460);
    remnant_32462 = sext_i32_i64(local_tid_32403) - ltid_pre_32458 * slice_32460;
    ltid_pre_32459 = remnant_32462;
    remnant_32463 = remnant_32462 - ltid_pre_32459;
    slice_32464 = m_13945;
    gtid_26251 = sext_i32_i64(block_id_32404);
    remnant_32465 = sext_i32_i64(block_id_32404) - gtid_26251;
    color_30692 = (__local unsigned char *) color_30692_backing_0;
    color_30693 = (__local unsigned char *) color_30693_backing_1;
    color_30694 = (__local unsigned char *) color_30694_backing_2;
    color_30695 = (__local unsigned char *) color_30695_backing_3;
    phys_tid_26271 = sext_i32_i64(local_tid_32403);
    gtid_26268 = sext_i32_i64(sext_i64_i32(ltid_pre_32407));
    gtid_26269 = sext_i32_i64(sext_i64_i32(ltid_pre_32408));
    gtid_26270 = sext_i32_i64(sext_i64_i32(ltid_pre_32409));
    if ((slt64(gtid_26268, (int64_t) 2) && slt64(gtid_26269, (int64_t) 2)) && slt64(gtid_26270, dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) {
        int64_t index_primexp_27108;
        int64_t tmp_26274;
        bool x_26275;
        bool y_26276;
        bool bounds_check_26277;
        bool index_certs_26278;
        
        index_primexp_27108 = mul64(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400, gtid_26268);
        tmp_26274 = add64(gtid_26270, index_primexp_27108);
        x_26275 = sle64((int64_t) 0, tmp_26274);
        y_26276 = slt64(tmp_26274, d_13944);
        bounds_check_26277 = x_26275 && y_26276;
        if (!bounds_check_26277) {
            {
                if (atomic_cmpxchg_i32_global(global_failure, -1, 32) == -1) {
                    global_failure_args[0] = (int64_t) tmp_26274;
                    global_failure_args[1] = (int64_t) d_13944;
                    ;
                }
                local_failure = 1;
                goto error_0;
            }
        }
    }
    
  error_0:
    barrier(CLK_LOCAL_MEM_FENCE);
    if (local_failure)
        return;
    barrier(CLK_LOCAL_MEM_FENCE);
    phys_tid_26284 = sext_i32_i64(local_tid_32403);
    gtid_26280 = sext_i32_i64(sext_i64_i32(ltid_pre_32416));
    gtid_26281 = sext_i32_i64(sext_i64_i32(ltid_pre_32417));
    gtid_26282 = sext_i32_i64(sext_i64_i32(ltid_pre_32418));
    gtid_26283 = sext_i32_i64(sext_i64_i32(ltid_pre_32419));
    if (((slt64(gtid_26280, (int64_t) 2) && slt64(gtid_26281, (int64_t) 2)) && slt64(gtid_26282, dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) && slt64(gtid_26283, dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396)) {
        int64_t index_primexp_27105;
        int64_t tmp_26289;
        bool x_26290;
        bool y_26291;
        bool bounds_check_26292;
        bool index_certs_26293;
        int64_t binop_y_27387;
        int64_t index_primexp_27388;
        bool index_certs_26287;
        f16 lifted_lambda_res_26294;
        
        index_primexp_27105 = mul64(dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396, gtid_26281);
        tmp_26289 = add64(gtid_26283, index_primexp_27105);
        x_26290 = sle64((int64_t) 0, tmp_26289);
        y_26291 = slt64(tmp_26289, dzlz7bUZLztZRz20Umz20Udz7dUzg_13946);
        bounds_check_26292 = x_26290 && y_26291;
        if (!bounds_check_26292) {
            {
                if (atomic_cmpxchg_i32_global(global_failure, -1, 33) == -1) {
                    global_failure_args[0] = (int64_t) tmp_26289;
                    global_failure_args[1] = (int64_t) dzlz7bUZLztZRz20Umz20Udz7dUzg_13946;
                    ;
                }
                local_failure = 1;
                goto error_1;
            }
        }
        binop_y_27387 = mul64(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400, gtid_26280);
        index_primexp_27388 = add64(gtid_26282, binop_y_27387);
        index_certs_26287 = 0;
        lifted_lambda_res_26294 = futrts_from_bits16(((__global uint16_t *) mem_28434)[gtid_26251 * (dzlz7bUZLztZRz20Umz20Udz7dUzg_13946 * d_13944) + index_primexp_27388 * dzlz7bUZLztZRz20Umz20Udz7dUzg_13946 + tmp_26289]);
        ((__local uint16_t *) color_30695)[gtid_26280 * (dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * (int64_t) 2) + gtid_26281 * (dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) + gtid_26282 * dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396 + gtid_26283] = futrts_to_bits16(lifted_lambda_res_26294);
    }
    
  error_1:
    barrier(CLK_LOCAL_MEM_FENCE);
    if (local_failure)
        return;
    barrier(CLK_LOCAL_MEM_FENCE);
    for (int32_t chunk_i_32471 = 0; chunk_i_32471 < num_chunks_32397; chunk_i_32471++) {
        int32_t i_32472;
        int64_t slice_32473;
        int64_t slice_32474;
        int64_t slice_32475;
        int64_t slice_32476;
        int64_t rep_i_32467;
        int64_t remnant_32477;
        int64_t rep_i_32468;
        int64_t remnant_32478;
        int64_t rep_i_32469;
        int64_t remnant_32479;
        int64_t rep_i_32470;
        int64_t remnant_32480;
        
        i_32472 = chunk_i_32471 * sext_i64_i32(computed_tblock_sizze_26160) + local_tid_32403;
        slice_32473 = dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400;
        slice_32474 = dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * slice_32473;
        slice_32475 = (int64_t) 2 * slice_32474;
        slice_32476 = (int64_t) 2 * slice_32475;
        rep_i_32467 = squot64(sext_i32_i64(i_32472), slice_32475);
        remnant_32477 = sext_i32_i64(i_32472) - rep_i_32467 * slice_32475;
        rep_i_32468 = squot64(remnant_32477, slice_32474);
        remnant_32478 = remnant_32477 - rep_i_32468 * slice_32474;
        rep_i_32469 = squot64(remnant_32478, slice_32473);
        remnant_32479 = remnant_32478 - rep_i_32469 * slice_32473;
        rep_i_32470 = remnant_32479;
        remnant_32480 = remnant_32479 - rep_i_32470;
        if ((((sle64((int64_t) 0, rep_i_32467) && slt64(rep_i_32467, (int64_t) 2)) && (sle64((int64_t) 0, rep_i_32468) && slt64(rep_i_32468, (int64_t) 2))) && (sle64((int64_t) 0, rep_i_32469) && slt64(rep_i_32469, dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400))) && (sle64((int64_t) 0, rep_i_32470) && slt64(rep_i_32470, dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400))) {
            ((__local uint16_t *) color_30694)[rep_i_32467 * (dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * (int64_t) 2) + rep_i_32468 * (dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) + rep_i_32469 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 + rep_i_32470] = futrts_to_bits16((f16) 0.0F);
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    barrier(CLK_LOCAL_MEM_FENCE);
    for (int64_t K_i_26299 = 0; K_i_26299 < (int64_t) 2; K_i_26299++) {
        int64_t phys_tid_26310;
        __local unsigned char *red_arr_mem_32482;
        int64_t gtid_26305;
        int64_t gtid_26306;
        int64_t gtid_26307;
        int64_t gtid_26308;
        int64_t gtid_26309;
        int64_t dims_flat_32484;
        f16 eta_p_26311;
        f16 eta_p_26312;
        f16 eta_p_32486;
        f16 eta_p_32487;
        bool ltid_in_bounds_32489;
        int32_t skip_threads_32490;
        bool no_carry_in_32496;
        
        phys_tid_26310 = sext_i32_i64(local_tid_32403);
        red_arr_mem_32482 = (__local unsigned char *) red_arr_mem_32482_backing_4;
        gtid_26305 = sext_i32_i64(sext_i64_i32(ltid_pre_32440));
        gtid_26306 = sext_i32_i64(sext_i64_i32(ltid_pre_32441));
        gtid_26307 = sext_i32_i64(sext_i64_i32(ltid_pre_32442));
        gtid_26308 = sext_i32_i64(sext_i64_i32(ltid_pre_32443));
        gtid_26309 = sext_i32_i64(sext_i64_i32(ltid_pre_32444));
        if ((((slt64(gtid_26305, (int64_t) 2) && slt64(gtid_26306, (int64_t) 2)) && slt64(gtid_26307, dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) && slt64(gtid_26308, dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) && slt64(gtid_26309, dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396)) {
            f16 eta_p_26318;
            f16 eta_p_26319;
            f16 defunc_0_f_res_26320;
            
            eta_p_26318 = futrts_from_bits16(((__local uint16_t *) color_30695)[gtid_26305 * (dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * (int64_t) 2) + K_i_26299 * (dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) + gtid_26307 * dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396 + gtid_26309]);
            eta_p_26319 = futrts_from_bits16(((__global uint16_t *) mem_28649)[K_i_26299 * (dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396 * (int64_t) 2) + gtid_26306 * (dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396) + gtid_26309 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 + gtid_26308]);
            defunc_0_f_res_26320 = eta_p_26318 * eta_p_26319;
            ((__local uint16_t *) red_arr_mem_32482)[gtid_26305 * (dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * (int64_t) 2) + gtid_26306 * (dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) + gtid_26307 * (dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) + gtid_26308 * dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396 + gtid_26309] = futrts_to_bits16(defunc_0_f_res_26320);
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        dims_flat_32484 = (int64_t) 4 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396;
        ltid_in_bounds_32489 = slt64(sext_i32_i64(local_tid_32403), (int64_t) 4 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396);
        // read input for in-block scan
        {
            if (ltid_in_bounds_32489) {
                eta_p_26312 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_32482)[sext_i32_i64(local_tid_32403)]);
                if ((local_tid_32403 - squot32(local_tid_32403, 32) * 32) == 0) {
                    eta_p_26311 = eta_p_26312;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_32490 = 1;
            while (slt32(skip_threads_32490, 32)) {
                bool thread_active_32491 = sle32(skip_threads_32490, local_tid_32403 - squot32(local_tid_32403, 32) * 32) && ltid_in_bounds_32489;
                
                if (thread_active_32491) {
                    // read operands
                    {
                        eta_p_26311 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_32482)[sext_i32_i64(local_tid_32403) - sext_i32_i64(skip_threads_32490)]);
                    }
                }
                // perform operation
                {
                    bool inactive_32492 = slt64(srem64(sext_i32_i64(local_tid_32403), dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396), sext_i32_i64(local_tid_32403) - sext_i32_i64(local_tid_32403 - skip_threads_32490));
                    
                    if (thread_active_32491 && inactive_32492) {
                        eta_p_26311 = eta_p_26312;
                    }
                    if (thread_active_32491) {
                        if (!inactive_32492) {
                            f16 defunc_0_op_res_26313 = eta_p_26311 + eta_p_26312;
                            
                            eta_p_26311 = defunc_0_op_res_26313;
                        }
                    }
                }
                if (sle32(wave_sizze_32405, skip_threads_32490)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (thread_active_32491) {
                    // write result
                    {
                        ((volatile __local uint16_t *) red_arr_mem_32482)[sext_i32_i64(local_tid_32403)] = futrts_to_bits16(eta_p_26311);
                        eta_p_26312 = eta_p_26311;
                    }
                }
                if (sle32(wave_sizze_32405, skip_threads_32490)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_32490 *= 2;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // last thread of block 'i' writes its result to offset 'i'
        {
            if ((local_tid_32403 - squot32(local_tid_32403, 32) * 32) == 31 && ltid_in_bounds_32489) {
                ((volatile __local uint16_t *) red_arr_mem_32482)[sext_i32_i64(squot32(local_tid_32403, 32))] = futrts_to_bits16(eta_p_26311);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
        {
            int32_t skip_threads_32493;
            
            // read input for in-block scan
            {
                if (squot32(local_tid_32403, 32) == 0 && ltid_in_bounds_32489) {
                    eta_p_32487 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_32482)[sext_i32_i64(local_tid_32403)]);
                    if ((local_tid_32403 - squot32(local_tid_32403, 32) * 32) == 0) {
                        eta_p_32486 = eta_p_32487;
                    }
                }
            }
            // in-block scan (hopefully no barriers needed)
            {
                skip_threads_32493 = 1;
                while (slt32(skip_threads_32493, 32)) {
                    bool thread_active_32494 = sle32(skip_threads_32493, local_tid_32403 - squot32(local_tid_32403, 32) * 32) && (squot32(local_tid_32403, 32) == 0 && ltid_in_bounds_32489);
                    
                    if (thread_active_32494) {
                        // read operands
                        {
                            eta_p_32486 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_32482)[sext_i32_i64(local_tid_32403) - sext_i32_i64(skip_threads_32493)]);
                        }
                    }
                    // perform operation
                    {
                        bool inactive_32495 = slt64(srem64(sext_i32_i64(local_tid_32403 * 32 + 32 - 1), dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396), sext_i32_i64(local_tid_32403 * 32 + 32 - 1) - sext_i32_i64((local_tid_32403 - skip_threads_32493) * 32 + 32 - 1));
                        
                        if (thread_active_32494 && inactive_32495) {
                            eta_p_32486 = eta_p_32487;
                        }
                        if (thread_active_32494) {
                            if (!inactive_32495) {
                                f16 defunc_0_op_res_32488 = eta_p_32486 + eta_p_32487;
                                
                                eta_p_32486 = defunc_0_op_res_32488;
                            }
                        }
                    }
                    if (sle32(wave_sizze_32405, skip_threads_32493)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    if (thread_active_32494) {
                        // write result
                        {
                            ((volatile __local uint16_t *) red_arr_mem_32482)[sext_i32_i64(local_tid_32403)] = futrts_to_bits16(eta_p_32486);
                            eta_p_32487 = eta_p_32486;
                        }
                    }
                    if (sle32(wave_sizze_32405, skip_threads_32493)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    skip_threads_32493 *= 2;
                }
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        no_carry_in_32496 = squot32(local_tid_32403, 32) == 0 || !ltid_in_bounds_32489;
        // carry-in for every block except the first
        {
            // read operands
            {
                if (!no_carry_in_32496) {
                    eta_p_26312 = eta_p_26311;
                    eta_p_26311 = futrts_from_bits16(((__local uint16_t *) red_arr_mem_32482)[sext_i32_i64(squot32(local_tid_32403, 32)) - (int64_t) 1]);
                }
            }
            // perform operation
            {
                bool inactive_32497 = slt64(srem64(sext_i32_i64(local_tid_32403), dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396), sext_i32_i64(local_tid_32403) - sext_i32_i64(squot32(local_tid_32403, 32) * 32 - 1));
                
                if (!no_carry_in_32496) {
                    if (inactive_32497) {
                        eta_p_26311 = eta_p_26312;
                    }
                }
                if (!no_carry_in_32496) {
                    if (!inactive_32497) {
                        f16 defunc_0_op_res_26313 = eta_p_26311 + eta_p_26312;
                        
                        eta_p_26311 = defunc_0_op_res_26313;
                    }
                }
            }
            // write final result
            {
                if (!no_carry_in_32496) {
                    ((__local uint16_t *) red_arr_mem_32482)[sext_i32_i64(local_tid_32403)] = futrts_to_bits16(eta_p_26311);
                }
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // restore correct values for first block
        {
            if (squot32(local_tid_32403, 32) == 0 && ltid_in_bounds_32489) {
                ((__local uint16_t *) red_arr_mem_32482)[sext_i32_i64(local_tid_32403)] = futrts_to_bits16(eta_p_26312);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_LOCAL_MEM_FENCE);
        // Save result of reduction.
        {
            int32_t num_chunks_32498 = sdiv_up32(4 * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400), sext_i64_i32(computed_tblock_sizze_26160));
            
            for (int32_t chunk_i_32499 = 0; chunk_i_32499 < num_chunks_32498; chunk_i_32499++) {
                int32_t i_32500 = chunk_i_32499 * sext_i64_i32(computed_tblock_sizze_26160) + local_tid_32403;
                
                if (slt32(i_32500, 4 * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400))) {
                    ((__local uint16_t *) color_30693)[sext_i32_i64(squot32(i_32500, 2 * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400))) * (dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * (int64_t) 2) + sext_i32_i64(squot32(i_32500 - squot32(i_32500, 2 * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) * (2 * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)), sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400))) * (dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) + sext_i32_i64(squot32(i_32500 - squot32(i_32500, 2 * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) * (2 * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) - squot32(i_32500 - squot32(i_32500, 2 * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) * (2 * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)), sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) * (sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)), sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400))) * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 + sext_i32_i64(i_32500 - squot32(i_32500, 2 * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) * (2 * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) - squot32(i_32500 - squot32(i_32500, 2 * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) * (2 * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)), sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) * (sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) - squot32(i_32500 - squot32(i_32500, 2 * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) * (2 * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) - squot32(i_32500 - squot32(i_32500, 2 * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) * (2 * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)), sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) * (sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)), sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400))] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) red_arr_mem_32482)[dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396 - (int64_t) 1 + sext_i32_i64(squot32(i_32500, 2 * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400))) * (dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * (int64_t) 2) + sext_i32_i64(squot32(i_32500 - squot32(i_32500, 2 * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) * (2 * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)), sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400))) * (dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) + sext_i32_i64(squot32(i_32500 - squot32(i_32500, 2 * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) * (2 * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) - squot32(i_32500 - squot32(i_32500, 2 * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) * (2 * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)), sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) * (sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)), sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400))) * (dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) + sext_i32_i64(i_32500 - squot32(i_32500, 2 * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) * (2 * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) - squot32(i_32500 - squot32(i_32500, 2 * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) * (2 * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)), sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) * (sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) - squot32(i_32500 - squot32(i_32500, 2 * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) * (2 * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) - squot32(i_32500 - squot32(i_32500, 2 * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) * (2 * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)), sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) * (sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)), sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) * dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396]));
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_LOCAL_MEM_FENCE);
        for (int64_t i_26324 = 0; i_26324 < dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400; i_26324++) {
            bool index_certs_26327;
            int64_t phys_tid_26341;
            int64_t gtid_26338;
            int64_t gtid_26339;
            int64_t gtid_26340;
            int64_t phys_tid_26349;
            int64_t gtid_26346;
            int64_t gtid_26347;
            int64_t gtid_slice_26348;
            
            if (!ok_or_empty_16195) {
                {
                    if (atomic_cmpxchg_i32_global(global_failure, -1, 34) == -1) {
                        global_failure_args[0] = (int64_t) i_26324;
                        global_failure_args[1] = (int64_t) (int64_t) 0;
                        global_failure_args[2] = (int64_t) dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400;
                        global_failure_args[3] = (int64_t) dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400;
                        ;
                    }
                    local_failure = 1;
                    goto error_7;
                }
            }
            phys_tid_26341 = sext_i32_i64(local_tid_32403);
            gtid_26338 = sext_i32_i64(sext_i64_i32(ltid_pre_32407));
            gtid_26339 = sext_i32_i64(sext_i64_i32(ltid_pre_32408));
            gtid_26340 = sext_i32_i64(sext_i64_i32(ltid_pre_32409));
            if ((slt64(gtid_26338, (int64_t) 2) && slt64(gtid_26339, (int64_t) 2)) && slt64(gtid_26340, dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) {
                f16 eta_p_26342;
                f16 eta_p_26343;
                f16 defunc_0_f_res_26344;
                
                eta_p_26342 = futrts_from_bits16(((__local uint16_t *) color_30693)[gtid_26338 * (dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * (int64_t) 2) + gtid_26339 * (dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) + i_26324 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 + gtid_26340]);
                eta_p_26343 = futrts_from_bits16(((__local uint16_t *) color_30694)[gtid_26338 * lmad_arg_28712 + gtid_26339 * binop_x_28711 + i_26324 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 + gtid_26340]);
                defunc_0_f_res_26344 = eta_p_26342 + eta_p_26343;
                ((__local uint16_t *) color_30692)[gtid_26338 * (dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * (int64_t) 2) + gtid_26339 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 + gtid_26340] = futrts_to_bits16(defunc_0_f_res_26344);
            }
            
          error_7:
            barrier(CLK_LOCAL_MEM_FENCE);
            if (local_failure)
                return;
            barrier(CLK_LOCAL_MEM_FENCE);
            phys_tid_26349 = sext_i32_i64(local_tid_32403);
            gtid_26346 = sext_i32_i64(sext_i64_i32(ltid_pre_32407));
            gtid_26347 = sext_i32_i64(sext_i64_i32(ltid_pre_32408));
            gtid_slice_26348 = sext_i32_i64(sext_i64_i32(ltid_pre_32409));
            if ((slt64(gtid_26346, (int64_t) 2) && slt64(gtid_26347, (int64_t) 2)) && slt64(gtid_slice_26348, dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) {
                f16 v_26351 = futrts_from_bits16(((__local uint16_t *) color_30692)[gtid_26346 * (dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * (int64_t) 2) + gtid_26347 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 + gtid_slice_26348]);
                
                if ((((sle64((int64_t) 0, gtid_26346) && slt64(gtid_26346, (int64_t) 2)) && (sle64((int64_t) 0, gtid_26347) && slt64(gtid_26347, (int64_t) 2))) && (sle64((int64_t) 0, i_26324) && slt64(i_26324, dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400))) && (sle64((int64_t) 0, gtid_slice_26348) && slt64(gtid_slice_26348, dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400))) {
                    ((__local uint16_t *) color_30694)[gtid_26346 * lmad_arg_28712 + gtid_26347 * binop_x_28711 + i_26324 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 + gtid_slice_26348] = futrts_to_bits16(v_26351);
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }
    }
    phys_tid_26355 = sext_i32_i64(local_tid_32403);
    gtid_26354 = sext_i32_i64(sext_i64_i32(ltid_pre_32455));
    if (slt64(gtid_26354, d_13944)) {
        int64_t tmp_26357;
        bool x_26358;
        bool y_26359;
        bool bounds_check_26360;
        bool index_certs_26361;
        
        tmp_26357 = sdiv64(gtid_26354, dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400);
        x_26358 = sle64((int64_t) 0, tmp_26357);
        y_26359 = slt64(tmp_26357, (int64_t) 2);
        bounds_check_26360 = x_26358 && y_26359;
        if (!bounds_check_26360) {
            {
                if (atomic_cmpxchg_i32_global(global_failure, -1, 35) == -1) {
                    global_failure_args[0] = (int64_t) tmp_26357;
                    global_failure_args[1] = (int64_t) (int64_t) 2;
                    ;
                }
                local_failure = 1;
                goto error_9;
            }
        }
    }
    
  error_9:
    barrier(CLK_LOCAL_MEM_FENCE);
    if (local_failure)
        return;
    barrier(CLK_LOCAL_MEM_FENCE);
    phys_tid_26365 = sext_i32_i64(local_tid_32403);
    gtid_26363 = sext_i32_i64(sext_i64_i32(ltid_pre_32458));
    gtid_26364 = sext_i32_i64(sext_i64_i32(ltid_pre_32459));
    if (slt64(gtid_26363, d_13944) && slt64(gtid_26364, d_13944)) {
        int64_t tmp_26369;
        bool x_26370;
        bool y_26371;
        bool bounds_check_26372;
        bool index_certs_26373;
        int64_t tmp_26374;
        bool x_26375;
        bool y_26376;
        bool bounds_check_26377;
        bool index_certs_26378;
        int64_t index_primexp_27102;
        bool index_certs_26367;
        f16 lifted_lambda_res_26379;
        
        tmp_26369 = sdiv64(gtid_26364, dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400);
        x_26370 = sle64((int64_t) 0, tmp_26369);
        y_26371 = slt64(tmp_26369, dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400);
        bounds_check_26372 = x_26370 && y_26371;
        if (!bounds_check_26372) {
            {
                if (atomic_cmpxchg_i32_global(global_failure, -1, 36) == -1) {
                    global_failure_args[0] = (int64_t) tmp_26369;
                    global_failure_args[1] = (int64_t) dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400;
                    ;
                }
                local_failure = 1;
                goto error_10;
            }
        }
        tmp_26374 = smod64(gtid_26364, dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400);
        x_26375 = sle64((int64_t) 0, tmp_26374);
        y_26376 = slt64(tmp_26374, dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400);
        bounds_check_26377 = x_26375 && y_26376;
        if (!bounds_check_26377) {
            {
                if (atomic_cmpxchg_i32_global(global_failure, -1, 37) == -1) {
                    global_failure_args[0] = (int64_t) tmp_26374;
                    global_failure_args[1] = (int64_t) dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400;
                    ;
                }
                local_failure = 1;
                goto error_10;
            }
        }
        index_primexp_27102 = sdiv64(gtid_26363, dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400);
        index_certs_26367 = 0;
        lifted_lambda_res_26379 = futrts_from_bits16(((__local uint16_t *) color_30694)[index_primexp_27102 * lmad_arg_28712 + tmp_26369 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 + tmp_26374]);
        ((__local uint16_t *) color_30692)[gtid_26363 * d_13944 + gtid_26364] = futrts_to_bits16(lifted_lambda_res_26379);
    }
    
  error_10:
    barrier(CLK_LOCAL_MEM_FENCE);
    if (local_failure)
        return;
    barrier(CLK_LOCAL_MEM_FENCE);
    num_chunks_32502 = sdiv_up32(sext_i64_i32(d_13944) * sext_i64_i32(d_13944), sext_i64_i32(computed_tblock_sizze_26160));
    for (int32_t chunk_i_32503 = 0; chunk_i_32503 < num_chunks_32502; chunk_i_32503++) {
        int32_t i_32504 = chunk_i_32503 * sext_i64_i32(computed_tblock_sizze_26160) + local_tid_32403;
        
        if (slt32(i_32504, sext_i64_i32(d_13944) * sext_i64_i32(d_13944))) {
            ((__global uint16_t *) mem_28744)[gtid_26251 * (d_13944 * d_13944) + sext_i32_i64(squot32(i_32504, sext_i64_i32(d_13944))) * d_13944 + sext_i32_i64(i_32504 - squot32(i_32504, sext_i64_i32(d_13944)) * sext_i64_i32(d_13944))] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) color_30692)[sext_i32_i64(squot32(i_32504, sext_i64_i32(d_13944))) * d_13944 + sext_i32_i64(i_32504 - squot32(i_32504, sext_i64_i32(d_13944)) * sext_i64_i32(d_13944))]));
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
  error_11:
    return;
}
FUTHARK_KERNEL
void FlashAttention_6392zisegmap_intrablock_26494(__global int *global_failure, int failure_is_an_option, __global int64_t *global_failure_args, int64_t m_13945, unsigned char ok_or_empty_16195_bits, int64_t dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396, int64_t dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400, int64_t computed_tblock_sizze_26486, int64_t bytes_28661, int32_t num_chunks_32538, __global unsigned char *mem_28649, __global unsigned char *mem_28658, __global unsigned char *mem_28689)
{
    bool ok_or_empty_16195 = ok_or_empty_16195_bits;
    volatile __local unsigned char *red_arr_mem_32580_backing_2 = &shared_mem[0];
    const int64_t red_arr_mem_32580_backing_2_offset = 0 + ((int64_t) 2 * (dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396) + srem64((int64_t) 8 - srem64((int64_t) 2 * (dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396), (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_30697_backing_1 = &shared_mem[red_arr_mem_32580_backing_2_offset];
    const int64_t color_30697_backing_1_offset = red_arr_mem_32580_backing_2_offset + (bytes_28661 + srem64((int64_t) 8 - srem64(bytes_28661, (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_30696_backing_0 = &shared_mem[color_30697_backing_1_offset];
    const int64_t color_30696_backing_0_offset = color_30697_backing_1_offset + (bytes_28661 + srem64((int64_t) 8 - srem64(bytes_28661, (int64_t) 8), (int64_t) 8));
    volatile __local int local_failure;
    
    if (failure_is_an_option) {
        int failed = *global_failure >= 0;
        
        if (failed)
            return;
    }
    local_failure = 0;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t local_tid_32542;
    int32_t tblock_sizze_32545;
    int32_t wave_sizze_32544;
    int32_t block_id_32543;
    int32_t global_tid_32541;
    int64_t phys_tblock_id_26494;
    int64_t slice_32547;
    int64_t ltid_pre_32546;
    int64_t remnant_32548;
    int64_t slice_32551;
    int64_t slice_32552;
    int64_t ltid_pre_32549;
    int64_t remnant_32553;
    int64_t ltid_pre_32550;
    int64_t remnant_32554;
    int64_t slice_32558;
    int64_t slice_32559;
    int64_t slice_32560;
    int64_t ltid_pre_32555;
    int64_t remnant_32561;
    int64_t ltid_pre_32556;
    int64_t remnant_32562;
    int64_t ltid_pre_32557;
    int64_t remnant_32563;
    int64_t slice_32564;
    int64_t slice_32565;
    int64_t slice_32566;
    int64_t gtid_26491;
    int64_t remnant_32567;
    int64_t gtid_26492;
    int64_t remnant_32568;
    int64_t gtid_26493;
    int64_t remnant_32569;
    __local unsigned char *color_30696;
    __local unsigned char *color_30697;
    int32_t num_chunks_32600;
    
    local_tid_32542 = get_local_id(0);
    tblock_sizze_32545 = get_local_size(0);
    wave_sizze_32544 = LOCKSTEP_WIDTH;
    block_id_32543 = get_tblock_id(0);
    global_tid_32541 = block_id_32543 * tblock_sizze_32545 + local_tid_32542;
    phys_tblock_id_26494 = sext_i32_i64(block_id_32543);
    slice_32547 = dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400;
    ltid_pre_32546 = sext_i32_i64(local_tid_32542);
    remnant_32548 = sext_i32_i64(local_tid_32542) - ltid_pre_32546;
    slice_32551 = dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400;
    slice_32552 = dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * slice_32551;
    ltid_pre_32549 = squot64(sext_i32_i64(local_tid_32542), slice_32551);
    remnant_32553 = sext_i32_i64(local_tid_32542) - ltid_pre_32549 * slice_32551;
    ltid_pre_32550 = remnant_32553;
    remnant_32554 = remnant_32553 - ltid_pre_32550;
    slice_32558 = dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396;
    slice_32559 = dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * slice_32558;
    slice_32560 = dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * slice_32559;
    ltid_pre_32555 = squot64(sext_i32_i64(local_tid_32542), slice_32559);
    remnant_32561 = sext_i32_i64(local_tid_32542) - ltid_pre_32555 * slice_32559;
    ltid_pre_32556 = squot64(remnant_32561, slice_32558);
    remnant_32562 = remnant_32561 - ltid_pre_32556 * slice_32558;
    ltid_pre_32557 = remnant_32562;
    remnant_32563 = remnant_32562 - ltid_pre_32557;
    slice_32564 = (int64_t) 2;
    slice_32565 = (int64_t) 2 * slice_32564;
    slice_32566 = m_13945 * slice_32565;
    gtid_26491 = squot64(sext_i32_i64(block_id_32543), slice_32565);
    remnant_32567 = sext_i32_i64(block_id_32543) - gtid_26491 * slice_32565;
    gtid_26492 = squot64(remnant_32567, slice_32564);
    remnant_32568 = remnant_32567 - gtid_26492 * slice_32564;
    gtid_26493 = remnant_32568;
    remnant_32569 = remnant_32568 - gtid_26493;
    color_30696 = (__local unsigned char *) color_30696_backing_0;
    color_30697 = (__local unsigned char *) color_30697_backing_1;
    for (int32_t chunk_i_32573 = 0; chunk_i_32573 < num_chunks_32538; chunk_i_32573++) {
        int32_t i_32574;
        int64_t slice_32575;
        int64_t slice_32576;
        int64_t rep_i_32571;
        int64_t remnant_32577;
        int64_t rep_i_32572;
        int64_t remnant_32578;
        
        i_32574 = chunk_i_32573 * sext_i64_i32(computed_tblock_sizze_26486) + local_tid_32542;
        slice_32575 = dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400;
        slice_32576 = dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * slice_32575;
        rep_i_32571 = squot64(sext_i32_i64(i_32574), slice_32575);
        remnant_32577 = sext_i32_i64(i_32574) - rep_i_32571 * slice_32575;
        rep_i_32572 = remnant_32577;
        remnant_32578 = remnant_32577 - rep_i_32572;
        if ((sle64((int64_t) 0, rep_i_32571) && slt64(rep_i_32571, dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) && (sle64((int64_t) 0, rep_i_32572) && slt64(rep_i_32572, dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400))) {
            ((__local uint16_t *) color_30697)[rep_i_32571 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 + rep_i_32572] = futrts_to_bits16((f16) 0.0F);
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    barrier(CLK_LOCAL_MEM_FENCE);
    for (int64_t K_i_26501 = 0; K_i_26501 < (int64_t) 2; K_i_26501++) {
        int64_t phys_tid_26510;
        __local unsigned char *red_arr_mem_32580;
        int64_t gtid_26507;
        int64_t gtid_26508;
        int64_t gtid_26509;
        int64_t dims_flat_32582;
        f16 eta_p_26511;
        f16 eta_p_26512;
        f16 eta_p_32584;
        f16 eta_p_32585;
        bool ltid_in_bounds_32587;
        int32_t skip_threads_32588;
        bool no_carry_in_32594;
        
        phys_tid_26510 = sext_i32_i64(local_tid_32542);
        red_arr_mem_32580 = (__local unsigned char *) red_arr_mem_32580_backing_2;
        gtid_26507 = sext_i32_i64(sext_i64_i32(ltid_pre_32555));
        gtid_26508 = sext_i32_i64(sext_i64_i32(ltid_pre_32556));
        gtid_26509 = sext_i32_i64(sext_i64_i32(ltid_pre_32557));
        if ((slt64(gtid_26507, dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) && slt64(gtid_26508, dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) && slt64(gtid_26509, dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396)) {
            f16 eta_p_26516;
            f16 eta_p_26517;
            f16 defunc_0_f_res_26518;
            
            eta_p_26516 = futrts_from_bits16(((__global uint16_t *) mem_28658)[gtid_26491 * (dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * (int64_t) 2 * (int64_t) 2) + gtid_26492 * (dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * (int64_t) 2) + K_i_26501 * (dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) + gtid_26507 * dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396 + gtid_26509]);
            eta_p_26517 = futrts_from_bits16(((__global uint16_t *) mem_28649)[K_i_26501 * (dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396 * (int64_t) 2) + gtid_26493 * (dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396) + gtid_26509 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 + gtid_26508]);
            defunc_0_f_res_26518 = eta_p_26516 * eta_p_26517;
            ((__local uint16_t *) red_arr_mem_32580)[gtid_26507 * (dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) + gtid_26508 * dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396 + gtid_26509] = futrts_to_bits16(defunc_0_f_res_26518);
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        dims_flat_32582 = dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396;
        ltid_in_bounds_32587 = slt64(sext_i32_i64(local_tid_32542), dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396);
        // read input for in-block scan
        {
            if (ltid_in_bounds_32587) {
                eta_p_26512 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_32580)[sext_i32_i64(local_tid_32542)]);
                if ((local_tid_32542 - squot32(local_tid_32542, 32) * 32) == 0) {
                    eta_p_26511 = eta_p_26512;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_32588 = 1;
            while (slt32(skip_threads_32588, 32)) {
                bool thread_active_32589 = sle32(skip_threads_32588, local_tid_32542 - squot32(local_tid_32542, 32) * 32) && ltid_in_bounds_32587;
                
                if (thread_active_32589) {
                    // read operands
                    {
                        eta_p_26511 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_32580)[sext_i32_i64(local_tid_32542) - sext_i32_i64(skip_threads_32588)]);
                    }
                }
                // perform operation
                {
                    bool inactive_32590 = slt64(srem64(sext_i32_i64(local_tid_32542), dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396), sext_i32_i64(local_tid_32542) - sext_i32_i64(local_tid_32542 - skip_threads_32588));
                    
                    if (thread_active_32589 && inactive_32590) {
                        eta_p_26511 = eta_p_26512;
                    }
                    if (thread_active_32589) {
                        if (!inactive_32590) {
                            f16 defunc_0_op_res_26513 = eta_p_26511 + eta_p_26512;
                            
                            eta_p_26511 = defunc_0_op_res_26513;
                        }
                    }
                }
                if (sle32(wave_sizze_32544, skip_threads_32588)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (thread_active_32589) {
                    // write result
                    {
                        ((volatile __local uint16_t *) red_arr_mem_32580)[sext_i32_i64(local_tid_32542)] = futrts_to_bits16(eta_p_26511);
                        eta_p_26512 = eta_p_26511;
                    }
                }
                if (sle32(wave_sizze_32544, skip_threads_32588)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_32588 *= 2;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // last thread of block 'i' writes its result to offset 'i'
        {
            if ((local_tid_32542 - squot32(local_tid_32542, 32) * 32) == 31 && ltid_in_bounds_32587) {
                ((volatile __local uint16_t *) red_arr_mem_32580)[sext_i32_i64(squot32(local_tid_32542, 32))] = futrts_to_bits16(eta_p_26511);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
        {
            int32_t skip_threads_32591;
            
            // read input for in-block scan
            {
                if (squot32(local_tid_32542, 32) == 0 && ltid_in_bounds_32587) {
                    eta_p_32585 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_32580)[sext_i32_i64(local_tid_32542)]);
                    if ((local_tid_32542 - squot32(local_tid_32542, 32) * 32) == 0) {
                        eta_p_32584 = eta_p_32585;
                    }
                }
            }
            // in-block scan (hopefully no barriers needed)
            {
                skip_threads_32591 = 1;
                while (slt32(skip_threads_32591, 32)) {
                    bool thread_active_32592 = sle32(skip_threads_32591, local_tid_32542 - squot32(local_tid_32542, 32) * 32) && (squot32(local_tid_32542, 32) == 0 && ltid_in_bounds_32587);
                    
                    if (thread_active_32592) {
                        // read operands
                        {
                            eta_p_32584 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_mem_32580)[sext_i32_i64(local_tid_32542) - sext_i32_i64(skip_threads_32591)]);
                        }
                    }
                    // perform operation
                    {
                        bool inactive_32593 = slt64(srem64(sext_i32_i64(local_tid_32542 * 32 + 32 - 1), dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396), sext_i32_i64(local_tid_32542 * 32 + 32 - 1) - sext_i32_i64((local_tid_32542 - skip_threads_32591) * 32 + 32 - 1));
                        
                        if (thread_active_32592 && inactive_32593) {
                            eta_p_32584 = eta_p_32585;
                        }
                        if (thread_active_32592) {
                            if (!inactive_32593) {
                                f16 defunc_0_op_res_32586 = eta_p_32584 + eta_p_32585;
                                
                                eta_p_32584 = defunc_0_op_res_32586;
                            }
                        }
                    }
                    if (sle32(wave_sizze_32544, skip_threads_32591)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    if (thread_active_32592) {
                        // write result
                        {
                            ((volatile __local uint16_t *) red_arr_mem_32580)[sext_i32_i64(local_tid_32542)] = futrts_to_bits16(eta_p_32584);
                            eta_p_32585 = eta_p_32584;
                        }
                    }
                    if (sle32(wave_sizze_32544, skip_threads_32591)) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                    }
                    skip_threads_32591 *= 2;
                }
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        no_carry_in_32594 = squot32(local_tid_32542, 32) == 0 || !ltid_in_bounds_32587;
        // carry-in for every block except the first
        {
            // read operands
            {
                if (!no_carry_in_32594) {
                    eta_p_26512 = eta_p_26511;
                    eta_p_26511 = futrts_from_bits16(((__local uint16_t *) red_arr_mem_32580)[sext_i32_i64(squot32(local_tid_32542, 32)) - (int64_t) 1]);
                }
            }
            // perform operation
            {
                bool inactive_32595 = slt64(srem64(sext_i32_i64(local_tid_32542), dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396), sext_i32_i64(local_tid_32542) - sext_i32_i64(squot32(local_tid_32542, 32) * 32 - 1));
                
                if (!no_carry_in_32594) {
                    if (inactive_32595) {
                        eta_p_26511 = eta_p_26512;
                    }
                }
                if (!no_carry_in_32594) {
                    if (!inactive_32595) {
                        f16 defunc_0_op_res_26513 = eta_p_26511 + eta_p_26512;
                        
                        eta_p_26511 = defunc_0_op_res_26513;
                    }
                }
            }
            // write final result
            {
                if (!no_carry_in_32594) {
                    ((__local uint16_t *) red_arr_mem_32580)[sext_i32_i64(local_tid_32542)] = futrts_to_bits16(eta_p_26511);
                }
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // restore correct values for first block
        {
            if (squot32(local_tid_32542, 32) == 0 && ltid_in_bounds_32587) {
                ((__local uint16_t *) red_arr_mem_32580)[sext_i32_i64(local_tid_32542)] = futrts_to_bits16(eta_p_26512);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_LOCAL_MEM_FENCE);
        // Save result of reduction.
        {
            int32_t num_chunks_32596 = sdiv_up32(sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400), sext_i64_i32(computed_tblock_sizze_26486));
            
            for (int32_t chunk_i_32597 = 0; chunk_i_32597 < num_chunks_32596; chunk_i_32597++) {
                int32_t i_32598 = chunk_i_32597 * sext_i64_i32(computed_tblock_sizze_26486) + local_tid_32542;
                
                if (slt32(i_32598, sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400))) {
                    ((__local uint16_t *) color_30696)[sext_i32_i64(squot32(i_32598, sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400))) * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 + sext_i32_i64(i_32598 - squot32(i_32598, sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400))] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) red_arr_mem_32580)[dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396 - (int64_t) 1 + sext_i32_i64(squot32(i_32598, sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400))) * (dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) + sext_i32_i64(i_32598 - squot32(i_32598, sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) * dzlz7bUZLzsZRz20Unz20UNz7dUzg_16396]));
                }
            }
            barrier(CLK_LOCAL_MEM_FENCE);
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_LOCAL_MEM_FENCE);
        for (int64_t i_26520 = 0; i_26520 < dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400; i_26520++) {
            bool index_certs_26531;
            int64_t phys_tid_26527;
            int64_t gtid_26526;
            
            if (!ok_or_empty_16195) {
                {
                    if (atomic_cmpxchg_i32_global(global_failure, -1, 40) == -1) {
                        global_failure_args[0] = (int64_t) i_26520;
                        global_failure_args[1] = (int64_t) (int64_t) 0;
                        global_failure_args[2] = (int64_t) dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400;
                        global_failure_args[3] = (int64_t) dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400;
                        ;
                    }
                    local_failure = 1;
                    goto error_5;
                }
            }
            phys_tid_26527 = sext_i32_i64(local_tid_32542);
            gtid_26526 = sext_i32_i64(sext_i64_i32(ltid_pre_32546));
            if (slt64(gtid_26526, dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) {
                f16 eta_p_26528;
                f16 eta_p_26529;
                f16 defunc_0_f_res_26530;
                
                eta_p_26528 = futrts_from_bits16(((__local uint16_t *) color_30696)[i_26520 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 + gtid_26526]);
                eta_p_26529 = futrts_from_bits16(((__local uint16_t *) color_30697)[i_26520 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 + gtid_26526]);
                defunc_0_f_res_26530 = eta_p_26528 + eta_p_26529;
                ((__local uint16_t *) color_30697)[i_26520 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 + gtid_26526] = futrts_to_bits16(defunc_0_f_res_26530);
            }
            
          error_5:
            barrier(CLK_LOCAL_MEM_FENCE);
            if (local_failure)
                return;
            barrier(CLK_LOCAL_MEM_FENCE);
        }
    }
    num_chunks_32600 = sdiv_up32(sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400), sext_i64_i32(computed_tblock_sizze_26486));
    for (int32_t chunk_i_32601 = 0; chunk_i_32601 < num_chunks_32600; chunk_i_32601++) {
        int32_t i_32602 = chunk_i_32601 * sext_i64_i32(computed_tblock_sizze_26486) + local_tid_32542;
        
        if (slt32(i_32602, sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400))) {
            ((__global uint16_t *) mem_28689)[gtid_26491 * (dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * (int64_t) 2 * (int64_t) 2) + gtid_26492 * (dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * (int64_t) 2) + gtid_26493 * (dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400) + sext_i32_i64(squot32(i_32602, sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400))) * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 + sext_i32_i64(i_32602 - squot32(i_32602, sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400))] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) color_30697)[sext_i32_i64(squot32(i_32602, sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400))) * dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400 + sext_i32_i64(i_32602 - squot32(i_32602, sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400)) * sext_i64_i32(dzlz7bUZLzsZRz20Umz20UMz7dUzg_16400))]));
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
  error_6:
    return;
}
FUTHARK_KERNEL
void FlashAttention_6392zisegmap_intrablock_26650(__global int *global_failure, int failure_is_an_option, __global int64_t *global_failure_args, int64_t d_13944, int64_t m_13945, int64_t dzlz7bUZLztZRz20Umz20Udz7dUzg_13946, int64_t m_16509, int64_t one_intra_par_min_18858, int64_t bytes_28347, int64_t ctx_31174, int64_t ctx_31175, int64_t ctx_31181, int64_t ctx_31196, int64_t ctx_31197, int64_t ctx_31203, int64_t binop_x_31212, int64_t ctx_31216, __global unsigned char *V_mem_28341, __global unsigned char *mem_28434, __global unsigned char *mem_28496, __global unsigned char *mem_28502, __global unsigned char *mem_28546, __global unsigned char *color_30702, __global unsigned char *color_30703, __global unsigned char *color_30705)
{
    volatile __local unsigned char *red_arr_mem_32667_backing_1 = &shared_mem[0];
    const int64_t red_arr_mem_32667_backing_1_offset = 0 + ((int64_t) 2 * (m_16509 * d_13944 * d_13944) + srem64((int64_t) 8 - srem64((int64_t) 2 * (m_16509 * d_13944 * d_13944), (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_30704_backing_0 = &shared_mem[red_arr_mem_32667_backing_1_offset];
    const int64_t color_30704_backing_0_offset = red_arr_mem_32667_backing_1_offset + (bytes_28347 + srem64((int64_t) 8 - srem64(bytes_28347, (int64_t) 8), (int64_t) 8));
    volatile __local int local_failure;
    
    if (failure_is_an_option) {
        int failed = *global_failure >= 0;
        
        if (failed)
            return;
    }
    local_failure = 0;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t local_tid_32658;
    int32_t tblock_sizze_32661;
    int32_t wave_sizze_32660;
    int32_t block_id_32659;
    int32_t global_tid_32657;
    int64_t phys_tblock_id_26650;
    int64_t slice_32663;
    int64_t ltid_pre_32662;
    int64_t remnant_32664;
    int64_t slice_32665;
    int64_t gtid_26649;
    int64_t remnant_32666;
    __local unsigned char *color_30704;
    int64_t binop_x_31171;
    int64_t binop_x_31179;
    int64_t binop_x_31193;
    int64_t binop_x_31201;
    int64_t binop_x_31210;
    int64_t phys_tid_26655;
    __local unsigned char *red_arr_mem_32667;
    int64_t gtid_26654;
    int64_t zp_rhs_26667;
    int64_t binop_x_28316;
    int64_t ctx_31194;
    int64_t ctx_31202;
    int64_t binop_x_31211;
    int32_t offset_32673;
    int32_t skip_waves_32674;
    int32_t num_chunks_32682;
    
    local_tid_32658 = get_local_id(0);
    tblock_sizze_32661 = get_local_size(0);
    wave_sizze_32660 = LOCKSTEP_WIDTH;
    block_id_32659 = get_tblock_id(0);
    global_tid_32657 = block_id_32659 * tblock_sizze_32661 + local_tid_32658;
    phys_tblock_id_26650 = sext_i32_i64(block_id_32659);
    slice_32663 = m_16509;
    ltid_pre_32662 = sext_i32_i64(local_tid_32658);
    remnant_32664 = sext_i32_i64(local_tid_32658) - ltid_pre_32662;
    slice_32665 = m_13945;
    gtid_26649 = sext_i32_i64(block_id_32659);
    remnant_32666 = sext_i32_i64(block_id_32659) - gtid_26649;
    color_30704 = (__local unsigned char *) color_30704_backing_0;
    binop_x_31171 = m_16509 * phys_tblock_id_26650;
    binop_x_31179 = m_16509 * phys_tblock_id_26650;
    binop_x_31193 = m_16509 * phys_tblock_id_26650;
    binop_x_31201 = m_16509 * phys_tblock_id_26650;
    binop_x_31210 = m_16509 * phys_tblock_id_26650;
    phys_tid_26655 = sext_i32_i64(local_tid_32658);
    red_arr_mem_32667 = (__local unsigned char *) red_arr_mem_32667_backing_1;
    gtid_26654 = sext_i32_i64(sext_i64_i32(ltid_pre_32662));
    zp_rhs_26667 = mul64(d_13944, gtid_26654);
    binop_x_28316 = one_intra_par_min_18858 * gtid_26654;
    ctx_31194 = phys_tid_26655 + binop_x_31193;
    ctx_31202 = phys_tid_26655 + binop_x_31201;
    binop_x_31211 = phys_tid_26655 + binop_x_31210;
    for (int64_t i_28101 = 0; i_28101 < d_13944; i_28101++) {
        int64_t binop_y_31213;
        int64_t binop_y_31214;
        int64_t ctx_31215;
        
        for (int64_t i_28105 = 0; i_28105 < d_13944; i_28105++) {
            int64_t tmp_26676;
            bool x_26677;
            bool y_26678;
            bool bounds_check_26679;
            bool index_certs_26680;
            
            tmp_26676 = add64(zp_rhs_26667, i_28105);
            x_26677 = sle64((int64_t) 0, tmp_26676);
            y_26678 = slt64(tmp_26676, dzlz7bUZLztZRz20Umz20Udz7dUzg_13946);
            bounds_check_26679 = x_26677 && y_26678;
            if (!bounds_check_26679) {
                {
                    if (atomic_cmpxchg_i32_global(global_failure, -1, 45) == -1) {
                        global_failure_args[0] = (int64_t) tmp_26676;
                        global_failure_args[1] = (int64_t) dzlz7bUZLztZRz20Umz20Udz7dUzg_13946;
                        ;
                    }
                    local_failure = 1;
                    goto error_0;
                }
            }
            for (int64_t i_0 = 0; i_0 < (int64_t) 1; i_0++) {
                ((__global uint16_t *) color_30702)[ctx_31202 + ctx_31203 * i_28105 + i_0 * ctx_31203] = futrts_to_bits16(futrts_from_bits16(((__global uint16_t *) mem_28434)[gtid_26649 * (dzlz7bUZLztZRz20Umz20Udz7dUzg_13946 * d_13944) + i_28101 * dzlz7bUZLztZRz20Umz20Udz7dUzg_13946 + tmp_26676 + i_0]));
            }
        }
        binop_y_31213 = d_13944 * i_28101;
        binop_y_31214 = binop_x_31212 * binop_y_31213;
        ctx_31215 = binop_x_31211 + binop_y_31214;
        for (int64_t i_28109 = 0; i_28109 < d_13944; i_28109++) {
            float defunc_0_f_res_26684;
            float redout_28111;
            f16 f32_res_26692;
            
            redout_28111 = 0.0F;
            for (int64_t i_28112 = 0; i_28112 < d_13944; i_28112++) {
                f16 eta_p_26688;
                int64_t binop_y_28317;
                int64_t binop_x_28318;
                int64_t binop_x_28319;
                int64_t new_index_28320;
                int64_t binop_y_28332;
                int64_t new_index_28333;
                f16 eta_p_26689;
                f16 defunc_0_f_res_26690;
                float f16_res_26691;
                float defunc_0_op_res_26687;
                float redout_tmp_32672;
                
                eta_p_26688 = futrts_from_bits16(((__global uint16_t *) color_30702)[ctx_31202 + i_28112 * ctx_31203]);
                binop_y_28317 = d_13944 * i_28112;
                binop_x_28318 = binop_x_28316 + binop_y_28317;
                binop_x_28319 = i_28109 + binop_x_28318;
                new_index_28320 = squot64(binop_x_28319, d_13944);
                binop_y_28332 = d_13944 * new_index_28320;
                new_index_28333 = binop_x_28319 - binop_y_28332;
                eta_p_26689 = futrts_from_bits16(((__global uint16_t *) V_mem_28341)[new_index_28320 * d_13944 + new_index_28333]);
                defunc_0_f_res_26690 = eta_p_26688 * eta_p_26689;
                f16_res_26691 = fpconv_f16_f32(defunc_0_f_res_26690);
                defunc_0_op_res_26687 = f16_res_26691 + redout_28111;
                redout_tmp_32672 = defunc_0_op_res_26687;
                redout_28111 = redout_tmp_32672;
            }
            defunc_0_f_res_26684 = redout_28111;
            f32_res_26692 = fpconv_f32_f16(defunc_0_f_res_26684);
            ((__global uint16_t *) color_30703)[ctx_31215 + i_28109 * ctx_31216] = futrts_to_bits16(f32_res_26692);
        }
        if (!((ctx_31194 + i_28101 * ctx_31196) == ctx_31215 && ctx_31197 == ctx_31216)) {
            for (int64_t i_0 = 0; i_0 < d_13944; i_0++) {
                ((__global uint16_t *) color_30703)[ctx_31194 + i_28101 * ctx_31196 + i_0 * ctx_31197] = futrts_to_bits16(futrts_from_bits16(((__global uint16_t *) color_30703)[ctx_31215 + i_0 * ctx_31216]));
            }
        }
    }
    for (int64_t i_0 = 0; i_0 < d_13944; i_0++) {
        for (int64_t i_1 = 0; i_1 < d_13944; i_1++) {
            ((__local uint16_t *) red_arr_mem_32667)[gtid_26654 * (d_13944 * d_13944) + (i_0 * d_13944 + i_1)] = futrts_to_bits16(futrts_from_bits16(((__global uint16_t *) color_30703)[ctx_31194 + (i_0 * ctx_31196 + i_1 * ctx_31197)]));
        }
    }
    
  error_0:
    barrier(CLK_LOCAL_MEM_FENCE);
    if (local_failure)
        return;
    barrier(CLK_LOCAL_MEM_FENCE);
    skip_waves_32674 = 1;
    offset_32673 = 0;
    // participating threads read initial accumulator
    {
        if (slt32(local_tid_32658, sext_i64_i32(m_16509))) {
            for (int64_t i_0 = 0; i_0 < d_13944; i_0++) {
                for (int64_t i_1 = 0; i_1 < d_13944; i_1++) {
                    ((__global uint16_t *) color_30705)[phys_tblock_id_26650 + m_13945 * (phys_tid_26655 * (d_13944 * d_13944)) + (i_0 * (m_13945 * d_13944) + i_1 * m_13945)] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) red_arr_mem_32667)[sext_i32_i64(local_tid_32658 + offset_32673) * (d_13944 * d_13944) + (i_0 * d_13944 + i_1)]));
                }
            }
        }
    }
    offset_32673 = 1;
    while (slt32(offset_32673, wave_sizze_32660)) {
        if (slt32(local_tid_32658 + offset_32673, sext_i64_i32(m_16509)) && ((local_tid_32658 - squot32(local_tid_32658, wave_sizze_32660) * wave_sizze_32660) & (2 * offset_32673 - 1)) == 0) {
            // read array element
            {
                for (int64_t i_0 = 0; i_0 < d_13944; i_0++) {
                    for (int64_t i_1 = 0; i_1 < d_13944; i_1++) {
                        ((__global uint16_t *) color_30705)[phys_tblock_id_26650 + m_13945 * ((phys_tid_26655 + m_16509) * (d_13944 * d_13944)) + (i_0 * (m_13945 * d_13944) + i_1 * m_13945)] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) red_arr_mem_32667)[sext_i32_i64(local_tid_32658 + offset_32673) * (d_13944 * d_13944) + (i_0 * d_13944 + i_1)]));
                    }
                }
            }
            // apply reduction operation
            {
                int64_t ctx_31172 = phys_tid_26655 + binop_x_31171;
                int64_t ctx_31180 = phys_tid_26655 + binop_x_31179;
                
                for (int64_t i_28093 = 0; i_28093 < d_13944; i_28093++) {
                    for (int64_t i_28097 = 0; i_28097 < d_13944; i_28097++) {
                        f16 eta_p_26662 = futrts_from_bits16(((volatile __global uint16_t *) color_30705)[phys_tblock_id_26650 + m_13945 * (phys_tid_26655 * (d_13944 * d_13944)) + (i_28093 * (m_13945 * d_13944) + i_28097 * m_13945)]);
                        f16 eta_p_26663 = futrts_from_bits16(((volatile __global uint16_t *) color_30705)[phys_tblock_id_26650 + m_13945 * ((phys_tid_26655 + m_16509) * (d_13944 * d_13944)) + (i_28093 * (m_13945 * d_13944) + i_28097 * m_13945)]);
                        f16 defunc_0_f_res_26664 = eta_p_26662 + eta_p_26663;
                        
                        ((volatile __global uint16_t *) mem_28502)[ctx_31180 + i_28097 * ctx_31181] = futrts_to_bits16(defunc_0_f_res_26664);
                    }
                    for (int64_t i_0 = 0; i_0 < d_13944; i_0++) {
                        ((__global uint16_t *) mem_28496)[ctx_31172 + i_28093 * ctx_31174 + i_0 * ctx_31175] = futrts_to_bits16(futrts_from_bits16(((__global uint16_t *) mem_28502)[ctx_31180 + i_0 * ctx_31181]));
                    }
                }
                for (int64_t i_0 = 0; i_0 < d_13944; i_0++) {
                    for (int64_t i_1 = 0; i_1 < d_13944; i_1++) {
                        ((__global uint16_t *) color_30705)[phys_tblock_id_26650 + m_13945 * (phys_tid_26655 * (d_13944 * d_13944)) + (i_0 * (m_13945 * d_13944) + i_1 * m_13945)] = futrts_to_bits16(futrts_from_bits16(((__global uint16_t *) mem_28496)[ctx_31172 + (i_0 * ctx_31174 + i_1 * ctx_31175)]));
                    }
                }
            }
            // write result of operation
            { }
        }
        offset_32673 *= 2;
    }
    while (slt32(skip_waves_32674, squot32(sext_i64_i32(m_16509) + wave_sizze_32660 - 1, wave_sizze_32660))) {
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
        offset_32673 = skip_waves_32674 * wave_sizze_32660;
        if (slt32(local_tid_32658 + offset_32673, sext_i64_i32(m_16509)) && ((local_tid_32658 - squot32(local_tid_32658, wave_sizze_32660) * wave_sizze_32660) == 0 && (squot32(local_tid_32658, wave_sizze_32660) & (2 * skip_waves_32674 - 1)) == 0)) {
            // read array element
            {
                for (int64_t i_0 = 0; i_0 < d_13944; i_0++) {
                    for (int64_t i_1 = 0; i_1 < d_13944; i_1++) {
                        ((__global uint16_t *) color_30705)[phys_tblock_id_26650 + m_13945 * ((phys_tid_26655 + m_16509) * (d_13944 * d_13944)) + (i_0 * (m_13945 * d_13944) + i_1 * m_13945)] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) red_arr_mem_32667)[sext_i32_i64(local_tid_32658 + offset_32673) * (d_13944 * d_13944) + (i_0 * d_13944 + i_1)]));
                    }
                }
            }
            // apply reduction operation
            {
                int64_t ctx_31172 = phys_tid_26655 + binop_x_31171;
                int64_t ctx_31180 = phys_tid_26655 + binop_x_31179;
                
                for (int64_t i_28093 = 0; i_28093 < d_13944; i_28093++) {
                    for (int64_t i_28097 = 0; i_28097 < d_13944; i_28097++) {
                        f16 eta_p_26662 = futrts_from_bits16(((__global uint16_t *) color_30705)[phys_tblock_id_26650 + m_13945 * (phys_tid_26655 * (d_13944 * d_13944)) + (i_28093 * (m_13945 * d_13944) + i_28097 * m_13945)]);
                        f16 eta_p_26663 = futrts_from_bits16(((__global uint16_t *) color_30705)[phys_tblock_id_26650 + m_13945 * ((phys_tid_26655 + m_16509) * (d_13944 * d_13944)) + (i_28093 * (m_13945 * d_13944) + i_28097 * m_13945)]);
                        f16 defunc_0_f_res_26664 = eta_p_26662 + eta_p_26663;
                        
                        ((__global uint16_t *) mem_28502)[ctx_31180 + i_28097 * ctx_31181] = futrts_to_bits16(defunc_0_f_res_26664);
                    }
                    for (int64_t i_0 = 0; i_0 < d_13944; i_0++) {
                        ((__global uint16_t *) mem_28496)[ctx_31172 + i_28093 * ctx_31174 + i_0 * ctx_31175] = futrts_to_bits16(futrts_from_bits16(((__global uint16_t *) mem_28502)[ctx_31180 + i_0 * ctx_31181]));
                    }
                }
                for (int64_t i_0 = 0; i_0 < d_13944; i_0++) {
                    for (int64_t i_1 = 0; i_1 < d_13944; i_1++) {
                        ((__global uint16_t *) color_30705)[phys_tblock_id_26650 + m_13945 * (phys_tid_26655 * (d_13944 * d_13944)) + (i_0 * (m_13945 * d_13944) + i_1 * m_13945)] = futrts_to_bits16(futrts_from_bits16(((__global uint16_t *) mem_28496)[ctx_31172 + (i_0 * ctx_31174 + i_1 * ctx_31175)]));
                    }
                }
            }
            // write result of operation
            { }
        }
        skip_waves_32674 *= 2;
    }
    barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    // Copy array-typed operands to result array
    {
        if (local_tid_32658 == 0) {
            for (int64_t i_0 = 0; i_0 < d_13944; i_0++) {
                for (int64_t i_1 = 0; i_1 < d_13944; i_1++) {
                    ((__local uint16_t *) red_arr_mem_32667)[sext_i32_i64(local_tid_32658) * (d_13944 * d_13944) + (i_0 * d_13944 + i_1)] = futrts_to_bits16(futrts_from_bits16(((__global uint16_t *) color_30705)[phys_tblock_id_26650 + m_13945 * (phys_tid_26655 * (d_13944 * d_13944)) + (i_0 * (m_13945 * d_13944) + i_1 * m_13945)]));
                }
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // Save result of reduction.
    {
        int32_t num_chunks_32679 = sdiv_up32(sext_i64_i32(d_13944) * sext_i64_i32(d_13944), sext_i64_i32(m_16509));
        
        for (int32_t chunk_i_32680 = 0; chunk_i_32680 < num_chunks_32679; chunk_i_32680++) {
            int32_t i_32681 = chunk_i_32680 * sext_i64_i32(m_16509) + local_tid_32658;
            
            if (slt32(i_32681, sext_i64_i32(d_13944) * sext_i64_i32(d_13944))) {
                ((__local uint16_t *) color_30704)[sext_i32_i64(squot32(i_32681, sext_i64_i32(d_13944))) * d_13944 + sext_i32_i64(i_32681 - squot32(i_32681, sext_i64_i32(d_13944)) * sext_i64_i32(d_13944))] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) red_arr_mem_32667)[sext_i32_i64(squot32(i_32681, sext_i64_i32(d_13944))) * d_13944 + sext_i32_i64(i_32681 - squot32(i_32681, sext_i64_i32(d_13944)) * sext_i64_i32(d_13944))]));
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    num_chunks_32682 = sdiv_up32(sext_i64_i32(d_13944) * sext_i64_i32(d_13944), sext_i64_i32(m_16509));
    for (int32_t chunk_i_32683 = 0; chunk_i_32683 < num_chunks_32682; chunk_i_32683++) {
        int32_t i_32684 = chunk_i_32683 * sext_i64_i32(m_16509) + local_tid_32658;
        
        if (slt32(i_32684, sext_i64_i32(d_13944) * sext_i64_i32(d_13944))) {
            ((__global uint16_t *) mem_28546)[gtid_26649 * (d_13944 * d_13944) + sext_i32_i64(squot32(i_32684, sext_i64_i32(d_13944))) * d_13944 + sext_i32_i64(i_32684 - squot32(i_32684, sext_i64_i32(d_13944)) * sext_i64_i32(d_13944))] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) color_30704)[sext_i32_i64(squot32(i_32684, sext_i64_i32(d_13944))) * d_13944 + sext_i32_i64(i_32684 - squot32(i_32684, sext_i64_i32(d_13944)) * sext_i64_i32(d_13944))]));
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
  error_4:
    return;
}
FUTHARK_KERNEL
void FlashAttention_6392zisegmap_intrablock_26719(__global int *global_failure, int failure_is_an_option, __global int64_t *global_failure_args, int64_t d_13944, int64_t m_13945, int64_t dzlz7bUZLztZRz20Umz20Udz7dUzg_13946, int64_t m_16509, int64_t one_intra_par_min_18858, int64_t computed_tblock_sizze_26707, int64_t bytes_28344, int64_t bytes_28347, __global unsigned char *V_mem_28341, __global unsigned char *mem_28434, __global unsigned char *mem_28464)
{
    volatile __local unsigned char *red_arr_mem_32712_backing_2 = &shared_mem[0];
    const int64_t red_arr_mem_32712_backing_2_offset = 0 + ((int64_t) 4 * (d_13944 * d_13944 * d_13944) + srem64((int64_t) 8 - srem64((int64_t) 4 * (d_13944 * d_13944 * d_13944), (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_30707_backing_1 = &shared_mem[red_arr_mem_32712_backing_2_offset];
    const int64_t color_30707_backing_1_offset = red_arr_mem_32712_backing_2_offset + (bytes_28344 + srem64((int64_t) 8 - srem64(bytes_28344, (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_30706_backing_0 = &shared_mem[color_30707_backing_1_offset];
    const int64_t color_30706_backing_0_offset = color_30707_backing_1_offset + (bytes_28347 + srem64((int64_t) 8 - srem64(bytes_28347, (int64_t) 8), (int64_t) 8));
    volatile __local int local_failure;
    
    if (failure_is_an_option) {
        int failed = *global_failure >= 0;
        
        if (failed)
            return;
    }
    local_failure = 0;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t local_tid_32689;
    int32_t tblock_sizze_32692;
    int32_t wave_sizze_32691;
    int32_t block_id_32690;
    int32_t global_tid_32688;
    int64_t phys_tblock_id_26719;
    int64_t slice_32695;
    int64_t slice_32696;
    int64_t ltid_pre_32693;
    int64_t remnant_32697;
    int64_t ltid_pre_32694;
    int64_t remnant_32698;
    int64_t slice_32702;
    int64_t slice_32703;
    int64_t slice_32704;
    int64_t ltid_pre_32699;
    int64_t remnant_32705;
    int64_t ltid_pre_32700;
    int64_t remnant_32706;
    int64_t ltid_pre_32701;
    int64_t remnant_32707;
    int64_t slice_32708;
    int64_t slice_32709;
    int64_t gtid_26717;
    int64_t remnant_32710;
    int64_t gtid_26718;
    int64_t remnant_32711;
    __local unsigned char *color_30706;
    __local unsigned char *color_30707;
    int64_t zp_rhs_26725;
    int64_t phys_tid_26737;
    int64_t gtid_26735;
    int64_t gtid_26736;
    int64_t binop_x_27125;
    int64_t phys_tid_26751;
    __local unsigned char *red_arr_mem_32712;
    int64_t gtid_26748;
    int64_t gtid_26749;
    int64_t gtid_26750;
    int64_t dims_flat_32714;
    float eta_p_26752;
    float eta_p_26753;
    float eta_p_32716;
    float eta_p_32717;
    bool ltid_in_bounds_32719;
    int32_t skip_threads_32720;
    bool no_carry_in_32726;
    int64_t phys_tid_26764;
    int64_t gtid_26762;
    int64_t gtid_26763;
    int32_t num_chunks_32731;
    
    local_tid_32689 = get_local_id(0);
    tblock_sizze_32692 = get_local_size(0);
    wave_sizze_32691 = LOCKSTEP_WIDTH;
    block_id_32690 = get_tblock_id(0);
    global_tid_32688 = block_id_32690 * tblock_sizze_32692 + local_tid_32689;
    phys_tblock_id_26719 = sext_i32_i64(block_id_32690);
    slice_32695 = d_13944;
    slice_32696 = d_13944 * slice_32695;
    ltid_pre_32693 = squot64(sext_i32_i64(local_tid_32689), slice_32695);
    remnant_32697 = sext_i32_i64(local_tid_32689) - ltid_pre_32693 * slice_32695;
    ltid_pre_32694 = remnant_32697;
    remnant_32698 = remnant_32697 - ltid_pre_32694;
    slice_32702 = d_13944;
    slice_32703 = d_13944 * slice_32702;
    slice_32704 = d_13944 * slice_32703;
    ltid_pre_32699 = squot64(sext_i32_i64(local_tid_32689), slice_32703);
    remnant_32705 = sext_i32_i64(local_tid_32689) - ltid_pre_32699 * slice_32703;
    ltid_pre_32700 = squot64(remnant_32705, slice_32702);
    remnant_32706 = remnant_32705 - ltid_pre_32700 * slice_32702;
    ltid_pre_32701 = remnant_32706;
    remnant_32707 = remnant_32706 - ltid_pre_32701;
    slice_32708 = m_16509;
    slice_32709 = m_13945 * slice_32708;
    gtid_26717 = squot64(sext_i32_i64(block_id_32690), slice_32708);
    remnant_32710 = sext_i32_i64(block_id_32690) - gtid_26717 * slice_32708;
    gtid_26718 = remnant_32710;
    remnant_32711 = remnant_32710 - gtid_26718;
    color_30706 = (__local unsigned char *) color_30706_backing_0;
    color_30707 = (__local unsigned char *) color_30707_backing_1;
    zp_rhs_26725 = mul64(d_13944, gtid_26718);
    phys_tid_26737 = sext_i32_i64(local_tid_32689);
    gtid_26735 = sext_i32_i64(sext_i64_i32(ltid_pre_32693));
    gtid_26736 = sext_i32_i64(sext_i64_i32(ltid_pre_32694));
    if (slt64(gtid_26735, d_13944) && slt64(gtid_26736, d_13944)) {
        int64_t tmp_26741;
        bool x_26742;
        bool y_26743;
        bool bounds_check_26744;
        bool index_certs_26745;
        f16 lifted_lambda_res_26746;
        
        tmp_26741 = add64(zp_rhs_26725, gtid_26736);
        x_26742 = sle64((int64_t) 0, tmp_26741);
        y_26743 = slt64(tmp_26741, dzlz7bUZLztZRz20Umz20Udz7dUzg_13946);
        bounds_check_26744 = x_26742 && y_26743;
        if (!bounds_check_26744) {
            {
                if (atomic_cmpxchg_i32_global(global_failure, -1, 46) == -1) {
                    global_failure_args[0] = (int64_t) tmp_26741;
                    global_failure_args[1] = (int64_t) dzlz7bUZLztZRz20Umz20Udz7dUzg_13946;
                    ;
                }
                local_failure = 1;
                goto error_0;
            }
        }
        lifted_lambda_res_26746 = futrts_from_bits16(((__global uint16_t *) mem_28434)[gtid_26717 * (dzlz7bUZLztZRz20Umz20Udz7dUzg_13946 * d_13944) + gtid_26735 * dzlz7bUZLztZRz20Umz20Udz7dUzg_13946 + tmp_26741]);
        ((__local uint16_t *) color_30706)[gtid_26735 * d_13944 + gtid_26736] = futrts_to_bits16(lifted_lambda_res_26746);
    }
    
  error_0:
    barrier(CLK_LOCAL_MEM_FENCE);
    if (local_failure)
        return;
    barrier(CLK_LOCAL_MEM_FENCE);
    binop_x_27125 = one_intra_par_min_18858 * gtid_26718;
    phys_tid_26751 = sext_i32_i64(local_tid_32689);
    red_arr_mem_32712 = (__local unsigned char *) red_arr_mem_32712_backing_2;
    gtid_26748 = sext_i32_i64(sext_i64_i32(ltid_pre_32699));
    gtid_26749 = sext_i32_i64(sext_i64_i32(ltid_pre_32700));
    gtid_26750 = sext_i32_i64(sext_i64_i32(ltid_pre_32701));
    if ((slt64(gtid_26748, d_13944) && slt64(gtid_26749, d_13944)) && slt64(gtid_26750, d_13944)) {
        f16 eta_p_26757;
        int64_t binop_y_27126;
        int64_t binop_x_27127;
        int64_t binop_x_27128;
        int64_t new_index_27129;
        int64_t binop_y_27141;
        int64_t new_index_27142;
        f16 eta_p_26758;
        f16 defunc_0_f_res_26759;
        float f16_res_26760;
        
        eta_p_26757 = futrts_from_bits16(((__local uint16_t *) color_30706)[gtid_26748 * d_13944 + gtid_26750]);
        binop_y_27126 = d_13944 * gtid_26750;
        binop_x_27127 = binop_x_27125 + binop_y_27126;
        binop_x_27128 = gtid_26749 + binop_x_27127;
        new_index_27129 = squot64(binop_x_27128, d_13944);
        binop_y_27141 = d_13944 * new_index_27129;
        new_index_27142 = binop_x_27128 - binop_y_27141;
        eta_p_26758 = futrts_from_bits16(((__global uint16_t *) V_mem_28341)[new_index_27129 * d_13944 + new_index_27142]);
        defunc_0_f_res_26759 = eta_p_26757 * eta_p_26758;
        f16_res_26760 = fpconv_f16_f32(defunc_0_f_res_26759);
        ((__local float *) red_arr_mem_32712)[gtid_26748 * (d_13944 * d_13944) + gtid_26749 * d_13944 + gtid_26750] = f16_res_26760;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    dims_flat_32714 = d_13944 * d_13944 * d_13944;
    ltid_in_bounds_32719 = slt64(sext_i32_i64(local_tid_32689), d_13944 * d_13944 * d_13944);
    // read input for in-block scan
    {
        if (ltid_in_bounds_32719) {
            eta_p_26753 = ((volatile __local float *) red_arr_mem_32712)[sext_i32_i64(local_tid_32689)];
            if ((local_tid_32689 - squot32(local_tid_32689, 32) * 32) == 0) {
                eta_p_26752 = eta_p_26753;
            }
        }
    }
    // in-block scan (hopefully no barriers needed)
    {
        skip_threads_32720 = 1;
        while (slt32(skip_threads_32720, 32)) {
            bool thread_active_32721 = sle32(skip_threads_32720, local_tid_32689 - squot32(local_tid_32689, 32) * 32) && ltid_in_bounds_32719;
            
            if (thread_active_32721) {
                // read operands
                {
                    eta_p_26752 = ((volatile __local float *) red_arr_mem_32712)[sext_i32_i64(local_tid_32689) - sext_i32_i64(skip_threads_32720)];
                }
            }
            // perform operation
            {
                bool inactive_32722 = slt64(srem64(sext_i32_i64(local_tid_32689), d_13944), sext_i32_i64(local_tid_32689) - sext_i32_i64(local_tid_32689 - skip_threads_32720));
                
                if (thread_active_32721 && inactive_32722) {
                    eta_p_26752 = eta_p_26753;
                }
                if (thread_active_32721) {
                    if (!inactive_32722) {
                        float defunc_0_op_res_26754 = eta_p_26752 + eta_p_26753;
                        
                        eta_p_26752 = defunc_0_op_res_26754;
                    }
                }
            }
            if (sle32(wave_sizze_32691, skip_threads_32720)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            if (thread_active_32721) {
                // write result
                {
                    ((volatile __local float *) red_arr_mem_32712)[sext_i32_i64(local_tid_32689)] = eta_p_26752;
                    eta_p_26753 = eta_p_26752;
                }
            }
            if (sle32(wave_sizze_32691, skip_threads_32720)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            skip_threads_32720 *= 2;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // last thread of block 'i' writes its result to offset 'i'
    {
        if ((local_tid_32689 - squot32(local_tid_32689, 32) * 32) == 31 && ltid_in_bounds_32719) {
            ((volatile __local float *) red_arr_mem_32712)[sext_i32_i64(squot32(local_tid_32689, 32))] = eta_p_26752;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
    {
        int32_t skip_threads_32723;
        
        // read input for in-block scan
        {
            if (squot32(local_tid_32689, 32) == 0 && ltid_in_bounds_32719) {
                eta_p_32717 = ((volatile __local float *) red_arr_mem_32712)[sext_i32_i64(local_tid_32689)];
                if ((local_tid_32689 - squot32(local_tid_32689, 32) * 32) == 0) {
                    eta_p_32716 = eta_p_32717;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_32723 = 1;
            while (slt32(skip_threads_32723, 32)) {
                bool thread_active_32724 = sle32(skip_threads_32723, local_tid_32689 - squot32(local_tid_32689, 32) * 32) && (squot32(local_tid_32689, 32) == 0 && ltid_in_bounds_32719);
                
                if (thread_active_32724) {
                    // read operands
                    {
                        eta_p_32716 = ((volatile __local float *) red_arr_mem_32712)[sext_i32_i64(local_tid_32689) - sext_i32_i64(skip_threads_32723)];
                    }
                }
                // perform operation
                {
                    bool inactive_32725 = slt64(srem64(sext_i32_i64(local_tid_32689 * 32 + 32 - 1), d_13944), sext_i32_i64(local_tid_32689 * 32 + 32 - 1) - sext_i32_i64((local_tid_32689 - skip_threads_32723) * 32 + 32 - 1));
                    
                    if (thread_active_32724 && inactive_32725) {
                        eta_p_32716 = eta_p_32717;
                    }
                    if (thread_active_32724) {
                        if (!inactive_32725) {
                            float defunc_0_op_res_32718 = eta_p_32716 + eta_p_32717;
                            
                            eta_p_32716 = defunc_0_op_res_32718;
                        }
                    }
                }
                if (sle32(wave_sizze_32691, skip_threads_32723)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (thread_active_32724) {
                    // write result
                    {
                        ((volatile __local float *) red_arr_mem_32712)[sext_i32_i64(local_tid_32689)] = eta_p_32716;
                        eta_p_32717 = eta_p_32716;
                    }
                }
                if (sle32(wave_sizze_32691, skip_threads_32723)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_32723 *= 2;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    no_carry_in_32726 = squot32(local_tid_32689, 32) == 0 || !ltid_in_bounds_32719;
    // carry-in for every block except the first
    {
        // read operands
        {
            if (!no_carry_in_32726) {
                eta_p_26753 = eta_p_26752;
                eta_p_26752 = ((__local float *) red_arr_mem_32712)[sext_i32_i64(squot32(local_tid_32689, 32)) - (int64_t) 1];
            }
        }
        // perform operation
        {
            bool inactive_32727 = slt64(srem64(sext_i32_i64(local_tid_32689), d_13944), sext_i32_i64(local_tid_32689) - sext_i32_i64(squot32(local_tid_32689, 32) * 32 - 1));
            
            if (!no_carry_in_32726) {
                if (inactive_32727) {
                    eta_p_26752 = eta_p_26753;
                }
            }
            if (!no_carry_in_32726) {
                if (!inactive_32727) {
                    float defunc_0_op_res_26754 = eta_p_26752 + eta_p_26753;
                    
                    eta_p_26752 = defunc_0_op_res_26754;
                }
            }
        }
        // write final result
        {
            if (!no_carry_in_32726) {
                ((__local float *) red_arr_mem_32712)[sext_i32_i64(local_tid_32689)] = eta_p_26752;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // restore correct values for first block
    {
        if (squot32(local_tid_32689, 32) == 0 && ltid_in_bounds_32719) {
            ((__local float *) red_arr_mem_32712)[sext_i32_i64(local_tid_32689)] = eta_p_26753;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    barrier(CLK_LOCAL_MEM_FENCE);
    // Save result of reduction.
    {
        int32_t num_chunks_32728 = sdiv_up32(sext_i64_i32(d_13944) * sext_i64_i32(d_13944), sext_i64_i32(computed_tblock_sizze_26707));
        
        for (int32_t chunk_i_32729 = 0; chunk_i_32729 < num_chunks_32728; chunk_i_32729++) {
            int32_t i_32730 = chunk_i_32729 * sext_i64_i32(computed_tblock_sizze_26707) + local_tid_32689;
            
            if (slt32(i_32730, sext_i64_i32(d_13944) * sext_i64_i32(d_13944))) {
                ((__local float *) color_30707)[sext_i32_i64(squot32(i_32730, sext_i64_i32(d_13944))) * d_13944 + sext_i32_i64(i_32730 - squot32(i_32730, sext_i64_i32(d_13944)) * sext_i64_i32(d_13944))] = ((__local float *) red_arr_mem_32712)[d_13944 - (int64_t) 1 + sext_i32_i64(squot32(i_32730, sext_i64_i32(d_13944))) * (d_13944 * d_13944) + sext_i32_i64(i_32730 - squot32(i_32730, sext_i64_i32(d_13944)) * sext_i64_i32(d_13944)) * d_13944];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    phys_tid_26764 = sext_i32_i64(local_tid_32689);
    gtid_26762 = sext_i32_i64(sext_i64_i32(ltid_pre_32693));
    gtid_26763 = sext_i32_i64(sext_i64_i32(ltid_pre_32694));
    if (slt64(gtid_26762, d_13944) && slt64(gtid_26763, d_13944)) {
        float defunc_0_f_res_26765;
        f16 f32_res_26766;
        
        defunc_0_f_res_26765 = ((__local float *) color_30707)[gtid_26762 * d_13944 + gtid_26763];
        f32_res_26766 = fpconv_f32_f16(defunc_0_f_res_26765);
        ((__local uint16_t *) color_30706)[gtid_26762 * d_13944 + gtid_26763] = futrts_to_bits16(f32_res_26766);
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    num_chunks_32731 = sdiv_up32(sext_i64_i32(d_13944) * sext_i64_i32(d_13944), sext_i64_i32(computed_tblock_sizze_26707));
    for (int32_t chunk_i_32732 = 0; chunk_i_32732 < num_chunks_32731; chunk_i_32732++) {
        int32_t i_32733 = chunk_i_32732 * sext_i64_i32(computed_tblock_sizze_26707) + local_tid_32689;
        
        if (slt32(i_32733, sext_i64_i32(d_13944) * sext_i64_i32(d_13944))) {
            ((__global uint16_t *) mem_28464)[gtid_26717 * (d_13944 * d_13944 * m_16509) + gtid_26718 * (d_13944 * d_13944) + sext_i32_i64(squot32(i_32733, sext_i64_i32(d_13944))) * d_13944 + sext_i32_i64(i_32733 - squot32(i_32733, sext_i64_i32(d_13944)) * sext_i64_i32(d_13944))] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) color_30706)[sext_i32_i64(squot32(i_32733, sext_i64_i32(d_13944))) * d_13944 + sext_i32_i64(i_32733 - squot32(i_32733, sext_i64_i32(d_13944)) * sext_i64_i32(d_13944))]));
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
  error_5:
    return;
}
FUTHARK_KERNEL
void FlashAttention_6392zisegmap_intrablock_26794(__global int *global_failure, int failure_is_an_option, __global int64_t *global_failure_args, int64_t d_13944, int64_t m_13945, int64_t dzlz7bUZLztZRz20Umz20Udz7dUzg_13946, int64_t m_16509, int64_t one_intra_par_min_18858, int64_t computed_tblock_sizze_26786, int64_t binop_x_28343, int64_t binop_x_28346, __global unsigned char *V_mem_28341, __global unsigned char *mem_28434, __global unsigned char *mem_28449)
{
    volatile __local unsigned char *red_arr_mem_32757_backing_2 = &shared_mem[0];
    const int64_t red_arr_mem_32757_backing_2_offset = 0 + ((int64_t) 4 * (d_13944 * d_13944) + srem64((int64_t) 8 - srem64((int64_t) 4 * (d_13944 * d_13944), (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_30709_backing_1 = &shared_mem[red_arr_mem_32757_backing_2_offset];
    const int64_t color_30709_backing_1_offset = red_arr_mem_32757_backing_2_offset + (binop_x_28343 + srem64((int64_t) 8 - srem64(binop_x_28343, (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_30708_backing_0 = &shared_mem[color_30709_backing_1_offset];
    const int64_t color_30708_backing_0_offset = color_30709_backing_1_offset + (binop_x_28346 + srem64((int64_t) 8 - srem64(binop_x_28346, (int64_t) 8), (int64_t) 8));
    volatile __local int local_failure;
    
    if (failure_is_an_option) {
        int failed = *global_failure >= 0;
        
        if (failed)
            return;
    }
    local_failure = 0;
    //barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t local_tid_32738;
    int32_t tblock_sizze_32741;
    int32_t wave_sizze_32740;
    int32_t block_id_32739;
    int32_t global_tid_32737;
    int64_t phys_tblock_id_26794;
    int64_t slice_32743;
    int64_t ltid_pre_32742;
    int64_t remnant_32744;
    int64_t slice_32747;
    int64_t slice_32748;
    int64_t ltid_pre_32745;
    int64_t remnant_32749;
    int64_t ltid_pre_32746;
    int64_t remnant_32750;
    int64_t slice_32751;
    int64_t slice_32752;
    int64_t slice_32753;
    int64_t gtid_26791;
    int64_t remnant_32754;
    int64_t gtid_26792;
    int64_t remnant_32755;
    int64_t gtid_26793;
    int64_t remnant_32756;
    __local unsigned char *color_30708;
    __local unsigned char *color_30709;
    int64_t index_primexp_27164;
    int64_t phys_tid_26807;
    int64_t gtid_26806;
    int64_t binop_x_27144;
    int64_t phys_tid_26818;
    __local unsigned char *red_arr_mem_32757;
    int64_t gtid_26816;
    int64_t gtid_26817;
    int64_t dims_flat_32759;
    float eta_p_26819;
    float eta_p_26820;
    float eta_p_32761;
    float eta_p_32762;
    bool ltid_in_bounds_32764;
    int32_t skip_threads_32765;
    bool no_carry_in_32771;
    int64_t phys_tid_26829;
    int64_t gtid_26828;
    int32_t num_chunks_32776;
    
    local_tid_32738 = get_local_id(0);
    tblock_sizze_32741 = get_local_size(0);
    wave_sizze_32740 = LOCKSTEP_WIDTH;
    block_id_32739 = get_tblock_id(0);
    global_tid_32737 = block_id_32739 * tblock_sizze_32741 + local_tid_32738;
    phys_tblock_id_26794 = sext_i32_i64(block_id_32739);
    slice_32743 = d_13944;
    ltid_pre_32742 = sext_i32_i64(local_tid_32738);
    remnant_32744 = sext_i32_i64(local_tid_32738) - ltid_pre_32742;
    slice_32747 = d_13944;
    slice_32748 = d_13944 * slice_32747;
    ltid_pre_32745 = squot64(sext_i32_i64(local_tid_32738), slice_32747);
    remnant_32749 = sext_i32_i64(local_tid_32738) - ltid_pre_32745 * slice_32747;
    ltid_pre_32746 = remnant_32749;
    remnant_32750 = remnant_32749 - ltid_pre_32746;
    slice_32751 = d_13944;
    slice_32752 = m_16509 * slice_32751;
    slice_32753 = m_13945 * slice_32752;
    gtid_26791 = squot64(sext_i32_i64(block_id_32739), slice_32752);
    remnant_32754 = sext_i32_i64(block_id_32739) - gtid_26791 * slice_32752;
    gtid_26792 = squot64(remnant_32754, slice_32751);
    remnant_32755 = remnant_32754 - gtid_26792 * slice_32751;
    gtid_26793 = remnant_32755;
    remnant_32756 = remnant_32755 - gtid_26793;
    color_30708 = (__local unsigned char *) color_30708_backing_0;
    color_30709 = (__local unsigned char *) color_30709_backing_1;
    index_primexp_27164 = mul64(d_13944, gtid_26792);
    phys_tid_26807 = sext_i32_i64(local_tid_32738);
    gtid_26806 = sext_i32_i64(sext_i64_i32(ltid_pre_32742));
    if (slt64(gtid_26806, d_13944)) {
        int64_t tmp_26809;
        bool x_26810;
        bool y_26811;
        bool bounds_check_26812;
        bool index_certs_26813;
        f16 lifted_lambda_res_26814;
        
        tmp_26809 = add64(gtid_26806, index_primexp_27164);
        x_26810 = sle64((int64_t) 0, tmp_26809);
        y_26811 = slt64(tmp_26809, dzlz7bUZLztZRz20Umz20Udz7dUzg_13946);
        bounds_check_26812 = x_26810 && y_26811;
        if (!bounds_check_26812) {
            {
                if (atomic_cmpxchg_i32_global(global_failure, -1, 47) == -1) {
                    global_failure_args[0] = (int64_t) tmp_26809;
                    global_failure_args[1] = (int64_t) dzlz7bUZLztZRz20Umz20Udz7dUzg_13946;
                    ;
                }
                local_failure = 1;
                goto error_0;
            }
        }
        lifted_lambda_res_26814 = futrts_from_bits16(((__global uint16_t *) mem_28434)[gtid_26791 * (dzlz7bUZLztZRz20Umz20Udz7dUzg_13946 * d_13944) + gtid_26793 * dzlz7bUZLztZRz20Umz20Udz7dUzg_13946 + tmp_26809]);
        ((__local uint16_t *) color_30708)[gtid_26806] = futrts_to_bits16(lifted_lambda_res_26814);
    }
    
  error_0:
    //barrier(CLK_LOCAL_MEM_FENCE);
    if (local_failure)
        return;
    //barrier(CLK_LOCAL_MEM_FENCE);
    binop_x_27144 = one_intra_par_min_18858 * gtid_26792;
    phys_tid_26818 = sext_i32_i64(local_tid_32738);
    red_arr_mem_32757 = (__local unsigned char *) red_arr_mem_32757_backing_2;
    gtid_26816 = sext_i32_i64(sext_i64_i32(ltid_pre_32745));
    gtid_26817 = sext_i32_i64(sext_i64_i32(ltid_pre_32746));
    if (slt64(gtid_26816, d_13944) && slt64(gtid_26817, d_13944)) {
        f16 eta_p_26823;
        int64_t binop_y_27145;
        int64_t binop_x_27146;
        int64_t binop_x_27147;
        int64_t new_index_27148;
        int64_t binop_y_27160;
        int64_t new_index_27161;
        f16 eta_p_26824;
        f16 defunc_0_f_res_26825;
        float f16_res_26826;
        
        eta_p_26823 = futrts_from_bits16(((__local uint16_t *) color_30708)[gtid_26817]);
        binop_y_27145 = d_13944 * gtid_26817;
        binop_x_27146 = binop_x_27144 + binop_y_27145;
        binop_x_27147 = gtid_26816 + binop_x_27146;
        new_index_27148 = squot64(binop_x_27147, d_13944);
        binop_y_27160 = d_13944 * new_index_27148;
        new_index_27161 = binop_x_27147 - binop_y_27160;
        eta_p_26824 = futrts_from_bits16(((__global uint16_t *) V_mem_28341)[new_index_27148 * d_13944 + new_index_27161]);
        defunc_0_f_res_26825 = eta_p_26823 * eta_p_26824;
        f16_res_26826 = fpconv_f16_f32(defunc_0_f_res_26825);
        ((__local float *) red_arr_mem_32757)[gtid_26816 * d_13944 + gtid_26817] = f16_res_26826;
    }
    //barrier(CLK_LOCAL_MEM_FENCE);
    dims_flat_32759 = d_13944 * d_13944;
    ltid_in_bounds_32764 = slt64(sext_i32_i64(local_tid_32738), d_13944 * d_13944);
    // read input for in-block scan
    {
        if (ltid_in_bounds_32764) {
            eta_p_26820 = ((volatile __local float *) red_arr_mem_32757)[sext_i32_i64(local_tid_32738)];
            if ((local_tid_32738 - squot32(local_tid_32738, 32) * 32) == 0) {
                eta_p_26819 = eta_p_26820;
            }
        }
    }
    // in-block scan (hopefully no barriers needed)
    {
        skip_threads_32765 = 1;
        while (slt32(skip_threads_32765, 32)) {
            bool thread_active_32766 = sle32(skip_threads_32765, local_tid_32738 - squot32(local_tid_32738, 32) * 32) && ltid_in_bounds_32764;
            
            if (thread_active_32766) {
                // read operands
                {
                    eta_p_26819 = ((volatile __local float *) red_arr_mem_32757)[sext_i32_i64(local_tid_32738) - sext_i32_i64(skip_threads_32765)];
                }
            }
            // perform operation
            {
                bool inactive_32767 = slt64(srem64(sext_i32_i64(local_tid_32738), d_13944), sext_i32_i64(local_tid_32738) - sext_i32_i64(local_tid_32738 - skip_threads_32765));
                
                if (thread_active_32766 && inactive_32767) {
                    eta_p_26819 = eta_p_26820;
                }
                if (thread_active_32766) {
                    if (!inactive_32767) {
                        float defunc_0_op_res_26821 = eta_p_26819 + eta_p_26820;
                        
                        eta_p_26819 = defunc_0_op_res_26821;
                    }
                }
            }
            if (sle32(wave_sizze_32740, skip_threads_32765)) {
                //barrier(CLK_LOCAL_MEM_FENCE);
            }
            if (thread_active_32766) {
                // write result
                {
                    ((volatile __local float *) red_arr_mem_32757)[sext_i32_i64(local_tid_32738)] = eta_p_26819;
                    eta_p_26820 = eta_p_26819;
                }
            }
            if (sle32(wave_sizze_32740, skip_threads_32765)) {
                //barrier(CLK_LOCAL_MEM_FENCE);
            }
            skip_threads_32765 *= 2;
        }
    }
    //barrier(CLK_LOCAL_MEM_FENCE);
    // last thread of block 'i' writes its result to offset 'i'
    {
        if ((local_tid_32738 - squot32(local_tid_32738, 32) * 32) == 31 && ltid_in_bounds_32764) {
            ((volatile __local float *) red_arr_mem_32757)[sext_i32_i64(squot32(local_tid_32738, 32))] = eta_p_26819;
        }
    }
    //barrier(CLK_LOCAL_MEM_FENCE);
    // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
    {
        int32_t skip_threads_32768;
        
        // read input for in-block scan
        {
            if (squot32(local_tid_32738, 32) == 0 && ltid_in_bounds_32764) {
                eta_p_32762 = ((volatile __local float *) red_arr_mem_32757)[sext_i32_i64(local_tid_32738)];
                if ((local_tid_32738 - squot32(local_tid_32738, 32) * 32) == 0) {
                    eta_p_32761 = eta_p_32762;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_32768 = 1;
            while (slt32(skip_threads_32768, 32)) {
                bool thread_active_32769 = sle32(skip_threads_32768, local_tid_32738 - squot32(local_tid_32738, 32) * 32) && (squot32(local_tid_32738, 32) == 0 && ltid_in_bounds_32764);
                
                if (thread_active_32769) {
                    // read operands
                    {
                        eta_p_32761 = ((volatile __local float *) red_arr_mem_32757)[sext_i32_i64(local_tid_32738) - sext_i32_i64(skip_threads_32768)];
                    }
                }
                // perform operation
                {
                    bool inactive_32770 = slt64(srem64(sext_i32_i64(local_tid_32738 * 32 + 32 - 1), d_13944), sext_i32_i64(local_tid_32738 * 32 + 32 - 1) - sext_i32_i64((local_tid_32738 - skip_threads_32768) * 32 + 32 - 1));
                    
                    if (thread_active_32769 && inactive_32770) {
                        eta_p_32761 = eta_p_32762;
                    }
                    if (thread_active_32769) {
                        if (!inactive_32770) {
                            float defunc_0_op_res_32763 = eta_p_32761 + eta_p_32762;
                            
                            eta_p_32761 = defunc_0_op_res_32763;
                        }
                    }
                }
                if (sle32(wave_sizze_32740, skip_threads_32768)) {
                    //barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (thread_active_32769) {
                    // write result
                    {
                        ((volatile __local float *) red_arr_mem_32757)[sext_i32_i64(local_tid_32738)] = eta_p_32761;
                        eta_p_32762 = eta_p_32761;
                    }
                }
                if (sle32(wave_sizze_32740, skip_threads_32768)) {
                    //barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_32768 *= 2;
            }
        }
    }
    //barrier(CLK_LOCAL_MEM_FENCE);
    no_carry_in_32771 = squot32(local_tid_32738, 32) == 0 || !ltid_in_bounds_32764;
    // carry-in for every block except the first
    {
        // read operands
        {
            if (!no_carry_in_32771) {
                eta_p_26820 = eta_p_26819;
                eta_p_26819 = ((__local float *) red_arr_mem_32757)[sext_i32_i64(squot32(local_tid_32738, 32)) - (int64_t) 1];
            }
        }
        // perform operation
        {
            bool inactive_32772 = slt64(srem64(sext_i32_i64(local_tid_32738), d_13944), sext_i32_i64(local_tid_32738) - sext_i32_i64(squot32(local_tid_32738, 32) * 32 - 1));
            
            if (!no_carry_in_32771) {
                if (inactive_32772) {
                    eta_p_26819 = eta_p_26820;
                }
            }
            if (!no_carry_in_32771) {
                if (!inactive_32772) {
                    float defunc_0_op_res_26821 = eta_p_26819 + eta_p_26820;
                    
                    eta_p_26819 = defunc_0_op_res_26821;
                }
            }
        }
        // write final result
        {
            if (!no_carry_in_32771) {
                ((__local float *) red_arr_mem_32757)[sext_i32_i64(local_tid_32738)] = eta_p_26819;
            }
        }
    }
    //barrier(CLK_LOCAL_MEM_FENCE);
    // restore correct values for first block
    {
        if (squot32(local_tid_32738, 32) == 0 && ltid_in_bounds_32764) {
            ((__local float *) red_arr_mem_32757)[sext_i32_i64(local_tid_32738)] = eta_p_26820;
        }
    }
    //barrier(CLK_LOCAL_MEM_FENCE);
    //barrier(CLK_LOCAL_MEM_FENCE);
    // Save result of reduction.
    {
        int32_t num_chunks_32773 = sdiv_up32(sext_i64_i32(d_13944), sext_i64_i32(computed_tblock_sizze_26786));
        
        for (int32_t chunk_i_32774 = 0; chunk_i_32774 < num_chunks_32773; chunk_i_32774++) {
            int32_t i_32775 = chunk_i_32774 * sext_i64_i32(computed_tblock_sizze_26786) + local_tid_32738;
            
            if (slt32(i_32775, sext_i64_i32(d_13944))) {
                ((__local float *) color_30709)[sext_i32_i64(i_32775)] = ((__local float *) red_arr_mem_32757)[d_13944 - (int64_t) 1 + sext_i32_i64(i_32775) * d_13944];
            }
        }
        //barrier(CLK_LOCAL_MEM_FENCE);
    }
    //barrier(CLK_LOCAL_MEM_FENCE);
    phys_tid_26829 = sext_i32_i64(local_tid_32738);
    gtid_26828 = sext_i32_i64(sext_i64_i32(ltid_pre_32742));
    if (slt64(gtid_26828, d_13944)) {
        float defunc_0_f_res_26830;
        f16 f32_res_26831;
        
        defunc_0_f_res_26830 = ((__local float *) color_30709)[gtid_26828];
        f32_res_26831 = fpconv_f32_f16(defunc_0_f_res_26830);
        ((__local uint16_t *) color_30708)[gtid_26828] = futrts_to_bits16(f32_res_26831);
    }
    //barrier(CLK_LOCAL_MEM_FENCE);
    num_chunks_32776 = sdiv_up32(sext_i64_i32(d_13944), sext_i64_i32(computed_tblock_sizze_26786));
    for (int32_t chunk_i_32777 = 0; chunk_i_32777 < num_chunks_32776; chunk_i_32777++) {
        int32_t i_32778 = chunk_i_32777 * sext_i64_i32(computed_tblock_sizze_26786) + local_tid_32738;
        
        if (slt32(i_32778, sext_i64_i32(d_13944))) {
            ((__global uint16_t *) mem_28449)[gtid_26791 * (d_13944 * d_13944 * m_16509) + gtid_26792 * (d_13944 * d_13944) + gtid_26793 * d_13944 + sext_i32_i64(i_32778)] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) color_30708)[sext_i32_i64(i_32778)]));
        }
    }
    //barrier(CLK_LOCAL_MEM_FENCE);
    
  error_5:
    return;
}
FUTHARK_KERNEL_SIZED(FlashAttention_6392zisegmap_intrablock_27418_dim1, 1, 1)
void FlashAttention_6392zisegmap_intrablock_27418(__global int *global_failure, int64_t d_13944, int64_t m_13945, int64_t dzlz7bUZLztZRz20Umz20Udz7dUzg_13946, int64_t gridDim_x_27411, int64_t full_tiles_27446, int64_t kk_27606, __global unsigned char *V_mem_28341, __global unsigned char *mem_28434, __global unsigned char *mem_29184)
{
    #define Ty_27400 (FlashAttention_6392zisegmap_intrablock_27418ziTy_27400)
    #define Ry_27401 (FlashAttention_6392zisegmap_intrablock_27418ziRy_27401)
    #define Tk_27402 (FlashAttention_6392zisegmap_intrablock_27418ziTk_27402)
    #define tk_div_tx_27403 (FlashAttention_6392zisegmap_intrablock_27418zitk_div_tx_27403)
    #define TxRx_27405 (FlashAttention_6392zisegmap_intrablock_27418ziTxRx_27405)
    #define a_loc_szz_27408 (FlashAttention_6392zisegmap_intrablock_27418zia_loc_szz_27408)
    #define loop_nonempty_27823 (FlashAttention_6392zisegmap_intrablock_27418ziloop_nonempty_27823)
    #define bytes_29090 (FlashAttention_6392zisegmap_intrablock_27418zibytes_29090)
    
    volatile __local unsigned char *color_30673_backing_1 = &shared_mem[0];
    const int64_t color_30673_backing_1_offset = 0 + (bytes_29090 + srem64((int64_t) 8 - srem64(bytes_29090, (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_30672_backing_0 = &shared_mem[color_30673_backing_1_offset];
    const int64_t color_30672_backing_0_offset = color_30673_backing_1_offset + (bytes_29090 + srem64((int64_t) 8 - srem64(bytes_29090, (int64_t) 8), (int64_t) 8));
    
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_32010;
    int32_t tblock_sizze_32013;
    int32_t wave_sizze_32012;
    int32_t block_id_32011;
    int32_t global_tid_32009;
    int64_t gid_flat_27418;
    int64_t slice_32016;
    int64_t slice_32017;
    int64_t ltid_pre_32014;
    int64_t remnant_32018;
    int64_t ltid_pre_32015;
    int64_t remnant_32019;
    int64_t slice_32020;
    int64_t slice_32021;
    int64_t slice_32022;
    int64_t gtid_25711;
    int64_t remnant_32023;
    int64_t gid_y_27416;
    int64_t remnant_32024;
    int64_t gid_x_27417;
    int64_t remnant_32025;
    __local unsigned char *color_30672;
    __local unsigned char *color_30673;
    int64_t iii_27419;
    int64_t jjj_27420;
    float mem_29089[Ry_27401 * Ry_27401];
    int64_t ltid_flat_27434;
    int64_t ltid_y_27433;
    int64_t ltid_x_27432;
    float mem_29070[Ry_27401 * Ry_27401];
    float ext_mem_29128[Ry_27401 * Ry_27401];
    float mem_param_29094[Ry_27401 * Ry_27401];
    int64_t ltid_flat_27628;
    int64_t ltid_flat_27673;
    float mem_29150[Ry_27401 * Ry_27401];
    int64_t ltid_flat_27735;
    int64_t ltid_y_27734;
    int64_t ltid_x_27733;
    int64_t binop_x_27750;
    int64_t binop_y_27755;
    f16 mem_29180[Ry_27401 * Ry_27401];
    int64_t ltid_flat_27794;
    int64_t ltid_y_27793;
    int64_t ltid_x_27792;
    f16 mem_29161[Ry_27401 * Ry_27401];
    int64_t binop_y_27797;
    int64_t ii_27798;
    int64_t binop_y_27799;
    int64_t jj_27800;
    int64_t slice_32051;
    int64_t slice_32052;
    int64_t slice_32053;
    int64_t reg_tile_i_32048;
    int64_t remnant_32054;
    int64_t reg_tile_i_32049;
    int64_t remnant_32055;
    int64_t reg_tile_i_32050;
    int64_t remnant_32056;
    int64_t tile_dim_start_32057;
    int64_t tile_dim_start_32058;
    int64_t tile_dim_start_32059;
    
    local_tid_32010 = get_local_id(0);
    tblock_sizze_32013 = get_local_size(0);
    wave_sizze_32012 = LOCKSTEP_WIDTH;
    block_id_32011 = get_tblock_id(0);
    global_tid_32009 = block_id_32011 * tblock_sizze_32013 + local_tid_32010;
    gid_flat_27418 = sext_i32_i64(block_id_32011);
    slice_32016 = Ty_27400;
    slice_32017 = Ty_27400 * slice_32016;
    ltid_pre_32014 = squot64(sext_i32_i64(local_tid_32010), slice_32016);
    remnant_32018 = sext_i32_i64(local_tid_32010) - ltid_pre_32014 * slice_32016;
    ltid_pre_32015 = remnant_32018;
    remnant_32019 = remnant_32018 - ltid_pre_32015;
    slice_32020 = gridDim_x_27411;
    slice_32021 = gridDim_x_27411 * slice_32020;
    slice_32022 = m_13945 * slice_32021;
    gtid_25711 = squot64(sext_i32_i64(block_id_32011), slice_32021);
    remnant_32023 = sext_i32_i64(block_id_32011) - gtid_25711 * slice_32021;
    gid_y_27416 = squot64(remnant_32023, slice_32020);
    remnant_32024 = remnant_32023 - gid_y_27416 * slice_32020;
    gid_x_27417 = remnant_32024;
    remnant_32025 = remnant_32024 - gid_x_27417;
    color_30672 = (__local unsigned char *) color_30672_backing_0;
    color_30673 = (__local unsigned char *) color_30673_backing_1;
    iii_27419 = TxRx_27405 * gid_y_27416;
    jjj_27420 = TxRx_27405 * gid_x_27417;
    ltid_flat_27434 = sext_i32_i64(local_tid_32010);
    ltid_y_27433 = sext_i32_i64(sext_i64_i32(ltid_pre_32014));
    ltid_x_27432 = sext_i32_i64(sext_i64_i32(ltid_pre_32015));
    for (int64_t i_27437 = 0; i_27437 < Ry_27401; i_27437++) {
        for (int64_t i_27440 = 0; i_27440 < Ry_27401; i_27440++) {
            mem_29070[i_27437 * Ry_27401 + i_27440] = 0.0F;
        }
    }
    for (int64_t i_0 = 0; i_0 < Ry_27401; i_0++) {
        for (int64_t i_1 = 0; i_1 < Ry_27401; i_1++) {
            mem_29089[i_0 * Ry_27401 + i_1] = mem_29070[i_0 * Ry_27401 + i_1];
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    barrier(CLK_LOCAL_MEM_FENCE);
    for (int32_t i_2 = 0; i_2 < Ry_27401 * Ry_27401; i_2++)
        mem_param_29094[i_2] = mem_29089[i_2];
    for (int64_t i_27447 = 0; i_27447 < full_tiles_27446; i_27447++) {
        int64_t kk_27451;
        int64_t ltid_flat_27471;
        int64_t ltid_flat_27512;
        float mem_29121[Ry_27401 * Ry_27401];
        int64_t ltid_flat_27570;
        int64_t ltid_y_27569;
        int64_t ltid_x_27568;
        int64_t binop_x_27583;
        int64_t binop_y_27588;
        float mem_param_tmp_32028[Ry_27401 * Ry_27401];
        
        kk_27451 = Tk_27402 * i_27447;
        ltid_flat_27471 = sext_i32_i64(local_tid_32010);
        for (int64_t nest_i_32032 = 0; nest_i_32032 < Ry_27401; nest_i_32032++) {
            for (int64_t nest_i_32033 = 0; nest_i_32033 < tk_div_tx_27403; nest_i_32033++) {
                int64_t ltid_seq_27474;
                int64_t ltid_seq_27475;
                int64_t ltid_y_27472;
                int64_t ltid_x_27473;
                int64_t binop_y_27476;
                int64_t k_27477;
                int64_t binop_y_27478;
                int64_t i_27479;
                int64_t gtid_27480;
                int64_t as_transformed_row_seqdim_idx_27481;
                bool cond_27482;
                f16 as_transformed_row_elem_27483;
                bool cond_27487;
                int64_t as_transformed_row_loc_ind_27488;
                
                ltid_seq_27474 = nest_i_32032;
                ltid_seq_27475 = nest_i_32033;
                ltid_y_27472 = sext_i32_i64(sext_i64_i32(ltid_pre_32014));
                ltid_x_27473 = sext_i32_i64(sext_i64_i32(ltid_pre_32015));
                binop_y_27476 = Ty_27400 * ltid_seq_27475;
                k_27477 = ltid_x_27473 + binop_y_27476;
                binop_y_27478 = Ty_27400 * ltid_seq_27474;
                i_27479 = ltid_y_27472 + binop_y_27478;
                gtid_27480 = iii_27419 + i_27479;
                as_transformed_row_seqdim_idx_27481 = kk_27451 + k_27477;
                cond_27482 = slt64(gtid_27480, d_13944);
                if (cond_27482) {
                    f16 A_elem_27485 = futrts_from_bits16(((__global uint16_t *) mem_28434)[gtid_25711 * (dzlz7bUZLztZRz20Umz20Udz7dUzg_13946 * d_13944) + gtid_27480 * dzlz7bUZLztZRz20Umz20Udz7dUzg_13946 + as_transformed_row_seqdim_idx_27481]);
                    
                    as_transformed_row_elem_27483 = A_elem_27485;
                } else {
                    as_transformed_row_elem_27483 = (f16) 0.0F;
                }
                cond_27487 = slt64(k_27477, Tk_27402);
                if (cond_27487) {
                    int64_t binop_y_27489;
                    int64_t x_27490;
                    
                    binop_y_27489 = Tk_27402 * i_27479;
                    x_27490 = k_27477 + binop_y_27489;
                    as_transformed_row_loc_ind_27488 = x_27490;
                } else {
                    as_transformed_row_loc_ind_27488 = (int64_t) -1;
                }
                if (sle64((int64_t) 0, as_transformed_row_loc_ind_27488) && slt64(as_transformed_row_loc_ind_27488, a_loc_szz_27408)) {
                    ((__local uint16_t *) color_30673)[as_transformed_row_loc_ind_27488] = futrts_to_bits16(as_transformed_row_elem_27483);
                }
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        ltid_flat_27512 = sext_i32_i64(local_tid_32010);
        for (int64_t nest_i_32034 = 0; nest_i_32034 < Ry_27401; nest_i_32034++) {
            for (int64_t nest_i_32035 = 0; nest_i_32035 < tk_div_tx_27403; nest_i_32035++) {
                int64_t ltid_seq_27515;
                int64_t ltid_seq_27516;
                int64_t ltid_y_27513;
                int64_t ltid_x_27514;
                int64_t binop_y_27517;
                int64_t k_27518;
                int64_t binop_y_27519;
                int64_t i_27520;
                int64_t gtid_27521;
                int64_t as_transformed_row_seqdim_idx_27522;
                bool cond_27523;
                f16 as_transformed_row_elem_27524;
                bool cond_27528;
                int64_t as_transformed_row_loc_ind_27529;
                
                ltid_seq_27515 = nest_i_32034;
                ltid_seq_27516 = nest_i_32035;
                ltid_y_27513 = sext_i32_i64(sext_i64_i32(ltid_pre_32014));
                ltid_x_27514 = sext_i32_i64(sext_i64_i32(ltid_pre_32015));
                binop_y_27517 = Ty_27400 * ltid_seq_27516;
                k_27518 = ltid_y_27513 + binop_y_27517;
                binop_y_27519 = Ty_27400 * ltid_seq_27515;
                i_27520 = ltid_x_27514 + binop_y_27519;
                gtid_27521 = jjj_27420 + i_27520;
                as_transformed_row_seqdim_idx_27522 = kk_27451 + k_27518;
                cond_27523 = slt64(gtid_27521, d_13944);
                if (cond_27523) {
                    f16 A_elem_27526 = futrts_from_bits16(((__global uint16_t *) V_mem_28341)[as_transformed_row_seqdim_idx_27522 * d_13944 + gtid_27521]);
                    
                    as_transformed_row_elem_27524 = A_elem_27526;
                } else {
                    as_transformed_row_elem_27524 = (f16) 0.0F;
                }
                cond_27528 = slt64(k_27518, Tk_27402);
                if (cond_27528) {
                    int64_t binop_y_27530;
                    int64_t x_27531;
                    
                    binop_y_27530 = TxRx_27405 * k_27518;
                    x_27531 = i_27520 + binop_y_27530;
                    as_transformed_row_loc_ind_27529 = x_27531;
                } else {
                    as_transformed_row_loc_ind_27529 = (int64_t) -1;
                }
                if (sle64((int64_t) 0, as_transformed_row_loc_ind_27529) && slt64(as_transformed_row_loc_ind_27529, a_loc_szz_27408)) {
                    ((__local uint16_t *) color_30672)[as_transformed_row_loc_ind_27529] = futrts_to_bits16(as_transformed_row_elem_27524);
                }
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        ltid_flat_27570 = sext_i32_i64(local_tid_32010);
        ltid_y_27569 = sext_i32_i64(sext_i64_i32(ltid_pre_32014));
        ltid_x_27568 = sext_i32_i64(sext_i64_i32(ltid_pre_32015));
        binop_x_27583 = Ry_27401 * ltid_y_27569;
        binop_y_27588 = Ry_27401 * ltid_x_27568;
        for (int64_t i_27573 = 0; i_27573 < Tk_27402; i_27573++) {
            int64_t binop_y_27590 = TxRx_27405 * i_27573;
            
            for (int64_t i_27577 = 0; i_27577 < Ry_27401; i_27577++) {
                int64_t binop_x_27584;
                int64_t binop_y_27585;
                int64_t as_transformed_row_loc_ind_64_27586;
                f16 as_transformed_row_loc_elem_27587;
                
                binop_x_27584 = i_27577 + binop_x_27583;
                binop_y_27585 = Tk_27402 * binop_x_27584;
                as_transformed_row_loc_ind_64_27586 = i_27573 + binop_y_27585;
                if (loop_nonempty_27823) {
                    f16 x_27824 = futrts_from_bits16(((__local uint16_t *) color_30673)[as_transformed_row_loc_ind_64_27586]);
                    
                    as_transformed_row_loc_elem_27587 = x_27824;
                } else {
                    as_transformed_row_loc_elem_27587 = (f16) 0.0F;
                }
                for (int64_t i_27580 = 0; i_27580 < Ry_27401; i_27580++) {
                    int64_t binop_x_27589;
                    int64_t as_transformed_row_loc_ind_64_27591;
                    f16 as_transformed_row_loc_elem_27592;
                    float c_27593;
                    f16 defunc_0_f_res_27596;
                    float f16_res_27597;
                    float defunc_0_op_res_27600;
                    
                    binop_x_27589 = i_27580 + binop_y_27588;
                    as_transformed_row_loc_ind_64_27591 = binop_x_27589 + binop_y_27590;
                    as_transformed_row_loc_elem_27592 = futrts_from_bits16(((__local uint16_t *) color_30672)[as_transformed_row_loc_ind_64_27591]);
                    c_27593 = mem_param_29094[i_27577 * Ry_27401 + i_27580];
                    defunc_0_f_res_27596 = as_transformed_row_loc_elem_27587 * as_transformed_row_loc_elem_27592;
                    f16_res_27597 = fpconv_f16_f32(defunc_0_f_res_27596);
                    defunc_0_op_res_27600 = c_27593 + f16_res_27597;
                    mem_param_29094[i_27577 * Ry_27401 + i_27580] = defunc_0_op_res_27600;
                }
            }
        }
        for (int64_t i_0 = 0; i_0 < Ry_27401; i_0++) {
            for (int64_t i_1 = 0; i_1 < Ry_27401; i_1++) {
                mem_29121[i_0 * Ry_27401 + i_1] = mem_param_29094[i_0 * Ry_27401 + i_1];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        for (int32_t i_3 = 0; i_3 < Ry_27401 * Ry_27401; i_3++)
            mem_param_tmp_32028[i_3] = mem_29121[i_3];
        for (int32_t i_4 = 0; i_4 < Ry_27401 * Ry_27401; i_4++)
            mem_param_29094[i_4] = mem_param_tmp_32028[i_4];
    }
    for (int32_t i_5 = 0; i_5 < Ry_27401 * Ry_27401; i_5++)
        ext_mem_29128[i_5] = mem_param_29094[i_5];
    ltid_flat_27628 = sext_i32_i64(local_tid_32010);
    for (int64_t nest_i_32039 = 0; nest_i_32039 < Ry_27401; nest_i_32039++) {
        for (int64_t nest_i_32040 = 0; nest_i_32040 < tk_div_tx_27403; nest_i_32040++) {
            int64_t ltid_seq_27631;
            int64_t ltid_seq_27632;
            int64_t ltid_y_27629;
            int64_t ltid_x_27630;
            int64_t binop_y_27633;
            int64_t k_27634;
            int64_t binop_y_27635;
            int64_t i_27636;
            int64_t gtid_27637;
            int64_t as_transformed_row_seqdim_idx_27638;
            bool binop_x_27639;
            bool binop_y_27640;
            bool cond_27641;
            f16 as_transformed_row_elem_27642;
            bool cond_27646;
            int64_t as_transformed_row_loc_ind_27647;
            
            ltid_seq_27631 = nest_i_32039;
            ltid_seq_27632 = nest_i_32040;
            ltid_y_27629 = sext_i32_i64(sext_i64_i32(ltid_pre_32014));
            ltid_x_27630 = sext_i32_i64(sext_i64_i32(ltid_pre_32015));
            binop_y_27633 = Ty_27400 * ltid_seq_27632;
            k_27634 = ltid_x_27630 + binop_y_27633;
            binop_y_27635 = Ty_27400 * ltid_seq_27631;
            i_27636 = ltid_y_27629 + binop_y_27635;
            gtid_27637 = iii_27419 + i_27636;
            as_transformed_row_seqdim_idx_27638 = kk_27606 + k_27634;
            binop_x_27639 = slt64(gtid_27637, d_13944);
            binop_y_27640 = slt64(as_transformed_row_seqdim_idx_27638, dzlz7bUZLztZRz20Umz20Udz7dUzg_13946);
            cond_27641 = binop_x_27639 && binop_y_27640;
            if (cond_27641) {
                f16 A_elem_27644 = futrts_from_bits16(((__global uint16_t *) mem_28434)[gtid_25711 * (dzlz7bUZLztZRz20Umz20Udz7dUzg_13946 * d_13944) + gtid_27637 * dzlz7bUZLztZRz20Umz20Udz7dUzg_13946 + as_transformed_row_seqdim_idx_27638]);
                
                as_transformed_row_elem_27642 = A_elem_27644;
            } else {
                as_transformed_row_elem_27642 = (f16) 0.0F;
            }
            cond_27646 = slt64(k_27634, Tk_27402);
            if (cond_27646) {
                int64_t binop_y_27648;
                int64_t x_27649;
                
                binop_y_27648 = Tk_27402 * i_27636;
                x_27649 = k_27634 + binop_y_27648;
                as_transformed_row_loc_ind_27647 = x_27649;
            } else {
                as_transformed_row_loc_ind_27647 = (int64_t) -1;
            }
            if (sle64((int64_t) 0, as_transformed_row_loc_ind_27647) && slt64(as_transformed_row_loc_ind_27647, a_loc_szz_27408)) {
                ((__local uint16_t *) color_30673)[as_transformed_row_loc_ind_27647] = futrts_to_bits16(as_transformed_row_elem_27642);
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    ltid_flat_27673 = sext_i32_i64(local_tid_32010);
    for (int64_t nest_i_32041 = 0; nest_i_32041 < Ry_27401; nest_i_32041++) {
        for (int64_t nest_i_32042 = 0; nest_i_32042 < tk_div_tx_27403; nest_i_32042++) {
            int64_t ltid_seq_27676;
            int64_t ltid_seq_27677;
            int64_t ltid_y_27674;
            int64_t ltid_x_27675;
            int64_t binop_y_27678;
            int64_t k_27679;
            int64_t binop_y_27680;
            int64_t i_27681;
            int64_t gtid_27682;
            int64_t as_transformed_row_seqdim_idx_27683;
            bool binop_x_27684;
            bool binop_y_27685;
            bool cond_27686;
            f16 as_transformed_row_elem_27687;
            bool cond_27691;
            int64_t as_transformed_row_loc_ind_27692;
            
            ltid_seq_27676 = nest_i_32041;
            ltid_seq_27677 = nest_i_32042;
            ltid_y_27674 = sext_i32_i64(sext_i64_i32(ltid_pre_32014));
            ltid_x_27675 = sext_i32_i64(sext_i64_i32(ltid_pre_32015));
            binop_y_27678 = Ty_27400 * ltid_seq_27677;
            k_27679 = ltid_y_27674 + binop_y_27678;
            binop_y_27680 = Ty_27400 * ltid_seq_27676;
            i_27681 = ltid_x_27675 + binop_y_27680;
            gtid_27682 = jjj_27420 + i_27681;
            as_transformed_row_seqdim_idx_27683 = kk_27606 + k_27679;
            binop_x_27684 = slt64(gtid_27682, d_13944);
            binop_y_27685 = slt64(as_transformed_row_seqdim_idx_27683, dzlz7bUZLztZRz20Umz20Udz7dUzg_13946);
            cond_27686 = binop_x_27684 && binop_y_27685;
            if (cond_27686) {
                f16 A_elem_27689 = futrts_from_bits16(((__global uint16_t *) V_mem_28341)[as_transformed_row_seqdim_idx_27683 * d_13944 + gtid_27682]);
                
                as_transformed_row_elem_27687 = A_elem_27689;
            } else {
                as_transformed_row_elem_27687 = (f16) 0.0F;
            }
            cond_27691 = slt64(k_27679, Tk_27402);
            if (cond_27691) {
                int64_t binop_y_27693;
                int64_t x_27694;
                
                binop_y_27693 = TxRx_27405 * k_27679;
                x_27694 = i_27681 + binop_y_27693;
                as_transformed_row_loc_ind_27692 = x_27694;
            } else {
                as_transformed_row_loc_ind_27692 = (int64_t) -1;
            }
            if (sle64((int64_t) 0, as_transformed_row_loc_ind_27692) && slt64(as_transformed_row_loc_ind_27692, a_loc_szz_27408)) {
                ((__local uint16_t *) color_30672)[as_transformed_row_loc_ind_27692] = futrts_to_bits16(as_transformed_row_elem_27687);
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    ltid_flat_27735 = sext_i32_i64(local_tid_32010);
    ltid_y_27734 = sext_i32_i64(sext_i64_i32(ltid_pre_32014));
    ltid_x_27733 = sext_i32_i64(sext_i64_i32(ltid_pre_32015));
    binop_x_27750 = Ry_27401 * ltid_y_27734;
    binop_y_27755 = Ry_27401 * ltid_x_27733;
    for (int64_t i_27738 = 0; i_27738 < Tk_27402; i_27738++) {
        int64_t cmpop_x_27740;
        bool cond_27741;
        int64_t binop_y_27757;
        
        cmpop_x_27740 = kk_27606 + i_27738;
        cond_27741 = slt64(cmpop_x_27740, dzlz7bUZLztZRz20Umz20Udz7dUzg_13946);
        binop_y_27757 = TxRx_27405 * i_27738;
        if (cond_27741) {
            for (int64_t i_27744 = 0; i_27744 < Ry_27401; i_27744++) {
                int64_t binop_x_27751;
                int64_t binop_y_27752;
                int64_t as_transformed_row_loc_ind_64_27753;
                f16 as_transformed_row_loc_elem_27754;
                
                binop_x_27751 = i_27744 + binop_x_27750;
                binop_y_27752 = Tk_27402 * binop_x_27751;
                as_transformed_row_loc_ind_64_27753 = i_27738 + binop_y_27752;
                if (loop_nonempty_27823) {
                    f16 x_27821 = futrts_from_bits16(((__local uint16_t *) color_30673)[as_transformed_row_loc_ind_64_27753]);
                    
                    as_transformed_row_loc_elem_27754 = x_27821;
                } else {
                    as_transformed_row_loc_elem_27754 = (f16) 0.0F;
                }
                for (int64_t i_27747 = 0; i_27747 < Ry_27401; i_27747++) {
                    int64_t binop_x_27756;
                    int64_t as_transformed_row_loc_ind_64_27758;
                    f16 as_transformed_row_loc_elem_27759;
                    float c_27760;
                    f16 defunc_0_f_res_27763;
                    float f16_res_27764;
                    float defunc_0_op_res_27767;
                    
                    binop_x_27756 = i_27747 + binop_y_27755;
                    as_transformed_row_loc_ind_64_27758 = binop_x_27756 + binop_y_27757;
                    as_transformed_row_loc_elem_27759 = futrts_from_bits16(((__local uint16_t *) color_30672)[as_transformed_row_loc_ind_64_27758]);
                    c_27760 = ext_mem_29128[i_27744 * Ry_27401 + i_27747];
                    defunc_0_f_res_27763 = as_transformed_row_loc_elem_27754 * as_transformed_row_loc_elem_27759;
                    f16_res_27764 = fpconv_f16_f32(defunc_0_f_res_27763);
                    defunc_0_op_res_27767 = c_27760 + f16_res_27764;
                    ext_mem_29128[i_27744 * Ry_27401 + i_27747] = defunc_0_op_res_27767;
                }
            }
        }
    }
    for (int64_t i_0 = 0; i_0 < Ry_27401; i_0++) {
        for (int64_t i_1 = 0; i_1 < Ry_27401; i_1++) {
            mem_29150[i_0 * Ry_27401 + i_1] = ext_mem_29128[i_0 * Ry_27401 + i_1];
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    ltid_flat_27794 = sext_i32_i64(local_tid_32010);
    ltid_y_27793 = sext_i32_i64(sext_i64_i32(ltid_pre_32014));
    ltid_x_27792 = sext_i32_i64(sext_i64_i32(ltid_pre_32015));
    binop_y_27797 = Ry_27401 * ltid_y_27793;
    ii_27798 = iii_27419 + binop_y_27797;
    binop_y_27799 = Ry_27401 * ltid_x_27792;
    jj_27800 = jjj_27420 + binop_y_27799;
    for (int64_t i_27802 = 0; i_27802 < Ry_27401; i_27802++) {
        int64_t gtid_27809;
        bool binop_x_27811;
        
        gtid_27809 = ii_27798 + i_27802;
        binop_x_27811 = slt64(gtid_27809, d_13944);
        for (int64_t i_27805 = 0; i_27805 < Ry_27401; i_27805++) {
            int64_t gtid_27810;
            bool binop_y_27812;
            bool cond_27813;
            f16 res_elem_27814;
            
            gtid_27810 = jj_27800 + i_27805;
            binop_y_27812 = slt64(gtid_27810, d_13944);
            cond_27813 = binop_x_27811 && binop_y_27812;
            if (cond_27813) {
                float redomap_elm_27807;
                f16 f32_res_27815;
                
                redomap_elm_27807 = mem_29150[i_27802 * Ry_27401 + i_27805];
                f32_res_27815 = fpconv_f32_f16(redomap_elm_27807);
                res_elem_27814 = f32_res_27815;
            } else {
                res_elem_27814 = (f16) 0.0F;
            }
            mem_29161[i_27802 * Ry_27401 + i_27805] = res_elem_27814;
        }
    }
    for (int64_t i_0 = 0; i_0 < Ry_27401; i_0++) {
        for (int64_t i_1 = 0; i_1 < Ry_27401; i_1++) {
            mem_29180[i_0 * Ry_27401 + i_1] = mem_29161[i_0 * Ry_27401 + i_1];
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    slice_32051 = Ty_27400;
    slice_32052 = Ty_27400 * slice_32051;
    slice_32053 = slice_32052;
    reg_tile_i_32048 = squot64(sext_i32_i64(local_tid_32010), slice_32052);
    remnant_32054 = sext_i32_i64(local_tid_32010) - reg_tile_i_32048 * slice_32052;
    reg_tile_i_32049 = squot64(remnant_32054, slice_32051);
    remnant_32055 = remnant_32054 - reg_tile_i_32049 * slice_32051;
    reg_tile_i_32050 = remnant_32055;
    remnant_32056 = remnant_32055 - reg_tile_i_32050;
    tile_dim_start_32057 = gtid_25711 + reg_tile_i_32048;
    tile_dim_start_32058 = Ry_27401 * (Ty_27400 * gid_y_27416 + reg_tile_i_32049);
    tile_dim_start_32059 = Ry_27401 * (Ty_27400 * gid_x_27417 + reg_tile_i_32050);
    for (int64_t nest_i_32060 = 0; nest_i_32060 < (int64_t) 1; nest_i_32060++) {
        for (int64_t nest_i_32061 = 0; nest_i_32061 < Ry_27401; nest_i_32061++) {
            for (int64_t nest_i_32062 = 0; nest_i_32062 < Ry_27401; nest_i_32062++) {
                if ((slt64(tile_dim_start_32057 + nest_i_32060, m_13945) && slt64(tile_dim_start_32058 + nest_i_32061, d_13944)) && slt64(tile_dim_start_32059 + nest_i_32062, d_13944)) {
                    f16 tmp_32063 = mem_29180[nest_i_32061 * Ry_27401 + nest_i_32062];
                    
                    ((__global uint16_t *) mem_29184)[(tile_dim_start_32057 + nest_i_32060) * (d_13944 * d_13944) + (tile_dim_start_32058 + nest_i_32061) * d_13944 + (tile_dim_start_32059 + nest_i_32062)] = futrts_to_bits16(tmp_32063);
                }
            }
        }
    }
    
  error_9:
    return;
    #undef Ty_27400
    #undef Ry_27401
    #undef Tk_27402
    #undef tk_div_tx_27403
    #undef TxRx_27405
    #undef a_loc_szz_27408
    #undef loop_nonempty_27823
    #undef bytes_29090
}
FUTHARK_KERNEL_SIZED(FlashAttention_6392zisegred_large_25738_dim1, 1, 1)
void FlashAttention_6392zisegred_large_25738(__global int *global_failure, int64_t d_13944, int64_t m_13945, int64_t dzlz7bUZLztZRz20Umz20Udz7dUzg_13946, int64_t num_tblocks_25731, int64_t blocks_per_segment_32097, int64_t q_32098, int64_t num_virtblocks_32099, int64_t threads_per_segment_32100, __global unsigned char *mem_28434, __global unsigned char *mem_29048, __global unsigned char *mem_29053, __global unsigned char *segred_tmp_mem_32101, __global unsigned char *counters_mem_32103)
{
    #define segred_tblock_sizze_25730 (FlashAttention_6392zisegred_large_25738zisegred_tblock_sizze_25730)
    #define chunk_sizze_32064 (FlashAttention_6392zisegred_large_25738zichunk_sizze_32064)
    
    volatile __local unsigned char *sync_arr_mem_32132_backing_1 = &shared_mem[0];
    const int64_t sync_arr_mem_32132_backing_1_offset = 0 + 8;
    volatile __local unsigned char *red_arr_f32_mem_32130_backing_0 = &shared_mem[sync_arr_mem_32132_backing_1_offset];
    const int64_t red_arr_f32_mem_32130_backing_0_offset = sync_arr_mem_32132_backing_1_offset + ((int64_t) 4 * segred_tblock_sizze_25730 + srem64((int64_t) 8 - srem64((int64_t) 4 * segred_tblock_sizze_25730, (int64_t) 8), (int64_t) 8));
    
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_32126;
    int32_t tblock_sizze_32129;
    int32_t wave_sizze_32128;
    int32_t block_id_32127;
    int32_t global_tid_32125;
    int64_t phys_tid_25738;
    __local unsigned char *red_arr_f32_mem_32130;
    __local unsigned char *sync_arr_mem_32132;
    int32_t phys_tblock_id_32134;
    int32_t iterations_32135;
    
    local_tid_32126 = get_local_id(0);
    tblock_sizze_32129 = get_local_size(0);
    wave_sizze_32128 = LOCKSTEP_WIDTH;
    block_id_32127 = get_tblock_id(0);
    global_tid_32125 = block_id_32127 * tblock_sizze_32129 + local_tid_32126;
    phys_tid_25738 = sext_i32_i64(global_tid_32125);
    red_arr_f32_mem_32130 = (__local unsigned char *) red_arr_f32_mem_32130_backing_0;
    sync_arr_mem_32132 = (__local unsigned char *) sync_arr_mem_32132_backing_1;
    phys_tblock_id_32134 = get_tblock_id(0);
    iterations_32135 = sdiv_up32(sext_i64_i32(num_virtblocks_32099) - phys_tblock_id_32134, sext_i64_i32(num_tblocks_25731));
    for (int32_t i_32136 = 0; i_32136 < iterations_32135; i_32136++) {
        int32_t virt_tblock_id_32137;
        int64_t flat_segment_id_32138;
        int64_t global_tid_32139;
        int64_t slice_32140;
        int64_t slice_32141;
        int64_t slice_32142;
        int64_t gtid_25734;
        int64_t remnant_32143;
        int64_t gtid_25735;
        int64_t remnant_32144;
        int64_t gtid_25736;
        int64_t remnant_32145;
        int64_t gtid_25737;
        float eta_p_block_res_acc_32146;
        float eta_p_25739;
        float eta_p_25740;
        int64_t tblock_id_in_segment_32150;
        int64_t block_base_offset_32151;
        int32_t offset_32154;
        int32_t skip_waves_32155;
        float eta_p_32147;
        float eta_p_32148;
        
        virt_tblock_id_32137 = phys_tblock_id_32134 + i_32136 * sext_i64_i32(num_tblocks_25731);
        flat_segment_id_32138 = squot64(sext_i32_i64(virt_tblock_id_32137), blocks_per_segment_32097);
        global_tid_32139 = srem64(sext_i32_i64(virt_tblock_id_32137) * segred_tblock_sizze_25730 + sext_i32_i64(local_tid_32126), threads_per_segment_32100);
        slice_32140 = d_13944;
        slice_32141 = d_13944 * slice_32140;
        slice_32142 = m_13945 * slice_32141;
        gtid_25734 = squot64(flat_segment_id_32138, slice_32141);
        remnant_32143 = flat_segment_id_32138 - gtid_25734 * slice_32141;
        gtid_25735 = squot64(remnant_32143, slice_32140);
        remnant_32144 = remnant_32143 - gtid_25735 * slice_32140;
        gtid_25736 = remnant_32144;
        remnant_32145 = remnant_32144 - gtid_25736;
        // ne-initialise the outer (per-block) accumulator(s)
        {
            eta_p_block_res_acc_32146 = 0.0F;
        }
        tblock_id_in_segment_32150 = squot64(global_tid_32139, segred_tblock_sizze_25730);
        block_base_offset_32151 = tblock_id_in_segment_32150 * q_32098 * segred_tblock_sizze_25730;
        for (int64_t i_32152 = 0; i_32152 < q_32098; i_32152++) {
            int64_t block_offset_32153 = block_base_offset_32151 + i_32152 * segred_tblock_sizze_25730;
            
            gtid_25737 = global_tid_32139 + threads_per_segment_32100 * i_32152;
            if (slt64(gtid_25737, dzlz7bUZLztZRz20Umz20Udz7dUzg_13946)) {
                // apply map function(s)
                {
                    // apply map function
                    {
                        f16 eta_p_25745 = futrts_from_bits16(((__global uint16_t *) mem_28434)[gtid_25734 * (dzlz7bUZLztZRz20Umz20Udz7dUzg_13946 * d_13944) + gtid_25735 * dzlz7bUZLztZRz20Umz20Udz7dUzg_13946 + gtid_25737]);
                        f16 eta_p_25746 = futrts_from_bits16(((__global uint16_t *) mem_29048)[gtid_25737 + gtid_25736 * dzlz7bUZLztZRz20Umz20Udz7dUzg_13946]);
                        f16 defunc_0_f_res_25747 = eta_p_25745 * eta_p_25746;
                        float f16_res_25748 = fpconv_f16_f32(defunc_0_f_res_25747);
                        
                        // load accumulator(s)
                        {
                            eta_p_25739 = eta_p_block_res_acc_32146;
                        }
                        // load next value(s)
                        {
                            eta_p_25740 = f16_res_25748;
                        }
                        // apply reduction operator(s)
                        {
                            float defunc_0_op_res_25741 = eta_p_25739 + eta_p_25740;
                            
                            // store in accumulator(s)
                            {
                                eta_p_block_res_acc_32146 = defunc_0_op_res_25741;
                            }
                        }
                    }
                }
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // store accs. prims go in lmem; non-prims in params (in global mem)
        {
            ((__local float *) red_arr_f32_mem_32130)[sext_i32_i64(local_tid_32126)] = eta_p_block_res_acc_32146;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        skip_waves_32155 = 1;
        offset_32154 = 0;
        // participating threads read initial accumulator
        {
            if (slt32(local_tid_32126, sext_i64_i32(segred_tblock_sizze_25730))) {
                eta_p_32147 = ((__local float *) red_arr_f32_mem_32130)[sext_i32_i64(local_tid_32126 + offset_32154)];
            }
        }
        offset_32154 = 1;
        while (slt32(offset_32154, wave_sizze_32128)) {
            if (slt32(local_tid_32126 + offset_32154, sext_i64_i32(segred_tblock_sizze_25730)) && ((local_tid_32126 - squot32(local_tid_32126, wave_sizze_32128) * wave_sizze_32128) & (2 * offset_32154 - 1)) == 0) {
                // read array element
                {
                    eta_p_32148 = ((volatile __local float *) red_arr_f32_mem_32130)[sext_i32_i64(local_tid_32126 + offset_32154)];
                }
                // apply reduction operation
                {
                    float defunc_0_op_res_32149 = eta_p_32147 + eta_p_32148;
                    
                    eta_p_32147 = defunc_0_op_res_32149;
                }
                // write result of operation
                {
                    ((volatile __local float *) red_arr_f32_mem_32130)[sext_i32_i64(local_tid_32126)] = eta_p_32147;
                }
            }
            offset_32154 *= 2;
        }
        while (slt32(skip_waves_32155, squot32(sext_i64_i32(segred_tblock_sizze_25730) + wave_sizze_32128 - 1, wave_sizze_32128))) {
            barrier(CLK_LOCAL_MEM_FENCE);
            offset_32154 = skip_waves_32155 * wave_sizze_32128;
            if (slt32(local_tid_32126 + offset_32154, sext_i64_i32(segred_tblock_sizze_25730)) && ((local_tid_32126 - squot32(local_tid_32126, wave_sizze_32128) * wave_sizze_32128) == 0 && (squot32(local_tid_32126, wave_sizze_32128) & (2 * skip_waves_32155 - 1)) == 0)) {
                // read array element
                {
                    eta_p_32148 = ((__local float *) red_arr_f32_mem_32130)[sext_i32_i64(local_tid_32126 + offset_32154)];
                }
                // apply reduction operation
                {
                    float defunc_0_op_res_32149 = eta_p_32147 + eta_p_32148;
                    
                    eta_p_32147 = defunc_0_op_res_32149;
                }
                // write result of operation
                {
                    ((__local float *) red_arr_f32_mem_32130)[sext_i32_i64(local_tid_32126)] = eta_p_32147;
                }
            }
            skip_waves_32155 *= 2;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_LOCAL_MEM_FENCE);
        // thread 0 updates per-block acc(s); rest reset to ne
        {
            if (sext_i32_i64(local_tid_32126) == (int64_t) 0) {
                eta_p_block_res_acc_32146 = eta_p_32147;
            } else {
                eta_p_block_res_acc_32146 = 0.0F;
            }
        }
        if (blocks_per_segment_32097 == (int64_t) 1) {
            // first thread in block saves final result to memory
            {
                if (local_tid_32126 == 0) {
                    ((__global float *) mem_29053)[gtid_25734 * (d_13944 * d_13944) + gtid_25735 * d_13944 + gtid_25736] = eta_p_block_res_acc_32146;
                }
            }
        } else {
            int32_t old_counter_32156;
            bool is_last_block_32157;
            
            // first thread in block saves block result to global memory
            {
                if (local_tid_32126 == 0) {
                    ((__global float *) segred_tmp_mem_32101)[sext_i32_i64(virt_tblock_id_32137)] = eta_p_block_res_acc_32146;
                    mem_fence_global();
                    old_counter_32156 = atomic_add_i32_global(&((volatile __global int *) counters_mem_32103)[srem64(flat_segment_id_32138, (int64_t) 20480)], (int) 1);
                    ((__local bool *) sync_arr_mem_32132)[(int64_t) 0] = old_counter_32156 == sext_i64_i32(blocks_per_segment_32097 - (int64_t) 1);
                }
            }
            barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
            is_last_block_32157 = ((__local bool *) sync_arr_mem_32132)[(int64_t) 0];
            if (is_last_block_32157) {
                if (local_tid_32126 == 0) {
                    old_counter_32156 = atomic_add_i32_global(&((volatile __global int *) counters_mem_32103)[srem64(flat_segment_id_32138, (int64_t) 20480)], (int) sext_i64_i32((int64_t) 0 - blocks_per_segment_32097));
                }
                // read in the per-block-results
                {
                    int64_t read_per_thread_32158 = sdiv_up64(blocks_per_segment_32097, segred_tblock_sizze_25730);
                    
                    eta_p_25739 = 0.0F;
                    for (int64_t i_32159 = 0; i_32159 < read_per_thread_32158; i_32159++) {
                        int64_t block_res_id_32160 = sext_i32_i64(local_tid_32126) * read_per_thread_32158 + i_32159;
                        int64_t index_of_block_res_32161 = flat_segment_id_32138 * blocks_per_segment_32097 + block_res_id_32160;
                        
                        if (slt64(block_res_id_32160, blocks_per_segment_32097)) {
                            eta_p_25740 = ((__global float *) segred_tmp_mem_32101)[index_of_block_res_32161];
                            
                            float defunc_0_op_res_25741 = eta_p_25739 + eta_p_25740;
                            
                            eta_p_25739 = defunc_0_op_res_25741;
                        }
                    }
                }
                ((__local float *) red_arr_f32_mem_32130)[sext_i32_i64(local_tid_32126)] = eta_p_25739;
                barrier(CLK_LOCAL_MEM_FENCE);
                // reduce the per-block results
                {
                    int32_t offset_32162;
                    int32_t skip_waves_32163 = 1;
                    float eta_p_32147;
                    float eta_p_32148;
                    
                    offset_32162 = 0;
                    // participating threads read initial accumulator
                    {
                        if (slt32(local_tid_32126, sext_i64_i32(segred_tblock_sizze_25730))) {
                            eta_p_32147 = ((__local float *) red_arr_f32_mem_32130)[sext_i32_i64(local_tid_32126 + offset_32162)];
                        }
                    }
                    offset_32162 = 1;
                    while (slt32(offset_32162, wave_sizze_32128)) {
                        if (slt32(local_tid_32126 + offset_32162, sext_i64_i32(segred_tblock_sizze_25730)) && ((local_tid_32126 - squot32(local_tid_32126, wave_sizze_32128) * wave_sizze_32128) & (2 * offset_32162 - 1)) == 0) {
                            // read array element
                            {
                                eta_p_32148 = ((volatile __local float *) red_arr_f32_mem_32130)[sext_i32_i64(local_tid_32126 + offset_32162)];
                            }
                            // apply reduction operation
                            {
                                float defunc_0_op_res_32149 = eta_p_32147 + eta_p_32148;
                                
                                eta_p_32147 = defunc_0_op_res_32149;
                            }
                            // write result of operation
                            {
                                ((volatile __local float *) red_arr_f32_mem_32130)[sext_i32_i64(local_tid_32126)] = eta_p_32147;
                            }
                        }
                        offset_32162 *= 2;
                    }
                    while (slt32(skip_waves_32163, squot32(sext_i64_i32(segred_tblock_sizze_25730) + wave_sizze_32128 - 1, wave_sizze_32128))) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                        offset_32162 = skip_waves_32163 * wave_sizze_32128;
                        if (slt32(local_tid_32126 + offset_32162, sext_i64_i32(segred_tblock_sizze_25730)) && ((local_tid_32126 - squot32(local_tid_32126, wave_sizze_32128) * wave_sizze_32128) == 0 && (squot32(local_tid_32126, wave_sizze_32128) & (2 * skip_waves_32163 - 1)) == 0)) {
                            // read array element
                            {
                                eta_p_32148 = ((__local float *) red_arr_f32_mem_32130)[sext_i32_i64(local_tid_32126 + offset_32162)];
                            }
                            // apply reduction operation
                            {
                                float defunc_0_op_res_32149 = eta_p_32147 + eta_p_32148;
                                
                                eta_p_32147 = defunc_0_op_res_32149;
                            }
                            // write result of operation
                            {
                                ((__local float *) red_arr_f32_mem_32130)[sext_i32_i64(local_tid_32126)] = eta_p_32147;
                            }
                        }
                        skip_waves_32163 *= 2;
                    }
                    barrier(CLK_LOCAL_MEM_FENCE);
                    // and back to memory with the final result
                    {
                        if (local_tid_32126 == 0) {
                            ((__global float *) mem_29053)[gtid_25734 * (d_13944 * d_13944) + gtid_25735 * d_13944 + gtid_25736] = eta_p_32147;
                        }
                    }
                }
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_6:
    return;
    #undef segred_tblock_sizze_25730
    #undef chunk_sizze_32064
}
FUTHARK_KERNEL_SIZED(FlashAttention_6392zisegred_small_25738_dim1, 1, 1)
void FlashAttention_6392zisegred_small_25738(__global int *global_failure, int64_t d_13944, int64_t m_13945, int64_t dzlz7bUZLztZRz20Umz20Udz7dUzg_13946, int64_t num_tblocks_25731, int64_t segment_sizze_nonzzero_32065, __global unsigned char *mem_28434, __global unsigned char *mem_29048, __global unsigned char *mem_29053)
{
    #define segred_tblock_sizze_25730 (FlashAttention_6392zisegred_small_25738zisegred_tblock_sizze_25730)
    
    volatile __local unsigned char *red_arr_f32_mem_32072_backing_0 = &shared_mem[0];
    const int64_t red_arr_f32_mem_32072_backing_0_offset = 0 + ((int64_t) 4 * segred_tblock_sizze_25730 + srem64((int64_t) 8 - srem64((int64_t) 4 * segred_tblock_sizze_25730, (int64_t) 8), (int64_t) 8));
    
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_32068;
    int32_t tblock_sizze_32071;
    int32_t wave_sizze_32070;
    int32_t block_id_32069;
    int32_t global_tid_32067;
    int64_t phys_tid_25738;
    __local unsigned char *red_arr_f32_mem_32072;
    int32_t phys_tblock_id_32074;
    int32_t iterations_32075;
    
    local_tid_32068 = get_local_id(0);
    tblock_sizze_32071 = get_local_size(0);
    wave_sizze_32070 = LOCKSTEP_WIDTH;
    block_id_32069 = get_tblock_id(0);
    global_tid_32067 = block_id_32069 * tblock_sizze_32071 + local_tid_32068;
    phys_tid_25738 = sext_i32_i64(global_tid_32067);
    red_arr_f32_mem_32072 = (__local unsigned char *) red_arr_f32_mem_32072_backing_0;
    phys_tblock_id_32074 = get_tblock_id(0);
    iterations_32075 = sdiv_up32(sext_i64_i32(sdiv_up64(m_13945 * d_13944 * d_13944, squot64(segred_tblock_sizze_25730, segment_sizze_nonzzero_32065))) - phys_tblock_id_32074, sext_i64_i32(num_tblocks_25731));
    for (int32_t i_32076 = 0; i_32076 < iterations_32075; i_32076++) {
        int32_t virt_tblock_id_32077;
        int64_t slice_32078;
        int64_t slice_32079;
        int64_t slice_32080;
        int64_t gtid_25734;
        int64_t remnant_32081;
        int64_t gtid_25735;
        int64_t remnant_32082;
        int64_t gtid_25736;
        int64_t remnant_32083;
        int64_t gtid_25737;
        
        virt_tblock_id_32077 = phys_tblock_id_32074 + i_32076 * sext_i64_i32(num_tblocks_25731);
        slice_32078 = d_13944;
        slice_32079 = d_13944 * slice_32078;
        slice_32080 = m_13945 * slice_32079;
        gtid_25734 = squot64(squot64(sext_i32_i64(local_tid_32068), segment_sizze_nonzzero_32065) + sext_i32_i64(virt_tblock_id_32077) * squot64(segred_tblock_sizze_25730, segment_sizze_nonzzero_32065), slice_32079);
        remnant_32081 = squot64(sext_i32_i64(local_tid_32068), segment_sizze_nonzzero_32065) + sext_i32_i64(virt_tblock_id_32077) * squot64(segred_tblock_sizze_25730, segment_sizze_nonzzero_32065) - gtid_25734 * slice_32079;
        gtid_25735 = squot64(remnant_32081, slice_32078);
        remnant_32082 = remnant_32081 - gtid_25735 * slice_32078;
        gtid_25736 = remnant_32082;
        remnant_32083 = remnant_32082 - gtid_25736;
        gtid_25737 = srem64(sext_i32_i64(local_tid_32068), dzlz7bUZLztZRz20Umz20Udz7dUzg_13946);
        // apply map function if in bounds
        {
            if (slt64((int64_t) 0, dzlz7bUZLztZRz20Umz20Udz7dUzg_13946) && (((slt64(gtid_25734, m_13945) && slt64(gtid_25735, d_13944)) && slt64(gtid_25736, d_13944)) && slt64(sext_i32_i64(local_tid_32068), dzlz7bUZLztZRz20Umz20Udz7dUzg_13946 * squot64(segred_tblock_sizze_25730, segment_sizze_nonzzero_32065)))) {
                // apply map function
                {
                    f16 eta_p_25745 = futrts_from_bits16(((__global uint16_t *) mem_28434)[gtid_25734 * (dzlz7bUZLztZRz20Umz20Udz7dUzg_13946 * d_13944) + gtid_25735 * dzlz7bUZLztZRz20Umz20Udz7dUzg_13946 + gtid_25737]);
                    f16 eta_p_25746 = futrts_from_bits16(((__global uint16_t *) mem_29048)[gtid_25737 + gtid_25736 * dzlz7bUZLztZRz20Umz20Udz7dUzg_13946]);
                    f16 defunc_0_f_res_25747 = eta_p_25745 * eta_p_25746;
                    float f16_res_25748 = fpconv_f16_f32(defunc_0_f_res_25747);
                    
                    // save results to be reduced
                    {
                        ((__local float *) red_arr_f32_mem_32072)[sext_i32_i64(local_tid_32068)] = f16_res_25748;
                    }
                }
            } else {
                ((__local float *) red_arr_f32_mem_32072)[sext_i32_i64(local_tid_32068)] = 0.0F;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        if (slt64((int64_t) 0, dzlz7bUZLztZRz20Umz20Udz7dUzg_13946)) {
            // perform segmented scan to imitate reduction
            {
                float eta_p_25739;
                float eta_p_25740;
                float eta_p_32084;
                float eta_p_32085;
                bool ltid_in_bounds_32087 = slt64(sext_i32_i64(local_tid_32068), dzlz7bUZLztZRz20Umz20Udz7dUzg_13946 * squot64(segred_tblock_sizze_25730, segment_sizze_nonzzero_32065));
                int32_t skip_threads_32088;
                
                // read input for in-block scan
                {
                    if (ltid_in_bounds_32087) {
                        eta_p_25740 = ((volatile __local float *) red_arr_f32_mem_32072)[sext_i32_i64(local_tid_32068)];
                        if ((local_tid_32068 - squot32(local_tid_32068, 32) * 32) == 0) {
                            eta_p_25739 = eta_p_25740;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_32088 = 1;
                    while (slt32(skip_threads_32088, 32)) {
                        bool thread_active_32089 = sle32(skip_threads_32088, local_tid_32068 - squot32(local_tid_32068, 32) * 32) && ltid_in_bounds_32087;
                        
                        if (thread_active_32089) {
                            // read operands
                            {
                                eta_p_25739 = ((volatile __local float *) red_arr_f32_mem_32072)[sext_i32_i64(local_tid_32068) - sext_i32_i64(skip_threads_32088)];
                            }
                        }
                        // perform operation
                        {
                            bool inactive_32090 = slt64(srem64(sext_i32_i64(local_tid_32068), dzlz7bUZLztZRz20Umz20Udz7dUzg_13946), sext_i32_i64(local_tid_32068) - sext_i32_i64(local_tid_32068 - skip_threads_32088));
                            
                            if (thread_active_32089 && inactive_32090) {
                                eta_p_25739 = eta_p_25740;
                            }
                            if (thread_active_32089) {
                                if (!inactive_32090) {
                                    float defunc_0_op_res_25741 = eta_p_25739 + eta_p_25740;
                                    
                                    eta_p_25739 = defunc_0_op_res_25741;
                                }
                            }
                        }
                        if (sle32(wave_sizze_32070, skip_threads_32088)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (thread_active_32089) {
                            // write result
                            {
                                ((volatile __local float *) red_arr_f32_mem_32072)[sext_i32_i64(local_tid_32068)] = eta_p_25739;
                                eta_p_25740 = eta_p_25739;
                            }
                        }
                        if (sle32(wave_sizze_32070, skip_threads_32088)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_32088 *= 2;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // last thread of block 'i' writes its result to offset 'i'
                {
                    if ((local_tid_32068 - squot32(local_tid_32068, 32) * 32) == 31 && ltid_in_bounds_32087) {
                        ((volatile __local float *) red_arr_f32_mem_32072)[sext_i32_i64(squot32(local_tid_32068, 32))] = eta_p_25739;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
                {
                    int32_t skip_threads_32091;
                    
                    // read input for in-block scan
                    {
                        if (squot32(local_tid_32068, 32) == 0 && ltid_in_bounds_32087) {
                            eta_p_32085 = ((volatile __local float *) red_arr_f32_mem_32072)[sext_i32_i64(local_tid_32068)];
                            if ((local_tid_32068 - squot32(local_tid_32068, 32) * 32) == 0) {
                                eta_p_32084 = eta_p_32085;
                            }
                        }
                    }
                    // in-block scan (hopefully no barriers needed)
                    {
                        skip_threads_32091 = 1;
                        while (slt32(skip_threads_32091, 32)) {
                            bool thread_active_32092 = sle32(skip_threads_32091, local_tid_32068 - squot32(local_tid_32068, 32) * 32) && (squot32(local_tid_32068, 32) == 0 && ltid_in_bounds_32087);
                            
                            if (thread_active_32092) {
                                // read operands
                                {
                                    eta_p_32084 = ((volatile __local float *) red_arr_f32_mem_32072)[sext_i32_i64(local_tid_32068) - sext_i32_i64(skip_threads_32091)];
                                }
                            }
                            // perform operation
                            {
                                bool inactive_32093 = slt64(srem64(sext_i32_i64(local_tid_32068 * 32 + 32 - 1), dzlz7bUZLztZRz20Umz20Udz7dUzg_13946), sext_i32_i64(local_tid_32068 * 32 + 32 - 1) - sext_i32_i64((local_tid_32068 - skip_threads_32091) * 32 + 32 - 1));
                                
                                if (thread_active_32092 && inactive_32093) {
                                    eta_p_32084 = eta_p_32085;
                                }
                                if (thread_active_32092) {
                                    if (!inactive_32093) {
                                        float defunc_0_op_res_32086 = eta_p_32084 + eta_p_32085;
                                        
                                        eta_p_32084 = defunc_0_op_res_32086;
                                    }
                                }
                            }
                            if (sle32(wave_sizze_32070, skip_threads_32091)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            if (thread_active_32092) {
                                // write result
                                {
                                    ((volatile __local float *) red_arr_f32_mem_32072)[sext_i32_i64(local_tid_32068)] = eta_p_32084;
                                    eta_p_32085 = eta_p_32084;
                                }
                            }
                            if (sle32(wave_sizze_32070, skip_threads_32091)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            skip_threads_32091 *= 2;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                
                bool no_carry_in_32094 = squot32(local_tid_32068, 32) == 0 || !ltid_in_bounds_32087;
                
                // carry-in for every block except the first
                {
                    // read operands
                    {
                        if (!no_carry_in_32094) {
                            eta_p_25740 = eta_p_25739;
                            eta_p_25739 = ((__local float *) red_arr_f32_mem_32072)[sext_i32_i64(squot32(local_tid_32068, 32)) - (int64_t) 1];
                        }
                    }
                    // perform operation
                    {
                        bool inactive_32095 = slt64(srem64(sext_i32_i64(local_tid_32068), dzlz7bUZLztZRz20Umz20Udz7dUzg_13946), sext_i32_i64(local_tid_32068) - sext_i32_i64(squot32(local_tid_32068, 32) * 32 - 1));
                        
                        if (!no_carry_in_32094) {
                            if (inactive_32095) {
                                eta_p_25739 = eta_p_25740;
                            }
                        }
                        if (!no_carry_in_32094) {
                            if (!inactive_32095) {
                                float defunc_0_op_res_25741 = eta_p_25739 + eta_p_25740;
                                
                                eta_p_25739 = defunc_0_op_res_25741;
                            }
                        }
                    }
                    // write final result
                    {
                        if (!no_carry_in_32094) {
                            ((__local float *) red_arr_f32_mem_32072)[sext_i32_i64(local_tid_32068)] = eta_p_25739;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // restore correct values for first block
                {
                    if (squot32(local_tid_32068, 32) == 0 && ltid_in_bounds_32087) {
                        ((__local float *) red_arr_f32_mem_32072)[sext_i32_i64(local_tid_32068)] = eta_p_25740;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // save final values of segments
        {
            if (slt64(sext_i32_i64(virt_tblock_id_32077) * squot64(segred_tblock_sizze_25730, segment_sizze_nonzzero_32065) + sext_i32_i64(local_tid_32068), m_13945 * d_13944 * d_13944) && slt64(sext_i32_i64(local_tid_32068), squot64(segred_tblock_sizze_25730, segment_sizze_nonzzero_32065))) {
                float tmp_32096 = ((__local float *) red_arr_f32_mem_32072)[(sext_i32_i64(local_tid_32068) + (int64_t) 1) * segment_sizze_nonzzero_32065 - (int64_t) 1];
                
                ((__global float *) mem_29053)[squot64(sext_i32_i64(virt_tblock_id_32077) * squot64(segred_tblock_sizze_25730, segment_sizze_nonzzero_32065) + sext_i32_i64(local_tid_32068), d_13944 * d_13944) * (d_13944 * d_13944) + squot64(sext_i32_i64(virt_tblock_id_32077) * squot64(segred_tblock_sizze_25730, segment_sizze_nonzzero_32065) + sext_i32_i64(local_tid_32068) - squot64(sext_i32_i64(virt_tblock_id_32077) * squot64(segred_tblock_sizze_25730, segment_sizze_nonzzero_32065) + sext_i32_i64(local_tid_32068), d_13944 * d_13944) * (d_13944 * d_13944), d_13944) * d_13944 + (sext_i32_i64(virt_tblock_id_32077) * squot64(segred_tblock_sizze_25730, segment_sizze_nonzzero_32065) + sext_i32_i64(local_tid_32068) - squot64(sext_i32_i64(virt_tblock_id_32077) * squot64(segred_tblock_sizze_25730, segment_sizze_nonzzero_32065) + sext_i32_i64(local_tid_32068), d_13944 * d_13944) * (d_13944 * d_13944) - squot64(sext_i32_i64(virt_tblock_id_32077) * squot64(segred_tblock_sizze_25730, segment_sizze_nonzzero_32065) + sext_i32_i64(local_tid_32068) - squot64(sext_i32_i64(virt_tblock_id_32077) * squot64(segred_tblock_sizze_25730, segment_sizze_nonzzero_32065) + sext_i32_i64(local_tid_32068), d_13944 * d_13944) * (d_13944 * d_13944), d_13944) * d_13944)] = tmp_32096;
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_3:
    return;
    #undef segred_tblock_sizze_25730
}
FUTHARK_KERNEL
void add_bothzireplicate_31266(int64_t n_9858, int64_t pn_9860, int64_t dzlz7bUZLzpZRz20Umz20Upmz7dUzg_14496, int64_t replicate_n_31265, int64_t virt_num_tblocks_31271, int64_t num_tblocks_31272, __global unsigned char *mem_28353)
{
    int32_t replicate_ltid_31267;
    int32_t tblock_sizze_31269;
    int32_t replicate_gid_31268;
    int32_t replicate_gtid_31266;
    int32_t phys_tblock_id_31273;
    int32_t iterations_31274;
    
    replicate_ltid_31267 = get_local_id(0);
    tblock_sizze_31269 = get_local_size(0);
    replicate_gid_31268 = get_tblock_id(0);
    replicate_gtid_31266 = replicate_gid_31268 * tblock_sizze_31269 + replicate_ltid_31267;
    phys_tblock_id_31273 = get_tblock_id(0);
    iterations_31274 = sdiv_up32(sext_i64_i32(virt_num_tblocks_31271) - phys_tblock_id_31273, sext_i64_i32(num_tblocks_31272));
    for (int32_t i_31275 = 0; i_31275 < iterations_31274; i_31275++) {
        int32_t virt_tblock_id_31276;
        int64_t global_tid_31277;
        int64_t slice_31280;
        int64_t slice_31281;
        int64_t rep_i_31278;
        int64_t remnant_31282;
        int64_t rep_i_31279;
        int64_t remnant_31283;
        
        virt_tblock_id_31276 = phys_tblock_id_31273 + i_31275 * sext_i64_i32(num_tblocks_31272);
        global_tid_31277 = sext_i32_i64(virt_tblock_id_31276) * sext_i32_i64(tblock_sizze_31269) + sext_i32_i64(replicate_ltid_31267);
        slice_31280 = dzlz7bUZLzpZRz20Umz20Upmz7dUzg_14496;
        slice_31281 = pn_9860 * slice_31280;
        rep_i_31278 = squot64(global_tid_31277, slice_31280);
        remnant_31282 = global_tid_31277 - rep_i_31278 * slice_31280;
        rep_i_31279 = remnant_31282;
        remnant_31283 = remnant_31282 - rep_i_31279;
        if (slt64(global_tid_31277, replicate_n_31265)) {
            ((__global uint16_t *) mem_28353)[dzlz7bUZLzpZRz20Umz20Upmz7dUzg_14496 * n_9858 + (rep_i_31278 * dzlz7bUZLzpZRz20Umz20Upmz7dUzg_14496 + rep_i_31279)] = futrts_to_bits16((f16) 0.0F);
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
}
FUTHARK_KERNEL_SIZED(add_bothzisegmap_intrablock_17777_dim1, 1, 1)
void add_bothzisegmap_intrablock_17777(__global int *global_failure, int64_t n_9858, int64_t m_9859, int64_t pm_9861, int64_t dzlz7bUZLzpZRz20Umz20Upmz7dUzg_14496, int64_t bytes_28343, __global unsigned char *a_mem_28339, __global unsigned char *mem_28341, __global unsigned char *mem_28353)
{
    volatile __local unsigned char *color_30607_backing_0 = &shared_mem[0];
    const int64_t color_30607_backing_0_offset = 0 + (bytes_28343 + srem64((int64_t) 8 - srem64(bytes_28343, (int64_t) 8), (int64_t) 8));
    
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_31249;
    int32_t tblock_sizze_31252;
    int32_t wave_sizze_31251;
    int32_t block_id_31250;
    int32_t global_tid_31248;
    int64_t phys_tblock_id_17777;
    int64_t slice_31253;
    int64_t gtid_17776;
    int64_t remnant_31254;
    __local unsigned char *color_30607;
    int64_t tmp_offs_31255;
    int32_t num_chunks_31256;
    int32_t num_chunks_31259;
    int32_t num_chunks_31262;
    
    local_tid_31249 = get_local_id(0);
    tblock_sizze_31252 = get_local_size(0);
    wave_sizze_31251 = LOCKSTEP_WIDTH;
    block_id_31250 = get_tblock_id(0);
    global_tid_31248 = block_id_31250 * tblock_sizze_31252 + local_tid_31249;
    phys_tblock_id_17777 = sext_i32_i64(block_id_31250);
    slice_31253 = n_9858;
    gtid_17776 = sext_i32_i64(block_id_31250);
    remnant_31254 = sext_i32_i64(block_id_31250) - gtid_17776;
    color_30607 = (__local unsigned char *) color_30607_backing_0;
    tmp_offs_31255 = (int64_t) 0;
    num_chunks_31256 = sdiv_up32(sext_i64_i32(m_9859), 0);
    for (int32_t chunk_i_31257 = 0; chunk_i_31257 < num_chunks_31256; chunk_i_31257++) {
        int32_t i_31258 = local_tid_31249;
        
        if (slt32(i_31258, sext_i64_i32(m_9859))) {
            ((__local uint16_t *) color_30607)[tmp_offs_31255 + sext_i32_i64(i_31258)] = futrts_to_bits16(futrts_from_bits16(((__global uint16_t *) a_mem_28339)[gtid_17776 * m_9859 + sext_i32_i64(i_31258)]));
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    tmp_offs_31255 += m_9859;
    num_chunks_31259 = sdiv_up32(sext_i64_i32(pm_9861), 0);
    for (int32_t chunk_i_31260 = 0; chunk_i_31260 < num_chunks_31259; chunk_i_31260++) {
        int32_t i_31261 = local_tid_31249;
        
        if (slt32(i_31261, sext_i64_i32(pm_9861))) {
            ((__local uint16_t *) color_30607)[tmp_offs_31255 + sext_i32_i64(i_31261)] = futrts_to_bits16(futrts_from_bits16(((__global uint16_t *) mem_28341)[sext_i32_i64(i_31261)]));
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    tmp_offs_31255 += pm_9861;
    num_chunks_31262 = sdiv_up32(sext_i64_i32(dzlz7bUZLzpZRz20Umz20Upmz7dUzg_14496), 0);
    for (int32_t chunk_i_31263 = 0; chunk_i_31263 < num_chunks_31262; chunk_i_31263++) {
        int32_t i_31264 = local_tid_31249;
        
        if (slt32(i_31264, sext_i64_i32(dzlz7bUZLzpZRz20Umz20Upmz7dUzg_14496))) {
            ((__global uint16_t *) mem_28353)[gtid_17776 * dzlz7bUZLzpZRz20Umz20Upmz7dUzg_14496 + sext_i32_i64(i_31264)] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) color_30607)[sext_i32_i64(i_31264)]));
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
  error_0:
    return;
}
FUTHARK_KERNEL_SIZED(add_colszisegmap_intrablock_17765_dim1, 1, 1)
void add_colszisegmap_intrablock_17765(__global int *global_failure, int64_t n_9834, int64_t m_9835, int64_t pm_9836, int64_t dzlz7bUZLzpZRz20Umz20Upmz7dUzg_14433, int64_t bytes_28343, __global unsigned char *a_mem_28339, __global unsigned char *mem_28341, __global unsigned char *mem_28347)
{
    volatile __local unsigned char *color_30607_backing_0 = &shared_mem[0];
    const int64_t color_30607_backing_0_offset = 0 + (bytes_28343 + srem64((int64_t) 8 - srem64(bytes_28343, (int64_t) 8), (int64_t) 8));
    
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_31248;
    int32_t tblock_sizze_31251;
    int32_t wave_sizze_31250;
    int32_t block_id_31249;
    int32_t global_tid_31247;
    int64_t phys_tblock_id_17765;
    int64_t slice_31252;
    int64_t gtid_17764;
    int64_t remnant_31253;
    __local unsigned char *color_30607;
    int64_t tmp_offs_31254;
    int32_t num_chunks_31255;
    int32_t num_chunks_31258;
    int32_t num_chunks_31261;
    
    local_tid_31248 = get_local_id(0);
    tblock_sizze_31251 = get_local_size(0);
    wave_sizze_31250 = LOCKSTEP_WIDTH;
    block_id_31249 = get_tblock_id(0);
    global_tid_31247 = block_id_31249 * tblock_sizze_31251 + local_tid_31248;
    phys_tblock_id_17765 = sext_i32_i64(block_id_31249);
    slice_31252 = n_9834;
    gtid_17764 = sext_i32_i64(block_id_31249);
    remnant_31253 = sext_i32_i64(block_id_31249) - gtid_17764;
    color_30607 = (__local unsigned char *) color_30607_backing_0;
    tmp_offs_31254 = (int64_t) 0;
    num_chunks_31255 = sdiv_up32(sext_i64_i32(m_9835), 0);
    for (int32_t chunk_i_31256 = 0; chunk_i_31256 < num_chunks_31255; chunk_i_31256++) {
        int32_t i_31257 = local_tid_31248;
        
        if (slt32(i_31257, sext_i64_i32(m_9835))) {
            ((__local uint16_t *) color_30607)[tmp_offs_31254 + sext_i32_i64(i_31257)] = futrts_to_bits16(futrts_from_bits16(((__global uint16_t *) a_mem_28339)[gtid_17764 * m_9835 + sext_i32_i64(i_31257)]));
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    tmp_offs_31254 += m_9835;
    num_chunks_31258 = sdiv_up32(sext_i64_i32(pm_9836), 0);
    for (int32_t chunk_i_31259 = 0; chunk_i_31259 < num_chunks_31258; chunk_i_31259++) {
        int32_t i_31260 = local_tid_31248;
        
        if (slt32(i_31260, sext_i64_i32(pm_9836))) {
            ((__local uint16_t *) color_30607)[tmp_offs_31254 + sext_i32_i64(i_31260)] = futrts_to_bits16(futrts_from_bits16(((__global uint16_t *) mem_28341)[sext_i32_i64(i_31260)]));
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    tmp_offs_31254 += pm_9836;
    num_chunks_31261 = sdiv_up32(sext_i64_i32(dzlz7bUZLzpZRz20Umz20Upmz7dUzg_14433), 0);
    for (int32_t chunk_i_31262 = 0; chunk_i_31262 < num_chunks_31261; chunk_i_31262++) {
        int32_t i_31263 = local_tid_31248;
        
        if (slt32(i_31263, sext_i64_i32(dzlz7bUZLzpZRz20Umz20Upmz7dUzg_14433))) {
            ((__global uint16_t *) mem_28347)[gtid_17764 * dzlz7bUZLzpZRz20Umz20Upmz7dUzg_14433 + sext_i32_i64(i_31263)] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) color_30607)[sext_i32_i64(i_31263)]));
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
  error_0:
    return;
}
FUTHARK_KERNEL
void add_rowszireplicate_31227(int64_t n_9748, int64_t m_9749, int64_t pn_9750, int64_t replicate_n_31226, int64_t virt_num_tblocks_31232, int64_t num_tblocks_31233, __global unsigned char *mem_28345)
{
    int32_t replicate_ltid_31228;
    int32_t tblock_sizze_31230;
    int32_t replicate_gid_31229;
    int32_t replicate_gtid_31227;
    int32_t phys_tblock_id_31234;
    int32_t iterations_31235;
    
    replicate_ltid_31228 = get_local_id(0);
    tblock_sizze_31230 = get_local_size(0);
    replicate_gid_31229 = get_tblock_id(0);
    replicate_gtid_31227 = replicate_gid_31229 * tblock_sizze_31230 + replicate_ltid_31228;
    phys_tblock_id_31234 = get_tblock_id(0);
    iterations_31235 = sdiv_up32(sext_i64_i32(virt_num_tblocks_31232) - phys_tblock_id_31234, sext_i64_i32(num_tblocks_31233));
    for (int32_t i_31236 = 0; i_31236 < iterations_31235; i_31236++) {
        int32_t virt_tblock_id_31237;
        int64_t global_tid_31238;
        int64_t slice_31241;
        int64_t slice_31242;
        int64_t rep_i_31239;
        int64_t remnant_31243;
        int64_t rep_i_31240;
        int64_t remnant_31244;
        
        virt_tblock_id_31237 = phys_tblock_id_31234 + i_31236 * sext_i64_i32(num_tblocks_31233);
        global_tid_31238 = sext_i32_i64(virt_tblock_id_31237) * sext_i32_i64(tblock_sizze_31230) + sext_i32_i64(replicate_ltid_31228);
        slice_31241 = m_9749;
        slice_31242 = pn_9750 * slice_31241;
        rep_i_31239 = squot64(global_tid_31238, slice_31241);
        remnant_31243 = global_tid_31238 - rep_i_31239 * slice_31241;
        rep_i_31240 = remnant_31243;
        remnant_31244 = remnant_31243 - rep_i_31240;
        if (slt64(global_tid_31238, replicate_n_31226)) {
            ((__global uint16_t *) mem_28345)[m_9749 * n_9748 + (rep_i_31239 * m_9749 + rep_i_31240)] = futrts_to_bits16((f16) 0.0F);
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
}
FUTHARK_KERNEL
void builtinzhreplicate_f16zireplicate_31707(int64_t num_elems_31703, uint16_t val_31704_bits, int64_t replicate_n_31706, int64_t virt_num_tblocks_31712, int64_t num_tblocks_31713, __global unsigned char *mem_31702)
{
    f16 val_31704 = futrts_from_bits16(val_31704_bits);
    int32_t replicate_ltid_31708;
    int32_t tblock_sizze_31710;
    int32_t replicate_gid_31709;
    int32_t replicate_gtid_31707;
    int32_t phys_tblock_id_31714;
    int32_t iterations_31715;
    
    replicate_ltid_31708 = get_local_id(0);
    tblock_sizze_31710 = get_local_size(0);
    replicate_gid_31709 = get_tblock_id(0);
    replicate_gtid_31707 = replicate_gid_31709 * tblock_sizze_31710 + replicate_ltid_31708;
    phys_tblock_id_31714 = get_tblock_id(0);
    iterations_31715 = sdiv_up32(sext_i64_i32(virt_num_tblocks_31712) - phys_tblock_id_31714, sext_i64_i32(num_tblocks_31713));
    for (int32_t i_31716 = 0; i_31716 < iterations_31715; i_31716++) {
        int32_t virt_tblock_id_31717;
        int64_t global_tid_31718;
        int64_t slice_31720;
        int64_t rep_i_31719;
        int64_t remnant_31721;
        
        virt_tblock_id_31717 = phys_tblock_id_31714 + i_31716 * sext_i64_i32(num_tblocks_31713);
        global_tid_31718 = sext_i32_i64(virt_tblock_id_31717) * sext_i32_i64(tblock_sizze_31710) + sext_i32_i64(replicate_ltid_31708);
        slice_31720 = num_elems_31703;
        rep_i_31719 = global_tid_31718;
        remnant_31721 = global_tid_31718 - rep_i_31719;
        if (slt64(global_tid_31718, replicate_n_31706)) {
            ((__global uint16_t *) mem_31702)[rep_i_31719] = futrts_to_bits16(val_31704);
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
}
FUTHARK_KERNEL
void builtinzhreplicate_i32zireplicate_32110(int64_t num_elems_32106, int32_t val_32107, int64_t replicate_n_32109, int64_t virt_num_tblocks_32115, int64_t num_tblocks_32116, __global unsigned char *mem_32105)
{
    int32_t replicate_ltid_32111;
    int32_t tblock_sizze_32113;
    int32_t replicate_gid_32112;
    int32_t replicate_gtid_32110;
    int32_t phys_tblock_id_32117;
    int32_t iterations_32118;
    
    replicate_ltid_32111 = get_local_id(0);
    tblock_sizze_32113 = get_local_size(0);
    replicate_gid_32112 = get_tblock_id(0);
    replicate_gtid_32110 = replicate_gid_32112 * tblock_sizze_32113 + replicate_ltid_32111;
    phys_tblock_id_32117 = get_tblock_id(0);
    iterations_32118 = sdiv_up32(sext_i64_i32(virt_num_tblocks_32115) - phys_tblock_id_32117, sext_i64_i32(num_tblocks_32116));
    for (int32_t i_32119 = 0; i_32119 < iterations_32118; i_32119++) {
        int32_t virt_tblock_id_32120;
        int64_t global_tid_32121;
        int64_t slice_32123;
        int64_t rep_i_32122;
        int64_t remnant_32124;
        
        virt_tblock_id_32120 = phys_tblock_id_32117 + i_32119 * sext_i64_i32(num_tblocks_32116);
        global_tid_32121 = sext_i32_i64(virt_tblock_id_32120) * sext_i32_i64(tblock_sizze_32113) + sext_i32_i64(replicate_ltid_32111);
        slice_32123 = num_elems_32106;
        rep_i_32122 = global_tid_32121;
        remnant_32124 = global_tid_32121 - rep_i_32122;
        if (slt64(global_tid_32121, replicate_n_32109)) {
            ((__global int32_t *) mem_32105)[rep_i_32122] = val_32107;
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_1:
    return;
}
FUTHARK_KERNEL_SIZED(matmul_tile_kzisegmap_18363_dim1, 1, 1)
void matmul_tile_kzisegmap_18363(__global int *global_failure, int64_t d_10677, int64_t m_16315, int64_t one_intra_par_min_18223, __global unsigned char *ext_mem_28369, __global unsigned char *mem_28394)
{
    #define segmap_tblock_sizze_18354 (matmul_tile_kzisegmap_18363zisegmap_tblock_sizze_18354)
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_31389;
    int32_t tblock_sizze_31392;
    int32_t wave_sizze_31391;
    int32_t block_id_31390;
    int32_t global_tid_31388;
    int64_t phys_tid_18363;
    int64_t global_tid_31393;
    int64_t slice_31394;
    int64_t slice_31395;
    int64_t gtid_18361;
    int64_t remnant_31396;
    int64_t gtid_18362;
    int64_t remnant_31397;
    
    local_tid_31389 = get_local_id(0);
    tblock_sizze_31392 = get_local_size(0);
    wave_sizze_31391 = LOCKSTEP_WIDTH;
    block_id_31390 = get_tblock_id(0);
    global_tid_31388 = block_id_31390 * tblock_sizze_31392 + local_tid_31389;
    phys_tid_18363 = sext_i32_i64(global_tid_31388);
    global_tid_31393 = sext_i32_i64(block_id_31390) * segmap_tblock_sizze_18354 + sext_i32_i64(local_tid_31389);
    slice_31394 = d_10677;
    slice_31395 = d_10677 * slice_31394;
    gtid_18361 = squot64(global_tid_31393, slice_31394);
    remnant_31396 = global_tid_31393 - gtid_18361 * slice_31394;
    gtid_18362 = remnant_31396;
    remnant_31397 = remnant_31396 - gtid_18362;
    if (slt64(gtid_18361, d_10677) && slt64(gtid_18362, d_10677)) {
        f16 defunc_0_map_res_18365;
        f16 redout_27840 = (f16) 0.0F;
        
        for (int64_t i_27841 = 0; i_27841 < m_16315; i_27841++) {
            f16 x_18369;
            f16 defunc_0_f_res_18368;
            f16 redout_tmp_31398;
            
            x_18369 = futrts_from_bits16(((__global uint16_t *) ext_mem_28369)[i_27841 * one_intra_par_min_18223 + gtid_18361 * d_10677 + gtid_18362]);
            defunc_0_f_res_18368 = x_18369 + redout_27840;
            redout_tmp_31398 = defunc_0_f_res_18368;
            redout_27840 = redout_tmp_31398;
        }
        defunc_0_map_res_18365 = redout_27840;
        ((__global uint16_t *) mem_28394)[gtid_18361 * d_10677 + gtid_18362] = futrts_to_bits16(defunc_0_map_res_18365);
    }
    
  error_0:
    return;
    #undef segmap_tblock_sizze_18354
}
FUTHARK_KERNEL
void matmul_tile_kzisegmap_intrablock_18242(__global int *global_failure, int failure_is_an_option, __global int64_t *global_failure_args, int64_t md_10676, int64_t d_10677, int64_t m_16315, int64_t one_intra_par_min_18223, int64_t computed_tblock_sizze_18232, int64_t bytes_28354, int64_t bytes_28357, __global unsigned char *A_mem_28339, __global unsigned char *B_mem_28340, __global unsigned char *mem_28365)
{
    volatile __local unsigned char *red_arr_mem_31321_backing_2 = &shared_mem[0];
    const int64_t red_arr_mem_31321_backing_2_offset = 0 + ((int64_t) 4 * (d_10677 * d_10677 * d_10677) + srem64((int64_t) 8 - srem64((int64_t) 4 * (d_10677 * d_10677 * d_10677), (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_30610_backing_1 = &shared_mem[red_arr_mem_31321_backing_2_offset];
    const int64_t color_30610_backing_1_offset = red_arr_mem_31321_backing_2_offset + (bytes_28357 + srem64((int64_t) 8 - srem64(bytes_28357, (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_30609_backing_0 = &shared_mem[color_30610_backing_1_offset];
    const int64_t color_30609_backing_0_offset = color_30610_backing_1_offset + (bytes_28354 + srem64((int64_t) 8 - srem64(bytes_28354, (int64_t) 8), (int64_t) 8));
    volatile __local int local_failure;
    
    if (failure_is_an_option) {
        int failed = *global_failure >= 0;
        
        if (failed)
            return;
    }
    local_failure = 0;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t local_tid_31300;
    int32_t tblock_sizze_31303;
    int32_t wave_sizze_31302;
    int32_t block_id_31301;
    int32_t global_tid_31299;
    int64_t phys_tblock_id_18242;
    int64_t slice_31306;
    int64_t slice_31307;
    int64_t ltid_pre_31304;
    int64_t remnant_31308;
    int64_t ltid_pre_31305;
    int64_t remnant_31309;
    int64_t slice_31313;
    int64_t slice_31314;
    int64_t slice_31315;
    int64_t ltid_pre_31310;
    int64_t remnant_31316;
    int64_t ltid_pre_31311;
    int64_t remnant_31317;
    int64_t ltid_pre_31312;
    int64_t remnant_31318;
    int64_t slice_31319;
    int64_t gtid_18241;
    int64_t remnant_31320;
    __local unsigned char *color_30609;
    __local unsigned char *color_30610;
    int64_t zp_rhs_18246;
    int64_t phys_tid_18258;
    int64_t gtid_18256;
    int64_t gtid_18257;
    int64_t binop_x_26924;
    int64_t phys_tid_18272;
    __local unsigned char *red_arr_mem_31321;
    int64_t gtid_18269;
    int64_t gtid_18270;
    int64_t gtid_18271;
    int64_t dims_flat_31323;
    float eta_p_18273;
    float eta_p_18274;
    float eta_p_31325;
    float eta_p_31326;
    bool ltid_in_bounds_31328;
    int32_t skip_threads_31329;
    bool no_carry_in_31335;
    int64_t phys_tid_18285;
    int64_t gtid_18283;
    int64_t gtid_18284;
    int32_t num_chunks_31340;
    
    local_tid_31300 = get_local_id(0);
    tblock_sizze_31303 = get_local_size(0);
    wave_sizze_31302 = LOCKSTEP_WIDTH;
    block_id_31301 = get_tblock_id(0);
    global_tid_31299 = block_id_31301 * tblock_sizze_31303 + local_tid_31300;
    phys_tblock_id_18242 = sext_i32_i64(block_id_31301);
    slice_31306 = d_10677;
    slice_31307 = d_10677 * slice_31306;
    ltid_pre_31304 = squot64(sext_i32_i64(local_tid_31300), slice_31306);
    remnant_31308 = sext_i32_i64(local_tid_31300) - ltid_pre_31304 * slice_31306;
    ltid_pre_31305 = remnant_31308;
    remnant_31309 = remnant_31308 - ltid_pre_31305;
    slice_31313 = d_10677;
    slice_31314 = d_10677 * slice_31313;
    slice_31315 = d_10677 * slice_31314;
    ltid_pre_31310 = squot64(sext_i32_i64(local_tid_31300), slice_31314);
    remnant_31316 = sext_i32_i64(local_tid_31300) - ltid_pre_31310 * slice_31314;
    ltid_pre_31311 = squot64(remnant_31316, slice_31313);
    remnant_31317 = remnant_31316 - ltid_pre_31311 * slice_31313;
    ltid_pre_31312 = remnant_31317;
    remnant_31318 = remnant_31317 - ltid_pre_31312;
    slice_31319 = m_16315;
    gtid_18241 = sext_i32_i64(block_id_31301);
    remnant_31320 = sext_i32_i64(block_id_31301) - gtid_18241;
    color_30609 = (__local unsigned char *) color_30609_backing_0;
    color_30610 = (__local unsigned char *) color_30610_backing_1;
    zp_rhs_18246 = mul64(d_10677, gtid_18241);
    phys_tid_18258 = sext_i32_i64(local_tid_31300);
    gtid_18256 = sext_i32_i64(sext_i64_i32(ltid_pre_31304));
    gtid_18257 = sext_i32_i64(sext_i64_i32(ltid_pre_31305));
    if (slt64(gtid_18256, d_10677) && slt64(gtid_18257, d_10677)) {
        int64_t tmp_18262;
        bool x_18263;
        bool y_18264;
        bool bounds_check_18265;
        bool index_certs_18266;
        f16 lifted_lambda_res_18267;
        
        tmp_18262 = add64(zp_rhs_18246, gtid_18257);
        x_18263 = sle64((int64_t) 0, tmp_18262);
        y_18264 = slt64(tmp_18262, md_10676);
        bounds_check_18265 = x_18263 && y_18264;
        if (!bounds_check_18265) {
            {
                if (atomic_cmpxchg_i32_global(global_failure, -1, 49) == -1) {
                    global_failure_args[0] = (int64_t) tmp_18262;
                    global_failure_args[1] = (int64_t) md_10676;
                    ;
                }
                local_failure = 1;
                goto error_0;
            }
        }
        lifted_lambda_res_18267 = futrts_from_bits16(((__global uint16_t *) A_mem_28339)[gtid_18256 * md_10676 + tmp_18262]);
        ((__local uint16_t *) color_30609)[gtid_18256 * d_10677 + gtid_18257] = futrts_to_bits16(lifted_lambda_res_18267);
    }
    
  error_0:
    barrier(CLK_LOCAL_MEM_FENCE);
    if (local_failure)
        return;
    barrier(CLK_LOCAL_MEM_FENCE);
    binop_x_26924 = one_intra_par_min_18223 * gtid_18241;
    phys_tid_18272 = sext_i32_i64(local_tid_31300);
    red_arr_mem_31321 = (__local unsigned char *) red_arr_mem_31321_backing_2;
    gtid_18269 = sext_i32_i64(sext_i64_i32(ltid_pre_31310));
    gtid_18270 = sext_i32_i64(sext_i64_i32(ltid_pre_31311));
    gtid_18271 = sext_i32_i64(sext_i64_i32(ltid_pre_31312));
    if ((slt64(gtid_18269, d_10677) && slt64(gtid_18270, d_10677)) && slt64(gtid_18271, d_10677)) {
        f16 eta_p_18278;
        int64_t binop_y_26925;
        int64_t binop_x_26926;
        int64_t binop_x_26927;
        int64_t new_index_26928;
        int64_t binop_y_26940;
        int64_t new_index_26941;
        f16 eta_p_18279;
        f16 defunc_0_f_res_18280;
        float f16_res_18281;
        
        eta_p_18278 = futrts_from_bits16(((__local uint16_t *) color_30609)[gtid_18269 * d_10677 + gtid_18271]);
        binop_y_26925 = d_10677 * gtid_18271;
        binop_x_26926 = binop_x_26924 + binop_y_26925;
        binop_x_26927 = gtid_18270 + binop_x_26926;
        new_index_26928 = squot64(binop_x_26927, d_10677);
        binop_y_26940 = d_10677 * new_index_26928;
        new_index_26941 = binop_x_26927 - binop_y_26940;
        eta_p_18279 = futrts_from_bits16(((__global uint16_t *) B_mem_28340)[new_index_26928 * d_10677 + new_index_26941]);
        defunc_0_f_res_18280 = eta_p_18278 * eta_p_18279;
        f16_res_18281 = fpconv_f16_f32(defunc_0_f_res_18280);
        ((__local float *) red_arr_mem_31321)[gtid_18269 * (d_10677 * d_10677) + gtid_18270 * d_10677 + gtid_18271] = f16_res_18281;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    dims_flat_31323 = d_10677 * d_10677 * d_10677;
    ltid_in_bounds_31328 = slt64(sext_i32_i64(local_tid_31300), d_10677 * d_10677 * d_10677);
    // read input for in-block scan
    {
        if (ltid_in_bounds_31328) {
            eta_p_18274 = ((volatile __local float *) red_arr_mem_31321)[sext_i32_i64(local_tid_31300)];
            if ((local_tid_31300 - squot32(local_tid_31300, 32) * 32) == 0) {
                eta_p_18273 = eta_p_18274;
            }
        }
    }
    // in-block scan (hopefully no barriers needed)
    {
        skip_threads_31329 = 1;
        while (slt32(skip_threads_31329, 32)) {
            bool thread_active_31330 = sle32(skip_threads_31329, local_tid_31300 - squot32(local_tid_31300, 32) * 32) && ltid_in_bounds_31328;
            
            if (thread_active_31330) {
                // read operands
                {
                    eta_p_18273 = ((volatile __local float *) red_arr_mem_31321)[sext_i32_i64(local_tid_31300) - sext_i32_i64(skip_threads_31329)];
                }
            }
            // perform operation
            {
                bool inactive_31331 = slt64(srem64(sext_i32_i64(local_tid_31300), d_10677), sext_i32_i64(local_tid_31300) - sext_i32_i64(local_tid_31300 - skip_threads_31329));
                
                if (thread_active_31330 && inactive_31331) {
                    eta_p_18273 = eta_p_18274;
                }
                if (thread_active_31330) {
                    if (!inactive_31331) {
                        float defunc_0_op_res_18275 = eta_p_18273 + eta_p_18274;
                        
                        eta_p_18273 = defunc_0_op_res_18275;
                    }
                }
            }
            if (sle32(wave_sizze_31302, skip_threads_31329)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            if (thread_active_31330) {
                // write result
                {
                    ((volatile __local float *) red_arr_mem_31321)[sext_i32_i64(local_tid_31300)] = eta_p_18273;
                    eta_p_18274 = eta_p_18273;
                }
            }
            if (sle32(wave_sizze_31302, skip_threads_31329)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            skip_threads_31329 *= 2;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // last thread of block 'i' writes its result to offset 'i'
    {
        if ((local_tid_31300 - squot32(local_tid_31300, 32) * 32) == 31 && ltid_in_bounds_31328) {
            ((volatile __local float *) red_arr_mem_31321)[sext_i32_i64(squot32(local_tid_31300, 32))] = eta_p_18273;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
    {
        int32_t skip_threads_31332;
        
        // read input for in-block scan
        {
            if (squot32(local_tid_31300, 32) == 0 && ltid_in_bounds_31328) {
                eta_p_31326 = ((volatile __local float *) red_arr_mem_31321)[sext_i32_i64(local_tid_31300)];
                if ((local_tid_31300 - squot32(local_tid_31300, 32) * 32) == 0) {
                    eta_p_31325 = eta_p_31326;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_31332 = 1;
            while (slt32(skip_threads_31332, 32)) {
                bool thread_active_31333 = sle32(skip_threads_31332, local_tid_31300 - squot32(local_tid_31300, 32) * 32) && (squot32(local_tid_31300, 32) == 0 && ltid_in_bounds_31328);
                
                if (thread_active_31333) {
                    // read operands
                    {
                        eta_p_31325 = ((volatile __local float *) red_arr_mem_31321)[sext_i32_i64(local_tid_31300) - sext_i32_i64(skip_threads_31332)];
                    }
                }
                // perform operation
                {
                    bool inactive_31334 = slt64(srem64(sext_i32_i64(local_tid_31300 * 32 + 32 - 1), d_10677), sext_i32_i64(local_tid_31300 * 32 + 32 - 1) - sext_i32_i64((local_tid_31300 - skip_threads_31332) * 32 + 32 - 1));
                    
                    if (thread_active_31333 && inactive_31334) {
                        eta_p_31325 = eta_p_31326;
                    }
                    if (thread_active_31333) {
                        if (!inactive_31334) {
                            float defunc_0_op_res_31327 = eta_p_31325 + eta_p_31326;
                            
                            eta_p_31325 = defunc_0_op_res_31327;
                        }
                    }
                }
                if (sle32(wave_sizze_31302, skip_threads_31332)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (thread_active_31333) {
                    // write result
                    {
                        ((volatile __local float *) red_arr_mem_31321)[sext_i32_i64(local_tid_31300)] = eta_p_31325;
                        eta_p_31326 = eta_p_31325;
                    }
                }
                if (sle32(wave_sizze_31302, skip_threads_31332)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_31332 *= 2;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    no_carry_in_31335 = squot32(local_tid_31300, 32) == 0 || !ltid_in_bounds_31328;
    // carry-in for every block except the first
    {
        // read operands
        {
            if (!no_carry_in_31335) {
                eta_p_18274 = eta_p_18273;
                eta_p_18273 = ((__local float *) red_arr_mem_31321)[sext_i32_i64(squot32(local_tid_31300, 32)) - (int64_t) 1];
            }
        }
        // perform operation
        {
            bool inactive_31336 = slt64(srem64(sext_i32_i64(local_tid_31300), d_10677), sext_i32_i64(local_tid_31300) - sext_i32_i64(squot32(local_tid_31300, 32) * 32 - 1));
            
            if (!no_carry_in_31335) {
                if (inactive_31336) {
                    eta_p_18273 = eta_p_18274;
                }
            }
            if (!no_carry_in_31335) {
                if (!inactive_31336) {
                    float defunc_0_op_res_18275 = eta_p_18273 + eta_p_18274;
                    
                    eta_p_18273 = defunc_0_op_res_18275;
                }
            }
        }
        // write final result
        {
            if (!no_carry_in_31335) {
                ((__local float *) red_arr_mem_31321)[sext_i32_i64(local_tid_31300)] = eta_p_18273;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // restore correct values for first block
    {
        if (squot32(local_tid_31300, 32) == 0 && ltid_in_bounds_31328) {
            ((__local float *) red_arr_mem_31321)[sext_i32_i64(local_tid_31300)] = eta_p_18274;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    barrier(CLK_LOCAL_MEM_FENCE);
    // Save result of reduction.
    {
        int32_t num_chunks_31337 = sdiv_up32(sext_i64_i32(d_10677) * sext_i64_i32(d_10677), sext_i64_i32(computed_tblock_sizze_18232));
        
        for (int32_t chunk_i_31338 = 0; chunk_i_31338 < num_chunks_31337; chunk_i_31338++) {
            int32_t i_31339 = chunk_i_31338 * sext_i64_i32(computed_tblock_sizze_18232) + local_tid_31300;
            
            if (slt32(i_31339, sext_i64_i32(d_10677) * sext_i64_i32(d_10677))) {
                ((__local float *) color_30610)[sext_i32_i64(squot32(i_31339, sext_i64_i32(d_10677))) * d_10677 + sext_i32_i64(i_31339 - squot32(i_31339, sext_i64_i32(d_10677)) * sext_i64_i32(d_10677))] = ((__local float *) red_arr_mem_31321)[d_10677 - (int64_t) 1 + sext_i32_i64(squot32(i_31339, sext_i64_i32(d_10677))) * (d_10677 * d_10677) + sext_i32_i64(i_31339 - squot32(i_31339, sext_i64_i32(d_10677)) * sext_i64_i32(d_10677)) * d_10677];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    phys_tid_18285 = sext_i32_i64(local_tid_31300);
    gtid_18283 = sext_i32_i64(sext_i64_i32(ltid_pre_31304));
    gtid_18284 = sext_i32_i64(sext_i64_i32(ltid_pre_31305));
    if (slt64(gtid_18283, d_10677) && slt64(gtid_18284, d_10677)) {
        float defunc_0_f_res_18286;
        f16 f32_res_18287;
        
        defunc_0_f_res_18286 = ((__local float *) color_30610)[gtid_18283 * d_10677 + gtid_18284];
        f32_res_18287 = fpconv_f32_f16(defunc_0_f_res_18286);
        ((__local uint16_t *) color_30609)[gtid_18283 * d_10677 + gtid_18284] = futrts_to_bits16(f32_res_18287);
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    num_chunks_31340 = sdiv_up32(sext_i64_i32(d_10677) * sext_i64_i32(d_10677), sext_i64_i32(computed_tblock_sizze_18232));
    for (int32_t chunk_i_31341 = 0; chunk_i_31341 < num_chunks_31340; chunk_i_31341++) {
        int32_t i_31342 = chunk_i_31341 * sext_i64_i32(computed_tblock_sizze_18232) + local_tid_31300;
        
        if (slt32(i_31342, sext_i64_i32(d_10677) * sext_i64_i32(d_10677))) {
            ((__global uint16_t *) mem_28365)[gtid_18241 * (d_10677 * d_10677) + sext_i32_i64(squot32(i_31342, sext_i64_i32(d_10677))) * d_10677 + sext_i32_i64(i_31342 - squot32(i_31342, sext_i64_i32(d_10677)) * sext_i64_i32(d_10677))] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) color_30609)[sext_i32_i64(squot32(i_31342, sext_i64_i32(d_10677))) * d_10677 + sext_i32_i64(i_31342 - squot32(i_31342, sext_i64_i32(d_10677)) * sext_i64_i32(d_10677))]));
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
  error_5:
    return;
}
FUTHARK_KERNEL
void matmul_tile_kzisegmap_intrablock_18310(__global int *global_failure, int failure_is_an_option, __global int64_t *global_failure_args, int64_t md_10676, int64_t d_10677, int64_t m_16315, int64_t one_intra_par_min_18223, int64_t computed_tblock_sizze_18304, int64_t bytes_28342, int64_t bytes_28344, __global unsigned char *A_mem_28339, __global unsigned char *B_mem_28340, __global unsigned char *mem_28351)
{
    volatile __local unsigned char *red_arr_mem_31364_backing_2 = &shared_mem[0];
    const int64_t red_arr_mem_31364_backing_2_offset = 0 + ((int64_t) 4 * (d_10677 * d_10677) + srem64((int64_t) 8 - srem64((int64_t) 4 * (d_10677 * d_10677), (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_30612_backing_1 = &shared_mem[red_arr_mem_31364_backing_2_offset];
    const int64_t color_30612_backing_1_offset = red_arr_mem_31364_backing_2_offset + (bytes_28344 + srem64((int64_t) 8 - srem64(bytes_28344, (int64_t) 8), (int64_t) 8));
    volatile __local unsigned char *color_30611_backing_0 = &shared_mem[color_30612_backing_1_offset];
    const int64_t color_30611_backing_0_offset = color_30612_backing_1_offset + (bytes_28342 + srem64((int64_t) 8 - srem64(bytes_28342, (int64_t) 8), (int64_t) 8));
    volatile __local int local_failure;
    
    if (failure_is_an_option) {
        int failed = *global_failure >= 0;
        
        if (failed)
            return;
    }
    local_failure = 0;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t local_tid_31347;
    int32_t tblock_sizze_31350;
    int32_t wave_sizze_31349;
    int32_t block_id_31348;
    int32_t global_tid_31346;
    int64_t phys_tblock_id_18310;
    int64_t slice_31352;
    int64_t ltid_pre_31351;
    int64_t remnant_31353;
    int64_t slice_31356;
    int64_t slice_31357;
    int64_t ltid_pre_31354;
    int64_t remnant_31358;
    int64_t ltid_pre_31355;
    int64_t remnant_31359;
    int64_t slice_31360;
    int64_t slice_31361;
    int64_t gtid_18308;
    int64_t remnant_31362;
    int64_t gtid_18309;
    int64_t remnant_31363;
    __local unsigned char *color_30611;
    __local unsigned char *color_30612;
    int64_t index_primexp_26963;
    int64_t phys_tid_18321;
    int64_t gtid_18320;
    int64_t binop_x_26943;
    int64_t phys_tid_18332;
    __local unsigned char *red_arr_mem_31364;
    int64_t gtid_18330;
    int64_t gtid_18331;
    int64_t dims_flat_31366;
    float eta_p_18333;
    float eta_p_18334;
    float eta_p_31368;
    float eta_p_31369;
    bool ltid_in_bounds_31371;
    int32_t skip_threads_31372;
    bool no_carry_in_31378;
    int64_t phys_tid_18343;
    int64_t gtid_18342;
    int32_t num_chunks_31383;
    
    local_tid_31347 = get_local_id(0);
    tblock_sizze_31350 = get_local_size(0);
    wave_sizze_31349 = LOCKSTEP_WIDTH;
    block_id_31348 = get_tblock_id(0);
    global_tid_31346 = block_id_31348 * tblock_sizze_31350 + local_tid_31347;
    phys_tblock_id_18310 = sext_i32_i64(block_id_31348);
    slice_31352 = d_10677;
    ltid_pre_31351 = sext_i32_i64(local_tid_31347);
    remnant_31353 = sext_i32_i64(local_tid_31347) - ltid_pre_31351;
    slice_31356 = d_10677;
    slice_31357 = d_10677 * slice_31356;
    ltid_pre_31354 = squot64(sext_i32_i64(local_tid_31347), slice_31356);
    remnant_31358 = sext_i32_i64(local_tid_31347) - ltid_pre_31354 * slice_31356;
    ltid_pre_31355 = remnant_31358;
    remnant_31359 = remnant_31358 - ltid_pre_31355;
    slice_31360 = d_10677;
    slice_31361 = m_16315 * slice_31360;
    gtid_18308 = squot64(sext_i32_i64(block_id_31348), slice_31360);
    remnant_31362 = sext_i32_i64(block_id_31348) - gtid_18308 * slice_31360;
    gtid_18309 = remnant_31362;
    remnant_31363 = remnant_31362 - gtid_18309;
    color_30611 = (__local unsigned char *) color_30611_backing_0;
    color_30612 = (__local unsigned char *) color_30612_backing_1;
    index_primexp_26963 = mul64(d_10677, gtid_18308);
    phys_tid_18321 = sext_i32_i64(local_tid_31347);
    gtid_18320 = sext_i32_i64(sext_i64_i32(ltid_pre_31351));
    if (slt64(gtid_18320, d_10677)) {
        int64_t tmp_18323;
        bool x_18324;
        bool y_18325;
        bool bounds_check_18326;
        bool index_certs_18327;
        f16 lifted_lambda_res_18328;
        
        tmp_18323 = add64(gtid_18320, index_primexp_26963);
        x_18324 = sle64((int64_t) 0, tmp_18323);
        y_18325 = slt64(tmp_18323, md_10676);
        bounds_check_18326 = x_18324 && y_18325;
        if (!bounds_check_18326) {
            {
                if (atomic_cmpxchg_i32_global(global_failure, -1, 50) == -1) {
                    global_failure_args[0] = (int64_t) tmp_18323;
                    global_failure_args[1] = (int64_t) md_10676;
                    ;
                }
                local_failure = 1;
                goto error_0;
            }
        }
        lifted_lambda_res_18328 = futrts_from_bits16(((__global uint16_t *) A_mem_28339)[gtid_18309 * md_10676 + tmp_18323]);
        ((__local uint16_t *) color_30611)[gtid_18320] = futrts_to_bits16(lifted_lambda_res_18328);
    }
    
  error_0:
    barrier(CLK_LOCAL_MEM_FENCE);
    if (local_failure)
        return;
    barrier(CLK_LOCAL_MEM_FENCE);
    binop_x_26943 = one_intra_par_min_18223 * gtid_18308;
    phys_tid_18332 = sext_i32_i64(local_tid_31347);
    red_arr_mem_31364 = (__local unsigned char *) red_arr_mem_31364_backing_2;
    gtid_18330 = sext_i32_i64(sext_i64_i32(ltid_pre_31354));
    gtid_18331 = sext_i32_i64(sext_i64_i32(ltid_pre_31355));
    if (slt64(gtid_18330, d_10677) && slt64(gtid_18331, d_10677)) {
        f16 eta_p_18337;
        int64_t binop_y_26944;
        int64_t binop_x_26945;
        int64_t binop_x_26946;
        int64_t new_index_26947;
        int64_t binop_y_26959;
        int64_t new_index_26960;
        f16 eta_p_18338;
        f16 defunc_0_f_res_18339;
        float f16_res_18340;
        
        eta_p_18337 = futrts_from_bits16(((__local uint16_t *) color_30611)[gtid_18331]);
        binop_y_26944 = d_10677 * gtid_18331;
        binop_x_26945 = binop_x_26943 + binop_y_26944;
        binop_x_26946 = gtid_18330 + binop_x_26945;
        new_index_26947 = squot64(binop_x_26946, d_10677);
        binop_y_26959 = d_10677 * new_index_26947;
        new_index_26960 = binop_x_26946 - binop_y_26959;
        eta_p_18338 = futrts_from_bits16(((__global uint16_t *) B_mem_28340)[new_index_26947 * d_10677 + new_index_26960]);
        defunc_0_f_res_18339 = eta_p_18337 * eta_p_18338;
        f16_res_18340 = fpconv_f16_f32(defunc_0_f_res_18339);
        ((__local float *) red_arr_mem_31364)[gtid_18330 * d_10677 + gtid_18331] = f16_res_18340;
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    dims_flat_31366 = d_10677 * d_10677;
    ltid_in_bounds_31371 = slt64(sext_i32_i64(local_tid_31347), d_10677 * d_10677);
    // read input for in-block scan
    {
        if (ltid_in_bounds_31371) {
            eta_p_18334 = ((volatile __local float *) red_arr_mem_31364)[sext_i32_i64(local_tid_31347)];
            if ((local_tid_31347 - squot32(local_tid_31347, 32) * 32) == 0) {
                eta_p_18333 = eta_p_18334;
            }
        }
    }
    // in-block scan (hopefully no barriers needed)
    {
        skip_threads_31372 = 1;
        while (slt32(skip_threads_31372, 32)) {
            bool thread_active_31373 = sle32(skip_threads_31372, local_tid_31347 - squot32(local_tid_31347, 32) * 32) && ltid_in_bounds_31371;
            
            if (thread_active_31373) {
                // read operands
                {
                    eta_p_18333 = ((volatile __local float *) red_arr_mem_31364)[sext_i32_i64(local_tid_31347) - sext_i32_i64(skip_threads_31372)];
                }
            }
            // perform operation
            {
                bool inactive_31374 = slt64(srem64(sext_i32_i64(local_tid_31347), d_10677), sext_i32_i64(local_tid_31347) - sext_i32_i64(local_tid_31347 - skip_threads_31372));
                
                if (thread_active_31373 && inactive_31374) {
                    eta_p_18333 = eta_p_18334;
                }
                if (thread_active_31373) {
                    if (!inactive_31374) {
                        float defunc_0_op_res_18335 = eta_p_18333 + eta_p_18334;
                        
                        eta_p_18333 = defunc_0_op_res_18335;
                    }
                }
            }
            if (sle32(wave_sizze_31349, skip_threads_31372)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            if (thread_active_31373) {
                // write result
                {
                    ((volatile __local float *) red_arr_mem_31364)[sext_i32_i64(local_tid_31347)] = eta_p_18333;
                    eta_p_18334 = eta_p_18333;
                }
            }
            if (sle32(wave_sizze_31349, skip_threads_31372)) {
                barrier(CLK_LOCAL_MEM_FENCE);
            }
            skip_threads_31372 *= 2;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // last thread of block 'i' writes its result to offset 'i'
    {
        if ((local_tid_31347 - squot32(local_tid_31347, 32) * 32) == 31 && ltid_in_bounds_31371) {
            ((volatile __local float *) red_arr_mem_31364)[sext_i32_i64(squot32(local_tid_31347, 32))] = eta_p_18333;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
    {
        int32_t skip_threads_31375;
        
        // read input for in-block scan
        {
            if (squot32(local_tid_31347, 32) == 0 && ltid_in_bounds_31371) {
                eta_p_31369 = ((volatile __local float *) red_arr_mem_31364)[sext_i32_i64(local_tid_31347)];
                if ((local_tid_31347 - squot32(local_tid_31347, 32) * 32) == 0) {
                    eta_p_31368 = eta_p_31369;
                }
            }
        }
        // in-block scan (hopefully no barriers needed)
        {
            skip_threads_31375 = 1;
            while (slt32(skip_threads_31375, 32)) {
                bool thread_active_31376 = sle32(skip_threads_31375, local_tid_31347 - squot32(local_tid_31347, 32) * 32) && (squot32(local_tid_31347, 32) == 0 && ltid_in_bounds_31371);
                
                if (thread_active_31376) {
                    // read operands
                    {
                        eta_p_31368 = ((volatile __local float *) red_arr_mem_31364)[sext_i32_i64(local_tid_31347) - sext_i32_i64(skip_threads_31375)];
                    }
                }
                // perform operation
                {
                    bool inactive_31377 = slt64(srem64(sext_i32_i64(local_tid_31347 * 32 + 32 - 1), d_10677), sext_i32_i64(local_tid_31347 * 32 + 32 - 1) - sext_i32_i64((local_tid_31347 - skip_threads_31375) * 32 + 32 - 1));
                    
                    if (thread_active_31376 && inactive_31377) {
                        eta_p_31368 = eta_p_31369;
                    }
                    if (thread_active_31376) {
                        if (!inactive_31377) {
                            float defunc_0_op_res_31370 = eta_p_31368 + eta_p_31369;
                            
                            eta_p_31368 = defunc_0_op_res_31370;
                        }
                    }
                }
                if (sle32(wave_sizze_31349, skip_threads_31375)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                if (thread_active_31376) {
                    // write result
                    {
                        ((volatile __local float *) red_arr_mem_31364)[sext_i32_i64(local_tid_31347)] = eta_p_31368;
                        eta_p_31369 = eta_p_31368;
                    }
                }
                if (sle32(wave_sizze_31349, skip_threads_31375)) {
                    barrier(CLK_LOCAL_MEM_FENCE);
                }
                skip_threads_31375 *= 2;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    no_carry_in_31378 = squot32(local_tid_31347, 32) == 0 || !ltid_in_bounds_31371;
    // carry-in for every block except the first
    {
        // read operands
        {
            if (!no_carry_in_31378) {
                eta_p_18334 = eta_p_18333;
                eta_p_18333 = ((__local float *) red_arr_mem_31364)[sext_i32_i64(squot32(local_tid_31347, 32)) - (int64_t) 1];
            }
        }
        // perform operation
        {
            bool inactive_31379 = slt64(srem64(sext_i32_i64(local_tid_31347), d_10677), sext_i32_i64(local_tid_31347) - sext_i32_i64(squot32(local_tid_31347, 32) * 32 - 1));
            
            if (!no_carry_in_31378) {
                if (inactive_31379) {
                    eta_p_18333 = eta_p_18334;
                }
            }
            if (!no_carry_in_31378) {
                if (!inactive_31379) {
                    float defunc_0_op_res_18335 = eta_p_18333 + eta_p_18334;
                    
                    eta_p_18333 = defunc_0_op_res_18335;
                }
            }
        }
        // write final result
        {
            if (!no_carry_in_31378) {
                ((__local float *) red_arr_mem_31364)[sext_i32_i64(local_tid_31347)] = eta_p_18333;
            }
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    // restore correct values for first block
    {
        if (squot32(local_tid_31347, 32) == 0 && ltid_in_bounds_31371) {
            ((__local float *) red_arr_mem_31364)[sext_i32_i64(local_tid_31347)] = eta_p_18334;
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    barrier(CLK_LOCAL_MEM_FENCE);
    // Save result of reduction.
    {
        int32_t num_chunks_31380 = sdiv_up32(sext_i64_i32(d_10677), sext_i64_i32(computed_tblock_sizze_18304));
        
        for (int32_t chunk_i_31381 = 0; chunk_i_31381 < num_chunks_31380; chunk_i_31381++) {
            int32_t i_31382 = chunk_i_31381 * sext_i64_i32(computed_tblock_sizze_18304) + local_tid_31347;
            
            if (slt32(i_31382, sext_i64_i32(d_10677))) {
                ((__local float *) color_30612)[sext_i32_i64(i_31382)] = ((__local float *) red_arr_mem_31364)[d_10677 - (int64_t) 1 + sext_i32_i64(i_31382) * d_10677];
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    phys_tid_18343 = sext_i32_i64(local_tid_31347);
    gtid_18342 = sext_i32_i64(sext_i64_i32(ltid_pre_31351));
    if (slt64(gtid_18342, d_10677)) {
        float defunc_0_f_res_18344;
        f16 f32_res_18345;
        
        defunc_0_f_res_18344 = ((__local float *) color_30612)[gtid_18342];
        f32_res_18345 = fpconv_f32_f16(defunc_0_f_res_18344);
        ((__local uint16_t *) color_30611)[gtid_18342] = futrts_to_bits16(f32_res_18345);
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    num_chunks_31383 = sdiv_up32(sext_i64_i32(d_10677), sext_i64_i32(computed_tblock_sizze_18304));
    for (int32_t chunk_i_31384 = 0; chunk_i_31384 < num_chunks_31383; chunk_i_31384++) {
        int32_t i_31385 = chunk_i_31384 * sext_i64_i32(computed_tblock_sizze_18304) + local_tid_31347;
        
        if (slt32(i_31385, sext_i64_i32(d_10677))) {
            ((__global uint16_t *) mem_28351)[gtid_18308 * (d_10677 * d_10677) + gtid_18309 * d_10677 + sext_i32_i64(i_31385)] = futrts_to_bits16(futrts_from_bits16(((__local uint16_t *) color_30611)[sext_i32_i64(i_31385)]));
        }
    }
    barrier(CLK_LOCAL_MEM_FENCE);
    
  error_5:
    return;
}
FUTHARK_KERNEL_SIZED(matmul_tile_kzisegred_large_18380_dim1, 1, 1)
void matmul_tile_kzisegred_large_18380(__global int *global_failure, int64_t d_10677, int64_t m_16315, int64_t num_tblocks_18374, int64_t blocks_per_segment_31430, int64_t q_31431, int64_t num_virtblocks_31432, int64_t threads_per_segment_31433, __global unsigned char *mem_28386, __global unsigned char *mem_28390, __global unsigned char *segred_tmp_mem_31434, __global unsigned char *counters_mem_31436)
{
    #define segred_tblock_sizze_18373 (matmul_tile_kzisegred_large_18380zisegred_tblock_sizze_18373)
    #define chunk_sizze_31399 (matmul_tile_kzisegred_large_18380zichunk_sizze_31399)
    
    volatile __local unsigned char *sync_arr_mem_31445_backing_1 = &shared_mem[0];
    const int64_t sync_arr_mem_31445_backing_1_offset = 0 + 8;
    volatile __local unsigned char *red_arr_f16_mem_31443_backing_0 = &shared_mem[sync_arr_mem_31445_backing_1_offset];
    const int64_t red_arr_f16_mem_31443_backing_0_offset = sync_arr_mem_31445_backing_1_offset + ((int64_t) 2 * segred_tblock_sizze_18373 + srem64((int64_t) 8 - srem64((int64_t) 2 * segred_tblock_sizze_18373, (int64_t) 8), (int64_t) 8));
    
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_31439;
    int32_t tblock_sizze_31442;
    int32_t wave_sizze_31441;
    int32_t block_id_31440;
    int32_t global_tid_31438;
    int64_t phys_tid_18380;
    __local unsigned char *red_arr_f16_mem_31443;
    __local unsigned char *sync_arr_mem_31445;
    int32_t phys_tblock_id_31447;
    int32_t iterations_31448;
    
    local_tid_31439 = get_local_id(0);
    tblock_sizze_31442 = get_local_size(0);
    wave_sizze_31441 = LOCKSTEP_WIDTH;
    block_id_31440 = get_tblock_id(0);
    global_tid_31438 = block_id_31440 * tblock_sizze_31442 + local_tid_31439;
    phys_tid_18380 = sext_i32_i64(global_tid_31438);
    red_arr_f16_mem_31443 = (__local unsigned char *) red_arr_f16_mem_31443_backing_0;
    sync_arr_mem_31445 = (__local unsigned char *) sync_arr_mem_31445_backing_1;
    phys_tblock_id_31447 = get_tblock_id(0);
    iterations_31448 = sdiv_up32(sext_i64_i32(num_virtblocks_31432) - phys_tblock_id_31447, sext_i64_i32(num_tblocks_18374));
    for (int32_t i_31449 = 0; i_31449 < iterations_31448; i_31449++) {
        int32_t virt_tblock_id_31450;
        int64_t flat_segment_id_31451;
        int64_t global_tid_31452;
        int64_t slice_31453;
        int64_t slice_31454;
        int64_t gtid_18377;
        int64_t remnant_31455;
        int64_t gtid_18378;
        int64_t remnant_31456;
        int64_t gtid_18379;
        f16 eta_p_block_res_acc_31457;
        f16 eta_p_18381;
        f16 eta_p_18382;
        int64_t tblock_id_in_segment_31461;
        int64_t block_base_offset_31462;
        int32_t offset_31465;
        int32_t skip_waves_31466;
        f16 eta_p_31458;
        f16 eta_p_31459;
        
        virt_tblock_id_31450 = phys_tblock_id_31447 + i_31449 * sext_i64_i32(num_tblocks_18374);
        flat_segment_id_31451 = squot64(sext_i32_i64(virt_tblock_id_31450), blocks_per_segment_31430);
        global_tid_31452 = srem64(sext_i32_i64(virt_tblock_id_31450) * segred_tblock_sizze_18373 + sext_i32_i64(local_tid_31439), threads_per_segment_31433);
        slice_31453 = d_10677;
        slice_31454 = d_10677 * slice_31453;
        gtid_18377 = squot64(flat_segment_id_31451, slice_31453);
        remnant_31455 = flat_segment_id_31451 - gtid_18377 * slice_31453;
        gtid_18378 = remnant_31455;
        remnant_31456 = remnant_31455 - gtid_18378;
        // ne-initialise the outer (per-block) accumulator(s)
        {
            eta_p_block_res_acc_31457 = (f16) 0.0F;
        }
        tblock_id_in_segment_31461 = squot64(global_tid_31452, segred_tblock_sizze_18373);
        block_base_offset_31462 = tblock_id_in_segment_31461 * q_31431 * segred_tblock_sizze_18373;
        for (int64_t i_31463 = 0; i_31463 < q_31431; i_31463++) {
            int64_t block_offset_31464 = block_base_offset_31462 + i_31463 * segred_tblock_sizze_18373;
            
            gtid_18379 = global_tid_31452 + threads_per_segment_31433 * i_31463;
            if (slt64(gtid_18379, m_16315)) {
                // apply map function(s)
                {
                    // apply map function
                    {
                        f16 x_18386 = futrts_from_bits16(((__global uint16_t *) mem_28386)[gtid_18379 + gtid_18377 * (m_16315 * d_10677) + gtid_18378 * m_16315]);
                        
                        // load accumulator(s)
                        {
                            eta_p_18381 = eta_p_block_res_acc_31457;
                        }
                        // load next value(s)
                        {
                            eta_p_18382 = x_18386;
                        }
                        // apply reduction operator(s)
                        {
                            f16 defunc_0_f_res_18383 = eta_p_18381 + eta_p_18382;
                            
                            // store in accumulator(s)
                            {
                                eta_p_block_res_acc_31457 = defunc_0_f_res_18383;
                            }
                        }
                    }
                }
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // store accs. prims go in lmem; non-prims in params (in global mem)
        {
            ((__local uint16_t *) red_arr_f16_mem_31443)[sext_i32_i64(local_tid_31439)] = futrts_to_bits16(eta_p_block_res_acc_31457);
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        skip_waves_31466 = 1;
        offset_31465 = 0;
        // participating threads read initial accumulator
        {
            if (slt32(local_tid_31439, sext_i64_i32(segred_tblock_sizze_18373))) {
                eta_p_31458 = futrts_from_bits16(((__local uint16_t *) red_arr_f16_mem_31443)[sext_i32_i64(local_tid_31439 + offset_31465)]);
            }
        }
        offset_31465 = 1;
        while (slt32(offset_31465, wave_sizze_31441)) {
            if (slt32(local_tid_31439 + offset_31465, sext_i64_i32(segred_tblock_sizze_18373)) && ((local_tid_31439 - squot32(local_tid_31439, wave_sizze_31441) * wave_sizze_31441) & (2 * offset_31465 - 1)) == 0) {
                // read array element
                {
                    eta_p_31459 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_f16_mem_31443)[sext_i32_i64(local_tid_31439 + offset_31465)]);
                }
                // apply reduction operation
                {
                    f16 defunc_0_f_res_31460 = eta_p_31458 + eta_p_31459;
                    
                    eta_p_31458 = defunc_0_f_res_31460;
                }
                // write result of operation
                {
                    ((volatile __local uint16_t *) red_arr_f16_mem_31443)[sext_i32_i64(local_tid_31439)] = futrts_to_bits16(eta_p_31458);
                }
            }
            offset_31465 *= 2;
        }
        while (slt32(skip_waves_31466, squot32(sext_i64_i32(segred_tblock_sizze_18373) + wave_sizze_31441 - 1, wave_sizze_31441))) {
            barrier(CLK_LOCAL_MEM_FENCE);
            offset_31465 = skip_waves_31466 * wave_sizze_31441;
            if (slt32(local_tid_31439 + offset_31465, sext_i64_i32(segred_tblock_sizze_18373)) && ((local_tid_31439 - squot32(local_tid_31439, wave_sizze_31441) * wave_sizze_31441) == 0 && (squot32(local_tid_31439, wave_sizze_31441) & (2 * skip_waves_31466 - 1)) == 0)) {
                // read array element
                {
                    eta_p_31459 = futrts_from_bits16(((__local uint16_t *) red_arr_f16_mem_31443)[sext_i32_i64(local_tid_31439 + offset_31465)]);
                }
                // apply reduction operation
                {
                    f16 defunc_0_f_res_31460 = eta_p_31458 + eta_p_31459;
                    
                    eta_p_31458 = defunc_0_f_res_31460;
                }
                // write result of operation
                {
                    ((__local uint16_t *) red_arr_f16_mem_31443)[sext_i32_i64(local_tid_31439)] = futrts_to_bits16(eta_p_31458);
                }
            }
            skip_waves_31466 *= 2;
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_LOCAL_MEM_FENCE);
        // thread 0 updates per-block acc(s); rest reset to ne
        {
            if (sext_i32_i64(local_tid_31439) == (int64_t) 0) {
                eta_p_block_res_acc_31457 = eta_p_31458;
            } else {
                eta_p_block_res_acc_31457 = (f16) 0.0F;
            }
        }
        if (blocks_per_segment_31430 == (int64_t) 1) {
            // first thread in block saves final result to memory
            {
                if (local_tid_31439 == 0) {
                    ((__global uint16_t *) mem_28390)[gtid_18377 * d_10677 + gtid_18378] = futrts_to_bits16(eta_p_block_res_acc_31457);
                }
            }
        } else {
            int32_t old_counter_31467;
            bool is_last_block_31468;
            
            // first thread in block saves block result to global memory
            {
                if (local_tid_31439 == 0) {
                    ((__global uint16_t *) segred_tmp_mem_31434)[sext_i32_i64(virt_tblock_id_31450)] = futrts_to_bits16(eta_p_block_res_acc_31457);
                    mem_fence_global();
                    old_counter_31467 = atomic_add_i32_global(&((volatile __global int *) counters_mem_31436)[srem64(flat_segment_id_31451, (int64_t) 20480)], (int) 1);
                    ((__local bool *) sync_arr_mem_31445)[(int64_t) 0] = old_counter_31467 == sext_i64_i32(blocks_per_segment_31430 - (int64_t) 1);
                }
            }
            barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
            is_last_block_31468 = ((__local bool *) sync_arr_mem_31445)[(int64_t) 0];
            if (is_last_block_31468) {
                if (local_tid_31439 == 0) {
                    old_counter_31467 = atomic_add_i32_global(&((volatile __global int *) counters_mem_31436)[srem64(flat_segment_id_31451, (int64_t) 20480)], (int) sext_i64_i32((int64_t) 0 - blocks_per_segment_31430));
                }
                // read in the per-block-results
                {
                    int64_t read_per_thread_31469 = sdiv_up64(blocks_per_segment_31430, segred_tblock_sizze_18373);
                    
                    eta_p_18381 = (f16) 0.0F;
                    for (int64_t i_31470 = 0; i_31470 < read_per_thread_31469; i_31470++) {
                        int64_t block_res_id_31471 = sext_i32_i64(local_tid_31439) * read_per_thread_31469 + i_31470;
                        int64_t index_of_block_res_31472 = flat_segment_id_31451 * blocks_per_segment_31430 + block_res_id_31471;
                        
                        if (slt64(block_res_id_31471, blocks_per_segment_31430)) {
                            eta_p_18382 = futrts_from_bits16(((__global uint16_t *) segred_tmp_mem_31434)[index_of_block_res_31472]);
                            
                            f16 defunc_0_f_res_18383 = eta_p_18381 + eta_p_18382;
                            
                            eta_p_18381 = defunc_0_f_res_18383;
                        }
                    }
                }
                ((__local uint16_t *) red_arr_f16_mem_31443)[sext_i32_i64(local_tid_31439)] = futrts_to_bits16(eta_p_18381);
                barrier(CLK_LOCAL_MEM_FENCE);
                // reduce the per-block results
                {
                    int32_t offset_31473;
                    int32_t skip_waves_31474 = 1;
                    f16 eta_p_31458;
                    f16 eta_p_31459;
                    
                    offset_31473 = 0;
                    // participating threads read initial accumulator
                    {
                        if (slt32(local_tid_31439, sext_i64_i32(segred_tblock_sizze_18373))) {
                            eta_p_31458 = futrts_from_bits16(((__local uint16_t *) red_arr_f16_mem_31443)[sext_i32_i64(local_tid_31439 + offset_31473)]);
                        }
                    }
                    offset_31473 = 1;
                    while (slt32(offset_31473, wave_sizze_31441)) {
                        if (slt32(local_tid_31439 + offset_31473, sext_i64_i32(segred_tblock_sizze_18373)) && ((local_tid_31439 - squot32(local_tid_31439, wave_sizze_31441) * wave_sizze_31441) & (2 * offset_31473 - 1)) == 0) {
                            // read array element
                            {
                                eta_p_31459 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_f16_mem_31443)[sext_i32_i64(local_tid_31439 + offset_31473)]);
                            }
                            // apply reduction operation
                            {
                                f16 defunc_0_f_res_31460 = eta_p_31458 + eta_p_31459;
                                
                                eta_p_31458 = defunc_0_f_res_31460;
                            }
                            // write result of operation
                            {
                                ((volatile __local uint16_t *) red_arr_f16_mem_31443)[sext_i32_i64(local_tid_31439)] = futrts_to_bits16(eta_p_31458);
                            }
                        }
                        offset_31473 *= 2;
                    }
                    while (slt32(skip_waves_31474, squot32(sext_i64_i32(segred_tblock_sizze_18373) + wave_sizze_31441 - 1, wave_sizze_31441))) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                        offset_31473 = skip_waves_31474 * wave_sizze_31441;
                        if (slt32(local_tid_31439 + offset_31473, sext_i64_i32(segred_tblock_sizze_18373)) && ((local_tid_31439 - squot32(local_tid_31439, wave_sizze_31441) * wave_sizze_31441) == 0 && (squot32(local_tid_31439, wave_sizze_31441) & (2 * skip_waves_31474 - 1)) == 0)) {
                            // read array element
                            {
                                eta_p_31459 = futrts_from_bits16(((__local uint16_t *) red_arr_f16_mem_31443)[sext_i32_i64(local_tid_31439 + offset_31473)]);
                            }
                            // apply reduction operation
                            {
                                f16 defunc_0_f_res_31460 = eta_p_31458 + eta_p_31459;
                                
                                eta_p_31458 = defunc_0_f_res_31460;
                            }
                            // write result of operation
                            {
                                ((__local uint16_t *) red_arr_f16_mem_31443)[sext_i32_i64(local_tid_31439)] = futrts_to_bits16(eta_p_31458);
                            }
                        }
                        skip_waves_31474 *= 2;
                    }
                    barrier(CLK_LOCAL_MEM_FENCE);
                    // and back to memory with the final result
                    {
                        if (local_tid_31439 == 0) {
                            ((__global uint16_t *) mem_28390)[gtid_18377 * d_10677 + gtid_18378] = futrts_to_bits16(eta_p_31458);
                        }
                    }
                }
            }
        }
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_6:
    return;
    #undef segred_tblock_sizze_18373
    #undef chunk_sizze_31399
}
FUTHARK_KERNEL_SIZED(matmul_tile_kzisegred_nonseg_17802_dim1, 1, 1)
void matmul_tile_kzisegred_nonseg_17802(__global int *global_failure, int failure_is_an_option, __global int64_t *global_failure_args, int64_t md_10676, int64_t d_10677, int64_t m_16315, int64_t num_tblocks_17797, int64_t one_intra_par_min_18223, int64_t num_threads_30710, int64_t ctx_30717, int64_t num_threads_31252, __global unsigned char *A_mem_28339, __global unsigned char *B_mem_28340, __global unsigned char *mem_28426, __global unsigned char *color_30607, __global unsigned char *color_30608, __global unsigned char *counters_mem_31228, __global unsigned char *segred_tmp_mem_31250)
{
    #define segred_tblock_sizze_17796 (matmul_tile_kzisegred_nonseg_17802zisegred_tblock_sizze_17796)
    #define chunk_sizze_31227 (matmul_tile_kzisegred_nonseg_17802zichunk_sizze_31227)
    
    volatile __local unsigned char *sync_arr_mem_31260_backing_1 = &shared_mem[0];
    const int64_t sync_arr_mem_31260_backing_1_offset = 0 + 8;
    volatile __local unsigned char *red_arr_f16_mem_31258_backing_0 = &shared_mem[sync_arr_mem_31260_backing_1_offset];
    const int64_t red_arr_f16_mem_31258_backing_0_offset = sync_arr_mem_31260_backing_1_offset + ((int64_t) 2 * segred_tblock_sizze_17796 + srem64((int64_t) 8 - srem64((int64_t) 2 * segred_tblock_sizze_17796, (int64_t) 8), (int64_t) 8));
    volatile __local int local_failure;
    
    if (failure_is_an_option) {
        int failed = *global_failure >= 0;
        
        if (failed)
            return;
    }
    local_failure = 0;
    barrier(CLK_LOCAL_MEM_FENCE);
    
    int32_t local_tid_31254;
    int32_t tblock_sizze_31257;
    int32_t wave_sizze_31256;
    int32_t block_id_31255;
    int32_t global_tid_31253;
    int64_t phys_tid_17802;
    __local unsigned char *red_arr_f16_mem_31258;
    __local unsigned char *sync_arr_mem_31260;
    int64_t dummy_17800;
    int64_t gtid_17801;
    int64_t q_31262;
    f16 eta_p_17803;
    f16 eta_p_17804;
    int64_t tblock_id_in_segment_31268;
    int64_t block_base_offset_31269;
    int32_t old_counter_31283;
    bool is_last_block_31287;
    
    local_tid_31254 = get_local_id(0);
    tblock_sizze_31257 = get_local_size(0);
    wave_sizze_31256 = LOCKSTEP_WIDTH;
    block_id_31255 = get_tblock_id(0);
    global_tid_31253 = block_id_31255 * tblock_sizze_31257 + local_tid_31254;
    phys_tid_17802 = sext_i32_i64(global_tid_31253);
    red_arr_f16_mem_31258 = (__local unsigned char *) red_arr_f16_mem_31258_backing_0;
    sync_arr_mem_31260 = (__local unsigned char *) sync_arr_mem_31260_backing_1;
    dummy_17800 = (int64_t) 0;
    gtid_17801 = (int64_t) 0;
    q_31262 = sdiv_up64(m_16315, sext_i32_i64(sext_i64_i32(segred_tblock_sizze_17796 * num_tblocks_17797)) * chunk_sizze_31227);
    // ne-initialise the outer (per-block) accumulator(s)
    {
        for (int64_t nest_i_31263 = 0; nest_i_31263 < d_10677; nest_i_31263++) {
            for (int64_t nest_i_31264 = 0; nest_i_31264 < d_10677; nest_i_31264++) {
                ((__global uint16_t *) segred_tmp_mem_31250)[sext_i32_i64(local_tid_31254) + sext_i32_i64(block_id_31255) * (segred_tblock_sizze_17796 * d_10677 * d_10677) + nest_i_31263 * (segred_tblock_sizze_17796 * d_10677) + nest_i_31264 * segred_tblock_sizze_17796] = futrts_to_bits16((f16) 0.0F);
            }
        }
    }
    tblock_id_in_segment_31268 = squot64(phys_tid_17802, segred_tblock_sizze_17796);
    block_base_offset_31269 = tblock_id_in_segment_31268 * q_31262 * segred_tblock_sizze_17796;
    for (int64_t i_31270 = 0; i_31270 < q_31262; i_31270++) {
        int64_t block_offset_31271 = block_base_offset_31269 + i_31270 * segred_tblock_sizze_17796;
        
        gtid_17801 = phys_tid_17802 + num_threads_31252 * i_31270;
        if (slt64(gtid_17801, m_16315)) {
            // apply map function(s)
            {
                // apply map function
                {
                    int64_t zp_rhs_17808 = mul64(d_10677, gtid_17801);
                    int64_t binop_x_28123 = gtid_17801 * one_intra_par_min_18223;
                    
                    for (int64_t i_27828 = 0; i_27828 < d_10677; i_27828++) {
                        for (int64_t i_27832 = 0; i_27832 < d_10677; i_27832++) {
                            int64_t tmp_17817 = add64(zp_rhs_17808, i_27832);
                            bool x_17818 = sle64((int64_t) 0, tmp_17817);
                            bool y_17819 = slt64(tmp_17817, md_10676);
                            bool bounds_check_17820 = x_17818 && y_17819;
                            bool index_certs_17821;
                            
                            if (!bounds_check_17820) {
                                {
                                    if (atomic_cmpxchg_i32_global(global_failure, -1, 48) == -1) {
                                        global_failure_args[0] = (int64_t) tmp_17817;
                                        global_failure_args[1] = (int64_t) md_10676;
                                        ;
                                    }
                                    local_failure = 1;
                                    goto error_0;
                                }
                            }
                            for (int64_t i_0 = 0; i_0 < (int64_t) 1; i_0++) {
                                ((__global uint16_t *) color_30607)[phys_tid_17802 + num_threads_30710 * i_27832 + i_0 * num_threads_30710] = futrts_to_bits16(futrts_from_bits16(((__global uint16_t *) A_mem_28339)[i_27828 * md_10676 + tmp_17817 + i_0]));
                            }
                        }
                        
                        int64_t binop_y_30727 = d_10677 * i_27828;
                        int64_t binop_y_30728 = num_threads_30710 * binop_y_30727;
                        int64_t ctx_30729 = phys_tid_17802 + binop_y_30728;
                        
                        for (int64_t i_27836 = 0; i_27836 < d_10677; i_27836++) {
                            float defunc_0_f_res_17825;
                            float redout_27838 = 0.0F;
                            
                            for (int64_t i_27839 = 0; i_27839 < d_10677; i_27839++) {
                                f16 eta_p_17829 = futrts_from_bits16(((__global uint16_t *) color_30607)[phys_tid_17802 + i_27839 * num_threads_30710]);
                                int64_t binop_y_28124 = d_10677 * i_27839;
                                int64_t binop_x_28125 = binop_x_28123 + binop_y_28124;
                                int64_t binop_x_28126 = i_27836 + binop_x_28125;
                                int64_t new_index_28127 = squot64(binop_x_28126, d_10677);
                                int64_t binop_y_28139 = d_10677 * new_index_28127;
                                int64_t new_index_28140 = binop_x_28126 - binop_y_28139;
                                f16 eta_p_17830 = futrts_from_bits16(((__global uint16_t *) B_mem_28340)[new_index_28127 * d_10677 + new_index_28140]);
                                f16 defunc_0_f_res_17831 = eta_p_17829 * eta_p_17830;
                                float f16_res_17832 = fpconv_f16_f32(defunc_0_f_res_17831);
                                float defunc_0_op_res_17828 = f16_res_17832 + redout_27838;
                                float redout_tmp_31275 = defunc_0_op_res_17828;
                                
                                redout_27838 = redout_tmp_31275;
                            }
                            defunc_0_f_res_17825 = redout_27838;
                            
                            f16 f32_res_17833 = fpconv_f32_f16(defunc_0_f_res_17825);
                            
                            ((__global uint16_t *) color_30608)[ctx_30729 + i_27836 * num_threads_30710] = futrts_to_bits16(f32_res_17833);
                        }
                        if (!((phys_tid_17802 + i_27828 * ctx_30717) == ctx_30729)) {
                            for (int64_t i_0 = 0; i_0 < d_10677; i_0++) {
                                ((__global uint16_t *) color_30608)[phys_tid_17802 + i_27828 * ctx_30717 + i_0 * num_threads_30710] = futrts_to_bits16(futrts_from_bits16(((__global uint16_t *) color_30608)[ctx_30729 + i_0 * num_threads_30710]));
                            }
                        }
                    }
                    for (int64_t nest_i_31276 = 0; nest_i_31276 < d_10677; nest_i_31276++) {
                        for (int64_t nest_i_31277 = 0; nest_i_31277 < d_10677; nest_i_31277++) {
                            // load accumulator(s)
                            {
                                eta_p_17803 = futrts_from_bits16(((__global uint16_t *) segred_tmp_mem_31250)[sext_i32_i64(local_tid_31254) + sext_i32_i64(block_id_31255) * (segred_tblock_sizze_17796 * d_10677 * d_10677) + nest_i_31276 * (segred_tblock_sizze_17796 * d_10677) + nest_i_31277 * segred_tblock_sizze_17796]);
                            }
                            // load next value(s)
                            {
                                eta_p_17804 = futrts_from_bits16(((__global uint16_t *) color_30608)[phys_tid_17802 + (nest_i_31276 * ctx_30717 + nest_i_31277 * num_threads_30710)]);
                            }
                            // apply reduction operator(s)
                            {
                                f16 defunc_0_f_res_17805 = eta_p_17803 + eta_p_17804;
                                
                                // store in accumulator(s)
                                {
                                    ((__global uint16_t *) segred_tmp_mem_31250)[sext_i32_i64(local_tid_31254) + sext_i32_i64(block_id_31255) * (segred_tblock_sizze_17796 * d_10677 * d_10677) + nest_i_31276 * (segred_tblock_sizze_17796 * d_10677) + nest_i_31277 * segred_tblock_sizze_17796] = futrts_to_bits16(defunc_0_f_res_17805);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    
  error_0:
    barrier(CLK_LOCAL_MEM_FENCE);
    if (local_failure)
        return;
    barrier(CLK_LOCAL_MEM_FENCE);
    for (int64_t nest_i_31278 = 0; nest_i_31278 < d_10677; nest_i_31278++) {
        for (int64_t nest_i_31279 = 0; nest_i_31279 < d_10677; nest_i_31279++) {
            int32_t offset_31281;
            int32_t skip_waves_31282;
            f16 eta_p_31265;
            f16 eta_p_31266;
            
            // store accs. prims go in lmem; non-prims in params (in global mem)
            {
                f16 tmp_31280 = futrts_from_bits16(((__global uint16_t *) segred_tmp_mem_31250)[sext_i32_i64(local_tid_31254) + sext_i32_i64(block_id_31255) * (segred_tblock_sizze_17796 * d_10677 * d_10677) + nest_i_31278 * (segred_tblock_sizze_17796 * d_10677) + nest_i_31279 * segred_tblock_sizze_17796]);
                
                ((__local uint16_t *) red_arr_f16_mem_31258)[sext_i32_i64(local_tid_31254)] = futrts_to_bits16(tmp_31280);
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            skip_waves_31282 = 1;
            offset_31281 = 0;
            // participating threads read initial accumulator
            {
                if (slt32(local_tid_31254, sext_i64_i32(segred_tblock_sizze_17796))) {
                    eta_p_31265 = futrts_from_bits16(((__local uint16_t *) red_arr_f16_mem_31258)[sext_i32_i64(local_tid_31254 + offset_31281)]);
                }
            }
            offset_31281 = 1;
            while (slt32(offset_31281, wave_sizze_31256)) {
                if (slt32(local_tid_31254 + offset_31281, sext_i64_i32(segred_tblock_sizze_17796)) && ((local_tid_31254 - squot32(local_tid_31254, wave_sizze_31256) * wave_sizze_31256) & (2 * offset_31281 - 1)) == 0) {
                    // read array element
                    {
                        eta_p_31266 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_f16_mem_31258)[sext_i32_i64(local_tid_31254 + offset_31281)]);
                    }
                    // apply reduction operation
                    {
                        f16 defunc_0_f_res_31267 = eta_p_31265 + eta_p_31266;
                        
                        eta_p_31265 = defunc_0_f_res_31267;
                    }
                    // write result of operation
                    {
                        ((volatile __local uint16_t *) red_arr_f16_mem_31258)[sext_i32_i64(local_tid_31254)] = futrts_to_bits16(eta_p_31265);
                    }
                }
                offset_31281 *= 2;
            }
            while (slt32(skip_waves_31282, squot32(sext_i64_i32(segred_tblock_sizze_17796) + wave_sizze_31256 - 1, wave_sizze_31256))) {
                barrier(CLK_LOCAL_MEM_FENCE);
                offset_31281 = skip_waves_31282 * wave_sizze_31256;
                if (slt32(local_tid_31254 + offset_31281, sext_i64_i32(segred_tblock_sizze_17796)) && ((local_tid_31254 - squot32(local_tid_31254, wave_sizze_31256) * wave_sizze_31256) == 0 && (squot32(local_tid_31254, wave_sizze_31256) & (2 * skip_waves_31282 - 1)) == 0)) {
                    // read array element
                    {
                        eta_p_31266 = futrts_from_bits16(((__local uint16_t *) red_arr_f16_mem_31258)[sext_i32_i64(local_tid_31254 + offset_31281)]);
                    }
                    // apply reduction operation
                    {
                        f16 defunc_0_f_res_31267 = eta_p_31265 + eta_p_31266;
                        
                        eta_p_31265 = defunc_0_f_res_31267;
                    }
                    // write result of operation
                    {
                        ((__local uint16_t *) red_arr_f16_mem_31258)[sext_i32_i64(local_tid_31254)] = futrts_to_bits16(eta_p_31265);
                    }
                }
                skip_waves_31282 *= 2;
            }
            barrier(CLK_LOCAL_MEM_FENCE);
            barrier(CLK_LOCAL_MEM_FENCE);
            // thread 0 updates per-block acc(s); rest reset to ne
            {
                if (sext_i32_i64(local_tid_31254) == (int64_t) 0) {
                    ((__global uint16_t *) segred_tmp_mem_31250)[sext_i32_i64(local_tid_31254) + sext_i32_i64(block_id_31255) * (segred_tblock_sizze_17796 * d_10677 * d_10677) + nest_i_31278 * (segred_tblock_sizze_17796 * d_10677) + nest_i_31279 * segred_tblock_sizze_17796] = futrts_to_bits16(eta_p_31265);
                } else {
                    ((__global uint16_t *) segred_tmp_mem_31250)[sext_i32_i64(local_tid_31254) + sext_i32_i64(block_id_31255) * (segred_tblock_sizze_17796 * d_10677 * d_10677) + nest_i_31278 * (segred_tblock_sizze_17796 * d_10677) + nest_i_31279 * segred_tblock_sizze_17796] = futrts_to_bits16((f16) 0.0F);
                }
            }
        }
    }
    // first thread in block saves block result to global memory
    {
        if (local_tid_31254 == 0) {
            for (int64_t nest_i_31284 = 0; nest_i_31284 < d_10677; nest_i_31284++) {
                for (int64_t nest_i_31285 = 0; nest_i_31285 < d_10677; nest_i_31285++) {
                    f16 tmp_31286 = futrts_from_bits16(((__global uint16_t *) segred_tmp_mem_31250)[sext_i32_i64(local_tid_31254) + sext_i32_i64(block_id_31255) * (segred_tblock_sizze_17796 * d_10677 * d_10677) + nest_i_31284 * (segred_tblock_sizze_17796 * d_10677) + nest_i_31285 * segred_tblock_sizze_17796]);
                    
                    ((__global uint16_t *) segred_tmp_mem_31250)[sext_i32_i64(block_id_31255) * (segred_tblock_sizze_17796 * d_10677 * d_10677) + nest_i_31284 * (segred_tblock_sizze_17796 * d_10677) + nest_i_31285 * segred_tblock_sizze_17796] = futrts_to_bits16(tmp_31286);
                    mem_fence_global();
                }
            }
            old_counter_31283 = atomic_add_i32_global(&((volatile __global int *) counters_mem_31228)[(int64_t) 0], (int) 1);
            ((__local bool *) sync_arr_mem_31260)[(int64_t) 0] = old_counter_31283 == sext_i64_i32(num_tblocks_17797 - (int64_t) 1);
        }
    }
    barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    is_last_block_31287 = ((__local bool *) sync_arr_mem_31260)[(int64_t) 0];
    if (is_last_block_31287) {
        if (local_tid_31254 == 0) {
            old_counter_31283 = atomic_add_i32_global(&((volatile __global int *) counters_mem_31228)[(int64_t) 0], (int) sext_i64_i32((int64_t) 0 - num_tblocks_17797));
        }
        for (int64_t nest_i_31288 = 0; nest_i_31288 < d_10677; nest_i_31288++) {
            for (int64_t nest_i_31289 = 0; nest_i_31289 < d_10677; nest_i_31289++) {
                barrier(CLK_LOCAL_MEM_FENCE);
                // read in the per-block-results
                {
                    int64_t read_per_thread_31290 = sdiv_up64(num_tblocks_17797, segred_tblock_sizze_17796);
                    
                    eta_p_17803 = (f16) 0.0F;
                    for (int64_t i_31291 = 0; i_31291 < read_per_thread_31290; i_31291++) {
                        int64_t block_res_id_31292 = sext_i32_i64(local_tid_31254) * read_per_thread_31290 + i_31291;
                        int64_t index_of_block_res_31293 = block_res_id_31292;
                        
                        if (slt64(block_res_id_31292, num_tblocks_17797)) {
                            eta_p_17804 = futrts_from_bits16(((__global uint16_t *) segred_tmp_mem_31250)[index_of_block_res_31293 * (segred_tblock_sizze_17796 * d_10677 * d_10677) + nest_i_31288 * (segred_tblock_sizze_17796 * d_10677) + nest_i_31289 * segred_tblock_sizze_17796]);
                            
                            f16 defunc_0_f_res_17805 = eta_p_17803 + eta_p_17804;
                            
                            eta_p_17803 = defunc_0_f_res_17805;
                        }
                    }
                }
                ((__local uint16_t *) red_arr_f16_mem_31258)[sext_i32_i64(local_tid_31254)] = futrts_to_bits16(eta_p_17803);
                barrier(CLK_LOCAL_MEM_FENCE);
                // reduce the per-block results
                {
                    int32_t offset_31294;
                    int32_t skip_waves_31295 = 1;
                    f16 eta_p_31265;
                    f16 eta_p_31266;
                    
                    offset_31294 = 0;
                    // participating threads read initial accumulator
                    {
                        if (slt32(local_tid_31254, sext_i64_i32(segred_tblock_sizze_17796))) {
                            eta_p_31265 = futrts_from_bits16(((__local uint16_t *) red_arr_f16_mem_31258)[sext_i32_i64(local_tid_31254 + offset_31294)]);
                        }
                    }
                    offset_31294 = 1;
                    while (slt32(offset_31294, wave_sizze_31256)) {
                        if (slt32(local_tid_31254 + offset_31294, sext_i64_i32(segred_tblock_sizze_17796)) && ((local_tid_31254 - squot32(local_tid_31254, wave_sizze_31256) * wave_sizze_31256) & (2 * offset_31294 - 1)) == 0) {
                            // read array element
                            {
                                eta_p_31266 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_f16_mem_31258)[sext_i32_i64(local_tid_31254 + offset_31294)]);
                            }
                            // apply reduction operation
                            {
                                f16 defunc_0_f_res_31267 = eta_p_31265 + eta_p_31266;
                                
                                eta_p_31265 = defunc_0_f_res_31267;
                            }
                            // write result of operation
                            {
                                ((volatile __local uint16_t *) red_arr_f16_mem_31258)[sext_i32_i64(local_tid_31254)] = futrts_to_bits16(eta_p_31265);
                            }
                        }
                        offset_31294 *= 2;
                    }
                    while (slt32(skip_waves_31295, squot32(sext_i64_i32(segred_tblock_sizze_17796) + wave_sizze_31256 - 1, wave_sizze_31256))) {
                        barrier(CLK_LOCAL_MEM_FENCE);
                        offset_31294 = skip_waves_31295 * wave_sizze_31256;
                        if (slt32(local_tid_31254 + offset_31294, sext_i64_i32(segred_tblock_sizze_17796)) && ((local_tid_31254 - squot32(local_tid_31254, wave_sizze_31256) * wave_sizze_31256) == 0 && (squot32(local_tid_31254, wave_sizze_31256) & (2 * skip_waves_31295 - 1)) == 0)) {
                            // read array element
                            {
                                eta_p_31266 = futrts_from_bits16(((__local uint16_t *) red_arr_f16_mem_31258)[sext_i32_i64(local_tid_31254 + offset_31294)]);
                            }
                            // apply reduction operation
                            {
                                f16 defunc_0_f_res_31267 = eta_p_31265 + eta_p_31266;
                                
                                eta_p_31265 = defunc_0_f_res_31267;
                            }
                            // write result of operation
                            {
                                ((__local uint16_t *) red_arr_f16_mem_31258)[sext_i32_i64(local_tid_31254)] = futrts_to_bits16(eta_p_31265);
                            }
                        }
                        skip_waves_31295 *= 2;
                    }
                    barrier(CLK_LOCAL_MEM_FENCE);
                    // and back to memory with the final result
                    {
                        if (local_tid_31254 == 0) {
                            ((__global uint16_t *) mem_28426)[nest_i_31288 * d_10677 + nest_i_31289] = futrts_to_bits16(eta_p_31265);
                        }
                    }
                }
            }
        }
    }
    
  error_5:
    return;
    #undef segred_tblock_sizze_17796
    #undef chunk_sizze_31227
}
FUTHARK_KERNEL_SIZED(matmul_tile_kzisegred_small_18380_dim1, 1, 1)
void matmul_tile_kzisegred_small_18380(__global int *global_failure, int64_t d_10677, int64_t m_16315, int64_t num_tblocks_18374, int64_t segment_sizze_nonzzero_31400, __global unsigned char *mem_28386, __global unsigned char *mem_28390)
{
    #define segred_tblock_sizze_18373 (matmul_tile_kzisegred_small_18380zisegred_tblock_sizze_18373)
    
    volatile __local unsigned char *red_arr_f16_mem_31407_backing_0 = &shared_mem[0];
    const int64_t red_arr_f16_mem_31407_backing_0_offset = 0 + ((int64_t) 2 * segred_tblock_sizze_18373 + srem64((int64_t) 8 - srem64((int64_t) 2 * segred_tblock_sizze_18373, (int64_t) 8), (int64_t) 8));
    
    if (*global_failure >= 0)
        return;
    
    int32_t local_tid_31403;
    int32_t tblock_sizze_31406;
    int32_t wave_sizze_31405;
    int32_t block_id_31404;
    int32_t global_tid_31402;
    int64_t phys_tid_18380;
    __local unsigned char *red_arr_f16_mem_31407;
    int32_t phys_tblock_id_31409;
    int32_t iterations_31410;
    
    local_tid_31403 = get_local_id(0);
    tblock_sizze_31406 = get_local_size(0);
    wave_sizze_31405 = LOCKSTEP_WIDTH;
    block_id_31404 = get_tblock_id(0);
    global_tid_31402 = block_id_31404 * tblock_sizze_31406 + local_tid_31403;
    phys_tid_18380 = sext_i32_i64(global_tid_31402);
    red_arr_f16_mem_31407 = (__local unsigned char *) red_arr_f16_mem_31407_backing_0;
    phys_tblock_id_31409 = get_tblock_id(0);
    iterations_31410 = sdiv_up32(sext_i64_i32(sdiv_up64(d_10677 * d_10677, squot64(segred_tblock_sizze_18373, segment_sizze_nonzzero_31400))) - phys_tblock_id_31409, sext_i64_i32(num_tblocks_18374));
    for (int32_t i_31411 = 0; i_31411 < iterations_31410; i_31411++) {
        int32_t virt_tblock_id_31412;
        int64_t slice_31413;
        int64_t slice_31414;
        int64_t gtid_18377;
        int64_t remnant_31415;
        int64_t gtid_18378;
        int64_t remnant_31416;
        int64_t gtid_18379;
        
        virt_tblock_id_31412 = phys_tblock_id_31409 + i_31411 * sext_i64_i32(num_tblocks_18374);
        slice_31413 = d_10677;
        slice_31414 = d_10677 * slice_31413;
        gtid_18377 = squot64(squot64(sext_i32_i64(local_tid_31403), segment_sizze_nonzzero_31400) + sext_i32_i64(virt_tblock_id_31412) * squot64(segred_tblock_sizze_18373, segment_sizze_nonzzero_31400), slice_31413);
        remnant_31415 = squot64(sext_i32_i64(local_tid_31403), segment_sizze_nonzzero_31400) + sext_i32_i64(virt_tblock_id_31412) * squot64(segred_tblock_sizze_18373, segment_sizze_nonzzero_31400) - gtid_18377 * slice_31413;
        gtid_18378 = remnant_31415;
        remnant_31416 = remnant_31415 - gtid_18378;
        gtid_18379 = srem64(sext_i32_i64(local_tid_31403), m_16315);
        // apply map function if in bounds
        {
            if (slt64((int64_t) 0, m_16315) && ((slt64(gtid_18377, d_10677) && slt64(gtid_18378, d_10677)) && slt64(sext_i32_i64(local_tid_31403), m_16315 * squot64(segred_tblock_sizze_18373, segment_sizze_nonzzero_31400)))) {
                // apply map function
                {
                    f16 x_18386 = futrts_from_bits16(((__global uint16_t *) mem_28386)[gtid_18379 + gtid_18377 * (m_16315 * d_10677) + gtid_18378 * m_16315]);
                    
                    // save results to be reduced
                    {
                        ((__local uint16_t *) red_arr_f16_mem_31407)[sext_i32_i64(local_tid_31403)] = futrts_to_bits16(x_18386);
                    }
                }
            } else {
                ((__local uint16_t *) red_arr_f16_mem_31407)[sext_i32_i64(local_tid_31403)] = futrts_to_bits16((f16) 0.0F);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        if (slt64((int64_t) 0, m_16315)) {
            // perform segmented scan to imitate reduction
            {
                f16 eta_p_18381;
                f16 eta_p_18382;
                f16 eta_p_31417;
                f16 eta_p_31418;
                bool ltid_in_bounds_31420 = slt64(sext_i32_i64(local_tid_31403), m_16315 * squot64(segred_tblock_sizze_18373, segment_sizze_nonzzero_31400));
                int32_t skip_threads_31421;
                
                // read input for in-block scan
                {
                    if (ltid_in_bounds_31420) {
                        eta_p_18382 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_f16_mem_31407)[sext_i32_i64(local_tid_31403)]);
                        if ((local_tid_31403 - squot32(local_tid_31403, 32) * 32) == 0) {
                            eta_p_18381 = eta_p_18382;
                        }
                    }
                }
                // in-block scan (hopefully no barriers needed)
                {
                    skip_threads_31421 = 1;
                    while (slt32(skip_threads_31421, 32)) {
                        bool thread_active_31422 = sle32(skip_threads_31421, local_tid_31403 - squot32(local_tid_31403, 32) * 32) && ltid_in_bounds_31420;
                        
                        if (thread_active_31422) {
                            // read operands
                            {
                                eta_p_18381 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_f16_mem_31407)[sext_i32_i64(local_tid_31403) - sext_i32_i64(skip_threads_31421)]);
                            }
                        }
                        // perform operation
                        {
                            bool inactive_31423 = slt64(srem64(sext_i32_i64(local_tid_31403), m_16315), sext_i32_i64(local_tid_31403) - sext_i32_i64(local_tid_31403 - skip_threads_31421));
                            
                            if (thread_active_31422 && inactive_31423) {
                                eta_p_18381 = eta_p_18382;
                            }
                            if (thread_active_31422) {
                                if (!inactive_31423) {
                                    f16 defunc_0_f_res_18383 = eta_p_18381 + eta_p_18382;
                                    
                                    eta_p_18381 = defunc_0_f_res_18383;
                                }
                            }
                        }
                        if (sle32(wave_sizze_31405, skip_threads_31421)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        if (thread_active_31422) {
                            // write result
                            {
                                ((volatile __local uint16_t *) red_arr_f16_mem_31407)[sext_i32_i64(local_tid_31403)] = futrts_to_bits16(eta_p_18381);
                                eta_p_18382 = eta_p_18381;
                            }
                        }
                        if (sle32(wave_sizze_31405, skip_threads_31421)) {
                            barrier(CLK_LOCAL_MEM_FENCE);
                        }
                        skip_threads_31421 *= 2;
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // last thread of block 'i' writes its result to offset 'i'
                {
                    if ((local_tid_31403 - squot32(local_tid_31403, 32) * 32) == 31 && ltid_in_bounds_31420) {
                        ((volatile __local uint16_t *) red_arr_f16_mem_31407)[sext_i32_i64(squot32(local_tid_31403, 32))] = futrts_to_bits16(eta_p_18381);
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // scan the first block, after which offset 'i' contains carry-in for block 'i+1'
                {
                    int32_t skip_threads_31424;
                    
                    // read input for in-block scan
                    {
                        if (squot32(local_tid_31403, 32) == 0 && ltid_in_bounds_31420) {
                            eta_p_31418 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_f16_mem_31407)[sext_i32_i64(local_tid_31403)]);
                            if ((local_tid_31403 - squot32(local_tid_31403, 32) * 32) == 0) {
                                eta_p_31417 = eta_p_31418;
                            }
                        }
                    }
                    // in-block scan (hopefully no barriers needed)
                    {
                        skip_threads_31424 = 1;
                        while (slt32(skip_threads_31424, 32)) {
                            bool thread_active_31425 = sle32(skip_threads_31424, local_tid_31403 - squot32(local_tid_31403, 32) * 32) && (squot32(local_tid_31403, 32) == 0 && ltid_in_bounds_31420);
                            
                            if (thread_active_31425) {
                                // read operands
                                {
                                    eta_p_31417 = futrts_from_bits16(((volatile __local uint16_t *) red_arr_f16_mem_31407)[sext_i32_i64(local_tid_31403) - sext_i32_i64(skip_threads_31424)]);
                                }
                            }
                            // perform operation
                            {
                                bool inactive_31426 = slt64(srem64(sext_i32_i64(local_tid_31403 * 32 + 32 - 1), m_16315), sext_i32_i64(local_tid_31403 * 32 + 32 - 1) - sext_i32_i64((local_tid_31403 - skip_threads_31424) * 32 + 32 - 1));
                                
                                if (thread_active_31425 && inactive_31426) {
                                    eta_p_31417 = eta_p_31418;
                                }
                                if (thread_active_31425) {
                                    if (!inactive_31426) {
                                        f16 defunc_0_f_res_31419 = eta_p_31417 + eta_p_31418;
                                        
                                        eta_p_31417 = defunc_0_f_res_31419;
                                    }
                                }
                            }
                            if (sle32(wave_sizze_31405, skip_threads_31424)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            if (thread_active_31425) {
                                // write result
                                {
                                    ((volatile __local uint16_t *) red_arr_f16_mem_31407)[sext_i32_i64(local_tid_31403)] = futrts_to_bits16(eta_p_31417);
                                    eta_p_31418 = eta_p_31417;
                                }
                            }
                            if (sle32(wave_sizze_31405, skip_threads_31424)) {
                                barrier(CLK_LOCAL_MEM_FENCE);
                            }
                            skip_threads_31424 *= 2;
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                
                bool no_carry_in_31427 = squot32(local_tid_31403, 32) == 0 || !ltid_in_bounds_31420;
                
                // carry-in for every block except the first
                {
                    // read operands
                    {
                        if (!no_carry_in_31427) {
                            eta_p_18382 = eta_p_18381;
                            eta_p_18381 = futrts_from_bits16(((__local uint16_t *) red_arr_f16_mem_31407)[sext_i32_i64(squot32(local_tid_31403, 32)) - (int64_t) 1]);
                        }
                    }
                    // perform operation
                    {
                        bool inactive_31428 = slt64(srem64(sext_i32_i64(local_tid_31403), m_16315), sext_i32_i64(local_tid_31403) - sext_i32_i64(squot32(local_tid_31403, 32) * 32 - 1));
                        
                        if (!no_carry_in_31427) {
                            if (inactive_31428) {
                                eta_p_18381 = eta_p_18382;
                            }
                        }
                        if (!no_carry_in_31427) {
                            if (!inactive_31428) {
                                f16 defunc_0_f_res_18383 = eta_p_18381 + eta_p_18382;
                                
                                eta_p_18381 = defunc_0_f_res_18383;
                            }
                        }
                    }
                    // write final result
                    {
                        if (!no_carry_in_31427) {
                            ((__local uint16_t *) red_arr_f16_mem_31407)[sext_i32_i64(local_tid_31403)] = futrts_to_bits16(eta_p_18381);
                        }
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
                // restore correct values for first block
                {
                    if (squot32(local_tid_31403, 32) == 0 && ltid_in_bounds_31420) {
                        ((__local uint16_t *) red_arr_f16_mem_31407)[sext_i32_i64(local_tid_31403)] = futrts_to_bits16(eta_p_18382);
                    }
                }
                barrier(CLK_LOCAL_MEM_FENCE);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        // save final values of segments
        {
            if (slt64(sext_i32_i64(virt_tblock_id_31412) * squot64(segred_tblock_sizze_18373, segment_sizze_nonzzero_31400) + sext_i32_i64(local_tid_31403), d_10677 * d_10677) && slt64(sext_i32_i64(local_tid_31403), squot64(segred_tblock_sizze_18373, segment_sizze_nonzzero_31400))) {
                f16 tmp_31429 = futrts_from_bits16(((__local uint16_t *) red_arr_f16_mem_31407)[(sext_i32_i64(local_tid_31403) + (int64_t) 1) * segment_sizze_nonzzero_31400 - (int64_t) 1]);
                
                ((__global uint16_t *) mem_28390)[squot64(sext_i32_i64(virt_tblock_id_31412) * squot64(segred_tblock_sizze_18373, segment_sizze_nonzzero_31400) + sext_i32_i64(local_tid_31403), d_10677) * d_10677 + (sext_i32_i64(virt_tblock_id_31412) * squot64(segred_tblock_sizze_18373, segment_sizze_nonzzero_31400) + sext_i32_i64(local_tid_31403) - squot64(sext_i32_i64(virt_tblock_id_31412) * squot64(segred_tblock_sizze_18373, segment_sizze_nonzzero_31400) + sext_i32_i64(local_tid_31403), d_10677) * d_10677)] = futrts_to_bits16(tmp_31429);
            }
        }
        barrier(CLK_LOCAL_MEM_FENCE);
        barrier(CLK_GLOBAL_MEM_FENCE | CLK_LOCAL_MEM_FENCE);
    }
    
  error_3:
    return;
    #undef segred_tblock_sizze_18373
}
